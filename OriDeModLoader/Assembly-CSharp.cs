namespace 
{
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
    internal partial class <PrivateImplementationDetails>
    {
        internal static <PrivateImplementationDetails>.$ArrayType$20 $$field-0;
        internal static <PrivateImplementationDetails>.$ArrayType$24 $$field-1;
        internal static <PrivateImplementationDetails>.$ArrayType$28 $$field-10;
        internal static <PrivateImplementationDetails>.$ArrayType$32 $$field-11;
        internal static <PrivateImplementationDetails>.$ArrayType$36 $$field-12;
        internal static <PrivateImplementationDetails>.$ArrayType$40 $$field-13;
        internal static <PrivateImplementationDetails>.$ArrayType$56 $$field-14;
        internal static <PrivateImplementationDetails>.$ArrayType$64 $$field-15;
        internal static <PrivateImplementationDetails>.$ArrayType$40 $$field-16;
        internal static <PrivateImplementationDetails>.$ArrayType$48 $$field-17;
        internal static <PrivateImplementationDetails>.$ArrayType$24 $$field-18;
        internal static <PrivateImplementationDetails>.$ArrayType$28 $$field-2;
        internal static <PrivateImplementationDetails>.$ArrayType$32 $$field-3;
        internal static <PrivateImplementationDetails>.$ArrayType$36 $$field-4;
        internal static <PrivateImplementationDetails>.$ArrayType$40 $$field-5;
        internal static <PrivateImplementationDetails>.$ArrayType$44 $$field-6;
        internal static <PrivateImplementationDetails>.$ArrayType$48 $$field-7;
        internal static <PrivateImplementationDetails>.$ArrayType$20 $$field-8;
        internal static <PrivateImplementationDetails>.$ArrayType$24 $$field-9;
        public <PrivateImplementationDetails>() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=20)]
        private partial struct $ArrayType$20
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=24)]
        private partial struct $ArrayType$24
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=28)]
        private partial struct $ArrayType$28
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=32)]
        private partial struct $ArrayType$32
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=36)]
        private partial struct $ArrayType$36
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=40)]
        private partial struct $ArrayType$40
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=44)]
        private partial struct $ArrayType$44
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=48)]
        private partial struct $ArrayType$48
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=56)]
        private partial struct $ArrayType$56
        {
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Explicit, Size=64)]
        private partial struct $ArrayType$64
        {
        }
    }
    public static partial class AbilityDebugMenuItems
    {
        public static bool AbilityMarkersGetter() { return default(bool); }
        public static void AbilityMarkersSetter(bool newValue) { }
        public static bool AirDashGetter() { return default(bool); }
        public static void AirDashSetter(bool newValue) { }
        public static bool AllAbilitiesGetter() { return default(bool); }
        public static void AllAbilitiesSetter(bool newValue) { }
        public static bool BashGetter() { return default(bool); }
        public static void BashSetter(bool newValue) { }
        public static bool BashUpgradeGetter() { return default(bool); }
        public static void BashUpgradeSetter(bool newValue) { }
        public static bool ChargeDashGetter() { return default(bool); }
        public static void ChargeDashSetter(bool newValue) { }
        public static bool ChargeFlameBlastGetter() { return default(bool); }
        public static void ChargeFlameBlastSetter(bool newValue) { }
        public static bool ChargeFlameEfficiencyGetter() { return default(bool); }
        public static void ChargeFlameEfficiencySetter(bool newValue) { }
        public static bool ChargeFlameGetter() { return default(bool); }
        public static void ChargeFlameSetter(bool newValue) { }
        public static bool ChargeJumpGetter() { return default(bool); }
        public static void ChargeJumpSetter(bool newValue) { }
        public static bool CinderFlameGetter() { return default(bool); }
        public static void CinderFlameSetter(bool newValue) { }
        public static bool ClimbGetter() { return default(bool); }
        public static void ClimbSetter(bool newValue) { }
        public static bool DashGetter() { return default(bool); }
        public static void DashSetter(bool newValue) { }
        public static bool DoubleJumpGetter() { return default(bool); }
        public static void DoubleJumpSetter(bool newValue) { }
        public static bool DoubleJumpUpgradeGetter() { return default(bool); }
        public static void DoubleJumpUpgradeSetter(bool newValue) { }
        public static bool EnergyEfficiencyGetter() { return default(bool); }
        public static void EnergyEfficiencySetter(bool newValue) { }
        public static bool EnergyMarkersGetter() { return default(bool); }
        public static void EnergyMarkersSetter(bool newValue) { }
        public static bool GlideGetter() { return default(bool); }
        public static void GlideSetter(bool newValue) { }
        public static bool GrenadeEfficiencyGetter() { return default(bool); }
        public static void GrenadeEfficiencySetter(bool newValue) { }
        public static bool GrenadeGetter() { return default(bool); }
        public static void GrenadeSetter(bool newValue) { }
        public static bool GrenadeUpgradeGetter() { return default(bool); }
        public static void GrenadeUpgradeSetter(bool newValue) { }
        public static bool HealthEfficiencyGetter() { return default(bool); }
        public static void HealthEfficiencySetter(bool newValue) { }
        public static bool HealthMarkersGetter() { return default(bool); }
        public static void HealthMarkersSetter(bool newValue) { }
        public static bool MagnetGetter() { return default(bool); }
        public static void MagnetSetter(bool newValue) { }
        public static bool MapMarkersGetter() { return default(bool); }
        public static void MapMarkersSetter(bool newValue) { }
        public static bool QuickFlameGetter() { return default(bool); }
        public static void QuickFlameSetter(bool newValue) { }
        public static bool RapidFireGetter() { return default(bool); }
        public static void RapidFireSetter(bool newValue) { }
        public static bool RegroupGetter() { return default(bool); }
        public static void RegroupSetter(bool newValue) { }
        public static bool RekindleGetter() { return default(bool); }
        public static void RekindleSetter(bool newValue) { }
        public static bool SenseGetter() { return default(bool); }
        public static void SenseSetter(bool newValue) { }
        public static void SetAllAbilities(bool enabled) { }
        public static bool SoulEfficiencyGetter() { return default(bool); }
        public static void SoulEfficiencySetter(bool newValue) { }
        public static bool SoulFlameEfficiencyGetter() { return default(bool); }
        public static void SoulFlameEfficiencySetter(bool newValue) { }
        public static bool SparkFlameGetter() { return default(bool); }
        public static void SparkFlameSetter(bool newValue) { }
        public static bool SpiritFlameGetter() { return default(bool); }
        public static void SpiritFlameRapidFireUpgradeSetter(bool newValue) { }
        public static void SpiritFlameSetter(bool newValue) { }
        public static bool SplitFlameUpgradeGetter() { return default(bool); }
        public static void SplitFlameUpgradeSetter(bool newValue) { }
        public static bool StompGetter() { return default(bool); }
        public static void StompSetter(bool newValue) { }
        public static bool StompUpgradeGetter() { return default(bool); }
        public static void StompUpgradeSetter(bool newValue) { }
        public static void ToggleAbilities() { }
        public static bool UltraDefenseGetter() { return default(bool); }
        public static void UltraDefenseSetter(bool newValue) { }
        public static bool UltraMagnetGetter() { return default(bool); }
        public static void UltraMagnetSetter(bool newValue) { }
        public static bool UltraSoulFlameGetter() { return default(bool); }
        public static void UltraSoulFlameSetter(bool newValue) { }
        public static bool UltraSplitFlameGetter() { return default(bool); }
        public static void UltraSplitFlameSetter(bool newValue) { }
        public static bool WallJumpGetter() { return default(bool); }
        public static void WallJumpSetter(bool newValue) { }
        public static bool WaterBreathGetter() { return default(bool); }
        public static void WaterBreathSetter(bool newValue) { }
    }
    public enum AbilityType
    {
        AbilityMarkers = 42,
        AirDash = 54,
        Bash = 0,
        BashBuff = 30,
        ChargeDash = 53,
        ChargeFlame = 2,
        ChargeFlameBlast = 27,
        ChargeFlameBurn = 28,
        ChargeFlameEfficiency = 45,
        ChargeJump = 8,
        CinderFlame = 48,
        Climb = 12,
        Dash = 50,
        DoubleJump = 5,
        DoubleJumpUpgrade = 29,
        EnergyEfficiency = 39,
        EnergyMarkers = 41,
        Glide = 14,
        Grenade = 51,
        GrenadeEfficiency = 55,
        GrenadeUpgrade = 52,
        HealthEfficiency = 32,
        HealthMarkers = 40,
        Magnet = 10,
        MapMarkers = 38,
        QuickFlame = 37,
        RapidFlame = 17,
        Regroup = 44,
        Rekindle = 43,
        Sense = 33,
        SoulEfficiency = 22,
        SoulFlameEfficiency = 47,
        SparkFlame = 36,
        SpiritFlame = 15,
        SplitFlameUpgrade = 18,
        Stomp = 4,
        UltraDefense = 31,
        UltraMagnet = 11,
        UltraSoulFlame = 46,
        UltraSplitFlame = 49,
        UltraStomp = 34,
        WallJump = 3,
        WaterBreath = 23,
    }
    public enum Achievement
    {
        DoorsAreOpening = 7,
        FoundOri = 4,
        LevelUp = 9,
        LeverOperator = 6,
        MapReader = 5,
        SpentFirstSkillPoint = 8,
        UNKNOWN_ACHIEVEMENT = -1,
    }
    public partial class AchievementAsset : UnityEngine.ScriptableObject
    {
        [UnityEngine.SerializeField]
        private UnityEngine.Texture m_icon;
        [UnityEngine.SerializeField]
        private bool m_isEarnt;
        [UnityEngine.SerializeField]
        private bool m_isSecret;
        [UnityEngine.SerializeField]
        private string m_name;
        [UnityEngine.SerializeField]
        private string m_steamIdentifier;
        [UnityEngine.SerializeField]
        private string m_WSAIdentifier;
        [UnityEngine.SerializeField]
        private int m_xbox360Identifier;
        [UnityEngine.SerializeField]
        private string m_xboxOneIdentifier;
        public AchievementAsset() { }
        public UnityEngine.Texture Icon { get { return default(UnityEngine.Texture); } }
        public bool IsEarnt { get { return default(bool); } set { } }
        public bool IsSecret { get { return default(bool); } }
        public string Name { get { return default(string); } }
        public string SteamIdentifier { get { return default(string); } }
        public string WSAIdentifier { get { return default(string); } }
        public int Xbox360Identifier { get { return default(int); } }
        public string XboxOneIdentifier { get { return default(string); } }
    }
    public partial class AchievementDatabase : UnityEngine.MonoBehaviour
    {
        [UnityEngine.SerializeField]
        private System.Collections.Generic.List<AchievementAsset> m_achievements;
        public AchievementDatabase() { }
        public System.Collections.ObjectModel.ReadOnlyCollection<AchievementAsset> Achievements { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<AchievementAsset>); } }
    }
    public partial class AchievementMenuItem : UnityEngine.MonoBehaviour
    {
        public AchievementMenuItem() { }
    }
    public partial class AchievementsController : UnityEngine.MonoBehaviour
    {
        public AchievementsTestMessageProvider AchievementGainedTestMessageProvider;
        private static string m_hintText;
        public AchievementsController() { }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Achievement> LockedAchievements { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Achievement>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Challenge> LockedChallenges { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Challenge>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Achievement> SecretAchievements { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Achievement>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Challenge> SecretChallenges { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Challenge>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Achievement> UnlockedAchievements { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Achievement>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Challenge> UnlockedChallenges { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Challenge>); } }
        private static void .cctor() { }
        public static void AwardAchievement(AchievementAsset achievement) { }
        public void Destroy() { }
        public void FixedUpdate() { }
        public void Init() { }
    }
    public partial class AchievementScreen : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Rect Area;
        public int Columns;
        public UnityEngine.GameObject EarntAchievementPrefab;
        public UnityEngine.GameObject LockedAchievementPrefab;
        public UnityEngine.GameObject SecretAchievementPrefab;
        public AchievementScreen() { }
    }
    public partial class AchievementsLogic : SaveSerialize
    {
        public static bool Act3Ended;
        public AchievementAsset ActivateEverySpiritPortalAchievementAsset;
        public AchievementAsset AllSkillsAchievementAsset;
        public AchievementAsset AllSkillsBranch1AchievementAsset;
        public AchievementAsset AllSkillsBranch2AchievementAsset;
        public AchievementAsset AllSkillsBranch3AchievementAsset;
        public AchievementAsset AnEyeForAnEyeAchievementAsset;
        public AchievementAsset BashTenEnemiesAchievementAsset;
        public AchievementAsset BeatHardAchievementAsset;
        public AchievementAsset BeatOneLifeAchievementAsset;
        public AchievementAsset CauseEnemyToDestroyThemselvesAchievementAsset;
        public AchievementAsset ChargeDashFiveTimesAchievementAsset;
        public AchievementAsset Collect200EnergyCrystalsAchievementAsset;
        public AchievementAsset CompleteMapAchievementAsset;
        public AchievementAsset CompletePrologueAchievementAsset;
        public AchievementAsset CrushARamEnemyWithAStomperAchievementAsset;
        public AchievementAsset DoubleJumpFiveTimesNoGroundAchievementAsset;
        public AchievementAsset FindAllSecretsAchievementAsset;
        public AchievementAsset FindHalfSecretsAchievementAsset;
        public AchievementAsset FindLostCorridorInMistyWoodsAchievementAsset;
        public AchievementAsset FindOneSecretAchievementAsset;
        public AchievementAsset FinishGameUnder6HoursAchievementAsset;
        public AchievementAsset FullyChargedAchievementAsset;
        public AchievementAsset IgnitedThreeTorchesAchievementAsset;
        public static AchievementsLogic Instance;
        public AchievementAsset JuggleRockAchievementAsset;
        public AchievementAsset Kill100WithChargeFlameAchievementAsset;
        public AchievementAsset Kill3EnemiesWithoutTouchingTheGroundAchievementAsset;
        public AchievementAsset Kill500WithSpiritFlameAchievementAsset;
        public AchievementAsset Kill50WithGrenadeAchievementAsset;
        public AchievementAsset Kill50WithStompAchievementAsset;
        public AchievementAsset KillManyWithBashRedirectAchievementAsset;
        private bool m_anEyeForAnEyeAchieved;
        private bool m_bashTenEnemiesAchieved;
        private bool m_causeEnemyToDestroyThemselvesAchieved;
        private int m_chargeDashKillCount;
        private bool m_chargeDashKillFiveTimesAchieved;
        private float m_chargeFlameWallsDestroyed;
        private int m_collectedEnergySlotsCount;
        private bool m_completeMapAchievementAwarded;
        private float m_completeMapSampleTime;
        private bool m_crushARamEnemyWithAStomperAchieved;
        private int m_doubleJumpCount;
        private bool m_doubleJumpFiveTimesNoGroundAchieved;
        private int m_enemiesKilledByChargeFlameCount;
        private int m_enemiesKilledByGrenadeCount;
        private int m_enemiesKilledByOtherEnemies;
        private int m_enemiesKilledByProjectile;
        private int m_enemiesKilledBySpiritFlameCount;
        private int m_enemiesKilledByStompCount;
        private int m_enemiesKilledBySuperJumping;
        private int m_enemiesKilledWithNoTouchingGoundCount;
        private float m_firstBashTime;
        private float m_firstDoubleJumpTime;
        private float m_firstKilledEnemyInAirTime;
        private bool m_ignitedThreeTorchesAchieved;
        private bool m_kill100EnemiesWithChargeFlameAchieved;
        private bool m_kill3EnemiesWithoutTouchingTheGroundAchieved;
        private bool m_kill500EnemiesWithSpiritFlameAchieved;
        private bool m_kill50EnemiesWithStompAchieved;
        private bool m_kill50WithGrenadeAchieved;
        private int m_mapStonesFoundCount;
        private int m_savePedestalsUsed;
        private int m_secretsRevealedCount;
        public bool m_shouldGrantAchievements;
        private int m_subsequentEnemiesBashCount;
        private bool m_superJump5EnemiesAchieved;
        private float m_timePlayedAct1;
        private float m_timePlayedAct2;
        private float m_timePlayedAct3;
        private int m_torchIgniteCount;
        public AchievementAsset NoAbilityPointsAchievementAsset;
        public AchievementAsset NoDeathsAchievementAsset;
        public const int NUMBER_OF_SAVE_PEDESTALS = 12;
        public AchievementAsset ReachSpiritTreeAchievementAsset;
        public AchievementAsset ReplacedAllStoneTabletsAchievementAsset;
        public AchievementAsset ReplaceHalfStoneTabletsAchievementAsset;
        public AchievementAsset ReplaceOneStoneTabletAchievementAsset;
        public AchievementAsset SoulLinkManyTimesAchievementAsset;
        public AchievementAsset SuperJump5EnemiesAchievementAsset;
        public AchievementAsset TrickEnemiesToKillEachOtherAchievementAsset;
        public AchievementAsset UseFirstAbilityPointAchievementAsset;
        public AchievementsLogic() { }
        private static void .cctor() { }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void HandleTrialAchievements() { }
        public void OnAct1End() { }
        public void OnAct2End() { }
        public void OnAct3End() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator OnAct3EndIEnumerator() { return default(System.Collections.IEnumerator); }
        public void OnBashAttackEvent(UnityEngine.Vector2 speed) { }
        public void OnBashEnemy(EntityTargetting entityTargetting) { }
        public void OnChargeDashKilledEnemy() { }
        public void OnChargeFlameKilledEnemy() { }
        public void OnChargeFlameWallDestroyed() { }
        public void OnCollectedEnergyShard() { }
        public void OnCrushRamWithStomper() { }
        public override void OnDestroy() { }
        public void OnDoubleJumpEvent(float jumpStrength) { }
        public void OnEnemyKilledAnotherEnemy() { }
        public void OnEnemyKilledItself() { }
        public void OnEntityDeathEvent(Entity entity) { }
        private void OnGameReset() { }
        public void OnGrenaedKilledEnemy() { }
        public void OnJuggledPushBlock() { }
        public void OnMapStoneActivated() { }
        public void OnProjectileKilledEnemy() { }
        public void OnSavePedestalUsedFirstTime() { }
        public void OnSkillTreeDoneEvent(SkillTreeLaneLogic.SkillTreeType type) { }
        public void OnSpiritFlameKilledEnemy() { }
        public void OnStompDownEvent() { }
        public void OnStompKilledEnemy() { }
        public void OnSuperJumpedThroughEnemy() { }
        public void OnTorchIgniteEvent() { }
        public void RevealTransparentWall() { }
        public override void Serialize(Archive ar) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <OnAct3EndIEnumerator>c__Iterator6 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal AchievementsLogic <>f__this;
            internal int <completionPercentage>__1;
            internal int <deathCount>__0;
            internal DifficultyMode <difficultyMode>__3;
            internal int <time>__2;
            public <OnAct3EndIEnumerator>c__Iterator6() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class AchievementsTestMessageProvider : MessageProvider
    {
        public MessageDescriptor MessageDescriptor;
        public AchievementsTestMessageProvider() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages() { return default(System.Collections.Generic.IEnumerable<MessageDescriptor>); }
        public void SetText(string text) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetMessages>c__Iterator7 : System.Collections.Generic.IEnumerable<MessageDescriptor>, System.Collections.Generic.IEnumerator<MessageDescriptor>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal MessageDescriptor $current;
            internal int $PC;
            internal AchievementsTestMessageProvider <>f__this;
            public <GetMessages>c__Iterator7() { }
            MessageDescriptor System.Collections.Generic.IEnumerator<MessageDescriptor>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(MessageDescriptor); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<MessageDescriptor> System.Collections.Generic.IEnumerable<MessageDescriptor>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<MessageDescriptor>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class AchievementsUI : UnityEngine.MonoBehaviour
    {
        private bool m_Visible;
        private static AchievementsUI s_instance;
        public AchievementsUI() { }
        public static bool Available { get { return default(bool); } }
        private static AchievementsUI Instance { get { return default(AchievementsUI); } }
        public static bool Visible { get { return default(bool); } set { } }
        private void FixedUpdate() { }
        private static UnityEngine.Rect PushDown(ref UnityEngine.Rect rect, float offset) { return default(UnityEngine.Rect); }
    }
    public partial class AcidBlob : UnityEngine.MonoBehaviour, IPooled
    {
        private bool m_hasSplat;
        public UnityEngine.GameObject SplatMark;
        public AcidBlob() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnPoolSpawned() { }
    }
    public partial class AcidSlugChargingState : AcidSlugState
    {
        public AcidSlugChargingState(AcidSlugEnemy slug) : base (default(AcidSlugEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class AcidSlugCrawlingState : AcidSlugState
    {
        private float m_acidDripRemainingTime;
        private float m_acidTrailMarkRemainingTime;
        private SoundSource moveSound;
        private SoundSource Sound;
        public AcidSlugCrawlingState(AcidSlugEnemy slug, SoundSource sound, SoundSource moveSound) : base (default(AcidSlugEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public void UpdateAcidDrop() { }
        public override void UpdateState() { }
    }
    public partial class AcidSlugEnemy : SlugEnemy
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache7;
        public AcidSlugEnemyAnimations Animations;
        public SoundSource ChargingSoundSource;
        public SoundSource CrawlingSoundSource;
        public SoundSource MovingSoundSource;
        public AcidSlugEnemySettings Settings;
        public SoundSource ShootingSoundSource;
        public AcidSlugEnemy.States State;
        public AcidSlugEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__DD() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <Start>m__DE() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__DF() { return default(bool); }
        public new void Awake() { }
        public void DropAcid(float speed, UnityEngine.Vector3 direction) { }
        public new void FixedUpdate() { }
        public void OnShoot() { }
        public new void Start() { }
        public partial class States
        {
            public AcidSlugChargingState Charging;
            public AcidSlugCrawlingState Crawl;
            public AcidSlugShootingState Shooting;
            public States() { }
        }
    }
    public partial class AcidSlugEnemyAnimations
    {
        public TextureAnimationWithTransitions Charging;
        public TextureAnimationWithTransitions Crawling;
        public TextureAnimationWithTransitions Shooting;
        public AcidSlugEnemyAnimations() { }
    }
    public partial class AcidSlugEnemyPlaceholder : RespawningPlaceholder
    {
        [AssetReferenceChoiceAttribute("Acid Slug Type", new string[]{ "Assets\\frameworks\\enemies\\slug\\prefabs\\acid\\acidSlugEnemy.prefab", "Assets\\frameworks\\enemies\\slug\\textures\\acidSlugEnemyPlaceholder.png", "Regular Slug", "Assets\\frameworks\\enemies\\slug\\prefabs\\fire\\fireSlugEnemy.prefab", "Assets\\frameworks\\enemies\\slug\\textures\\fireSlugEnemyPlaceholder.png", "Fire Slug", "Assets\\frameworks\\enemies\\slug\\prefabs\\ice\\iceSlugEnemy.prefab", "Assets\\frameworks\\enemies\\slug\\textures\\iceSlugEnemyPlaceholder.png", "Ice Slug"})]
        public UnityEngine.GameObject AcidSlugEnemy;
        public AcidSlugEnemyPlaceholder.AcidSlugEnemyPlaceholderSettings Settings;
        public AcidSlugEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class AcidSlugEnemyPlaceholderSettings
        {
            public float AcidDripRate;
            public float DamageOnTouch;
            public float Health;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public float WalkSpeed;
            public AcidSlugEnemyPlaceholderSettings() { }
        }
    }
    public partial class AcidSlugEnemySettings
    {
        public float AcidDamage;
        public UnityEngine.GameObject AcidDrip;
        public UnityEngine.GameObject AcidDripOnDamage;
        public float AcidDripRate;
        public SoundProvider AcidDripSoundProvider;
        public float AcidProjectileSpeed;
        public UnityEngine.GameObject ShootEffect;
        public float WalkSpeed;
        public UnityEngine.AnimationCurve WalkSpeedMultiplier;
        public AcidSlugEnemySettings() { }
    }
    public partial class AcidSlugShootingState : AcidSlugState
    {
        public AcidSlugShootingState(AcidSlugEnemy slug) : base (default(AcidSlugEnemy)) { }
        public override void OnEnter() { }
        public void SpawnStarSpikes(UnityEngine.Vector3 up, UnityEngine.Vector3 right) { }
    }
    public partial class AcidSlugState : SlugState
    {
        protected AcidSlugEnemy AcidSlugEnemy;
        public AcidSlugState(AcidSlugEnemy slug) : base (default(SlugEnemy)) { }
    }
    public partial class ActionDebugMenuItem : IDebugMenuItem
    {
        public System.Func<bool> Func;
        private string m_helpText;
        private float m_pressedTimeCountDown;
        public string TitleText;
        public ActionDebugMenuItem() { }
        public ActionDebugMenuItem(string s, System.Func<bool> func) { }
        public string HelpText { get { return default(string); } set { } }
        public string Text { get { return default(string); } set { } }
        public void Draw(UnityEngine.Rect rect, bool selected) { }
        public void OnSelected() { }
        public void OnSelectedFixedUpdate() { }
        public virtual void OnSelectedUpdate() { }
    }
    public static partial class ActionHelper
    {
        public static string GetName(ActionMethod action) { return default(string); }
        public static string GetName(Condition condition) { return default(string); }
        public static string GetName(string s) { return default(string); }
        public static string GetName(UnityEngine.Object target) { return default(string); }
    }
    public partial class ActionLeverSystem : UnityEngine.MonoBehaviour
    {
        public Condition CanLeverLeft;
        public Condition CanLeverRight;
        public Lever Lever;
        public ActionMethod LeverEnterAction;
        public ActionMethod LeverExitAction;
        public ActionMethod LeverGrabbedAction;
        public ActionMethod LeverLeftAction;
        public ActionMethod LeverLeftFailedAction;
        public ActionMethod LeverMiddleAction;
        public ActionMethod LeverReleasedAction;
        public ActionMethod LeverRightAction;
        public ActionMethod LeverRightFailedAction;
        public ActionLeverSystem() { }
        public void Awake() { }
        public bool CanLeverLeftCallback() { return default(bool); }
        public bool CanLeverRightCallback() { return default(bool); }
        public void OnGrabLever() { }
        public void OnLeftMiddle() { }
        public void OnLeverEnter() { }
        public void OnLeverExit() { }
        public void OnLeverLeft() { }
        public void OnLeverLeftFailed() { }
        public void OnLeverRight() { }
        public void OnLeverRightFailed() { }
        public void OnReleaseLever() { }
    }
    public abstract partial class ActionMethod : SaveSerialize, IAction
    {
        protected ActionMethod() { }
        public virtual string GetNiceName() { return default(string); }
        public abstract void Perform(IContext context);
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class ActionPerformingCondition : Condition
    {
        public PerformingAction Action;
        public bool IsPerforming;
        public ActionPerformingCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class ActionSequence : PerformingAction, IPooled, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<ActionMethod> <>f__am$cache5;
        public System.Collections.Generic.List<ActionMethod> Actions;
        private IContext m_context;
        private int m_index;
        private bool m_isRunning;
        private bool m_isSuspended;
        public ActionSequence() { }
        public int Index { get { return default(int); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public bool IsRunning { get { return default(bool); } set { } }
        public bool IsSuspended { get { return default(bool); } set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <FindActions>m__2B(ActionMethod a, ActionMethod b) { return default(int); }
        public override void Awake() { }
        public void FindActions() { }
        public void FixedUpdate() { }
        public static string FormatName(int number, string name) { return default(string); }
        public override string GetNiceName() { return default(string); }
        public override void OnDestroy() { }
        private void OnGameReset() { }
        public void OnPoolSpawned() { }
        public void OnRestoreCheckpoint() { }
        public override void Perform(IContext context) { }
        public void RefreshNames() { }
        public static void Rename(System.Collections.Generic.List<ActionMethod> actions) { }
        public void RunAction(ActionMethod action) { }
        public override void Serialize(Archive ar) { }
        public override void Stop() { }
        public static string UnformatName(string name) { return default(string); }
        public void UpdateActions() { }
    }
    public partial class ActionSequenceSerializer : SaveSerialize
    {
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private ActionSequence m_actionSequence;
        public ActionSequenceSerializer() { }
        public void OnValidate() { }
        public override void Serialize(Archive ar) { }
    }
    public abstract partial class ActionWithDuration : PerformingAction, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        protected ActionWithDuration() { }
        public abstract float Duration { get; set; }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
    }
    [CategoryAttribute("General")]
    public partial class ActivateAction : ActionMethod
    {
        public bool Activate;
        public bool Save;
        [NotNull]
        public UnityEngine.GameObject Target;
        public ActivateAction() { }
        private string TargetName { get { return default(string); } }
        public override string GetNiceName() { return default(string); }
        public void OnValidate() { }
        public override void Perform(IContext context) { }
        public override void Serialize(Archive ar) { }
    }
    public partial class ActivateBasedOnCondition : UnityEngine.MonoBehaviour, IDynamicGraphicHierarchy
    {
        public bool Activate;
        public Condition Condition;
        public UnityEngine.GameObject Target;
        public ActivateBasedOnCondition() { }
        public void Awake() { }
        private void FixedUpdate() { }
    }
    public partial class ActivateCharacterAction : ActionMethod
    {
        public bool Active;
        public ActivateCharacterAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Laser")]
    public partial class ActivateLaserAction : ActionMethod
    {
        [NotNull]
        public BlockableLaser Laser;
        public bool ShouldActivate;
        public ActivateLaserAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("General")]
    public partial class ActivateMenuAction : ActionMethod
    {
        public bool Activate;
        [NotNull]
        public CleverMenuItemSelectionManager Target;
        public ActivateMenuAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Ori")]
    public partial class ActivateOriAction : ActionMethod
    {
        public bool ShouldActivate;
        public ActivateOriAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class ActivateWindVentAction : ActionMethod
    {
        public WindVent WindVent;
        public ActivateWindVentAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ActivationBasedOnCondition : UnityEngine.MonoBehaviour, IDynamicGraphicHierarchy
    {
        public Condition Condition;
        public UnityEngine.GameObject TargetFalse;
        public UnityEngine.GameObject TargetTrue;
        public ActivationBasedOnCondition() { }
        public void Awake() { }
        private void FixedUpdate() { }
        public void UpdateActivation() { }
    }
    [CustomShaderModifier("Additive Layer distorted Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(44))]
    public partial class AdditiveLayerDistortedModifier : UberShaderModifier
    {
        public UberShaderColor AdditiveLayerColor;
        public UberShaderTexture AdditiveLayerMaskTexture;
        public UberShaderTexture AdditiveLayerTexture;
        [UberShaderVectorDisplay("Strength", "")]
        public UberShaderVector DistortStrength;
        public UberShaderTexture DistortTexture;
        public AdditiveLayerDistortedModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Additive Layer Extra Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(43))]
    public partial class AdditiveLayerExtraModifier : UberShaderModifier
    {
        public UberShaderColor AdditiveLayerColor;
        public UberShaderTexture AdditiveLayerMaskTexture;
        public UberShaderTexture AdditiveLayerTexture;
        public AdditiveLayerExtraModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Additive Layer Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(42))]
    public partial class AdditiveLayerModifier : UberShaderModifier
    {
        public UberShaderColor AdditiveLayerColor;
        public UberShaderTexture AdditiveLayerMaskTexture;
        public UberShaderTexture AdditiveLayerTexture;
        public AdditiveLayerModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    public partial class AimCrosshair : UnityEngine.MonoBehaviour
    {
        public bool AriesIdea;
        public bool reset;
        public UnityEngine.AnimationCurve Speed;
        public AimCrosshair() { }
        public void FixedUpdate() { }
    }
    public partial class AllContainer<T>
    {
        private System.Collections.Generic.List<T> m_objects;
        public AllContainer() { }
        public int Count { get { return default(int); } }
        public T this[int index] { get { return default(T); } }
        public void Add(T item) { }
        public void Clear() { }
        public bool Contains(T item) { return default(bool); }
        public void Remove(T item) { }
    }
    public partial class AllEnemiesKilledTrigger : Trigger
    {
        public ActionMethod ActionOnAwakeTrigger;
        public System.Collections.Generic.List<Entity> Entities;
        private int m_counter;
        private MessageBox m_lastMessageBox;
        public System.Collections.Generic.List<MessageProvider> Messages;
        public System.Collections.Generic.List<RespawningPlaceholder> RespawningPlaceholders;
        public bool ShowMessages;
        public int TriggerOnCounter;
        public AllEnemiesKilledTrigger() { }
        public new void Awake() { }
        private void DeregisterEvent() { }
        private void EnemyKilled() { }
        private void EntityKilled(Damage damage) { }
        public void Increment() { }
        public void Init() { }
        public new void OnDestroy() { }
        private void RegisterEvent() { }
        public override void Serialize(Archive ar) { }
    }
    [CustomShaderModifier("Alpha Mask Fade")]
    [UberShaderCategoryAttribute((UberShaderCategory)(5))]
    [UberShaderOrderAttribute((UberShaderOrder)(34))]
    public partial class AlphaMaskModifier : UberShaderModifier
    {
        public UberShaderColor BackGroundColor;
        public UberShaderTexture BackgroundTexture;
        public UberShaderFloat FadeAmount;
        public UberShaderTexture FadeMaskTexture;
        public UberShaderFloat FadeRange;
        public AlphaMaskModifier() { }
        public override void SetProperties() { }
    }
    public partial class AmbienceListener : UnityEngine.MonoBehaviour
    {
        public static float FadeInDuration;
        public static float FadeOutDuration;
        private Core.Ambience.Layer m_lastAmbienceLayer;
        private SceneRoot m_lastSceneRoot;
        public AmbienceListener() { }
        private static void .cctor() { }
        public void FixedUpdate() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class AmbienceZone : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Activated>k__BackingField;
        public static System.Collections.Generic.List<AmbienceZone> All;
        public UnityEngine.Rect Bounds;
        public float FadeInDuration;
        public float FadeOutDuration;
        private Core.Ambience.Layer m_ambienceLayer;
        public SoundProvider SoundProvider;
        public AmbienceZone() { }
        public bool Activated { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        private static void .cctor() { }
        public void ActivateAmbienceZone() { }
        public void Awake() { }
        public void DeactiveAmbienceZone() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void SetSoundProvider(SoundProvider soundProvider) { }
    }
    public partial class AmbienceZoneB : UnityEngine.MonoBehaviour
    {
        public float FadeInDuration;
        public float FadeOutDuration;
        private bool m_activated;
        private System.Action m_nullifyDelegate;
        private SoundPlayer m_soundPlayer;
        public SoundProvider SoundProvider;
        public UnityEngine.Transform Target;
        public AmbienceZoneB() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <PlaySound>m__106() { }
        public void ActivateAmbienceZone() { }
        public void DeactiveAmbienceZone() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void PlaySound() { }
        public void SetSoundProvider(SoundProvider soundProvider) { }
    }
    public partial class AmbientSoundZone : UnityEngine.MonoBehaviour
    {
        private bool existed;
        public float FadeInDuration;
        public float FadeOutDuration;
        private bool m_enabled;
        private AnimatingFloat m_fade;
        private FadingSound[] m_fadingSounds;
        public static bool Muted;
        public bool PlayFromStart;
        public bool Playing;
        public AmbientSoundZone() { }
        private void Awake() { }
        private void OnLevelWasLoaded(int level) { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
        private void OnTriggerExit(UnityEngine.Collider collider) { }
        private void Start() { }
        private void Update() { }
    }
    public partial class AnalogueInputData : IFrameData
    {
        public float HorizontalAnalogLeft;
        public float HorizontalAnalogRight;
        public float VerticalAnalogLeft;
        public float VerticalAnalogRight;
        public AnalogueInputData() { }
        public AnalogueInputData(System.IO.BinaryReader binaryReader) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
        public bool UpdateInputs() { return default(bool); }
    }
    public partial class AngularSpring : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private UnityEngine.Rigidbody m_rigidbody;
        private float m_startRotation;
        private UnityEngine.Transform m_transform;
        public float Spring;
        public AngularSpring() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
    }
    public partial class AnimatingFloat : ISerializable
    {
        public float Max;
        public float Min;
        public float Speed;
        public float Value;
        private AnimatingFloat.WrapType Wrap;
        public AnimatingFloat() { }
        public bool IsValueAtEnd { get { return default(bool); } }
        public bool IsValueAtStart { get { return default(bool); } }
        public void Serialize(Archive ar) { }
        public bool Update(float dt) { return default(bool); }
        private enum WrapType
        {
            Clamp = 0,
            Repeat = 1,
        }
    }
    public partial class AnimationCurveChangeDetector
    {
        private UnityEngine.Keyframe[] m_lastCurveKeys;
        public AnimationCurveChangeDetector() { }
        public bool CheckForChanges(UnityEngine.AnimationCurve curve) { return default(bool); }
    }
    public static partial class AnimationCurveStaticFunction
    {
        public static float CurveDuration(this UnityEngine.AnimationCurve curve) { return default(float); }
        public static float EvaluateSlope(this UnityEngine.AnimationCurve curve, float time, float delta=0.01f) { return default(float); }
        public static bool IsLooping(this UnityEngine.AnimationCurve curve) { return default(bool); }
    }
    public partial class AnimationEntry
    {
        public UnityEngine.GameObject Object;
        public float SpeedMultiplier;
        public float Time;
        public AnimationEntry() { }
    }
    public partial class AnimationMeshingSettings
    {
        public int XDivisions;
        public int YDivisions;
        public AnimationMeshingSettings() { }
        public static AnimationMeshingSettings Default { get { return default(AnimationMeshingSettings); } }
    }
    public partial class AnimationMetaData : UnityEngine.ScriptableObject
    {
        public TextureAnimation Animation;
        public float AspectRatio;
        public AnimationMetaData.AnimationData Camera;
        public AnimationMetaData.AnimationData CameraData;
        public float CameraFieldOfView;
        public string CameraName;
        public float CameraTargetDistance;
        public System.Collections.Generic.List<AnimationMetaData.AnimationData> Data;
        public int FrameEnd;
        public float FrameRate;
        public int FrameStart;
        public bool Perspective;
        public UnityEngine.Vector2 PlaneSize;
        public AnimationMetaData.ViewModes ViewMode;
        public AnimationMetaData() { }
        public int FrameCount { get { return default(int); } set { } }
        public AnimationMetaData.AnimationData FindData(string name) { return default(AnimationMetaData.AnimationData); }
        [UnityEngine.ContextMenu("Mirror")]
        public void Mirror() { }
        public void Process(UnityEngine.GameObject model) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FindData>c__AnonStorey4F
        {
            internal string name;
            public <FindData>c__AnonStorey4F() { }
            internal bool <>m__31(AnimationMetaData.AnimationData a) { return default(bool); }
        }
        public partial class AnimationData
        {
            public string Name;
            public AnimationMetaData.FloatAnimation PositionX;
            public AnimationMetaData.FloatAnimation PositionY;
            public AnimationMetaData.FloatAnimation PositionZ;
            public AnimationMetaData.FloatAnimation RotationZ;
            public AnimationMetaData.FloatAnimation ScaleX;
            public AnimationMetaData.FloatAnimation ScaleY;
            public AnimationData() { }
            public UnityEngine.Vector3 GetDeltaPositionAtTime(float time) { return default(UnityEngine.Vector3); }
            public UnityEngine.Vector3 GetPositionAtFrame(int frame) { return default(UnityEngine.Vector3); }
            public UnityEngine.Vector3 GetPositionAtTime(float time) { return default(UnityEngine.Vector3); }
            public UnityEngine.Vector3 GetRawDeltaPositionAtTime(float time) { return default(UnityEngine.Vector3); }
            public UnityEngine.Vector3 GetRawPositionAtFrame(int frame) { return default(UnityEngine.Vector3); }
            public UnityEngine.Vector3 GetRawPositionAtTime(float time) { return default(UnityEngine.Vector3); }
            public UnityEngine.Vector2 GetRawSpeedAtTime(float time) { return default(UnityEngine.Vector2); }
            public UnityEngine.Vector2 GetSpeedAtTime(float time) { return default(UnityEngine.Vector2); }
        }
        public partial class FloatAnimation
        {
            public float Duration;
            public System.Collections.Generic.List<float> Values;
            public FloatAnimation() { }
            public float GetRawValueAtFrame(int frame) { return default(float); }
            public float GetRawValueAtTime(float time) { return default(float); }
            public float GetValueAtFrame(int frame) { return default(float); }
            public float GetValueAtTime(float time) { return default(float); }
        }
        public enum ViewModes
        {
            Front = 1,
            Left = 0,
            Right = 2,
        }
    }
    public partial class AnimationMetaDataBasedSoundPlayer : UnityEngine.MonoBehaviour
    {
        public SpriteAnimatorWithTransitions Animator;
        private int m_previousframe;
        public System.Collections.Generic.List<NodeSoundPlayerPair> NodeSoundPlayerPairs;
        public AnimationMetaDataBasedSoundPlayer() { }
        private void FixedUpdate() { }
        private bool ShouldPlaySound(AnimationMetaData.AnimationData animationData, int frame) { return default(bool); }
        private bool ShuoldPlaySoundInFrame(AnimationMetaData.AnimationData animationData, int frame) { return default(bool); }
    }
    public partial class AnimationMetaDataCurveProcessor : UnityModelAnimationCurveProcessor
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<UnityEngine.Transform, UnityEngine.Transform> <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<UnityEngine.Transform, AnimationMetaData.AnimationData> <>f__am$cache5;
        public AnimationMetaData AnimationMetaData;
        private UnityEngine.Transform m_camera;
        private UnityEngine.Transform m_cameraTarget;
        private System.Collections.Generic.Dictionary<UnityEngine.Transform, AnimationMetaData.AnimationData> m_data;
        public AnimationMetaDataCurveProcessor(AnimationMetaData animationMetaData) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static UnityEngine.Transform <OnPreProcessModel>m__32(UnityEngine.Transform i) { return default(UnityEngine.Transform); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static AnimationMetaData.AnimationData <OnPreProcessModel>m__33(UnityEngine.Transform i) { return default(AnimationMetaData.AnimationData); }
        public override void OnPostProcessModel() { }
        public override void OnPreProcessModel() { }
        public override void OnSampleFrame(int frame) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class AnimationMetaDataDrivenTransform : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SpriteAnimator Animator;
        public bool DontInterpolate;
        private AnimationMetaData.AnimationData m_data;
        private bool m_isInitialized;
        private TextureAnimation m_lastAnimation;
        private UnityEngine.Vector3 m_originalLocalPosition;
        private UnityEngine.Vector3 m_originalScale;
        private UnityEngine.Transform m_targetTransform;
        private TextureAnimation m_textureAnimation;
        private TextureAnimator m_textureAnimator;
        private UnityEngine.Transform m_transform;
        public string NodeName;
        public bool ShouldFollowCameraPlane;
        public bool ShouldUpdateRotation;
        public bool ShouldUpdateScale;
        public SpriteAnimatorWithTransitions SpriteAnimatorWithTransitions;
        public bool UseDelta;
        public AnimationMetaDataDrivenTransform() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void Initialize() { }
        public void OnDestroy() { }
        public void Sample() { }
        public void Start() { }
        public void UpdateCurrentTextureAnimation() { }
        private void UpdateDataFromAnimator() { }
    }
    public partial class AnimationMetaDataTrigger : LegacyAnimator
    {
        public AnimationMetaData AnimationMetaData;
        private string m_previousAnimation;
        private int m_previousframe;
        public System.Collections.Generic.List<NodeActionPair> NodeActionPairs;
        public SpriteAnimatorWithTransitions SpriteAnimatorWithTransitions;
        public bool UseSeinSpriteAnimation;
        public AnimationMetaDataTrigger() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
        private bool ShouldPerformAction(AnimationMetaData.AnimationData animationData, int frame) { return default(bool); }
    }
    [CategoryAttribute("Animator")]
    public partial class AnimatorAction : ActionMethod
    {
        public LegacyAnimator[] Animators;
        public AnimatorAction.FindAnimatorsMode AnimatorsMode;
        public AnimatorAction.PlayMode Command;
        [NotNull]
        public UnityEngine.GameObject Target;
        public AnimatorAction() { }
        private string TargetName { get { return default(string); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public new void Start() { }
        public enum FindAnimatorsMode
        {
            GameObject = 0,
            GameObjectAndChildren = 1,
            SpecifyAnimators = 2,
        }
        public enum PlayMode
        {
            Continue = 4,
            ContinueForward = 5,
            ContinueReversed = 6,
            Restart = 0,
            RestartReversed = 1,
            Reverse = 2,
            Stop = 3,
            StopAtEnd = 8,
            StopAtStart = 7,
        }
    }
    public partial class AnimatorCondition : Condition
    {
        public LegacyAnimator Animator;
        public AnimatorCondition.AnimatorMode Mode;
        public AnimatorCondition() { }
        public override string GetNiceName() { return default(string); }
        public override bool Validate(IContext context) { return default(bool); }
        public enum AnimatorMode
        {
            AtEnd = 2,
            AtStart = 3,
            Playing = 1,
            PlayingBackward = 5,
            PlayingForward = 4,
            Stopped = 0,
        }
    }
    public partial class AnimatorDriver
    {
        public BaseAnimator Animator;
        private bool m_isPlaying;
        private float m_time;
        public bool PlayOnStart;
        public float Speed;
        public AnimatorDriver() { }
        public float CurrentTime { get { return default(float); } set { } }
        public float Duration { get { return default(float); } }
        public bool IsPlaying { get { return default(bool); } set { } }
        public bool IsReversed { get { return default(bool); } }
        public void ContinueBackwards() { }
        public void ContinueForward() { }
        public void FixedUpdate() { }
        public void GoToEnd() { }
        public void GoToStart() { }
        public void OnPoolSpawned() { }
        public void Pause() { }
        public void Restart() { }
        public void RestartBackwards() { }
        public void RestartForward() { }
        public void Resume() { }
        public void Reverse() { }
        public void Sample() { }
        public void SetBackwards() { }
        public void SetForward() { }
        public void Stop() { }
    }
    public partial class AnySaveSlotsFilledCondition : Condition
    {
        public AnySaveSlotsFilledCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    [CategoryAttribute("System")]
    public partial class ApplicationQuit : UnityEngine.MonoBehaviour
    {
        public bool QuitOnAnykey;
        public ApplicationQuit() { }
        private void Awake() { }
        private void Update() { }
    }
    [CategoryAttribute("Camera")]
    public partial class ApplyCameraSettingsAction : ActionMethod
    {
        [NotNull]
        public CameraSettingsAsset CameraSettings;
        public ApplyCameraSettingsAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ApplyForceOnDamage : UnityEngine.MonoBehaviour, IContextReciever, IDamageReciever
    {
        public float ForceMagnitude;
        public UnityEngine.GameObject Target;
        public ApplyForceOnDamage() { }
        public void OnReceiveContext(IContext context) { }
        public void OnRecieveDamage(Damage damage) { }
    }
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.Rigidbody))]
    public partial class ApplyTurbulentForce : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.Vector3 ForceMultiplier;
        public bool IsManagedByPhysicsSystemManager;
        private UnityEngine.Rigidbody m_rigidBody;
        public float TurbulenceFrequency;
        public float TurbulenceMagnitude;
        public float TurbulenceOffset;
        public ApplyTurbulentForce() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private void Awake() { }
        private void FixedUpdate() { }
        public void OnDestroy() { }
    }
    public partial class Archive
    {
        private System.IO.BinaryReader m_binaryReader;
        private System.IO.BinaryWriter m_binaryWriter;
        private System.IO.MemoryStream m_memoryStream;
        private bool m_write;
        public Archive() { }
        public System.IO.MemoryStream MemoryStream { get { return default(System.IO.MemoryStream); } set { } }
        public bool Reading { get { return default(bool); } }
        public bool Writing { get { return default(bool); } }
        public void ReadMemoryStreamFromBinaryReader(System.IO.BinaryReader binaryReader) { }
        public void ReadMode() { }
        public void ResetStream() { }
        public bool Serialize(bool value) { return default(bool); }
        public void Serialize(ref bool value) { }
        public int Serialize(int value) { return default(int); }
        public void Serialize(ref int value) { }
        public float Serialize(float value) { return default(float); }
        public void Serialize(ref float value) { }
        public string Serialize(string value) { return default(string); }
        public void Serialize(ref string value) { }
        public UnityEngine.Quaternion Serialize(UnityEngine.Quaternion value) { return default(UnityEngine.Quaternion); }
        public void Serialize(ref UnityEngine.Quaternion value) { }
        public UnityEngine.Vector2 Serialize(UnityEngine.Vector2 value) { return default(UnityEngine.Vector2); }
        public void Serialize(ref UnityEngine.Vector2 value) { }
        public UnityEngine.Vector3 Serialize(UnityEngine.Vector3 value) { return default(UnityEngine.Vector3); }
        public void Serialize(ref UnityEngine.Vector3 value) { }
        public void SerializeVersion(ref int version) { }
        public void WriteMemoryStreamToBinaryWriter(System.IO.BinaryWriter binaryWriter) { }
        public void WriteMode() { }
    }
    public partial class AreaMapCanvas : UnityEngine.MonoBehaviour
    {
        public GameWorldArea Area;
        private UnityEngine.GameObject m_addToMap;
        private UnityEngine.RenderTexture m_areaMaskTextureA;
        private UnityEngine.RenderTexture m_areaMaskTextureB;
        public UnityEngine.Transform MapPlaneTexture;
        public UnityEngine.Texture Mask;
        public int PixelsPerUnit;
        public RuntimeGameWorldArea RuntimeArea;
        public UnityEngine.Shader SetRGBAShader;
        public UnityEngine.Shader WorldMapBlurShader;
        public AreaMapCanvas() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public CageStructureTool CageStructureTool { get { return default(CageStructureTool); } }
        public UnityEngine.Texture WorldMapTexture { get { return default(UnityEngine.Texture); } }
        public UnityEngine.Vector2 WorldMapTextureSize { get { return default(UnityEngine.Vector2); } }
        public void Awake() { }
        public UnityEngine.RenderTexture BlurTextures(UnityEngine.Texture originalTexture) { return default(UnityEngine.RenderTexture); }
        public UnityEngine.RenderTexture GenerateAreaMaskMaskTexture() { return default(UnityEngine.RenderTexture); }
        public UnityEngine.RenderTexture GenerateAreaMaskTexture() { return default(UnityEngine.RenderTexture); }
        public UnityEngine.Color GetColor(WorldMapAreaState worldState) { return default(UnityEngine.Color); }
        public void OnDestroy() { }
        public void Release() { }
        public void ReleaseAreaMaskTextureB() { }
        public void ResetMap() { }
        public void SetFade(float fade) { }
        public void Update() { }
        public void UpdateAreaMaskTextureA() { }
        public void UpdateAreaMaskTextureB() { }
    }
    public partial class AreaMapCanvasOverlay : UnityEngine.MonoBehaviour
    {
        public AreaMapCanvas Canvas;
        public int Height;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Renderer m_renderer;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Transform m_transform;
        public UnityEngine.Rect PixelRect;
        public int Width;
        public AreaMapCanvasOverlay() { }
        public void ApplyFade() { }
        public void ApplyMasks() { }
        [UnityEngine.ContextMenu("Apply size")]
        public void ApplySize() { }
        public void OnValidate() { }
    }
    public partial class AreaMapDebugNavigation : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject DebugSceneBoundsMarkerPrefab;
        public float HiddenColorAlpha;
        private AreaMapUI m_areaMapUi;
        public float UndiscoveredColorAlpha;
        public bool UndiscoveredMapVisible;
        public AreaMapDebugNavigation() { }
        public void Advance() { }
        public void Awake() { }
        public void ToggleUndiscoveredMap(bool show) { }
    }
    public partial class AreaMapIconManager : UnityEngine.MonoBehaviour
    {
        public AreaMapIconManager.IconGameObjects Icons;
        public AreaMapIconManager() { }
        public void Awake() { }
        public UnityEngine.GameObject GetIcon(WorldMapIconType iconType) { return default(UnityEngine.GameObject); }
        public void ShowAreaIcons() { }
        public partial class IconGameObjects
        {
            public UnityEngine.GameObject AbilityPedestal;
            public UnityEngine.GameObject AbilityPoint;
            public UnityEngine.GameObject BreakableWall;
            public UnityEngine.GameObject BreakableWallBroken;
            public UnityEngine.GameObject EnergyGateEight;
            public UnityEngine.GameObject EnergyGateFour;
            public UnityEngine.GameObject EnergyGateOpen;
            public UnityEngine.GameObject EnergyGateSix;
            public UnityEngine.GameObject EnergyGateTen;
            public UnityEngine.GameObject EnergyGateTwelve;
            public UnityEngine.GameObject EnergyGateTwo;
            public UnityEngine.GameObject EnergyUpgrade;
            public UnityEngine.GameObject Experience;
            public UnityEngine.GameObject HealthUpgrade;
            public UnityEngine.GameObject Keystone;
            public UnityEngine.GameObject KeystoneDoorFour;
            public UnityEngine.GameObject KeystoneDoorOpen;
            public UnityEngine.GameObject KeystoneDoorTwo;
            public UnityEngine.GameObject Mapstone;
            public UnityEngine.GameObject MapstonePickup;
            public UnityEngine.GameObject SavePedestal;
            public UnityEngine.GameObject StompableFloor;
            public UnityEngine.GameObject StompableFloorBroken;
            public IconGameObjects() { }
        }
    }
    public partial class AreaMapLegend : UnityEngine.MonoBehaviour
    {
        public SoundProvider AppearSound;
        public SoundProvider DisappearSound;
        private bool m_visible;
        public AreaMapLegend() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void Hide() { }
        public void HideSilently() { }
        public void Show() { }
        public void Toggle() { }
    }
    public partial class AreaMapNavigation : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Bounds <Bounds>k__BackingField;
        public float AreaMapCloseZoomLevel;
        public float AreaMapZoomLevel;
        public SoundSource FocusSound;
        private AreaMapUI m_areaMapUi;
        private float m_focusTime;
        private UnityEngine.Vector2 m_fromPosition;
        private UnityEngine.Vector2 m_lastDragPosition;
        private UnityEngine.Rect m_scrollAreaLimit;
        private AreaMapScrollLimit[] m_scrollLimits;
        private float m_scrollTime;
        private bool m_toggleToPlayer;
        private UnityEngine.Vector2 m_toPosition;
        public UnityEngine.Transform MapPivot;
        public UnityEngine.AnimationCurve ScrollingSensitivityCurve;
        public UnityEngine.Vector2 ScrollPosition;
        public SoundSource ScrollSound;
        public float WorldMapZoomLevel;
        public AreaMapNavigation() { }
        public UnityEngine.Bounds Bounds { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Bounds); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector2 MapPlanePosition { get { return default(UnityEngine.Vector2); } set { } }
        public UnityEngine.Vector2 MapPlaneSize { get { return default(UnityEngine.Vector2); } set { } }
        public float Zoom { get { return default(float); } }
        public float ZoomTime { get { return default(float); } }
        public void Advance() { }
        public void Awake() { }
        public bool BoxIsInsideVisibleCanvas(UnityEngine.Rect bound) { return default(bool); }
        public void CenterMapOnWorldPosition(UnityEngine.Vector3 position) { }
        public UnityEngine.Vector3 ConstrainWorldPositionByBounds(UnityEngine.Vector3 worldPosition) { return default(UnityEngine.Vector3); }
        private void HandleMapScrolling() { }
        public void HandleObjectiveFocus() { }
        public void Init() { }
        public UnityEngine.Vector3 MapToWorldPosition(UnityEngine.Vector2 position) { return default(UnityEngine.Vector3); }
        public void OnDisable() { }
        public void UpdatePlane() { }
        public void UpdateScrollLimits() { }
        public UnityEngine.Vector3 WorldToMapPosition(UnityEngine.Vector2 position) { return default(UnityEngine.Vector3); }
    }
    public partial class AreaMapObjectiveArrow : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Rect Area;
        public UnityEngine.GameObject Arrow;
        public AreaMapObjectiveArrow() { }
        public void FixedUpdate() { }
        public void OnEnable() { }
        public UnityEngine.Vector2 ProjectOnRect(UnityEngine.Rect rect, UnityEngine.Vector2 center, UnityEngine.Vector2 direction) { return default(UnityEngine.Vector2); }
    }
    public partial class AreaMapScrollLimit : UnityEngine.MonoBehaviour
    {
        public Condition Condition;
        private UnityEngine.Rect m_area;
        private bool m_areaCalculated;
        public AreaMapScrollLimit() { }
        public bool Active { get { return default(bool); } }
        public UnityEngine.Rect Area { get { return default(UnityEngine.Rect); } }
    }
    public partial class AreaMapUI : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private AreaMapDebugNavigation <DebugNavigation>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private AreaMapIconManager <IconManager>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private AreaMapNavigation <Navigation>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.GameObject <PlayerPositionMarker>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.GameObject <SoulFlamePositionMarker>k__BackingField;
        public AreaMapLegend AreaMapLegend;
        public System.Collections.Generic.List<AreaMapCanvas> Canvases;
        public SoundProvider ChangeSelectedAreaSound;
        public SoundProvider CloseSound;
        public MessageProvider CompletedMessageProvider;
        public TransparencyAnimator FadeOutAnimator;
        public UnityEngine.GameObject IconPrefab;
        public static AreaMapUI Instance;
        public MessageProvider ObjectiveMessageProvider;
        public UnityEngine.GameObject ObjectivePrefab;
        public MessageBox ObjectiveText;
        public SoundProvider OpenSound;
        public UnityEngine.GameObject PlayerPositionMarkerPrefab;
        public UnityEngine.Vector3 PlayerPositionOffset;
        public UnityEngine.GameObject SoulFlamePositionMarkerPrefab;
        public UnityEngine.GameObject TeleportPrefab;
        public AreaMapUI() { }
        public AreaMapDebugNavigation DebugNavigation { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(AreaMapDebugNavigation); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Transform FadeOutGroup { get { return default(UnityEngine.Transform); } }
        public AreaMapIconManager IconManager { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(AreaMapIconManager); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public AreaMapNavigation Navigation { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(AreaMapNavigation); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 PlayerMarkerWorldPosition { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.GameObject PlayerPositionMarker { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.GameObject); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 SoulFlameMarkerWorldPosition { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.GameObject SoulFlamePositionMarker { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.GameObject); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public AreaMapCanvas FindCanvas(GameWorldArea area) { return default(AreaMapCanvas); }
        public void FixedUpdate() { }
        public void Hide() { }
        public void Init() { }
        public void OnDestroy() { }
        public void ResetMaps() { }
        public void Show() { }
        public void UpdateCurrentArea() { }
        private void UpdatePlayerPositionMarker() { }
        private void UpdateSoulFlamePositionMarker() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FindCanvas>c__AnonStorey68
        {
            internal GameWorldArea area;
            public <FindCanvas>c__AnonStorey68() { }
            internal bool <>m__148(AreaMapCanvas canvas) { return default(bool); }
        }
    }
    public partial class AreaNameSurfaceToSoundProviderMapCouple
    {
        public string AreaName;
        public SurfaceToSoundProviderMap SurfaceToSoundProviderMap;
        public AreaNameSurfaceToSoundProviderMapCouple() { }
    }
    public partial class ArmouredRammingEnemy : RammingEnemy
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<Entity> <>f__am$cache3;
        public System.Action<Entity> OnReplacedAction;
        public UnityEngine.GameObject RammingEnemy;
        public PrefabSpawner ShatterEffect;
        public ArmouredRammingEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnReplacedAction>m__CD(Entity ) { }
        public override void OnModifyDamage(Damage damage) { }
    }
    public partial class ArtBuildController : UnityEngine.MonoBehaviour
    {
        public int CurrentScene;
        private LegacyAnimator[] m_dimmerAnimators;
        private bool m_loadingFinished;
        private bool m_menuVisible;
        public int MaxScreenshotHeight;
        public int MaxScreenshotWidth;
        public UnityEngine.GameObject PauseDimmer;
        public System.Collections.Generic.List<UnityEngine.Texture2D> SceneScreenshots;
        public ArtBuildController() { }
        private void Awake() { }
        private void DisableDimmer() { }
        private void EnableDimmer() { }
        private void FixedUpdate() { }
        private void LoadSceneAtIndex(int index) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator LoadScreenshots() { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <LoadScreenshots>c__Iterator4B : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal System.Collections.Generic.IEnumerator<string> <$s_694>__1;
            private static System.Func<string, bool> <>f__am$cache7;
            internal ArtBuildController <>f__this;
            internal string <path>__0;
            internal string <sceneScreenshotPath>__2;
            internal UnityEngine.WWW <www>__3;
            public <LoadScreenshots>c__Iterator4B() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            private static bool <>m__175(string f) { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class AspectRatioManager : UnityEngine.MonoBehaviour
    {
        private static float m_aspectRatio;
        public static UberDelegate OnAspectChanged;
        public const float StandardAspectRatio = 1.77777779f;
        public AspectRatioManager() { }
        public static float AspectRatio { get { return default(float); } }
        public static float ExtraPadding { get { return default(float); } }
        private static void .cctor() { }
        public void FixedUpdate() { }
    }
    public partial class AssetReferenceChoiceAttribute : UnityEngine.PropertyAttribute
    {
        public string DisplayName;
        public readonly string[] PrefabChoices;
        public AssetReferenceChoiceAttribute(string displayName, params string[] choices) { }
    }
    public partial class AssetUtility
    {
        public AssetUtility() { }
        public static string GetAssetName(string assetPath) { return default(string); }
    }
    public partial class Atlas : UnityEngine.ScriptableObject
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private string <TexturePath>k__BackingField;
        public float Height;
        private readonly System.Collections.Generic.Dictionary<MoonGuid, int> m_atlasCache;
        public UberScreenMode ScreenMode;
        public System.Collections.Generic.List<AtlasSpriteTexture> SpriteTextures;
        public UnityEngine.Texture2D Texture;
        public float UberScreenTweak;
        public float Width;
        public Atlas() { }
        public string TexturePath { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public AtlasSpriteTexture AddFrameTexture(string frameName, UnityEngine.Vector2 centerOffset, UnityEngine.Vector2 originalSize, UnityEngine.Rect normalizedRect, bool flipped, MoonGuid guid) { return default(AtlasSpriteTexture); }
        public void ClearData() { }
        public AtlasSpriteTexture FindAtlasSprite(MoonGuid guid) { return default(AtlasSpriteTexture); }
        private void InitCache() { }
        public void InvalidateCache() { }
    }
    public partial class AtlasSpriteTexture
    {
        public UnityEngine.Vector2 CenterOffset;
        public bool Flipped;
        public MoonGuid Guid;
        public string Name;
        public UnityEngine.Rect NormalizedRect;
        public UnityEngine.Vector2 OriginalSize;
        public AtlasSpriteTexture() { }
    }
    public partial class AtlasSpriteTextureBinder
    {
        private int m_divX;
        private int m_divY;
        [PooledSafeAttribute]
        private int m_frame;
        private Atlas m_lastAtlas;
        private UnityEngine.MeshFilter m_lastFilter;
        private UnityEngine.Material m_lastMaterial;
        private UberScreenMode m_lastMode;
        private UnityEngine.Mesh m_mesh;
        private bool m_spriceSpaceuvs;
        private int[] m_triangles;
        private UnityEngine.Vector2[] m_uvs;
        private UnityEngine.Vector3[] m_vertices;
        private static int s_depthFlip;
        private static string[] s_keys;
        private static int s_screen;
        private static int s_screenMask;
        private static int s_usAtlas;
        private static int s_usAtlasSt;
        public AtlasSpriteTextureBinder(AnimationMeshingSettings settings, bool spriceSpaceuvs, UnityEngine.Mesh mesh) { }
        private static void .cctor() { }
        private void AllocateBufferForSettings(AnimationMeshingSettings settings) { }
        private void ApplyToMesh(Atlas atlas, AtlasSpriteTexture texture) { }
        public void BindTo(UnityEngine.MeshFilter filter, UnityEngine.Material material, Atlas atlas, UberScreenMode mode, AtlasSpriteTexture texture) { }
        private void GenerateCorrectUvBuffer() { }
        private static void InitProperties() { }
        public void OnPoolSpawned() { }
        public void UpdateSettings(AnimationMeshingSettings settings) { }
        public void UpdateSpriceSpaceUv(bool correctUvs) { }
    }
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.Rigidbody))]
    public partial class AttachToRope : SaveSerialize
    {
        public bool AllowRotation;
        public UnityEngine.Vector3 AttachmentPointOffset;
        [UnityEngine.SerializeField]
        private UnityEngine.ConfigurableJoint m_generatedConfigurableJoint;
        private bool m_shouldBeAttachedAfterLoading;
        public Rope RopeToAttachTo;
        public float RotationDampening;
        public float RotationSpring;
        public bool UseDebug;
        public AttachToRope() { }
        public UnityEngine.ConfigurableJoint GeneratedConfigurableJoint { get { return default(UnityEngine.ConfigurableJoint); } }
        public override void Awake() { }
        public void BreakAttachment() { }
        private bool IsAttached() { return default(bool); }
        public override void OnDestroy() { }
        private void OnGameSerializeLoad() { }
        private void OnSceneStartLateAfterSerialize(SceneRoot root) { }
        private void OnSerializationLoad() { }
        public void PerformAttachment() { }
        public void RemoveAllJoints() { }
        public override void Serialize(Archive a) { }
        public void Start() { }
    }
    public partial class AttackTriggered : fsm.ITrigger
    {
        public AttackTriggered() { }
    }
    public partial class AudioProperties
    {
        public UnityEngine.AudioClip Clip;
        public float Volume;
        public AudioProperties() { }
    }
    public partial class AudioSourceSuspendable : Suspendable
    {
        private UnityEngine.AudioSource m_audioSource;
        private bool m_isSuspended;
        private bool m_wasPlaying;
        public AudioSourceSuspendable() { }
        public override bool IsSuspended { get { return default(bool); } set { } }
        public new void Awake() { }
        public void Resume() { }
        public void Suspend() { }
    }
    public partial class AutoRotate : Suspendable, IDynamicGraphicHierarchy, ISerializable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private float m_currentTime;
        private float m_startRotationZ;
        public float Speed;
        public AutoRotate() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private void FixedUpdate() { }
        public void Serialize(Archive ar) { }
        private void Start() { }
    }
    public partial class AVProWindowsMedia : System.IDisposable
    {
        private int _audioDelay;
        private AVProWindowsMediaFormatConverter _formatConverter;
        private bool _isLooping;
        private int _movieHandle;
        private float _volume;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private uint <DurationFrames>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <DurationSeconds>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private string <Filename>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <FrameRate>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private int <Height>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsPlaying>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <RequiresFlipY>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private int <Width>k__BackingField;
        public AVProWindowsMedia() { }
        public float AspectRatio { get { return default(float); } }
        public float AudioBalance { get { return default(float); } set { } }
        public int AudioDelay { get { return default(int); } set { } }
        public int DisplayFrame { get { return default(int); } }
        public uint DurationFrames { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(uint); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public float DurationSeconds { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public string Filename { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public float FrameRate { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public int Handle { get { return default(int); } }
        public int Height { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool IsFinishedPlaying { get { return default(bool); } }
        public bool IsPlaying { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public uint LastFrame { get { return default(uint); } }
        public bool Loop { get { return default(bool); } set { } }
        public UnityEngine.Texture OutputTexture { get { return default(UnityEngine.Texture); } }
        public float PlaybackRate { get { return default(float); } set { } }
        public uint PositionFrames { get { return default(uint); } set { } }
        public float PositionSeconds { get { return default(float); } set { } }
        public bool RequiresFlipY { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public float Volume { get { return default(float); } set { } }
        public int Width { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public void ClearFrameRange() { }
        private void Close() { }
        private void CompleteVideoLoad(bool useBT709, bool ignoreFlips, UnityEngine.FilterMode textureFilterMode, UnityEngine.TextureWrapMode textureWrapMode) { }
        public void Dispose() { }
        public UnityEngine.Material GetConversionMaterial() { return default(UnityEngine.Material); }
        public void Pause() { }
        public void Play() { }
        private void PreRoll() { }
        public void Rewind() { }
        public void SetFrameRange(int min, int max) { }
        public bool StartAudio(string filename) { return default(bool); }
        public bool StartVideo(string filename, bool allowNativeFormat, bool useBT709, bool allowAudio, bool useAudioDelay, bool useAudioMixer, bool useDisplaySync, bool ignoreFlips, UnityEngine.FilterMode textureFilterMode, UnityEngine.TextureWrapMode textureWrapMode) { return default(bool); }
        public bool StartVideoFromMemory(string name, System.IntPtr moviePointer, long movieLength, bool allowNativeFormat, bool useBT709, bool allowAudio, bool useAudioDelay, bool useAudioMixer, bool useDisplaySync, bool ignoreFlips, UnityEngine.FilterMode textureFilterMode, UnityEngine.TextureWrapMode textureWrapMode) { return default(bool); }
        public bool Update(bool force) { return default(bool); }
    }
    public partial class AVProWindowsMediaControlPlayOnEnable : UnityEngine.MonoBehaviour
    {
        public bool _enableLoopWhenInRange;
        public bool _loop;
        public int _maxFrame;
        public int _minFrame;
        public AVProWindowsMediaMovie _movie;
        public bool _rewindOnDisable;
        public AVProWindowsMediaControlPlayOnEnable() { }
        private void OnDisable() { }
        private void OnEnable() { }
        private void Update() { }
    }
    public partial class AVProWindowsMediaFormatConverter : System.IDisposable
    {
        private UnityEngine.Material _conversionMaterial;
        private UnityEngine.RenderTexture _finalTexture;
        private bool _flipX;
        private bool _flipY;
        private int _height;
        private bool _isExternalTexture;
        private int _lastFrameUploaded;
        private int _movieHandle;
        private UnityEngine.Texture _outputTexture;
        private UnityEngine.Texture2D _rawTexture;
        private bool _requiresConversion;
        private bool _requiresTextureCrop;
        private AVProWindowsMediaPlugin.VideoFrameFormat _sourceVideoFormat;
        private bool _useBT709;
        private int _usedTextureHeight;
        private int _usedTextureWidth;
        private UnityEngine.Vector4 _uv;
        private int _width;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <ValidPicture>k__BackingField;
        public AVProWindowsMediaFormatConverter() { }
        public int DisplayFrame { get { return default(int); } }
        public UnityEngine.Texture OutputTexture { get { return default(UnityEngine.Texture); } }
        public bool RequiresConversion { get { return default(bool); } }
        public bool ValidPicture { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool Build(int movieHandle, int width, int height, AVProWindowsMediaPlugin.VideoFrameFormat format, bool useBT709, bool flipX, bool flipY, UnityEngine.FilterMode filterMode, UnityEngine.TextureWrapMode wrapMode) { return default(bool); }
        private void CreateExternalTexture() { }
        private bool CreateMaterial() { return default(bool); }
        private void CreateRenderTexture() { }
        private void CreateTexture() { }
        private void CreateUVs(bool invertX, bool invertY) { }
        public void Dispose() { }
        private void DoFormatConversion() { }
        private static void DrawQuad(UnityEngine.Vector4 uv) { }
        public UnityEngine.Material GetConversionMaterial() { return default(UnityEngine.Material); }
        public void Reset() { }
        public bool Update() { return default(bool); }
        private bool UpdateTexture() { return default(bool); }
    }
    [UnityEngine.AddComponentMenu("AVPro Windows Media/IMGUI Display")]
    [UnityEngine.ExecuteInEditMode]
    public partial class AVProWindowsMediaGUIDisplay : UnityEngine.MonoBehaviour
    {
        public bool _alphaBlend;
        public UnityEngine.Color _color;
        public int _depth;
        public bool _fullScreen;
        public float _height;
        public AVProWindowsMediaMovie _movie;
        public UnityEngine.ScaleMode _scaleMode;
        public float _width;
        public float _x;
        public float _y;
        public AVProWindowsMediaGUIDisplay() { }
        public UnityEngine.Rect GetRect() { return default(UnityEngine.Rect); }
        public void OnGUI() { }
    }
    [UnityEngine.AddComponentMenu("AVPro Windows Media/Manager (required)")]
    [UnityEngine.ExecuteInEditMode]
    public partial class AVProWindowsMediaManager : UnityEngine.MonoBehaviour
    {
        private static AVProWindowsMediaManager _instance;
        private bool _isInitialised;
        public bool _logVideoLoads;
        public UnityEngine.Shader _shaderBGRA32;
        public UnityEngine.Shader _shaderCopy;
        public UnityEngine.Shader _shaderHap_YCoCg;
        public UnityEngine.Shader _shaderHDYC;
        public UnityEngine.Shader _shaderNV12;
        public UnityEngine.Shader _shaderUYVY;
        public UnityEngine.Shader _shaderYUY2;
        public UnityEngine.Shader _shaderYUY2_709;
        public UnityEngine.Shader _shaderYVYU;
        [UnityEngine.HideInInspector]
        public bool _useExternalTextures;
        public AVProWindowsMediaManager() { }
        public static AVProWindowsMediaManager Instance { get { return default(AVProWindowsMediaManager); } }
        private void Awake() { }
        public void Deinit() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator FinalRenderCapture() { return default(System.Collections.IEnumerator); }
        private void GetConversionMethod() { }
        public UnityEngine.Shader GetPixelConversionShader(AVProWindowsMediaPlugin.VideoFrameFormat format, bool useBT709) { return default(UnityEngine.Shader); }
        protected bool Init() { return default(bool); }
        private void OnDestroy() { }
        private void SetUnityFeatures() { }
        public void Update() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FinalRenderCapture>c__Iterator5 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            public <FinalRenderCapture>c__Iterator5() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    [UnityEngine.AddComponentMenu("AVPro Windows Media/Material Apply")]
    public partial class AVProWindowsMediaMaterialApply : UnityEngine.MonoBehaviour
    {
        private static UnityEngine.Texture2D _blackTexture;
        public UnityEngine.Texture2D _defaultTexture;
        public UnityEngine.Material _material;
        public AVProWindowsMediaMovie _movie;
        public string _textureName;
        public AVProWindowsMediaMaterialApply() { }
        private void ApplyMapping(UnityEngine.Texture texture) { }
        private static void CreateTexture() { }
        private void OnDestroy() { }
        public void OnDisable() { }
        private void Start() { }
        private void Update() { }
    }
    [UnityEngine.AddComponentMenu("AVPro Windows Media/Mesh Apply")]
    public partial class AVProWindowsMediaMeshApply : UnityEngine.MonoBehaviour
    {
        public UnityEngine.MeshRenderer _mesh;
        public AVProWindowsMediaMovie _movie;
        public AVProWindowsMediaMeshApply() { }
        private void ApplyMapping(UnityEngine.Texture texture) { }
        public void OnDisable() { }
        private void Start() { }
        private void Update() { }
    }
    [UnityEngine.AddComponentMenu("AVPro Windows Media/Movie")]
    [UnityEngine.ExecuteInEditMode]
    public partial class AVProWindowsMediaMovie : UnityEngine.MonoBehaviour
    {
        public bool _allowAudio;
        private System.Collections.Generic.Dictionary<string, AVProWindowsMediaMovieClip> _clipLookup;
        [UnityEngine.SerializeField]
        private System.Collections.Generic.List<AVProWindowsMediaMovieClip> _clips;
        public AVProWindowsMediaMovie.ColourFormat _colourFormat;
        private AVProWindowsMediaMovieClip _currentClip;
        public bool _editorPreview;
        public string _filename;
        public string _folder;
        public bool _ignoreFlips;
        public bool _loadOnStart;
        public bool _loop;
        protected AVProWindowsMedia _moviePlayer;
        public bool _playOnStart;
        public UnityEngine.FilterMode _textureFilterMode;
        public UnityEngine.TextureWrapMode _textureWrapMode;
        public bool _useAudioDelay;
        public bool _useAudioMixer;
        public bool _useDisplaySync;
        public bool _useStreamingAssetsPath;
        public float _volume;
        public AVProWindowsMediaMovie() { }
        public AVProWindowsMedia MovieInstance { get { return default(AVProWindowsMedia); } }
        public int NumClips { get { return default(int); } }
        public UnityEngine.Texture OutputTexture { get { return default(UnityEngine.Texture); } }
        public void AddClip(string name, int inPoint, int outPoint) { }
        public void ClearClips() { }
        public string GetClipName(int index) { return default(string); }
        public string GetCurrentClipName() { return default(string); }
        public string GetFilePath() { return default(string); }
        public void LoadClips() { }
        public virtual bool LoadMovie(bool autoPlay) { return default(bool); }
        public bool LoadMovieFromMemory(bool autoPlay, string name, System.IntPtr moviePointer, long movieLength, UnityEngine.FilterMode textureFilterMode, UnityEngine.TextureWrapMode textureWrapMode) { return default(bool); }
        public void OnDestroy() { }
        public void Pause() { }
        public void Play() { }
        public void PlayClip(string name, bool loop, bool startPaused) { }
        public void ResetClip() { }
        public virtual void Start() { }
        public virtual void UnloadMovie() { }
        public void Update() { }
        public enum ColourFormat
        {
            RGBA32 = 0,
            YCbCr_HD = 2,
            YCbCr_SD = 1,
        }
    }
    public partial class AVProWindowsMediaMovieClip
    {
        public int inPoint;
        public string name;
        public int outPoint;
        public AVProWindowsMediaMovieClip(string name, int inPoint, int outPoint) { }
    }
    [UnityEngine.AddComponentMenu("AVPro Windows Media/Movie From Resource")]
    public partial class AVProWindowsMediaMovieFromResource : AVProWindowsMediaMovie
    {
        private System.Runtime.InteropServices.GCHandle _bytesHandle;
        private UnityEngine.TextAsset _textAsset;
        public AVProWindowsMediaMovieFromResource() { }
        public override bool LoadMovie(bool autoPlay) { return default(bool); }
        public bool LoadMovieFromResource(bool autoPlay, string path) { return default(bool); }
        public override void Start() { }
        public override void UnloadMovie() { }
        private void UnloadResource() { }
    }
    public partial class AVProWindowsMediaPlugin
    {
        public const int PluginID = 262209536;
        public AVProWindowsMediaPlugin() { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void Deinit() { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void FlushFrameBuffers(int handle) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void FreeInstanceHandle(int handle) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static float GetAudioBalance(int handle) { return default(float); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static float GetCaptureFrameRate(int handle) { return default(float); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static uint GetCurrentPositionFrames(int handle) { return default(uint); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static float GetCurrentPositionSeconds(int handle) { return default(float); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static uint GetDurationFrames(int handle) { return default(uint); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static float GetDurationSeconds(int handle) { return default(float); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetFormat(int handle) { return default(int); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void GetFrameBufferTimes(int handle, System.IntPtr dest, int destSizeBytes) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static long GetFrameDuration(int handle) { return default(long); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static System.IntPtr GetFrameFromBufferAtTime(int handle, long time) { return default(System.IntPtr); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool GetFramePixels(int handle, System.IntPtr data, int bufferWidth, int bufferHeight, ref int frameNumber) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static float GetFrameRate(int handle) { return default(float); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetHeight(int handle) { return default(int); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetInstanceHandle() { return default(int); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetLastBufferUploaded(int handle) { return default(int); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static System.IntPtr GetLastFrameBuffered(int handle) { return default(System.IntPtr); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static long GetLastFrameBufferedTime(int handle) { return default(long); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetLastFrameUploaded(int handle) { return default(int); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetNumFrameBuffers(int handle) { return default(int); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static float GetPlaybackRate(int handle) { return default(float); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static float GetPluginVersion() { return default(float); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetReadWriteBufferDistance(int handle) { return default(int); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static System.IntPtr GetTexturePointer(int handle) { return default(System.IntPtr); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetWidth(int handle) { return default(int); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool Init() { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool IsFinishedPlaying(int handle) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool IsLooping(int handle) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool IsNextFrameReadyForGrab(int handle) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool IsOrientedTopDown(int handle) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool LoadMovie(int handle, System.IntPtr filename, bool playFromMemory, bool allowNativeFormat, bool allowAudio, bool useAudioDelay, bool useAudioMixer, bool useDisplaySync) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool LoadMovieFromMemory(int handle, System.IntPtr moviePointer, long movieLength, bool allowNativeFormat, bool allowAudio, bool useAudioDelay, bool useAudioMixer, bool useDisplaySync) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void Pause(int handle) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void Play(int handle) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SeekFrames(int handle, uint position) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SeekSeconds(int handle, float position) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SeekUnit(int handle, float position) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetAudioBalance(int handle, float balance) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetAudioChannelMatrix(int handle, float[] values, int numValues) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetAudioDelay(int handle, int ms) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetDisplayFrameRange(int handle, int min, int max) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetFrameBufferSize(int handle, int read, int write) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetLooping(int handle, bool loop) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetPlaybackRate(int handle, float rate) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool SetTexturePointer(int handle, System.IntPtr data) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetUnityFeatures(bool supportExternalTextures) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void SetVolume(int handle, float volume) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static void Stop(int handle) { }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool Update(int handle) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("AVProWindowsMedia")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static bool UpdateTextureGL(int handle, int textureID, ref int frameNumber) { return default(bool); }
        public enum PluginEvent
        {
            UpdateAllTextures = 0,
        }
        public enum VideoFrameFormat
        {
            Hap_RGB = 9,
            Hap_RGB_HQ = 11,
            Hap_RGBA = 10,
            RAW_BGRA32 = 0,
            YUV_420_NV12 = 7,
            YUV_422_HDYC = 4,
            YUV_422_UYVY = 2,
            YUV_422_YUY2 = 1,
            YUV_422_YVYU = 3,
        }
    }
    [CategoryAttribute("SPAConfig")]
    public partial class AwardAchievementAction : ActionMethod
    {
        public AchievementAsset Achievement;
        public AwardAchievementAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class BabySein : UnityEngine.MonoBehaviour, ICharacter
    {
        public CharacterAnimationSystem Animation;
        public BabySeinController Controller;
        public PlatformBehaviour PlatformBehaviour;
        public BabySeinSounds Sounds;
        public BabySein() { }
        public bool FaceLeft { get { return default(bool); } set { } }
        public UnityEngine.GameObject GameObject { get { return default(UnityEngine.GameObject); } }
        public bool IsOnGround { get { return default(bool); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector3 Speed { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Transform Transform { get { return default(UnityEngine.Transform); } }
        public void Activate(bool active) { }
        public void Awake() { }
        public void OnDestroy() { }
        public void PlaceOnGround() { }
    }
    public partial class BabySeinController : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public BabySeinController.AnimationSet Animations;
        public BabySein BabySein;
        public bool IgnoreControllerInput;
        public float JumpHeight;
        public BabySeinController() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool LockedInput { get { return default(bool); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void HandleStopRunningInDirections() { }
        public void Jump() { }
        public void Land() { }
        public void OnDestroy() { }
        public bool ShouldFallAnimationPlay() { return default(bool); }
        public bool ShouldFallIdleAnimationPlay() { return default(bool); }
        public bool ShouldGrabBoxAnimationPlay() { return default(bool); }
        public bool ShouldIdleAnimationPlay() { return default(bool); }
        public bool ShouldJumpAnimationPlay() { return default(bool); }
        public bool ShouldJumpIdleAnimationPlay() { return default(bool); }
        public bool ShouldWalkAnimationPlay() { return default(bool); }
        public void Start() { }
        public void UpdateAnimations() { }
        public enum AnimationLayers
        {
            FallLayer = 0,
            JumpLayer = 2,
            PushLayer = 3,
            WalkLayer = 1,
        }
        public partial class AnimationSet
        {
            public TextureAnimationWithTransitions Fall;
            public TextureAnimationWithTransitions FallIdle;
            public TextureAnimationWithTransitions GrabBoxIdle;
            public TextureAnimationWithTransitions Idle;
            public TextureAnimationWithTransitions Jump;
            public TextureAnimationWithTransitions JumpIdle;
            public TextureAnimationWithTransitions Walk;
            public AnimationSet() { }
        }
    }
    public partial class BabySeinJumpZone : UnityEngine.MonoBehaviour
    {
        public BabySeinJumpZone() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
    }
    [CategoryAttribute("Sein")]
    public partial class BabySeinRunToTargetAction : PerformingAction
    {
        private bool m_isPerforming;
        [NotNull]
        public UnityEngine.Transform TargetPosition;
        public BabySeinRunToTargetAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator Perform() { return default(System.Collections.IEnumerator); }
        public override void Perform(IContext context) { }
        public override void Stop() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Perform>c__IteratorA : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal BabySeinRunToTargetAction <>f__this;
            internal float <distance>__0;
            public <Perform>c__IteratorA() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class BabySeinSounds : UnityEngine.MonoBehaviour
    {
        public BabySein BabySein;
        public UnityEngine.GameObject FootstepsEffectPrefab;
        public SurfaceToSoundProviderMap FootstepsSounds;
        public UnityEngine.GameObject JumpEffectPrefab;
        public SurfaceToSoundProviderMap JumpSound;
        public UnityEngine.GameObject LandEffectPrefab;
        public SurfaceToSoundProviderMap LandSound;
        private float m_nextStepTime;
        private UnityEngine.Transform m_transform;
        public UnityEngine.AnimationCurve SoundsPerSecondOverSpeed;
        public BabySeinSounds() { }
        private SurfaceMaterialType GroundSurfaceType { get { return default(SurfaceMaterialType); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void Awake() { }
        public void HandleFootstepEvents() { }
        public void OnJump() { }
        public void OnLand() { }
    }
    public partial class BabySeinSpriteRotationController : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float Angle;
        public BabySein BabySein;
        public BabySeinSpriteRotationController() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void FixedUpdate() { }
    }
    public partial class BackupSaveSlotUI : UnityEngine.MonoBehaviour
    {
        public MessageBox AreaName;
        public UnityEngine.Vector2 Center;
        public BaseAnimator HighlightAnimator;
        public int Index;
        private bool m_highlighted;
        public SaveSlotInfo SaveSlot;
        public UnityEngine.Vector2 Size;
        public BackupSaveSlotUI() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public void Apply() { }
        public void Highlight(bool turnOn) { }
        public void OnEnable() { }
    }
    public abstract partial class BaseAnimator : Suspendable, IDynamicGraphicHierarchy, IInScene, IPooled
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsInitialized>k__BackingField;
        private AnimatorDriver m_animatorDriver;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private bool m_isInScene;
        private bool m_isSuspended;
        public bool PlayAtStart;
        public bool SampleOnStart;
        public float Speed;
        public float TimeOffset;
        protected BaseAnimator() { }
        public AnimatorDriver AnimatorDriver { get { return default(AnimatorDriver); } }
        public abstract float Duration { get; }
        public bool IsInitialized { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
        public bool IsInScene { get { return default(bool); } set { } }
        public abstract bool IsLooping { get; }
        public override bool IsSuspended { get { return default(bool); } set { } }
        public float AnimationCurveTimeToTime(float time) { return default(float); }
        public new void Awake() { }
        public abstract void CacheOriginals();
        public void FixedUpdate() { }
        public void Initialize() { }
        public virtual void OnPoolSpawned() { }
        public abstract void RestoreToOriginalState();
        public abstract void SampleValue(float value, bool forceSample);
        public void Start() { }
        public float TimeToAnimationCurveTime(float time) { return default(float); }
    }
    [CategoryAttribute("BaseAnimator")]
    public partial class BaseAnimatorAction : ActionMethod
    {
        public BaseAnimator[] Animators;
        public BaseAnimatorAction.FindAnimatorsMode AnimatorsMode;
        public BaseAnimatorAction.PlayMode Command;
        [NotNull]
        public UnityEngine.GameObject Target;
        public BaseAnimatorAction() { }
        private string TargetName { get { return default(string); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public new void Start() { }
        public enum FindAnimatorsMode
        {
            GameObject = 0,
            GameObjectAndChildren = 1,
            SpecifyAnimators = 2,
        }
        public enum PlayMode
        {
            Continue = 4,
            ContinueForward = 5,
            ContinueReversed = 6,
            Restart = 0,
            RestartReversed = 1,
            Reverse = 2,
            Stop = 3,
            StopAtEnd = 8,
            StopAtStart = 7,
        }
    }
    public partial class BaseAnimatorSerializer : SaveSerialize
    {
        [UnityEngine.SerializeField]
        private BaseAnimator[] m_animators;
        public BaseAnimatorSerializer() { }
        public void OnValidate() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class BashAttackCritical : Suspendable, IPooled
    {
        public UnityEngine.Texture2D BashAttackArrow;
        public float ChargingDuration;
        public float CriticalDuration;
        public BashAttackCritical.State CurrentState;
        public float FailedDuration;
        private UnityEngine.Vector3 m_localScale;
        private float m_stateCurrentTime;
        private bool m_suspended;
        public UnityEngine.Texture2D RedirectArrow;
        public float ShakeAmount;
        public float ShakePeriod;
        public BashAttackCritical() { }
        public override bool IsSuspended { get { return default(bool); } set { } }
        public new void Awake() { }
        public void ChangeState(BashAttackCritical.State state) { }
        public void FixedUpdate() { }
        public void OnPoolSpawned() { }
        private void UpdateChargingState() { }
        private void UpdateCriticalState() { }
        private void UpdateFailedState() { }
        public void UpdateState() { }
        public enum State
        {
            Charging = 0,
            Critical = 1,
            Failed = 2,
            Finished = 3,
        }
    }
    internal partial class BashAttackGame : Suspendable, IPooled
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float Angle;
        public float AppearTime;
        public UnityEngine.AnimationCurve ArrowAppearScaleCurve;
        public UnityEngine.AnimationCurve ArrowDisappearScaleCurve;
        public float ArrowSpeed;
        public UnityEngine.Transform ArrowSprite;
        public BashAttackCritical BashAttackCritical;
        private System.Action<float> BashGameComplete;
        public float DisappearTime;
        private SoundPlayer m_bashLoopingAudioSource;
        private BashAttackGame.State m_currentState;
        private float m_keyboardAngle;
        private bool m_keyboardClockwise;
        private float m_keyboardSpeed;
        private BashAttackGame.Modes m_mode;
        private float m_nextBashLoopPlayedTime;
        private UnityEngine.Vector3 m_originalArrowScale;
        private float m_stateCurrentTime;
        public BashAttackGame() { }
        public Core.Input.InputButtonProcessor ButtonBash { get { return default(Core.Input.InputButtonProcessor); } }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public event System.Action<float> BashGameComplete { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <UpdatePlayingState>m__0() { }
        public new void Awake() { }
        public void ChangeState(BashAttackGame.State state) { }
        public void FixedUpdate() { }
        private void GameFinished() { }
        public void OnPoolSpawned() { }
        public void SendDirection(UnityEngine.Vector2 direction) { }
        public void Start() { }
        private void UpdateAppearingState() { }
        private void UpdateDisappearingState() { }
        public void UpdateMode() { }
        private void UpdatePlayingState() { }
        public void UpdateState() { }
        public enum Modes
        {
            Controller = 2,
            Keyboard = 1,
            Mouse = 0,
        }
        public enum State
        {
            Appearing = 0,
            Disappearing = 2,
            Playing = 1,
        }
    }
    public partial class BelongToScene : SaveSerialize
    {
        public string SceneBelongTo;
        public BelongToScene() { }
        private void Refresh() { }
        public override void Serialize(Archive ar) { }
        private void Start() { }
    }
    public partial class BerryCelebrationController : UnityEngine.MonoBehaviour
    {
        public TextureAnimation BerryCelebrationAnimation;
        public SpriteAnimator BerryCelebrationSpriteAnimator;
        public float IntroFadeInDuration;
        public SoundProvider IntroSoundProvider;
        public float LoopFadeInDuration;
        public SoundProvider LoopSoundProvider;
        private float m_introLength;
        public MovieTextureController MovieTextureController;
        public UnityEngine.GameObject Rope;
        public BerryCelebrationController() { }
        private void OnBerryCelebrationAnimationEnd() { }
        private void OnDestroy() { }
        private void OnNaruCollided() { }
        public void Update() { }
    }
    public partial class BerryTreeController : UnityEngine.MonoBehaviour
    {
        public Naru Naru;
        public TextureAnimation NaruAnimationA;
        public TextureAnimation NaruAnimationB;
        public TextureAnimation NaruAnimationC;
        public TextureAnimation NaruAnimationD;
        public SpriteAnimator NaruSpriteAnimator;
        public TextureAnimation SeinClimbOnNaruAnimation;
        public TextureAnimation TreeAnimationA;
        public TextureAnimation TreeAnimationB;
        public TextureAnimation TreeAnimationC;
        public TextureAnimation TreeAnimationD;
        public SpriteAnimator TreeSpriteAnimator;
        public BerryTreeController() { }
        public void OnAnimationEnd() { }
        public void PlayerCollisionTrigger() { }
        public void Start() { }
        public void SwapCharacters() { }
    }
    public partial class BetterList<T>
    {
        public T[] Buffer;
        private int m_size;
        public BetterList(int capacity) { }
        public int Count { get { return default(int); } }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public T this[int i] { get { return default(T); } set { } }
        public void Add(T item) { }
        private void AllocateMore() { }
        public void Clear() { }
        public bool Contains(T item) { return default(bool); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        [System.Diagnostics.DebuggerHiddenAttribute]
        [System.Diagnostics.DebuggerStepThroughAttribute]
        public System.Collections.Generic.IEnumerator<T> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
        public void Insert(int index, T item) { }
        public T Pop() { return default(T); }
        public void Release() { }
        public bool Remove(T item) { return default(bool); }
        public void RemoveAt(int index) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        [System.Diagnostics.DebuggerStepThroughAttribute]
        public void Sort(BetterList<T>.CompareFunc comparer) { }
        public T[] ToArray() { return default(T[]); }
        private void Trim() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetEnumerator>c__Iterator15 : System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerator, System.IDisposable
        {
            internal T $current;
            internal int $PC;
            internal BetterList<T> <>f__this;
            internal int <i>__0;
            public <GetEnumerator>c__Iterator15() { }
            T System.Collections.Generic.IEnumerator<T>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(T); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public delegate int CompareFunc(T left, T right);
    }
    public partial class BinaryProfilerLogMaker : UnityEngine.MonoBehaviour
    {
        private static int m_fileIndex;
        private int m_index;
        private static BinaryProfilerLogMaker m_instance;
        public BinaryProfilerLogMaker() { }
        public static bool Enabled { get { return default(bool); } set { } }
        public static string OutputPath { get { return default(string); } }
        public void Awake() { }
        public void OnDestroy() { }
        public void Update() { }
    }
    public static partial class BitLayer
    {
        public static bool ContainsLayer(this UnityEngine.LayerMask layerMask, int layer) { return default(bool); }
    }
    public partial class Blend<T>
    {
        public T End;
        private System.Func<float, float> m_ease;
        private System.Func<T, T, float, T> m_lerp;
        public T Start;
        public float Time;
        public Blend(System.Func<float, float> ease, System.Func<T, T, float, T> lerp) { }
        public T Current { get { return default(T); } }
    }
    public partial class BlendFloat : Blend<float>
    {
        public BlendFloat(System.Func<float, float> ease) : base (default(System.Func<float, float>), default(System.Func<float, float, float, float>)) { }
    }
    public enum BlendModeType
    {
        Additive = 1,
        AlphaBlend = 0,
        Invisible = 4,
        Multiply = 3,
        Opaque = 2,
    }
    public partial class BlendVector3 : Blend<UnityEngine.Vector3>
    {
        public BlendVector3(System.Func<float, float> ease) : base (default(System.Func<float, float>), default(System.Func<UnityEngine.Vector3, UnityEngine.Vector3, float, UnityEngine.Vector3>)) { }
    }
    public partial class BlendVector4 : Blend<UnityEngine.Vector4>
    {
        public BlendVector4(System.Func<float, float> ease) : base (default(System.Func<float, float>), default(System.Func<UnityEngine.Vector4, UnityEngine.Vector4, float, UnityEngine.Vector4>)) { }
        public static UnityEngine.Vector4 Vector4Lerp(UnityEngine.Vector4 start, UnityEngine.Vector4 end, float s) { return default(UnityEngine.Vector4); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class BlockableLaser : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <CurrentLaserLength>k__BackingField;
        public UnityEngine.Transform BeamRotationPivot;
        public UnityEngine.LayerMask BlockingLayers;
        public LaserBeam LaserBeam;
        public float LaserBeamForce;
        public UnityEngine.Vector3 LaserDirection;
        public float LaserMaxDistance;
        private bool m_activated;
        private UnityEngine.Collider m_damageCollider;
        private bool m_isSuspended;
        private TextureTilingAdjuster[] m_laserBeamTilingAdjusters;
        private UnityEngine.GameObject m_laserImpactLoopEffect;
        private UnityEngine.Vector3 m_lastImpactPosition;
        private SoundPlayer m_loopSoundPlayer;
        private UnityEngine.Collider m_previousHitCollider;
        private bool m_wasVisibleOnScreen;
        private readonly System.Collections.Generic.List<UnityEngine.ParticleSystem> s_particleSystemList;
        public BlockableLaser() { }
        public bool Activated { get { return default(bool); } set { } }
        public float CurrentLaserLength { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool IsSuspended { get { return default(bool); } set { } }
        private void Awake() { }
        private void DealLaserDamage(UnityEngine.GameObject hitObject) { }
        private void DispatchOfTheLastImpactLoopEffect() { }
        public void DoAnticipation() { }
        private void FixedUpdate() { }
        private bool IsLaserOnScreen(UnityEngine.Vector3 endPoint) { return default(bool); }
        private void OnActivated() { }
        private void OnDeactivate() { }
        public void OnDestroy() { }
        private void OnDisable() { }
        private void OnEnable() { }
        private void PerformLaserLogic() { }
        private void PerformLaserRaycast(out UnityEngine.Vector3 laserEndPoint, out UnityEngine.Vector3 hitNormal, out float bestDistance, out UnityEngine.Collider hitCollider) { laserEndPoint = default(UnityEngine.Vector3); hitNormal = default(UnityEngine.Vector3); bestDistance = default(float); hitCollider = default(UnityEngine.Collider); }
    }
    public partial class BloomAndFlaresSettings
    {
        public int BlurIterations;
        public float BlurSpread;
        public UnityEngine.Color FlareColorA;
        public UnityEngine.Color FlareColorB;
        public UnityEngine.Color FlareColorC;
        public UnityEngine.Color FlareColorD;
        public float Intensity;
        public float LocalIntensity;
        public float LocalThreshhold;
        public float Threshhold;
        public BloomAndFlaresSettings() { }
        public BloomAndFlaresSettings Clone() { return default(BloomAndFlaresSettings); }
    }
    internal partial class BoolDebugMenuItem : IDebugMenuItem
    {
        private System.Func<bool> m_getter;
        private string m_helpText;
        private System.Action<bool> m_setter;
        private string m_text;
        private bool m_value;
        public BoolDebugMenuItem(string str, System.Func<bool> getter, System.Action<bool> setter) { }
        public string HelpText { get { return default(string); } set { } }
        public string Text { get { return default(string); } set { } }
        public bool Value { get { return default(bool); } set { } }
        public void Draw(UnityEngine.Rect rect, bool selected) { }
        public void OnSelected() { }
        public void OnSelectedFixedUpdate() { }
        public virtual void OnSelectedUpdate() { }
    }
    public partial class BreakableObject : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject ExplosionEffect;
        private int m_numberOfHits;
        public int NumberOfHitsToBreak;
        public UnityEngine.AnimationCurve ShardsFadeoutCurve;
        public BreakableObject() { }
        private void BreakTheObject() { }
        private void Hit() { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
        private void Start() { }
    }
    [UnityEngine.RequireComponent(typeof(HealthController))]
    public partial class BreakingWall : UnityEngine.MonoBehaviour, IDamageReciever
    {
        private HealthController m_healthController;
        public BreakingWall() { }
        private void BreakWall() { }
        public void OnRecieveDamage(Damage damage) { }
        private void Start() { }
    }
    public partial class BrightnessProvider : FloatValueProvider
    {
        public BrightnessProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class BrightnessVolumeSlider : CleverValueSlider
    {
        public BrightnessVolumeSlider() { }
        public override float Value { get { return default(float); } set { } }
    }
    public partial class BuildData : IFrameData
    {
        public string BuildID;
        public string BuildPath;
        public string Revision;
        public BuildData() { }
        public BuildData(System.IO.BinaryReader binaryReader) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    public static partial class BuilderInfo
    {
        public static bool IsBuilding;
    }
    public partial class BuildHasPrologueCondition : Condition
    {
        public BuildHasPrologueCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class BuildPlatformCondition : Condition
    {
        public bool Demo;
        public bool FullGame;
        public bool Windows;
        public bool WindowsTen;
        public bool Xbox360;
        public bool XboxOne;
        public BuildPlatformCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class BuildRunningHook : UnityEngine.MonoBehaviour
    {
        public static BuildRunningHook Instance;
        private string m_buildRunningHookFileName;
        private string m_buildRunningHookFilePath;
        private float m_interval;
        private float m_timestamp;
        public bool ShouldCheck;
        public BuildRunningHook() { }
        private static void .cctor() { }
        private void Awake() { }
        private void Update() { }
    }
    public partial class BushSetupController : UnityEngine.MonoBehaviour
    {
        public BushSetupController.State CurrentState;
        public TextureAnimation KneelingRockAnimation;
        public TextureAnimation KneelingRockToLiftSeinAnimation;
        public TextureAnimation LiftSeinAnimation;
        public TextureAnimation LiftSeinToRockReachAnimation;
        public UnityEngine.GameObject LightCeremonyEffects;
        private float m_stateCurrentTime;
        public MovieTextureController MovieTextureController;
        public SpriteAnimator NaruSpriteAnimator;
        public TextureAnimation NoticeSeinAnimation;
        public TextureAnimation RockFallNaruAnimation;
        public TextureAnimation RockFallSeinAnimation;
        public TextureAnimation RockReachAnimation;
        public TextureAnimation RockReachToLiftSeinAnimation;
        public SpriteAnimator SeinSpriteAnimator;
        public BushSetupController() { }
        public void ChangeState(BushSetupController.State state) { }
        public void FixedUpdate() { }
        public void KneelingRockToLiftSeinOnAnimatoinEnd() { }
        public void LiftSeinToRockReachOnAnimatoinEnd() { }
        public void NoticeSeinOnAnimationEnd() { }
        public void NoticeSeinTrigger() { }
        public void PlayerCollisionTrigger() { }
        public void RockFallOnAnimatoinEnd() { }
        public void RockReachOnAnimatoinEnd() { }
        public void RockReachToLiftSeinOnAnimatoinEnd() { }
        public void UpdateState() { }
        public enum State
        {
            KneelingRock = 0,
            KneelingRockToLiftSein = 1,
            LiftSein = 2,
            LiftSeinToRockReach = 3,
            NoticeSein = 7,
            RockFall = 5,
            RockReach = 4,
            RockReachToLiftSein = 6,
        }
    }
    public static partial class ButtonIconUtility
    {
        private const string IconAnalogueDown = "<icon>b</>";
        private const string IconAnalogueLeft = "<icon>c</>";
        private const string IconAnalogueRight = "<icon>d</>";
        private const string IconAnalogueStick = "<icon>J</>";
        private const string IconAnalogueUp = "<icon>a</>";
        private const string IconButtonA = "<icon>e</>";
        private const string IconButtonB = "<icon>f</>";
        private const string IconButtonMenu = "<icon>g</>";
        private const string IconButtonSelect = "<icon>l</>";
        private const string IconButtonX = "<icon>h</>";
        private const string IconButtonY = "<icon>i</>";
        private const string IconKeyboardA = "<icon>n</>";
        private const string IconKeyboardArrows = "<icon>Q</>";
        private const string IconKeyboardB = "<icon>o</>";
        private const string IconKeyboardC = "<icon>p</>";
        private const string IconKeyboardControl = "<icon>G</>";
        private const string IconKeyboardD = "<icon>q</>";
        private const string IconKeyboardDelete = "<icon>M</>";
        private const string IconKeyboardDown = "<icon>r</>";
        private const string IconKeyboardE = "<icon>H</>";
        private const string IconKeyboardEnter = "<icon>D</>";
        private const string IconKeyboardEsc = "<icon>y</>";
        private const string IconKeyboardF = "<icon>N</>";
        private const string IconKeyboardK = "<icon>O</>";
        private const string IconKeyboardL = "<icon>P</>";
        private const string IconKeyboardLeft = "<icon>s</>";
        private const string IconKeyboardNavigation = "<icon>K</>";
        private const string IconKeyboardQ = "<icon>I</>";
        private const string IconKeyboardR = "<icon>T</>";
        private const string IconKeyboardRight = "<icon>t</>";
        private const string IconKeyboardS = "<icon>u</>";
        private const string IconKeyboardShift = "<icon>L</>";
        private const string IconKeyboardSpace = "<icon>C</>";
        private const string IconKeyboardTab = "<icon>z</>";
        private const string IconKeyboardUp = "<icon>v</>";
        private const string IconKeyboardV = "<icon>A</>";
        private const string IconKeyboardW = "<icon>w</>";
        private const string IconKeyboardX = "<icon>x</>";
        private const string IconKeyboardZ = "<icon>B</>";
        private const string IconLeftShoulder = "<icon>R</>";
        private const string IconLeftTrigger = "<icon>m</>";
        private const string IconMouseLeft = "<icon>E</>";
        private const string IconMouseRight = "<icon>F</>";
        private const string IconRightShoulder = "<icon>S</>";
        private const string IconRightTrigger = "<icon>k</>";
        private static System.Collections.Generic.Dictionary<SmartInput.XboxControllerInput.Button, string> m_controllerButtonToIconString;
        private static System.Collections.Generic.Dictionary<UnityEngine.KeyCode, string> m_keycodeToIconString;
        private static System.Collections.Generic.Dictionary<XboxOneController.Axis, string> m_xboxOneControllerAxisToIconString;
        private static System.Collections.Generic.Dictionary<XboxOneController.Button, string> m_xboxOneControllerButtonToIconString;
        private static void .cctor() { }
        private static string ControllerButtonToString(SmartInput.XboxControllerInput.Button button) { return default(string); }
        public static string GetAxisIcon(SmartInput.IAxisInput axisInput, bool positive) { return default(string); }
        private static string GetAxisString(XboxOneController.AxisInput xboxOneAxisInput) { return default(string); }
        private static string GetButtonString(SmartInput.AxisButtonInput axisButtonInput) { return default(string); }
        public static string GetButtonString(SmartInput.CompoundButtonInput compoundButtonInput) { return default(string); }
        private static string GetButtonString(SmartInput.ControllerButtonInput controllerButtonInput) { return default(string); }
        private static string GetButtonString(SmartInput.KeyCodeButtonInput keyCodeButtonInput) { return default(string); }
        private static string GetButtonString(XboxOneController.ButtonInput xboxOneButtonInput) { return default(string); }
        private static string KeyCodeToString(UnityEngine.KeyCode keyCode) { return default(string); }
        private static string XboxOneControllerAxisToString(XboxOneController.Axis axis) { return default(string); }
        private static string XboxOneControllerButtonToString(XboxOneController.Button button) { return default(string); }
    }
    public partial class ButtonPressedCondition : Condition
    {
        public Core.Input.Button Button;
        public ButtonPressedCondition.ButtonStates State;
        public ButtonPressedCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
        public enum ButtonStates
        {
            OnPressed = 2,
            OnReleased = 3,
            Pressed = 0,
            Released = 1,
        }
    }
    public partial class CacheBaseAnimatorAction : ActionMethod
    {
        public BaseAnimator Animator;
        public CacheBaseAnimatorAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class CacheComponent : UnityEngine.MonoBehaviour
    {
        private readonly System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.HashSet<UnityEngine.Component>> m_cachedComponents;
        private readonly System.Collections.Generic.Dictionary<System.Type, System.Collections.Generic.HashSet<UnityEngine.Component>> m_cachedComponentsInChildren;
        public CacheComponent() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.Generic.IEnumerable<T> Find<T>() where T : class { return default(System.Collections.Generic.IEnumerable<T>); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public static System.Collections.Generic.IEnumerable<System.Type> FindAllClasses(System.Type type) { return default(System.Collections.Generic.IEnumerable<System.Type>); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.Generic.IEnumerable<T> FindInChildren<T>() where T : class { return default(System.Collections.Generic.IEnumerable<T>); }
        public void Start() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Find>c__Iterator3F<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable where T : class
        {
            internal T $current;
            internal int $PC;
            internal System.Collections.Generic.HashSet<UnityEngine.Component>.Enumerator <$s_636>__1;
            internal CacheComponent <>f__this;
            internal UnityEngine.Component <component>__2;
            internal System.Collections.Generic.HashSet<UnityEngine.Component> <hashSet>__0;
            public <Find>c__Iterator3F() { }
            T System.Collections.Generic.IEnumerator<T>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(T); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FindAllClasses>c__Iterator41 : System.Collections.Generic.IEnumerable<System.Type>, System.Collections.Generic.IEnumerator<System.Type>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal System.Type $current;
            internal int $PC;
            internal System.Type <$>type;
            internal System.Type[] <$s_638>__0;
            internal int <$s_639>__1;
            internal System.Type <i>__2;
            internal System.Type type;
            public <FindAllClasses>c__Iterator41() { }
            System.Type System.Collections.Generic.IEnumerator<System.Type>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(System.Type); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<System.Type> System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<System.Type>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FindInChildren>c__Iterator40<T> : System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEnumerator<T>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable where T : class
        {
            internal T $current;
            internal int $PC;
            internal System.Collections.Generic.HashSet<UnityEngine.Component>.Enumerator <$s_637>__1;
            internal CacheComponent <>f__this;
            internal UnityEngine.Component <component>__2;
            internal System.Collections.Generic.HashSet<UnityEngine.Component> <hashSet>__0;
            public <FindInChildren>c__Iterator40() { }
            T System.Collections.Generic.IEnumerator<T>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(T); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<T>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public abstract partial class CageFaceMetaData<T> : CageMetaData<T>
    {
        protected CageFaceMetaData() { }
        public new void OnDisable() { }
        public new void OnEnable() { }
        public void OnRemoveFace(CageStructureTool.Face face) { }
    }
    public partial class CageMath : UnityEngine.MonoBehaviour
    {
        public CageMath() { }
        public static partial class Line
        {
            public static UnityEngine.Vector3 ClosestPointOnLineSegmentToPoint(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p) { return default(UnityEngine.Vector3); }
        }
        public static partial class Rectangle
        {
            public static UnityEngine.Rect Absolute(UnityEngine.Rect rect) { return default(UnityEngine.Rect); }
        }
        public static partial class Vector
        {
            public static bool PointInTriangle(UnityEngine.Vector2 pt, UnityEngine.Vector2 v1, UnityEngine.Vector2 v2, UnityEngine.Vector2 v3) { return default(bool); }
            private static float Sign(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3) { return default(float); }
        }
    }
    public abstract partial class CageMetaData<T> : SaveSerialize, ICageMetaData
    {
        public CageStructureTool CageStructureTool;
        public System.Collections.Generic.List<T> Data;
        public T DefaultValue;
        public System.Collections.Generic.List<int> IDs;
        public bool ShouldSerialize;
        protected CageMetaData() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void Remove(int id) { }
        public abstract void Serialize(ref T worldMapAreaState, Archive ar);
        public override void Serialize(Archive ar) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Remove>c__AnonStorey66
        {
            internal int id;
            public <Remove>c__AnonStorey66() { }
            internal bool <>m__141(int a) { return default(bool); }
        }
    }
    public partial class CageStructureTool : UnityEngine.MonoBehaviour, IStrippable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache14;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Face, bool, bool> <>f__am$cache15;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Edge, bool, bool> <>f__am$cache16;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Vertex, bool, bool> <>f__am$cache17;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Vertex> <>f__am$cache18;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Vertex> <>f__am$cache19;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Edge> <>f__am$cache1A;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Edge> <>f__am$cache1B;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Face> <>f__am$cache1C;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<CageStructureTool.Face> <>f__am$cache1D;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<int, int> <>f__am$cache1E;
        public System.Collections.Generic.Dictionary<int, System.Collections.Generic.Dictionary<int, int>> Connections;
        public System.Collections.Generic.List<CageStructureTool.Edge> Edges;
        public int EdgeUniqueID;
        public int EditingMode;
        public System.Collections.Generic.List<CageStructureTool.Face> Faces;
        public int FaceUniqueID;
        private UnityEngine.Rect[] m_faceOptimisation;
        public System.Collections.Generic.List<ICageMetaData> MetaData;
        private System.Action<CageStructureTool.Edge> OnAddEdge;
        private System.Action<CageStructureTool.Face> OnAddFace;
        private System.Action<CageStructureTool.Vertex> OnAddVertex;
        public System.Action<CageStructureTool.Edge, bool, bool> OnDisplayEdge;
        public System.Action<CageStructureTool.Face, bool, bool> OnDisplayFace;
        public System.Action<CageStructureTool.Vertex, bool, bool> OnDisplayVertex;
        public System.Action OnModified;
        private System.Action<CageStructureTool.Edge> OnRemoveEdge;
        private System.Action<CageStructureTool.Face> OnRemoveFace;
        private System.Action<CageStructureTool.Vertex> OnRemoveVertex;
        public System.Collections.Generic.List<CageStructureTool.Vertex> Vertices;
        public int VerticeUniqueID;
        public CageStructureTool() { }
        public UnityEngine.Rect[] FacesAsRectangles { get { return default(UnityEngine.Rect[]); } }
        public event System.Action<CageStructureTool.Edge> OnAddEdge { add { } remove { } }
        public event System.Action<CageStructureTool.Face> OnAddFace { add { } remove { } }
        public event System.Action<CageStructureTool.Vertex> OnAddVertex { add { } remove { } }
        public event System.Action<CageStructureTool.Edge> OnRemoveEdge { add { } remove { } }
        public event System.Action<CageStructureTool.Face> OnRemoveFace { add { } remove { } }
        public event System.Action<CageStructureTool.Vertex> OnRemoveVertex { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <AddFaceFromEdgePath>m__13E(int f) { return default(int); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAddEdge>m__136(CageStructureTool.Edge ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAddFace>m__138(CageStructureTool.Face ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAddVertex>m__134(CageStructureTool.Vertex ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnDisplayEdge>m__132(CageStructureTool.Edge , bool , bool ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnDisplayFace>m__131(CageStructureTool.Face , bool , bool ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnDisplayVertex>m__133(CageStructureTool.Vertex , bool , bool ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnModified>m__130() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnRemoveEdge>m__137(CageStructureTool.Edge ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnRemoveFace>m__139(CageStructureTool.Face ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnRemoveVertex>m__135(CageStructureTool.Vertex ) { }
        public CageStructureTool.Edge AddEdge(CageStructureTool.Vertex vertexA, CageStructureTool.Vertex vertexB, bool sendModified=true) { return default(CageStructureTool.Edge); }
        public CageStructureTool.Edge AddEdge(int vertexA, int vertexB, bool sendModified=true) { return default(CageStructureTool.Edge); }
        public void AddFace(System.Collections.Generic.List<int> faces, bool updateTriangles=true, bool sendModified=true) { }
        private void AddFaceFromEdgePath(System.Collections.Generic.List<int> path) { }
        public CageStructureTool.Vertex AddVertex(UnityEngine.Vector3 position, bool sendModified=true) { return default(CageStructureTool.Vertex); }
        public void AutoFace(CageStructureTool.Edge e, bool wide) { }
        private void AutoFaceForEdge(CageStructureTool.Edge e) { }
        public void Clear(bool sendModified=true) { }
        private void DisconnectVertexFromEdges(int vertexIndex) { }
        public bool DoStrip() { return default(bool); }
        public void FindAllLoops(System.Collections.Generic.List<System.Collections.Generic.List<int>> loops) { }
        public CageStructureTool.Edge FindEdgeFromVertices(int vertexa, int vertexb) { return default(CageStructureTool.Edge); }
        public int FindEdgeIndex(CageStructureTool.Edge edge) { return default(int); }
        public System.Collections.Generic.List<CageStructureTool.Edge> FindEdgesFromVertices(System.Collections.Generic.List<CageStructureTool.Vertex> vertices) { return default(System.Collections.Generic.List<CageStructureTool.Edge>); }
        public System.Collections.Generic.List<CageStructureTool.Edge> FindEdgesFromVertices(System.Collections.Generic.List<int> vertices) { return default(System.Collections.Generic.List<CageStructureTool.Edge>); }
        public CageStructureTool.Face FindFaceAtPosition(UnityEngine.Vector3 position) { return default(CageStructureTool.Face); }
        public CageStructureTool.Face FindFaceAtPositionFaster(UnityEngine.Vector3 position) { return default(CageStructureTool.Face); }
        public void FindLoop(int start, int goal) { }
        public int FindVertexIndex(CageStructureTool.Vertex vertex) { return default(int); }
        public System.Collections.Generic.List<CageStructureTool.Vertex> FindVerticesFromEdges(System.Collections.Generic.List<CageStructureTool.Edge> edges) { return default(System.Collections.Generic.List<CageStructureTool.Vertex>); }
        [UnityEngine.ContextMenu("Generate mesh")]
        public void GenerateMesh() { }
        public static void GenerateMesh(UnityEngine.Mesh mesh, CageStructureTool cageStructureTool) { }
        private static float GetWalkAngle(UnityEngine.Vector3 dir, UnityEngine.Vector3 walkDir) { return default(float); }
        private bool HasDuplicateEdge(System.Collections.Generic.List<int> path) { return default(bool); }
        public bool HasEdge(CageStructureTool.Vertex vertexA, CageStructureTool.Vertex vertexB) { return default(bool); }
        public void MarkDirty() { }
        public void MergeVertex(CageStructureTool.Vertex vertex, CageStructureTool.Vertex selectedVertex) { }
        public void Register(ICageMetaData cageMetaData) { }
        public void RemoveEdge(CageStructureTool.Edge edge, bool sendModified=true) { }
        public bool RemoveEdge(CageStructureTool.Vertex vertexA, CageStructureTool.Vertex vertexB, bool sendModified=true) { return default(bool); }
        public void RemoveEdgeAtIndex(int edgeIndex, bool sendModified=true) { }
        public void RemoveFace(CageStructureTool.Face face) { }
        public void RemoveVertex(CageStructureTool.Vertex vertex, bool sendModified=true) { }
        public void SplitAtEdge(CageStructureTool.Edge e) { }
        private CageStructureTool.Vertex SplitVertexConnection(int baseVertex, int skipConnection, UnityEngine.Vector2 dir, float traceDir) { return default(CageStructureTool.Vertex); }
        private bool TraceFaceInDir(CageStructureTool.Vertex vertexStart, int prevVertex, CageStructureTool.Edge edge, System.Collections.Generic.List<int> path, float traceDir, ref float totalAngle) { return default(bool); }
        public void Unregister(ICageMetaData cageMetaData) { }
        public void UpdateConnections() { }
        public void UpdateFaceTriangulation() { }
        public CageStructureTool.Vertex VertexByIndex(int index) { return default(CageStructureTool.Vertex); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <AddFaceFromEdgePath>c__AnonStorey65
        {
            private static System.Func<int, int> <>f__am$cache1;
            internal System.Linq.IOrderedEnumerable<int> temp;
            public <AddFaceFromEdgePath>c__AnonStorey65() { }
            internal bool <>m__13F(CageStructureTool.Face faceIter) { return default(bool); }
            private static int <>m__140(int v) { return default(int); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <DisconnectVertexFromEdges>c__AnonStorey61
        {
            internal int vertexIndex;
            public <DisconnectVertexFromEdges>c__AnonStorey61() { }
            internal bool <>m__13A(CageStructureTool.Edge edge) { return default(bool); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FindEdgeIndex>c__AnonStorey64
        {
            internal CageStructureTool.Edge edge;
            public <FindEdgeIndex>c__AnonStorey64() { }
            internal bool <>m__13D(CageStructureTool.Edge a) { return default(bool); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FindVertexIndex>c__AnonStorey63
        {
            internal CageStructureTool.Vertex vertex;
            public <FindVertexIndex>c__AnonStorey63() { }
            internal bool <>m__13C(CageStructureTool.Vertex a) { return default(bool); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RemoveEdge>c__AnonStorey62
        {
            internal int vertexIndexA;
            internal int vertexIndexB;
            public <RemoveEdge>c__AnonStorey62() { }
            internal bool <>m__13B(CageStructureTool.Edge edge) { return default(bool); }
        }
        public partial class Edge
        {
            public int ID;
            public int VertexA;
            public int VertexB;
            public Edge(int vertexA, int vertexB, int id) { }
        }
        public partial class Face
        {
            public int ID;
            public System.Collections.Generic.List<int> Triangles;
            public System.Collections.Generic.List<int> Vertices;
            public Face(System.Collections.Generic.List<int> vertices, int id) { }
            public int GetVertexIndexAtWrappedIndex(int i) { return default(int); }
        }
        public partial class Vertex
        {
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private UnityEngine.Vector3 <ScreenPosition>k__BackingField;
            public int ID;
            public UnityEngine.Vector4 Metadata;
            public UnityEngine.Vector3 Position;
            public Vertex(UnityEngine.Vector3 position, int id) { }
            public UnityEngine.Vector3 ScreenPosition { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CageStructureToolCollider : UnityEngine.MonoBehaviour, IStrippable
    {
        public float EdgeWidth;
        public UnityEngine.Mesh GeneratedMesh;
        public bool SideFaces;
        public CageStructureToolCollider() { }
        public bool DoStrip() { return default(bool); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CageStructureToolFill : UnityEngine.MonoBehaviour, IStrippable
    {
        public CageStructureToolFill() { }
        public bool DoStrip() { return default(bool); }
        public void OnModified() { }
        public void UpdateMesh() { }
    }
    public partial class CameraAdditiveSettings
    {
        public float AdditiveBloomIntensity;
        public float AdditiveBloomThreshhold;
        public ContrastSettings AdditiveContrast;
        public float AdditiveDesaturation;
        public float AdditiveVignettingIntensity;
        public CameraAdditiveSettings() { }
    }
    public partial class CameraChaseTarget : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private int <IgnoreSmoothingForAFrame>k__BackingField;
        public UnityEngine.Vector2 CameraSpeedMultiplier;
        public float DistanceRequiredForSmoothing;
        public bool FollowTargetX;
        public bool FollowTargetY;
        public bool FollowTargetZ;
        private UnityEngine.Vector3 m_cameraLastPosition;
        private UnityEngine.Vector3 m_cameraSpeed;
        private UnityEngine.Vector3 m_lastTargetPosition;
        private UnityEngine.Rigidbody m_rigidbody;
        private UnityEngine.Transform m_transform;
        public bool SilkySmooth;
        public UnityEngine.AnimationCurve SmoothingAccelerationCurveOverTime;
        public float SmoothingDuration;
        public float SpeedRatio;
        public UnityEngine.Transform Target;
        public CameraChaseTarget() { }
        public int IgnoreSmoothingForAFrame { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void GoToTarget() { }
        public void Start() { }
        public void UpdateCameraLastPosition() { }
        public void UpdateChase() { }
    }
    public partial class CameraChaseTargetSpeedRatioController : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float AdditionalSpeed;
        public CameraChaseTarget CameraChaseTarget;
        private float m_originalSpeedRatio;
        public float MaxSpeed;
        public float MinSpeed;
        public CameraChaseTargetSpeedRatioController() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void FixedUpdate() { }
        public void Start() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Camera Camera;
        public CameraPostProcessing CameraPostProcessing;
        public CameraShakeLogic CameraShake;
        public float FieldOfView;
        private UnityEngine.Transform m_cameraTransform;
        private UnityEngine.Transform m_childTransform;
        private bool m_firstFixed;
        private UnityEngine.Plane[] m_frustrumPlanes;
        private int m_lastFrustumUpdate;
        private UnityEngine.Vector3 m_lastPosition;
        private UnityEngine.Vector3 m_lastSpeed;
        private System.Action<UnityEngine.Plane[], UnityEngine.Matrix4x4> m_updateFunc;
        public CameraPuppetController PuppetController;
        public UnityEngine.Vector3 Speed;
        public CameraController() { }
        private UnityEngine.Plane[] FrustrumPlanes { get { return default(UnityEngine.Plane[]); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Quaternion Rotation { get { return default(UnityEngine.Quaternion); } }
        public void FixedUpdate() { }
        public bool InsideFrustum(UnityEngine.Bounds bounds) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnGameReset() { }
        public void UpdateCamera() { }
        public void UpdateFrustrumPlanes() { }
        public void UpdateSpeed() { }
        private delegate void UpdatePlaneFunc(UnityEngine.Plane[] planes, ref UnityEngine.Matrix4x4 trans);
    }
    public partial class CameraCrossFadeManager : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public CameraController CameraControllerEnd;
        public CameraController CameraControllerStart;
        public static MoonGuid CrossFadeMenuHack;
        private float m_crossFadeDuration;
        private float m_crossFadeTime;
        private bool m_isCrossFading;
        public UnityEngine.AnimationCurve TweenCurve;
        public UberPostProcessingCrossFade UberPostProcessingCrossFade;
        public CameraCrossFadeManager() { }
        public bool IsCrossFading { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        private void Apply(UberPostProcessingCrossFade.CameraInformation cameraInformation, CameraController cameraController) { }
        public void ApplyCrossFadeSettings() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void PerformCrossFade(SceneMetaData sceneMetaData, float crossFadeDuration) { }
        public void Start() { }
        public void StopCrossFade() { }
    }
    public partial class CameraData : IFrameData
    {
        public UnityEngine.Vector3 Position;
        public CameraData() { }
        public CameraData(System.IO.BinaryReader binaryReader) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    public partial class CameraFrustumArtOptimizer : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<MeshRendererFrustrumOptimiser> Sprites;
        public CameraFrustumArtOptimizer() { }
        [UnityEngine.ContextMenu("Update list")]
        public void UpdateList() { }
    }
    public partial class CameraFrustumOptimizer : UnityEngine.MonoBehaviour
    {
        private int m_forceCount;
        private UnityEngine.Vector3 m_lastCalculationCameraPosition;
        public float Padding;
        private static readonly AllContainer<IFrustumOptimizable> s_frustumOptimizables;
        private static readonly System.Collections.Generic.List<IFrustumOptimizable> s_unitializedFrustumOptimizables;
        public float UpdateDelta;
        public CameraFrustumOptimizer() { }
        public float ExpansionAmount { get { return default(float); } }
        private static void .cctor() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public static void ForceUpdate() { }
        private bool IsNull(IFrustumOptimizable o) { return default(bool); }
        public void OnAspectChanged() { }
        public void OnDestroy() { }
        public void ProcessFrustumOptimizable(IFrustumOptimizable o, bool isFirstTime) { }
        public static void Register(IFrustumOptimizable frustumOptimizable) { }
        public static void RegisterUninitialized(IFrustumOptimizable frustumOptimizable) { }
        public void Start() { }
        public static void Unregister(IFrustumOptimizable frustumOptimizable) { }
        public void UpdateFrustrumOptimizables() { }
    }
    public partial class CameraGoThroughScrollLocks
    {
        public bool CanPassScrollocks;
        private readonly GameplayCamera m_cameraController;
        private UnityEngine.Transform m_currentCharacter;
        private readonly System.Collections.Generic.HashSet<ISuspendable> m_currentCharacterSuspendables;
        private bool m_isFading;
        private CameraScrollLock m_lastPassedScrollLock;
        private bool m_suspendedForScrollLock;
        private bool m_waitForScrollLock;
        public CameraGoThroughScrollLocks(GameplayCamera cameraController) { }
        public void Destroy() { }
        public void OnGameEarlyFixedUpdate() { }
        public void OnPassThroughScrollLock() { }
        public void OnScrollFaderFinishedFading() { }
        public void Update() { }
    }
    public partial class CameraInfluencePositionZone : UnityEngine.MonoBehaviour
    {
        public UnityEngine.AnimationCurve DistanceInfluenceCurve;
        public CameraInfluencePositionZone() { }
        public UnityEngine.Vector3 Offset { get { return default(UnityEngine.Vector3); } }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraManager : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<CameraController> Cameras;
        public CameraManager() { }
        public void OnEnable() { }
        public void RegisterCamera(CameraController cameraController) { }
        public void UnregisterCamera(CameraController cameraController) { }
    }
    public partial class CameraMultiplyMotionBlurAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        public CameraMultiplyMotionBlurAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public void OnDisable() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraOffsetAnimationZone : SaveSerialize
    {
        public static AllContainer<CameraOffsetAnimationZone> All;
        public float Duration;
        private bool m_isActivated;
        private bool m_isRegistered;
        private CameraOffsetController.OffsetLayer m_offsetLayer;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Vector3 Offset;
        public UnityEngine.Vector3 Rotation;
        public bool UseOffsetX;
        public bool UseOffsetY;
        public bool UseOffsetZ;
        public bool UseRotationX;
        public bool UseRotationY;
        public bool UseRotationZ;
        public float Weight;
        public CameraOffsetAnimationZone() { }
        private static void .cctor() { }
        public void Activate(bool instant) { }
        public void Deactivate(bool instant) { }
        public void OnCameraOffsetUpdate(bool instant) { }
        public void OnDisable() { }
        public void OnEnable() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class CameraOffsetAnimator : LegacyAnimator
    {
        public bool AnimateX;
        public bool AnimateY;
        public bool AnimateZ;
        private float m_lastValue;
        public CameraOffsetAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void Restart() { }
        public override void RestoreToOriginalState() { }
    }
    public partial class CameraOffsetController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Vector3 AdditiveDefaultOffset;
        public float DefaultZoom;
        private float m_characterSpeed;
        private readonly SceneDefaultSettingsHelper m_defaultSettingsHelper;
        private readonly AllContainer<CameraOffsetController.OffsetLayer> m_offsetLayers;
        private static System.Collections.Generic.List<CameraOffsetZone> m_offsetZones;
        public UnityEngine.AnimationCurve MultipliedBasedOnCharacterSpeedCurve;
        public UnityEngine.AnimationCurve ZoomCurve;
        public CameraOffsetController() { }
        public UnityEngine.Vector3 Offset { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector3 Rotation { get { return default(UnityEngine.Vector3); } set { } }
        private static void .cctor() { }
        public void AddOffsetLayer(CameraOffsetController.OffsetLayer layer) { }
        public void Awake() { }
        public void OnAspectChanged() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void OnScrollLockPassed() { }
        public static void Register(CameraOffsetZone offsetZone) { }
        public void RemoveOffsetLayer(CameraOffsetController.OffsetLayer layer) { }
        public static void Unregister(CameraOffsetZone offsetZome) { }
        public void UpdateMultiplier() { }
        public void UpdateOffset(bool instant=false) { }
        public partial class OffsetLayer
        {
            public float Duration;
            public UnityEngine.Vector3 Offset;
            public UnityEngine.Vector3 Rotation;
            public bool UseOffsetX;
            public bool UseOffsetY;
            public bool UseOffsetZ;
            public bool UseRotationX;
            public bool UseRotationY;
            public bool UseRotationZ;
            public BlendFloat Weight;
            public OffsetLayer() { }
            public OffsetLayer(UnityEngine.Vector3 offset, bool useOffsetX, bool useOffsetY, bool useOffsetZ, UnityEngine.Vector3 rotation, bool useRotationX, bool useRotationY, bool useRotationZ) { }
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraOffsetZone : UnityEngine.MonoBehaviour
    {
        public float BottomMargin;
        public float LeftMargin;
        public UnityEngine.Vector3 Offset;
        public int priority;
        public float RightMargin;
        public float TopMargin;
        public UnityEngine.AnimationCurve ZoomCurve;
        public CameraOffsetZone() { }
        [UnityEngine.ContextMenu("Fit room bound")]
        public void FitRoomBound() { }
        public UnityEngine.Bounds GetInnerBounds() { return default(UnityEngine.Bounds); }
        public UnityEngine.Bounds GetOuterBounds() { return default(UnityEngine.Bounds); }
        public float NormalizedMarginPenetration(UnityEngine.Vector3 worldPosition) { return default(float); }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class CameraPivotZone : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public static AllContainer<CameraPivotZone> All;
        public float Duration;
        public bool FollowX;
        public bool FollowY;
        private bool m_activated;
        private CameraTarget.TargetLayer m_targetLayer;
        private readonly BlendFloat m_weight;
        public UnityEngine.Transform Target;
        public float Weight;
        public CameraPivotZone() { }
        private bool IsInside { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        public void ActivateTargetLayer() { }
        public void AddTargetLayerIfNotExist() { }
        public void DeactivateTargetLayer() { }
        public void FixedUpdate() { }
        public void ImmediatelyUpdate() { }
        public static void InstantUpdate() { }
        public override void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        private void RemoveTargetLayerIfExists() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class CameraPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        public CameraPlugin() { }
        public void Awake() { }
        public void Exit() { }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
    }
    public partial class CameraPostProcessing
    {
        public CameraAdditiveSettings AdditiveSettings;
        public CameraController CameraController;
        public UnityEngine.Texture2D FogTextureToUse;
        private bool m_applySettings;
        private CameraSettings m_currentCameraSettings;
        private readonly SceneDefaultSettingsHelper m_defaultSettingsHelper;
        [UnityEngine.SerializeField]
        private UnityEngine.Texture2D m_fogGradientTexture2D;
        private CameraSettings m_transitionSceneSettings;
        public UberPostProcess UberPostProcess;
        public CameraPostProcessing() { }
        public CameraSettings CameraSettingsToUse { get { return default(CameraSettings); } }
        public void Advance(float timeDelta) { }
        public void Apply() { }
        public void ApplyCameraSettings(CameraSettings cameraSettings) { }
        public void ForceFogIntoCurrentCameraSettings(FogGradientController fogGradientController) { }
        private UnityEngine.Texture2D GetFogGradientTexture() { return default(UnityEngine.Texture2D); }
        public void ResetFog() { }
        public void SaveCameraSettings(CameraSettingsAsset cameraSettings) { }
        public void SetCameraSettings(CameraSettings cameraSettings) { }
    }
    public partial class CameraPostProcessingSettings : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Behaviour[] DisableFor360;
        public CameraPostProcessingSettings() { }
        private void Awake() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraPuppetController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Transform CinematicPuppet;
        public UnityEngine.Transform GameplayPuppet;
        private CameraController m_cameraController;
        private UnityEngine.Transform m_transform;
        public float Tween;
        public float WideScreenHorizontalPanStrength;
        public float WideScreenVerticalPanStrength;
        public float WideScreenZoomStrength;
        public CameraPuppetController() { }
        public void Awake() { }
        public void ClearWideScreenAdjustments() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void Reset() { }
        public void SetCinematicPuppet(UnityEngine.Transform cinematicPuppet) { }
        public void SetTween(float amount) { }
        public void SetWideScreenHorizontalPanStrength(float amount) { }
        public void SetWideScreenVerticalPanStrength(float amount) { }
        public void SetWideScreenZoomStrength(float amount) { }
        public void UpdatePuppet() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraScrollLock : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <HalfScrollSize>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <ScrollCenter>k__BackingField;
        public bool Dynamic;
        [UnityEngine.HideInInspector]
        public UnityEngine.GameObject Fader;
        public CameraScrollLock.ScrollLockMode LockMode;
        private UnityEngine.Rect m_boundingRect;
        private bool m_boundingRectCalculated;
        public UnityEngine.AnimationCurve ScrollLockSmooth;
        public bool ShouldCreateCheckpoint;
        public bool UseFader;
        public bool UseScrollLockSmooth;
        [UnityEngine.RangeAttribute(0f, 1f)]
        public float WideScreenAdjustment;
        public CameraScrollLock() { }
        public UnityEngine.Rect BoundingRect { get { return default(UnityEngine.Rect); } }
        public UnityEngine.Vector3 HalfScrollSize { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public UnityEngine.Vector3 ScrollCenter { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public CameraScrollLock.Type ScrollType { get { return default(CameraScrollLock.Type); } }
        public void Awake() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public enum ScrollLockMode
        {
            BothSides = 0,
            LeftOrBottom = 1,
            RightOrTop = 2,
        }
        public enum Type
        {
            Horizontal = 0,
            Vertical = 1,
        }
    }
    public partial class CameraScrollLockConstraint : UnityEngine.MonoBehaviour
    {
        public static CameraScrollLockConstraint Current;
        private static UnityEngine.Vector3[] s_pts;
        private static UnityEngine.Ray[] s_rays;
        public UnityEngine.AnimationCurve ScrollLockSmooth;
        public float SmoothDistance;
        public CameraScrollLockConstraint() { }
        private static void .cctor() { }
        public void Awake() { }
        public static UnityEngine.Bounds BoundsFromPoints(UnityEngine.Vector3[] pts) { return default(UnityEngine.Bounds); }
        public static UnityEngine.Bounds CalculateCameraBounds(UnityEngine.Camera camera) { return default(UnityEngine.Bounds); }
        public UnityEngine.Vector3 CalculateConstraintOffset(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public bool HasPassedThroughScrollLock(UnityEngine.Vector3 oldPosition, UnityEngine.Vector3 position, out CameraScrollLock scrollLockPassedThrough) { scrollLockPassedThrough = default(CameraScrollLock); return default(bool); }
    }
    public partial class CameraSettingOverrides
    {
        public CameraSettingsAsset CameraSettings;
        public Condition Condition;
        public UnityEngine.Gradient FogGradient;
        public float FogRange;
        private CameraSettings m_cameraSettings;
        public CameraSettingOverrides() { }
        public CameraSettings GetCameraSettings() { return default(CameraSettings); }
    }
    public partial class CameraSettings
    {
        public BloomAndFlaresSettings BloomAndFlaresSettings;
        public ColorCorrectionSettings ColorCorrection;
        public ContrastSettings Contrast;
        public DesaturationSettings Desaturation;
        public UnityEngine.Color Fog;
        public UnityEngine.Color[] FogGradient;
        public float FogRange;
        public NoiseSettings Noise;
        public TwirlSettings TwirlSettings;
        public bool UseBloomAndLensFlares;
        public bool UseSeinPostProcessing;
        public VignettingSettings Vignetting;
        public CameraSettings(CameraSettings settings) { }
        public CameraSettings(CameraSettingsAsset settings, FogGradientController fogGradient) { }
        public CameraSettings(CameraSettingsAsset cameraSettings, UnityEngine.Gradient fogGradient, float range) { }
        public static UnityEngine.Color[] ConvertGradient(UnityEngine.Gradient gradient) { return default(UnityEngine.Color[]); }
    }
    public partial class CameraSettingsAsset : UnityEngine.ScriptableObject
    {
        public BloomAndFlaresSettings BloomAndFlaresSettings;
        public ColorCorrectionSettings ColorCorrection;
        public ContrastSettings Contrast;
        public DesaturationSettings Desaturation;
        public UnityEngine.Color Fog;
        public NoiseSettings Noise;
        public TwirlSettings TwirlSettings;
        public bool UseBloomAndLensFlares;
        public bool UseSeinPostProcessing;
        public VignettingSettings Vignetting;
        public CameraSettingsAsset() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraSettingsZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<CameraSettingsZone> All;
        public float AnimatedStrength;
        public float BottomPadding;
        public Condition Condition;
        public float Duration;
        public UnityEngine.Gradient FogGradient;
        public UnityEngine.Gradient FogGradient2;
        public float FogRange;
        public float FogRange2;
        public CameraSettingsZone.Direction GradientDirection;
        public float LeftPadding;
        private UnityEngine.Rect m_area;
        private bool m_isActive;
        private CameraSettings m_settings;
        private float m_strength;
        public CameraSettingsZone.ZoneMode Mode;
        public int Priority;
        public float RightPadding;
        public CameraSettingsAsset Settings;
        public CameraSettingsAsset Settings2;
        public float TopPadding;
        public CameraSettingsZone() { }
        public float Strength { get { return default(float); } }
        private static void .cctor() { }
        public void Advance(UnityEngine.Vector2 position, float timeDelta) { }
        public float CalculateStrengthFromPosition(UnityEngine.Vector2 position) { return default(float); }
        public CameraSettings GetSettings() { return default(CameraSettings); }
        public void OnDisable() { }
        public void OnEnable() { }
        private void Register() { }
        public enum Direction
        {
            Horizontal = 0,
            Vertical = 1,
        }
        public enum ZoneMode
        {
            Gradient = 1,
            Single = 0,
        }
    }
    public partial class CameraSettingsZoneAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        public CameraSettingsZone CameraSettingsZone;
        public CameraSettingsZoneAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraShake : BaseAnimator
    {
        public bool AffectedByDistance;
        public static AllContainer<CameraShake> All;
        public float ImpactRadius;
        private float m_time;
        public CameraShakeAsset Shake;
        public float ShakeObjectSize;
        public bool ShakeOnlyIfVisibleToCamera;
        public float Strength;
        public CameraShake() { }
        public UnityEngine.Vector3 CurrentOffset { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector3 CurrentRotation { get { return default(UnityEngine.Vector3); } }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public float ModifiedStrength { get { return default(float); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        private static void .cctor() { }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public override void OnPoolSpawned() { }
        public void PerformTheShake() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [CategoryAttribute("Camera")]
    public partial class CameraShakeAction : ActionMethod
    {
        public CameraShake ShakeCamera;
        public CameraShakeAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class CameraShakeAsset : UnityEngine.ScriptableObject
    {
        private float m_duration;
        public UnityEngine.AnimationCurve PositionX;
        public UnityEngine.AnimationCurve PositionY;
        public UnityEngine.AnimationCurve PositionZ;
        public UnityEngine.AnimationCurve RotationX;
        public UnityEngine.AnimationCurve RotationY;
        public UnityEngine.AnimationCurve RotationZ;
        public CameraShakeAsset() { }
        public float Duration { get { return default(float); } }
    }
    public partial class CameraShakeLogic : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.Transform Target;
        public CameraShakeLogic() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void OnDestroy() { }
        public void UpdateOffset() { }
    }
    public partial class CameraSizeConstraint : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Camera Camera;
        public UnityEngine.Transform CameraOffset;
        public float FixedWidth;
        public CameraSizeConstraint() { }
        private void Start() { }
    }
    public partial class CameraStraightLineMotion : UnityEngine.MonoBehaviour
    {
        private float m_duration;
        private UnityEngine.Vector3 m_endPosition;
        private UnityEngine.Rigidbody m_rigidbody;
        private UnityEngine.Vector3 m_startPosition;
        private float m_time;
        private UnityEngine.Transform m_transform;
        private System.Action OnMotionFinishedEvent;
        public UnityEngine.AnimationCurve SmoothingCurve;
        public CameraStraightLineMotion() { }
        public UnityEngine.Vector3 EndPosition { get { return default(UnityEngine.Vector3); } set { } }
        public event System.Action OnMotionFinishedEvent { add { } remove { } }
        private void Awake() { }
        public void MoveToTarget(UnityEngine.Vector3 target, float duration) { }
        public void UpdateMotion() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraSystem : UnityEngine.MonoBehaviour
    {
        public CameraCrossFadeManager CrossFadeManager;
        [UnityEngine.HideInInspector]
        public GUICamera GUICamera;
        public UberPostProcessingCrossFade UberPostProcessingCrossFade;
        public CameraSystem() { }
        public void Awake() { }
    }
    public partial class CameraTarget
    {
        public GameplayCamera GameplayCamera;
        private readonly System.Collections.Generic.List<CameraTarget.TargetLayer> m_targetLayers;
        public UnityEngine.Vector3 TargetPosition;
        public CameraTarget(GameplayCamera gameplayGameplayCamera) { }
        public CameraTarget.TargetLayer BaseTargetLayer { get { return default(CameraTarget.TargetLayer); } }
        public CameraTarget.TargetLayer AddTargetLayer(UnityEngine.Transform target, float weight, bool followX, bool followY, bool followZ) { return default(CameraTarget.TargetLayer); }
        public void RemoveTargetLayer(CameraTarget.TargetLayer targetLayer) { }
        public void SetTargetPosition(UnityEngine.Vector3 position) { }
        public void UpdateTargetPosition() { }
        public partial class TargetLayer
        {
            public bool FollowTargetX;
            public bool FollowTargetY;
            public bool FollowTargetZ;
            public UnityEngine.Transform Transform;
            public float Weight;
            public TargetLayer() { }
        }
    }
    public partial class CameraTransformMetaDataDrivenAnimator : LegacyAnimator
    {
        public AnimationMetaData AnimationMetaData;
        public CameraTransformMetaDataDrivenAnimator() { }
        protected override void AnimateIt(float value) { }
        public int GetFrameAtTime(float index) { return default(int); }
        public override void RestoreToOriginalState() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CameraWideScreenZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<CameraWideScreenZone> All;
        public float BottomMargin;
        public float Duration;
        public float LeftMargin;
        private bool m_added;
        private float m_strength;
        public float RightMargin;
        public float TopMargin;
        public WideScreenAdjustmentSettings WideScreenAdjustment;
        public CameraWideScreenZone() { }
        public float Strength { get { return default(float); } }
        private static void .cctor() { }
        public float NormalizedMarginPenetration(UnityEngine.Vector3 worldPosition) { return default(float); }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void UpdateOffset(float dt, UnityEngine.Vector3 worldPosition) { }
    }
    public partial class CancelDifficultyScreenAction : ActionMethod
    {
        public CancelDifficultyScreenAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class CanChangeDifficultyCondition : Condition
    {
        public CanChangeDifficultyCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class CanSkipCutsceneCondition : Condition
    {
        public CanSkipCutsceneCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class CanViewProfilesCondition : Condition
    {
        public CanViewProfilesCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class CapsuleCrushDetector : CharacterState, ISeinReceiver
    {
        public SeinCharacter Sein;
        public CapsuleCrushDetector() { }
        public PlatformBehaviour PlatformBehaviour { get { return default(PlatformBehaviour); } }
        private void OnTrigger(UnityEngine.Collider collider) { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
    }
    public partial class CapsuleShapeCopier : UnityEngine.MonoBehaviour
    {
        public UnityEngine.CapsuleCollider CapsuleTarget;
        private UnityEngine.CapsuleCollider m_capsuleCollider;
        private UnityEngine.Vector3 m_oldCenter;
        private float m_oldHeight;
        private float m_oldRadius;
        public float ShrinkDistance;
        public CapsuleShapeCopier() { }
        private void Awake() { }
        private void FixedUpdate() { }
    }
    public partial class CarryableDamageReciever : UnityEngine.MonoBehaviour, IDamageReciever
    {
        private CarryableRigidBody m_carryable;
        private readonly System.Collections.Generic.HashSet<DamageType> m_damageTypes;
        public CarryableDamageReciever() { }
        public void Awake() { }
        public void OnRecieveDamage(Damage damage) { }
    }
    public partial class CarryablePickedUpTrigger : Trigger
    {
        public CarryablePickedUpTrigger() { }
        public new void Awake() { }
        public void OnAnyCarryablePickedUpAction() { }
        public new void OnDestroy() { }
    }
    public partial class CarryableRigidBody : SaveSerialize, ICarryable, IDamageReciever
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1A;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1B;
        public Condition CanBeCarriedCondition;
        public SoundSource CarryingSound;
        public UnityEngine.GameObject DeathEffect;
        public bool DestroyOnDamage;
        public float DragOnCollision;
        public bool FreezeWhenOffscreen;
        private AnimationMetaDataDrivenTransform m_animationMetaDataDrivenTransform;
        private bool m_isCarried;
        private MessageBox m_message;
        private UnityEngine.Rigidbody m_rigidbody;
        private float m_timeLastSoundPlayed;
        private float m_timeNotToShowMessage;
        private UnityEngine.Transform m_transform;
        public SoundSource NotCarryingSound;
        private static System.Action OnAnyCarryablePickedUpAction;
        public ActionMethod OnDropAction;
        private System.Action OnDropEvent;
        public Varying2DSoundProvider OnDropSoundProvider;
        public ActionMethod OnHitGroundAction;
        public Varying2DSoundProvider OnHitGroundSoundProvider;
        public ActionMethod OnPickupAction;
        public Varying2DSoundProvider OnPickUpSoundProvider;
        public Varying2DSoundProvider OnPutDownSoundProvider;
        public MessageProvider PickupMessage;
        public UnityEngine.GameObject RespawnEffect;
        public UnityEngine.Vector3 RespawnPosition;
        public CarryableRigidBody() { }
        public bool IsCarried { get { return default(bool); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public static event System.Action OnAnyCarryablePickedUpAction { add { } remove { } }
        public event System.Action OnDropEvent { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAnyCarryablePickedUpAction>m__154() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnDropEvent>m__153() { }
        public new void Awake() { }
        public bool CanBeCarried() { return default(bool); }
        public void Drop() { }
        public void ExplodeAndRespawn() { }
        public void FixedUpdate() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnRecieveDamage(Damage damage) { }
        public void Pickup() { }
        public override void Serialize(Archive ar) { }
        public void SetToCarryMode() { }
        public void SetToDropMode() { }
        public void Start() { }
    }
    public partial class CatAndMouseKuroKillController : UnityEngine.MonoBehaviour
    {
        public SoundProvider FlyKillSound;
        public UnityEngine.GameObject KuroFlyAttack;
        public SoundProvider LandKillSound;
        private CatAndMouseKuroLandZone[] m_zones;
        public CatAndMouseKuroKillController() { }
        public void Attack() { }
        public void Awake() { }
        public void Escaped() { }
    }
    public partial class CatAndMouseKuroLandZone : UnityEngine.MonoBehaviour
    {
        public BaseAnimator Animator;
        public UnityEngine.Rect Bounds;
        public CatAndMouseKuroLandZone() { }
        public void Awake() { }
    }
    public partial class CatAndMouseRoomAController : UnityEngine.MonoBehaviour
    {
        public bool AttackAtSeinPositionX;
        public bool AttackAtSeinPositionY;
        public SoundProvider AttackSoundProvider;
        public SpriteAnimator AttackSpriteAnimator;
        public TextureAnimation AttackTextureAnimation;
        public SoundProvider EscapedSoundProvider;
        public SpriteAnimator EscapedSpriteAnimator;
        public TextureAnimation EscapedTextureAnimation;
        public bool FaceLeftRightBasedOnRoomCenter;
        public TextureAnimation FlyAwayTextureAnimation;
        public float KuroSpriteYOffSet;
        private UnityEngine.Vector3 m_originalLocalScale;
        public UnityEngine.Transform RoomCenter;
        public CatAndMouseRoomAController() { }
        public void Attack() { }
        private void Away() { }
        public void Escaped() { }
        private void Kill() { }
        public void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public void Start() { }
        private void Update() { }
    }
    public partial class CatAndMouseRoomCController : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SoundProvider AttackSoundProvider;
        public BaseAnimator AttackSpriteAnimator;
        public BaseAnimator AttackSpriteSurfaceAnimator;
        public float CenterLayerTime;
        public ActionMethod FinishAction;
        public UnityEngine.Renderer KuroSprite;
        public UnityEngine.Renderer KuroSurfaceSprite;
        private bool m_kuroWillFlyOverSurface;
        private UnityEngine.Vector3 m_originalPosition;
        private bool m_runningSequence;
        private float m_time;
        public float MaxVertical;
        public UnityEngine.Vector3 PositionToCameraOffset;
        public UnityEngine.AnimationCurve PositionToCameraWeightCurve;
        public float SequenceTime;
        public float SurfaceTime;
        public CatAndMouseRoomCController() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Attack() { }
        public void Awake() { }
        public void Escaped() { }
        public void FixedUpdate() { }
        private void Kill() { }
        public void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public void Start() { }
        public void StartSequence() { }
    }
    public partial class CatAndMouseRoomDController : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SoundProvider AttackSoundProvider;
        public BaseAnimator AttackSpriteAnimator;
        public float CenterLayerTime;
        public ActionMethod FinishAction;
        public UnityEngine.Renderer KuroSprite;
        private bool m_escaped;
        private UnityEngine.Vector3 m_originalPosition;
        private UnityEngine.Vector3 m_playerPosition;
        private bool m_runningSequence;
        private float m_time;
        public float MaxPositionEscapedX;
        public float MaxPositionX;
        public UnityEngine.Vector3 PositionToCameraOffset;
        public UnityEngine.AnimationCurve PositionXToCameraWeightCurve;
        public UnityEngine.AnimationCurve PositionXToPlayerWeightCurve;
        public UnityEngine.AnimationCurve PositionYToCameraWeightCurve;
        public float SequenceTime;
        public CatAndMouseRoomDController() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Attack() { }
        public void Awake() { }
        public void Escaped() { }
        public void FixedUpdate() { }
        private void Kill() { }
        public void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public void Start() { }
        public void StartSequence() { }
    }
    public partial class CatAndMouseRoomShadow : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Rect m_bounds;
        public ScaleAnimator ScaleAnimator;
        public CatAndMouseRoomTimerController Timer;
        public TransparencyAnimator TransparencyAnimator;
        public UnityEngine.Transform Zone;
        public CatAndMouseRoomShadow() { }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    public partial class CatAndMouseRoomTimerController : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public TimelineSequence FeedbackSequence;
        public SoundSource KuroAlertSound;
        public SoundSource KuroFlyOffSound;
        public SoundSource KuroGettingNearSound;
        public SoundSource KuroWingFlapSound;
        private bool m_active;
        private const float m_kuroGettingNearLength = 4f;
        private const float m_kuroWingFlapDelay = 1f;
        private float m_time;
        public UnityEngine.GameObject RoomController;
        public float RoomTime;
        public CatAndMouseRoomTimerController() { }
        public bool Active { get { return default(bool); } }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float TimeNormalized { get { return default(float); } }
        public void Enter() { }
        public void Exit() { }
        public void FixedUpdate() { }
        public new void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public void Start() { }
    }
    internal partial class CategoryAttribute : System.Attribute
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private string <Category>k__BackingField;
        public CategoryAttribute() { }
        public CategoryAttribute(string category) { }
        private string Category { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    }
    public partial class CaveSleepController : UnityEngine.MonoBehaviour
    {
        public BabySein BabySein;
        public SpriteAnimator BabySeinSpriteAnimator;
        public float FadeOutDuration;
        public UnityEngine.GameObject Fader;
        public float IntroFadeInDuration;
        public SoundProvider IntroSoundProvider;
        public float LoopFadeInDuration;
        public SoundProvider LoopSoundProvider;
        private float m_introLength;
        public TextureAnimation WakeUpAnimation;
        public CaveSleepController() { }
        public void OnAnimationEnd() { }
        public void OnDestroy() { }
        public void Start() { }
        public void Update() { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Analog TV")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_AnalogTV : CC_Base
    {
        public float cubicDistortion;
        public float distortion;
        public bool grayscale;
        public float noiseIntensity;
        public float phase;
        public float scale;
        public float scanlinesCount;
        public float scanlinesIntensity;
        public CC_AnalogTV() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("")]
    [UnityEngine.RequireComponent(typeof(UnityEngine.Camera))]
    public partial class CC_Base : UnityEngine.MonoBehaviour
    {
        protected UnityEngine.Material _material;
        public UnityEngine.Shader shader;
        public CC_Base() { }
        protected UnityEngine.Material material { get { return default(UnityEngine.Material); } }
        protected virtual void OnDisable() { }
        protected virtual void Start() { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Bleach Bypass")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_BleachBypass : CC_Base
    {
        public float amount;
        public CC_BleachBypass() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Brightness, Contrast, Gamma")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_BrightnessContrastGamma : CC_Base
    {
        public float blueCoeff;
        public float brightness;
        public float contrast;
        public float gamma;
        public float greenCoeff;
        public float redCoeff;
        public CC_BrightnessContrastGamma() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Channel Mixer")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_ChannelMixer : CC_Base
    {
        public float blueB;
        public float blueG;
        public float blueR;
        public float constantB;
        public float constantG;
        public float constantR;
        public float greenB;
        public float greenG;
        public float greenR;
        public float redB;
        public float redG;
        public float redR;
        public CC_ChannelMixer() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Double Vision")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_DoubleVision : CC_Base
    {
        public float amount;
        public UnityEngine.Vector2 displace;
        public CC_DoubleVision() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Fast Vignette")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_FastVignette : CC_Base
    {
        public float darkness;
        public float sharpness;
        public CC_FastVignette() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Frost")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_Frost : CC_Base
    {
        public float darkness;
        public bool enableVignette;
        public float scale;
        public float sharpness;
        public CC_Frost() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Grayscale")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_Grayscale : CC_Base
    {
        public float amount;
        public float blueLuminance;
        public float greenLuminance;
        public float redLuminance;
        public CC_Grayscale() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Hue, Saturation, Value")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_HueSaturationValue : CC_Base
    {
        public float hue;
        public float saturation;
        public float value;
        public CC_HueSaturationValue() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/LED")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_Led : CC_Base
    {
        public float brightness;
        public float scale;
        public CC_Led() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Levels")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_Levels : CC_Base
    {
        public float inputGammaB;
        public float inputGammaG;
        public float inputGammaL;
        public float inputGammaR;
        public float inputMaxB;
        public float inputMaxG;
        public float inputMaxL;
        public float inputMaxR;
        public float inputMinB;
        public float inputMinG;
        public float inputMinL;
        public float inputMinR;
        public int mode;
        public float outputMaxB;
        public float outputMaxG;
        public float outputMaxL;
        public float outputMaxR;
        public float outputMinB;
        public float outputMinG;
        public float outputMinL;
        public float outputMinR;
        public CC_Levels() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Photo Filter")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_PhotoFilter : CC_Base
    {
        public UnityEngine.Color color;
        public float density;
        public CC_PhotoFilter() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Pixelate")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_Pixelate : CC_Base
    {
        public float scale;
        public CC_Pixelate() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Posterize")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_Posterize : CC_Base
    {
        public int levels;
        public CC_Posterize() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Radial Blur")]
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.Camera))]
    public partial class CC_RadialBlur : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Shader _currentShader;
        private UnityEngine.Material _material;
        public float amount;
        public UnityEngine.Vector2 center;
        public int quality;
        public UnityEngine.Shader shaderHigh;
        public UnityEngine.Shader shaderLow;
        public UnityEngine.Shader shaderMed;
        public CC_RadialBlur() { }
        private UnityEngine.Material material { get { return default(UnityEngine.Material); } }
        private bool CheckShader() { return default(bool); }
        private void OnDisable() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
        private void Start() { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Threshold")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_Threshold : CC_Base
    {
        public float threshold;
        public CC_Threshold() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    [UnityEngine.AddComponentMenu("Colorful/Vibrance")]
    [UnityEngine.ExecuteInEditMode]
    public partial class CC_Vibrance : CC_Base
    {
        public float amount;
        public CC_Vibrance() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
    }
    public static partial class CCDistanceMapGenerator
    {
        private static int height;
        private static CCDistanceMapGenerator.Pixel[,] pixels;
        private static int width;
        private static float ApproximateEdgeDelta(float gx, float gy, float a) { return default(float); }
        private static void ComputeEdgeGradients() { }
        public static void Generate(UnityEngine.Texture2D source, UnityEngine.Texture2D destination, float maxInside, float maxOutside, float postProcessDistance, CCDistanceMapGenerator.RGBMode rgbMode) { }
        private static void GenerateDistanceTransform() { }
        private static void PostProcess(float maxDistance) { }
        private static void UpdateDistance(CCDistanceMapGenerator.Pixel p, int x, int y, int oX, int oY) { }
        private partial class Pixel
        {
            public float alpha;
            public float distance;
            public int dX;
            public int dY;
            public UnityEngine.Vector2 gradient;
            public Pixel() { }
        }
        public enum RGBMode
        {
            Black = 1,
            Distance = 2,
            Source = 3,
            White = 0,
        }
    }
    public sealed partial class CCFont : UnityEngine.ScriptableObject
    {
        public CCFont.Char[] asciiChars;
        public float baseline;
        public float bottomMargin;
        public float leftMargin;
        private CCFont.Char missing;
        public CCFont.Char[] otherChars;
        public int pixelLineHeight;
        public float pixelScale;
        public float rightMargin;
        public float spaceAdvance;
        public bool supportsKerning;
        public float topMargin;
        private CCFont() { }
        public bool IsValid { get { return default(bool); } }
        public CCFont.Char this[char c] { get { return default(CCFont.Char); } }
        public void UpdateAllCCText() { }
        public partial class Char
        {
            public float advance;
            public float height;
            public int id;
            public int[] kerningIds;
            public float[] kernings;
            public float uMax;
            public float uMin;
            public float vMax;
            public float vMin;
            public float width;
            public float xOffset;
            public float yOffset;
            public Char() { }
            public float AdvanceWithKerning(char nextChar) { return default(float); }
        }
    }
    public sealed partial class CCGradient : UnityEngine.ScriptableObject
    {
        [UnityEngine.SerializeField]
        private UnityEngine.Color[] colors;
        public CCGradient.InterpolationMode interpolation;
        [UnityEngine.SerializeField]
        private float[] positions;
        public CCGradient.WrapMode wrap;
        private CCGradient() { }
        public UnityEngine.Color this[float p] { get { return default(UnityEngine.Color); } }
        private void OnEnable() { }
        public void WriteToTexture(float minimum, float maximum, UnityEngine.Texture2D texture) { }
        public enum InterpolationMode
        {
            Linear = 0,
            Smooth = 1,
        }
        public enum WrapMode
        {
            Clamp = 0,
            Flip = 2,
            Repeat = 1,
        }
    }
    public partial class CCMoonTextColorer : CCTextModifier
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Color[] <Colors>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Count>k__BackingField;
        public UnityEngine.AnimationCurve OpacityCurve;
        public UnityEngine.AnimationCurve ScaleCurve;
        public CCMoonTextColorer() { }
        public UnityEngine.Color[] Colors { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Color[]); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float Count { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Modify(CCText text) { }
    }
    public static partial class CCStringBuilderUtility
    {
        public static char decimalSeparator;
        public static char groupSeparator;
        public static char padding;
        private static void .cctor() { }
        public static void AppendFloat(System.Text.StringBuilder s, float number, int decimalCount) { }
        public static void AppendFloat(System.Text.StringBuilder s, float number, int decimalCount, int digitCount) { }
        public static void AppendFloatGrouped(System.Text.StringBuilder s, float number, int decimalCount) { }
        public static void AppendFloatGrouped(System.Text.StringBuilder s, float number, int decimalCount, int digitCount) { }
        public static void AppendInt(System.Text.StringBuilder s, int number) { }
        public static void AppendInt(System.Text.StringBuilder s, int number, int digitCount) { }
        public static void AppendIntGrouped(System.Text.StringBuilder s, int number) { }
        public static void AppendIntGrouped(System.Text.StringBuilder s, int number, int digitCount) { }
        public static void Reverse(System.Text.StringBuilder s, int firstIndex, int lastIndex) { }
    }
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.MeshFilter), typeof(UnityEngine.MeshRenderer))]
    public sealed partial class CCText : UnityEngine.MonoBehaviour
    {
        [UnityEngine.SerializeField]
        private CCText.AlignmentMode alignment;
        [UnityEngine.SerializeField]
        private CCText.BoundingMode bounding;
        [UnityEngine.SerializeField]
        private UnityEngine.Vector3 caretStart;
        [UnityEngine.SerializeField]
        private int chunkSize;
        [UnityEngine.SerializeField]
        private UnityEngine.Color color;
        public UnityEngine.Color[] colors;
        [UnityEngine.SerializeField]
        private CCFont font;
        [UnityEngine.SerializeField]
        private CCText.HorizontalAnchorMode horizontalAnchor;
        private int lineCount;
        [UnityEngine.SerializeField]
        private float lineHeight;
        private float lineWidth;
        public UnityEngine.Vector3 maxBounds;
        public UnityEngine.Mesh mesh;
        private UnityEngine.MeshCollider meshCollider;
        public UnityEngine.Vector3 minBounds;
        [UnityEngine.SerializeField]
        private CCTextModifier modifier;
        [UnityEngine.SerializeField]
        private UnityEngine.Vector3 offset;
        private int spriteCount;
        [UnityEngine.SerializeField]
        private float tabSize;
        [UnityEngine.SerializeField]
        private string text;
        public int[] triangles;
        private int usedSpriteCount;
        public UnityEngine.Vector2[] uv;
        [UnityEngine.SerializeField]
        private CCText.VerticalAnchorMode verticalAnchor;
        public UnityEngine.Vector3[] vertices;
        [UnityEngine.SerializeField]
        private float width;
        private static UnityEngine.Vector3 zeroVector3;
        public CCText() { }
        public CCText.AlignmentMode Alignment { get { return default(CCText.AlignmentMode); } set { } }
        public CCText.BoundingMode Bounding { get { return default(CCText.BoundingMode); } set { } }
        public UnityEngine.Vector3 CaretMaxBounds { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector3 CaretMinBounds { get { return default(UnityEngine.Vector3); } }
        public int ChunkSize { get { return default(int); } set { } }
        public UnityEngine.Color Color { get { return default(UnityEngine.Color); } set { } }
        public CCFont Font { get { return default(CCFont); } set { } }
        public CCText.HorizontalAnchorMode HorizontalAnchor { get { return default(CCText.HorizontalAnchorMode); } set { } }
        public char this[int index] { get { return default(char); } }
        public int Length { get { return default(int); } }
        public int LineCount { get { return default(int); } }
        public float LineHeight { get { return default(float); } set { } }
        public float LineWidth { get { return default(float); } }
        public CCTextModifier Modifier { get { return default(CCTextModifier); } set { } }
        public UnityEngine.Vector3 Offset { get { return default(UnityEngine.Vector3); } set { } }
        public int SpriteCount { get { return default(int); } }
        public float TabSize { get { return default(float); } set { } }
        public string Text { get { return default(string); } set { } }
        public int UsedSpriteCount { get { return default(int); } }
        public CCText.VerticalAnchorMode VerticalAnchor { get { return default(CCText.VerticalAnchorMode); } set { } }
        public float Width { get { return default(float); } set { } }
        private static void .cctor() { }
        private void AddSprites(int newSpriteCount) { }
        private void AddSpritesFromString(int i) { }
        private void AlignCharsCenterOrRight() { }
        private void Awake() { }
        private void HideSprites(int i) { }
        public int HitCharacterIndex(UnityEngine.RaycastHit hit) { return default(int); }
        private void JustifyChars() { }
        private void JustifyLine(int first, int last) { }
        private void OnDestroy() { }
        public void ResetColors() { }
        private void Start() { }
        public int TriangleToCharacterIndex(int triangleIndex) { return default(int); }
        private void UpdateFromString() { }
        private void UpdateSprite(CCFont.Char c, int index, UnityEngine.Vector3 position) { }
        public void UpdateText() { }
        private bool WordWrapFromString(int textIndex, int vertexIndex, ref UnityEngine.Vector3 caret) { return default(bool); }
        public enum AlignmentMode
        {
            Center = 1,
            Justify = 3,
            Left = 0,
            Right = 2,
        }
        public enum BoundingMode
        {
            Caret = 0,
            Margin = 1,
        }
        public enum HorizontalAnchorMode
        {
            Center = 1,
            Left = 0,
            Right = 2,
        }
        public enum VerticalAnchorMode
        {
            Baseline = 3,
            Bottom = 2,
            Middle = 1,
            Top = 0,
        }
    }
    public sealed partial class CCTextCylinderWrapper : CCTextModifier
    {
        private static UnityEngine.Vector3 notMaximum;
        private static UnityEngine.Vector3 notMinimum;
        public float radius;
        public CCTextCylinderWrapper.WrapMode wrapMode;
        public CCTextCylinderWrapper() { }
        private static void .cctor() { }
        public override void Modify(CCText text) { }
        private void WrapX(CCText text) { }
        private void WrapY(CCText text) { }
        public enum WrapMode
        {
            X = 0,
            Y = 1,
        }
    }
    public sealed partial class CCTextMarkedColorer : CCTextModifier
    {
        public string beginSymbol;
        public UnityEngine.Color color;
        public string endSymbol;
        public CCTextMarkedColorer() { }
        public override void Modify(CCText text) { }
    }
    public abstract partial class CCTextModifier : UnityEngine.MonoBehaviour
    {
        protected CCTextModifier() { }
        public abstract void Modify(CCText text);
        public void UpdateAllCCText() { }
    }
    public sealed partial class CCTextRangeColorer : CCTextModifier
    {
        public UnityEngine.Color color;
        public string rangeBeginSymbol;
        public string rangeEndSymbol;
        public CCTextRangeColorer() { }
        public override void Modify(CCText text) { }
    }
    public sealed partial class CCTextTorusWrapper : CCTextModifier
    {
        public float majorRadius;
        public float minorRadius;
        private static UnityEngine.Vector3 notMaximum;
        private static UnityEngine.Vector3 notMinimum;
        public CCTextTorusWrapper.RevolveMode revolveMode;
        public CCTextTorusWrapper() { }
        private static void .cctor() { }
        public override void Modify(CCText text) { }
        private void RevolveX(CCText text) { }
        private void RevolveY(CCText text) { }
        public enum RevolveMode
        {
            X = 0,
            Y = 1,
        }
    }
    public sealed partial class CCTextVerticalColorer : CCTextModifier
    {
        public UnityEngine.Color bottomColor;
        public UnityEngine.Color topColor;
        public CCTextVerticalColorer() { }
        public override void Modify(CCText text) { }
    }
    public partial class Challenge
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private string <Description>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private string <Name>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Started>k__BackingField;
        public Challenge(string name, string description, bool started) { }
        public string Description { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
        public string Name { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
        public bool Started { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
        public override string ToString() { return default(string); }
    }
    public partial class ChallengesUI : UnityEngine.MonoBehaviour
    {
        private static ChallengesUI s_instance;
        public ChallengesUI() { }
        private static ChallengesUI Instance { get { return default(ChallengesUI); } }
        private static UnityEngine.Rect PushDown(ref UnityEngine.Rect rect, float offset) { return default(UnityEngine.Rect); }
    }
    [CategoryAttribute("Obsolete")]
    public partial class ChangeAmbientMusicAction : ActionMethod
    {
        public AudioProperties AmbientMusicProperties;
        public ChangeAmbientMusicAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Cutscene")]
    public partial class ChangeCutsceneStateAction : ActionMethod
    {
        [NotNull]
        public CutsceneController Cutscene;
        public CutsceneState State;
        public ChangeCutsceneStateAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ChangeDetector<T> where T : System.IComparable
    {
        public T RecentValue;
        public ChangeDetector() { }
        public bool CheckValueChanged(T t) { return default(bool); }
    }
    public partial class ChangeDetectorFloat
    {
        public float RecentValue;
        public ChangeDetectorFloat() { }
        public bool CheckValueChanged(float t) { return default(bool); }
    }
    public partial class ChangeDifficultyAction : ActionMethod
    {
        public DifficultyMode Difficulty;
        public ChangeDifficultyAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class ChangeDifficultyScreen : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject ConfirmScreen;
        public MessageProvider Easy;
        public MessageProvider Hard;
        public static ChangeDifficultyScreen Instance;
        private DifficultyMode m_selectedDifficulty;
        public MessageProvider Message;
        public MessageProvider Normal;
        public MessageProvider OneLife;
        public ChangeDifficultyScreen() { }
        public void Awake() { }
        public void Confirm() { }
        public string DifficultyToText(DifficultyMode mode) { return default(string); }
        public void OnDestroy() { }
        public void SetDifficulty(DifficultyMode difficulty) { }
    }
    [CategoryAttribute("Lever")]
    public partial class ChangeLeverDirectionAction : ActionWithDuration
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Duration>k__BackingField;
        [NotNull]
        public Lever Lever;
        public Lever.LeverDirections NewLeverDirection;
        public ChangeLeverDirectionAction() { }
        public override float Duration { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CategoryAttribute("General")]
    public partial class ChangePropertyAction : ActionMethod
    {
        public bool BoolValue;
        public string ComponentName;
        public float FloatValue;
        public int IntValue;
        public string Name;
        public string StringValue;
        public System.Collections.Generic.List<UnityEngine.GameObject> Targets;
        public ChangePropertyAction.PropertyTypes Type;
        public UnityEngine.Vector3 Vector3Value;
        public ChangePropertyAction() { }
        public override void Perform(IContext context) { }
        public enum PropertyTypes
        {
            Bool = 3,
            Float = 1,
            Int = 0,
            String = 2,
            Vector3 = 4,
        }
    }
    [CategoryAttribute("Obsolete")]
    public partial class ChangeScrollLockFaderAction : ActionMethod
    {
        public CameraScrollLock ScrollLock;
        public UnityEngine.GameObject ScrollLockFader;
        public ChangeScrollLockFaderAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ChangeSoundProviderInMetaDataSoundPlayerAction : ActionMethod
    {
        public AnimationMetaDataBasedSoundPlayer MetaDataBasedSoundPlayer;
        public System.Collections.Generic.List<NodeSoundPlayerPair> NodeSoundPlayerPair;
        public bool ShouldUseSeinsMetaDataBasedSoundPlayer;
        public ChangeSoundProviderInMetaDataSoundPlayerAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Camera")]
    public partial class ChangeTargetToCurrentCharacterAction : ActionMethod
    {
        public ChangeTargetToCurrentCharacterAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class ChangeWorldMapIconAction : ActionMethod
    {
        public WorldMapIconType Icon;
        [NotNull]
        public VisibleOnWorldMap Target;
        public ChangeWorldMapIconAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class CharacterAbility
    {
        public bool HasAbility;
        public CharacterAbility() { }
        public static explicit operator bool (CharacterAbility characterAbility) { return default(bool); }
    }
    public partial class CharacterAirNoDeceleration : CharacterState
    {
        private bool m_noDeceleration;
        public PlatformBehaviour PlatformBehaviour;
        public CharacterAirNoDeceleration() { }
        public CharacterLeftRightMovement CharacterLeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public bool NoDeceleration { get { return default(bool); } set { } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public new void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class CharacterAnimationController : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public CharacterAnimationStateBase CurrentState;
        private bool m_wasFacingLeft;
        public SpriteAnimatorWithTransitions SpriteAnimator;
        public CharacterSpriteMirror SpriteMirror;
        public System.Collections.Generic.List<CharacterAnimationStateBase> States;
        public CharacterAnimationController() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void ChangeState(CharacterAnimationStateBase state) { }
        public void FixedUpdate() { }
        public void OnAnimationEnd(TextureAnimation animation) { }
        public new void OnDestroy() { }
        public void ResetState() { }
        public void Start() { }
    }
    public abstract partial class CharacterAnimationState : CharacterAnimationStateBase
    {
        public TextureAnimationWithTransitions Animation;
        protected CharacterAnimationState() { }
        public override TextureAnimationWithTransitions AnimationToPlay { get { return default(TextureAnimationWithTransitions); } }
    }
    public abstract partial class CharacterAnimationStateBase : UnityEngine.MonoBehaviour
    {
        protected CharacterAnimationStateBase() { }
        public abstract TextureAnimationWithTransitions AnimationToPlay { get; }
        public abstract bool CanEnter { get; }
        public virtual void OnAnimationEnd(TextureAnimation animation) { }
        public virtual void OnEnter() { }
        public virtual void OnExit() { }
    }
    public partial class CharacterAnimationSystem : UnityEngine.MonoBehaviour
    {
        public SpriteAnimatorWithTransitions Animator;
        public float m_flipTime;
        private CharacterAnimationSystem.CharacterAnimationState m_lastPlayingAnimationState;
        private readonly System.Collections.Generic.List<CharacterAnimationSystem.CharacterAnimationState> m_states;
        private bool m_wasFacingLeft;
        public CharacterSpriteMirror SpriteMirror;
        public CharacterAnimationSystem() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnAnimationEnd(TextureAnimation animation) { }
        public void OnDestroy() { }
        public CharacterAnimationSystem.CharacterAnimationState Play(TextureAnimationWithTransitions animationToPlay, int layer=0, System.Func<bool> condition=null) { return default(CharacterAnimationSystem.CharacterAnimationState); }
        public CharacterAnimationSystem.CharacterAnimationState PlayLoop(TextureAnimationWithTransitions animationToPlay, int layer=0, System.Func<bool> condition=null, bool keepFrame=false) { return default(CharacterAnimationSystem.CharacterAnimationState); }
        public CharacterAnimationSystem.CharacterAnimationState PlayLoopRandom(TextureAnimationWithTransitions[] animationsToPlay, int layer, System.Func<bool> condition) { return default(CharacterAnimationSystem.CharacterAnimationState); }
        public CharacterAnimationSystem.CharacterAnimationState PlayRandom(TextureAnimationWithTransitions[] animationsToPlay, int layer, System.Func<bool> condition) { return default(CharacterAnimationSystem.CharacterAnimationState); }
        public CharacterAnimationSystem.CharacterAnimationState RestartLoop(TextureAnimationWithTransitions animationToPlay, int layer=0, System.Func<bool> condition=null) { return default(CharacterAnimationSystem.CharacterAnimationState); }
        public void Start() { }
        public void UpdateStates() { }
        public partial class CharacterAnimationState
        {
            public TextureAnimationWithTransitions Animation;
            public System.Func<bool> ConditionFunction;
            public bool KeepFrame;
            public int Layer;
            public System.Action OnStartPlaying;
            public System.Action OnStopPlaying;
            public bool PlayOnce;
            public CharacterAnimationState() { }
            public bool Condition { get { return default(bool); } }
        }
    }
    public partial class CharacterApplyFrictionToSpeed : CharacterState
    {
        public PlatformBehaviour PlatformBehaviour;
        public float SpeedFactor;
        public UnityEngine.Vector3 SpeedToSlowDown;
        public CharacterApplyFrictionToSpeed() { }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class CharacterCapsuleController : SaveSerialize
    {
        public UnityEngine.CapsuleCollider CapsuleCollider;
        public UnityEngine.CapsuleCollider CrushCollider;
        public UnityEngine.Vector3 OriginalCenter;
        public float OriginalHeight;
        public float OriginalRadius;
        public PlatformBehaviour PlatformBehaviour;
        public CharacterCapsuleController() { }
        public bool CanBecomeOriginalCapsule { get { return default(bool); } }
        public bool CanBecomeCapsule(float radius, float height, UnityEngine.Vector3 center) { return default(bool); }
        public void ChangeHeightBottom(float height) { }
        public void ChangeHeightTop(float height) { }
        public void ChangeToSphere() { }
        public void EnableCollider(bool enable) { }
        public void Restore() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class CharacterData : IFrameData
    {
        public UnityEngine.Vector3 Position;
        public UnityEngine.Vector2 Velocity;
        public CharacterData() { }
        public CharacterData(System.IO.BinaryReader binaryReader) { }
        public static PlatformBehaviour CurrentPlatformBehaviour { get { return default(PlatformBehaviour); } }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    public partial class CharacterFactory : SaveSerialize
    {
        public CharacterFactory.Characters Current;
        public static CharacterFactory Instance;
        private CharacterFactory.Characters m_nextCharacter;
        private bool m_nextCharacterSet;
        public CharacterFactory() { }
        public override void Awake() { }
        public void DestroyCharacter() { }
        private UnityEngine.GameObject GetCharacterPrefab(CharacterFactory.Characters character) { return default(UnityEngine.GameObject); }
        public override void OnDestroy() { }
        public void OnSceneRootPreEnabled(SceneRoot sceneRoot) { }
        public override void Serialize(Archive ar) { }
        public UnityEngine.GameObject SpawnCharacter(CharacterFactory.Characters character, UnityEngine.GameObject prefab, UnityEngine.Vector3 position, System.Action afterLoad) { return default(UnityEngine.GameObject); }
        public enum Characters
        {
            BabySein = 2,
            BabySeinWithBerries = 3,
            Naru = 4,
            NaruSadWalk = 6,
            NaruWithSein = 5,
            None = 7,
            Sein = 0,
            SpiritTreeCutsceneSein = 1,
        }
    }
    public partial class CharacterGlow : UnityEngine.MonoBehaviour
    {
        public TransparencyAnimator Animator;
        private UnityEngine.Vector3 m_localPosition;
        private UnityEngine.Quaternion m_localRotation;
        private UnityEngine.Transform m_parent;
        public UnityEngine.Renderer Renderer;
        public CharacterGlow() { }
        public void FixedUpdate() { }
        public void Start() { }
    }
    public partial class CharacterGravity : CharacterState
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<GravityPlatformMovementSettings> <>f__am$cache4;
        private readonly GravityPlatformMovementSettings m_settings;
        private System.Action<GravityPlatformMovementSettings> ModifyGravityPlatformMovementSettingsEvent;
        public PlatformBehaviour PlatformBehaviour;
        public GravityPlatformMovementSettings Settings;
        public CharacterGravity() { }
        public GravityPlatformMovementSettings BaseSettings { get { return default(GravityPlatformMovementSettings); } }
        public GravityPlatformMovementSettings CurrentSettings { get { return default(GravityPlatformMovementSettings); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public event System.Action<GravityPlatformMovementSettings> ModifyGravityPlatformMovementSettingsEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <ModifyGravityPlatformMovementSettingsEvent>m__38(GravityPlatformMovementSettings ) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public override void UpdateCharacterState() { }
        public void UpdateSettings() { }
    }
    public partial class CharacterGravityToGround : CharacterState
    {
        private GravityToGroundSurface m_gravityToGroundSurface;
        private UnityEngine.Collider m_groundCollider;
        public PlatformBehaviour PlatformBehaviour;
        public CharacterGravityToGround() { }
        public CharacterGravity CharacterGravity { get { return default(CharacterGravity); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class CharacterInstantStop : CharacterState
    {
        private float m_lockTimeRemaining;
        public PlatformBehaviour PlatformBehaviour;
        public CharacterInstantStop() { }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void LockForDuration(float duration) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class CharacterJumpSustain : CharacterState
    {
        public float JumpStopDeceleration;
        public float JumpStopDecelerationMultiplier;
        private float m_amountOfSpeedToLose;
        public PlatformBehaviour PlatformBehaviour;
        public CharacterJumpSustain() { }
        public CharacterGravity CharacterGravity { get { return default(CharacterGravity); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public new void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void SetAmountOfSpeedToLose(float speed, float jumpStopDecelerationMultiplier=1) { }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    [UnityEngine.RequireComponent(typeof(PlatformMovement))]
    public partial class CharacterLeftRightMovement : CharacterState
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<HorizontalPlatformMovementSettings> <>f__am$cache6;
        private float m_horizontalInput;
        private readonly HorizontalPlatformMovementSettings m_settings;
        private System.Action<HorizontalPlatformMovementSettings> ModifyHorizontalPlatformMovementSettingsEvent;
        public PlatformBehaviour PlatformBehaviour;
        public HorizontalPlatformMovementSettings Settings;
        public bool UpdateFacingDirection;
        public CharacterLeftRightMovement() { }
        public float BaseHorizontalInput { get { return default(float); } set { } }
        public HorizontalPlatformMovementSettings BaseSettings { get { return default(HorizontalPlatformMovementSettings); } }
        public HorizontalPlatformMovementSettings CurrentSettings { get { return default(HorizontalPlatformMovementSettings); } }
        public float HorizontalInput { get { return default(float); } set { } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public HorizontalPlatformMovementSettings.SpeedSet SpeedSet { get { return default(HorizontalPlatformMovementSettings.SpeedSet); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public event System.Action<HorizontalPlatformMovementSettings> ModifyHorizontalPlatformMovementSettingsEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <ModifyHorizontalPlatformMovementSettingsEvent>m__39(HorizontalPlatformMovementSettings ) { }
        public void FixedUpdate() { }
        public void ReverseHorizontalMovement() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void UpdateSettings() { }
    }
    public partial class CharacterPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        public CharacterPlugin() { }
        public void Awake() { }
        public void Exit() { }
        public static System.Collections.Generic.List<UnityEngine.Vector3> ExtractDataFromRecorder(RecorderData recorderData) { return default(System.Collections.Generic.List<UnityEngine.Vector3>); }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
    }
    public partial class CharacterSpriteMirror : CharacterState
    {
        private bool m_faceLeft;
        private int m_lock;
        public bool StartFacingLeft;
        public CharacterSpriteMirror() { }
        public bool FaceLeft { get { return default(bool); } set { } }
        public int Lock { get { return default(int); } set { } }
        public override void Awake() { }
        public override void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public override void Serialize(Archive ar) { }
        public void UpdateMaterial() { }
    }
    public abstract partial class CharacterState : SaveSerialize
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache3;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache4;
        private bool m_active;
        private System.Action OnEnterEvent;
        private System.Action OnExitEvent;
        protected CharacterState() { }
        public bool Active { get { return default(bool); } set { } }
        public event System.Action OnEnterEvent { add { } remove { } }
        public event System.Action OnExitEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnEnterEvent>m__2() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnExitEvent>m__3() { }
        public static void Activate(CharacterState state) { }
        public static void Activate(CharacterState state, bool active) { }
        public static void Deactivate(CharacterState state) { }
        public virtual void Enter() { }
        public virtual void Exit() { }
        public static bool IsActive(CharacterState state) { return default(bool); }
        public virtual void OnEnter() { }
        public virtual void OnExit() { }
        public override void Serialize(Archive ar) { }
        public virtual void UpdateCharacterState() { }
        public static void UpdateCharacterState(CharacterState state) { }
    }
    public static partial class CharacterStateExtension
    {
        public static void SetStateActive(this CharacterState state, bool active) { }
    }
    public partial class CharacterUpwardsDeceleration : CharacterState
    {
        public float Deceleration;
        public PlatformBehaviour PlatformBehaviour;
        public CharacterUpwardsDeceleration() { }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void Reset() { }
        public override void Serialize(Archive ar) { }
        public override void UpdateCharacterState() { }
    }
    public partial class CharacterVisuals
    {
        public CharacterAnimationSystem Animation;
        public UnityEngine.GameObject Sprite;
        public CharacterSpriteMirror SpriteMirror;
        public UnityEngine.Renderer SpriteRenderer;
        public SeinSpriteRotationController SpriteRotater;
        public CharacterVisuals() { }
    }
    public partial class ChargeFlameBurst : UnityEngine.MonoBehaviour, IPooled, ISuspendable
    {
        public UnityEngine.GameObject BurstImpactEffectPrefab;
        public float BurstRadius;
        public float DamageAmount;
        public float DealDamageDuration;
        private readonly System.Collections.Generic.HashSet<IAttackable> m_damageAttackables;
        private static ChargeFlameBurst m_lastInstance;
        private int m_simultaneousEnemies;
        private bool m_suspended;
        private float m_time;
        private float m_waitDelay;
        public ChargeFlameBurst() { }
        public bool IsSuspended { get { return default(bool); } set { } }
        public void Awake() { }
        public void DealDamage() { }
        public void FixedUpdate() { }
        public static void IgnoreOnLastInstance(IAttackable attackable) { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnPoolSpawned() { }
        public void Start() { }
    }
    public partial class ChargeFlameWall : Entity
    {
        public SoundProvider Deflected;
        public bool GrenadeOnly;
        public ChargeFlameWall() { }
        public override void Awake() { }
        public void OnDeathCallback(Damage damage) { }
        public override void OnDestroy() { }
        public void OnModifyDamage(Damage damage) { }
    }
    public partial class ChargeJumpChargeFloatProvider : FloatValueProvider
    {
        private float m_value;
        public ChargeJumpChargeFloatProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class ChargingSootEnemyAnimations
    {
        public TextureAnimationWithTransitions Charging;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions RunBack;
        public TextureAnimationWithTransitions Shooting;
        public TextureAnimationWithTransitions Stomped;
        public TextureAnimationWithTransitions Stunned;
        public TextureAnimationWithTransitions Thrown;
        public TextureAnimationWithTransitions Walk;
        public ChargingSootEnemyAnimations() { }
    }
    public partial class ChargingSootEnemySettings
    {
        public float Acceleration;
        public float AlertDuration;
        public float ChargeDuration;
        public float Deceleration;
        public float Gravity;
        public float IdleDuration;
        public float MinChargeDistance;
        public float ProjectileDamage;
        public float ProjectileGravity;
        public float ProjectileSpeed;
        public float RunSpeed;
        public float SeePlayerDistance;
        public float ShootingDuration;
        public bool SpreadShot;
        public float StunnedDuration;
        public float ThrownDrag;
        public float WalkDuration;
        public float WalkSpeed;
        public ChargingSootEnemySettings() { }
    }
    public partial class Cheat
    {
        private readonly System.Action m_action;
        private readonly Core.Input.InputButtonProcessor[] m_combination;
        private readonly System.Func<bool> m_condition;
        public bool Processing;
        public Cheat(Core.Input.InputButtonProcessor[] combination, System.Action action, System.Func<bool> condition) { }
        public Core.Input.InputButtonProcessor[] Combination { get { return default(Core.Input.InputButtonProcessor[]); } }
        public void PerformCheat() { }
    }
    public partial class CheatsHandler : SaveSerialize
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache8;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<Cheat> <>f__am$cache9;
        public static bool DebugAlwaysEnabled;
        public bool DebugEnabled;
        public static bool DebugWasEnabled;
        public static bool InfiniteDoubleJumps;
        public static CheatsHandler Instance;
        private System.Collections.Generic.List<Cheat> m_cheats;
        private int m_currentDebugCombinationIndex;
        private float m_timer;
        public CheatsHandler() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <Awake>m__16D() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <FixedUpdate>m__16E(Cheat a) { return default(bool); }
        public void ActivateDebugMenu() { }
        public override void Awake() { }
        public bool CanActivateInfiniteDoubleJumps() { return default(bool); }
        public bool CanUseCheats() { return default(bool); }
        public void ChangeCharacterColor() { }
        public void DisableCheatsEnabled() { }
        public void EnableCheatsEnabled() { }
        private void FixedUpdate() { }
        public bool IsInsideRainbowZone() { return default(bool); }
        public void MakeDashRainbow() { }
        public override void OnDestroy() { }
        private void OnGameReset() { }
        public override void Serialize(Archive ar) { }
        public void TeleportOri() { }
        private void Update() { }
    }
    public partial class Checkpoint : UnityEngine.MonoBehaviour
    {
        public Condition Condition;
        private bool m_shouldAcceptRecievers;
        public UnityEngine.Vector2 RespawnPosition;
        public Checkpoint() { }
        public void Awake() { }
        public virtual bool CanCreateCheckpoint() { return default(bool); }
        public void FixedUpdate() { }
        public void OnCheckpointCreated() { }
    }
    public partial class CheckpointData : IFrameData
    {
        private System.Collections.Generic.List<SaveObject> m_globalSaveObjects;
        private System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<MoonGuid, System.Collections.Generic.List<SaveObject>>> m_sceneSaveObjects;
        public CheckpointData(System.Collections.Generic.List<MoonGuid> scenes) { }
        public CheckpointData(System.IO.BinaryReader binaryReader) { }
        public System.Collections.Generic.List<SaveObject> GlobalSaveObjects { get { return default(System.Collections.Generic.List<SaveObject>); } }
        public System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<MoonGuid, System.Collections.Generic.List<SaveObject>>> SceneSaveObjects { get { return default(System.Collections.Generic.List<System.Collections.Generic.KeyValuePair<MoonGuid, System.Collections.Generic.List<SaveObject>>>); } }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter, System.Collections.Generic.List<MoonGuid> scenes) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    public partial class CheckpointPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        private bool m_createCheckpoint;
        private CheckpointData m_data;
        private int m_frame;
        private System.Collections.Generic.List<MoonGuid> m_sceneNames;
        public CheckpointPlugin() { }
        public void ApplyPreviousInput(int frame, Recorder recorder) { }
        public void Awake() { }
        public void Exit() { }
        private void MakeCheckpoint() { }
        public void MakeCheckpointAtEndOfFrame() { }
        public void OnDestroy() { }
        public void OnFinishedLoading() { }
        public bool OnGameLoad() { return default(bool); }
        public void PerformLoad(int keyframe) { }
        public void PerformLoadFromCurrentFrame() { }
        public void PerformLoadFromFrame(int frame) { }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
        public void RestoreCheckpointPart1() { }
        public void RestoreCheckpointPart2() { }
    }
    public partial class ClearScenesLoadedForCheckpointAction : ActionMethod
    {
        public ClearScenesLoadedForCheckpointAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ClearSkipCutsceneAction : ActionMethod
    {
        public ClearSkipCutsceneAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ClearTrailOverCertainDistance : UnityEngine.MonoBehaviour, IPooled
    {
        public float Distance;
        private UnityEngine.Vector3 m_lastPosition;
        private float m_time;
        private UnityEngine.TrailRenderer m_trailRenderer;
        public ClearTrailOverCertainDistance() { }
        public void Awake() { }
        public void OnPoolSpawned() { }
        public void Update() { }
    }
    public partial class CleverMenuItem : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1C;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1D;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1E;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Transform <Transform>k__BackingField;
        public Condition Activated;
        public bool AnimateColors;
        public UnityEngine.Vector2 Center;
        public UnityEngine.GameObject ColorTarget;
        public ActionMethod Highlight;
        public BaseAnimator HighlightAnimator;
        private System.Action HighlightCallback;
        private UnityEngine.Rect m_bounds;
        private bool m_boundsInitialized;
        private UnityEngine.Vector3 m_cachedPosition;
        private int m_colorID;
        private bool m_isHighlighted;
        private float m_opacity;
        private float m_parentOpacity;
        private UnityEngine.Renderer[] m_renderers;
        private UnityEngine.Color m_tweenLastColor;
        private UnityEngine.Color m_tweenNextColor;
        private bool m_tweenPlay;
        private float m_tweenTime;
        public ActionMethod Pressed;
        private System.Action PressedCallback;
        public UnityEngine.Vector2 Size;
        public float Space;
        public CleverMenuItem.TransitionSettings Transition;
        public ActionMethod Unhighlight;
        private System.Action UnhighlightCallback;
        public Condition Visible;
        public CleverMenuItem() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public bool IsActivated { get { return default(bool); } }
        public bool IsHighlighted { get { return default(bool); } }
        public bool IsVisible { get { return default(bool); } }
        public UnityEngine.Color MaterialColor { set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Transform Transform { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Transform); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public event System.Action HighlightCallback { add { } remove { } }
        public event System.Action PressedCallback { add { } remove { } }
        public event System.Action UnhighlightCallback { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <HighlightCallback>m__52() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <PressedCallback>m__54() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <UnhighlightCallback>m__53() { }
        public void ApplyColors() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public bool IsPerforming() { return default(bool); }
        public void OnDrawGizmos() { }
        public void OnHighlight() { }
        public void OnPressed() { }
        public void OnUnhighlight() { }
        public void RefreshVisible() { }
        public void SetBounds(UnityEngine.Rect rect) { }
        public void SetOpacity(float opacity) { }
        public void SetParentOpacity(float opacity) { }
        public void Start() { }
        public void TweenColor(UnityEngine.Color color) { }
        public partial class TransitionSettings
        {
            public string ColorName;
            public UnityEngine.Color DisabledColor;
            public UnityEngine.Color HighlightedColor;
            public UnityEngine.Color NormalColor;
            public float TweenDuration;
            public TransitionSettings() { }
        }
    }
    public partial class CleverMenuItemGroup : CleverMenuItemGroupBase
    {
        public Condition CanBeEnteredCondition;
        public bool ExpandOnHighlight;
        public TransparencyAnimator HighlightAnimator;
        private bool m_isFrozen;
        private bool m_playChangeSound;
        private System.Collections.Generic.HashSet<ISuspendable> m_suspendablesIgnore;
        public SoundProvider OnChangeSelectionSound;
        public SoundProvider OnCollapseSound;
        public SoundProvider OnExpandSound;
        public System.Collections.Generic.List<CleverMenuItemGroup.CleverMenuItemGroupItem> Options;
        public CleverMenuItemGroup Root;
        public CleverMenuItemSelectionManager SelectionManager;
        public bool SuspendOnActivated;
        public CleverMenuItemGroup() { }
        public override bool CanBeEntered { get { return default(bool); } }
        public override bool IsActive { get { return default(bool); } set { } }
        public override bool IsHighlightVisible { get { return default(bool); } set { } }
        public override bool IsVisible { get { return default(bool); } set { } }
        public new void Awake() { }
        public override void EnterInGroup() { }
        public new void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnteredChildGroup() { }
        public void OnMenuItemChange() { }
        public override bool OnMenuItemChangedInGroup(CleverMenuItemGroup group) { return default(bool); }
        public void OnMenuItemPressed() { }
        public void OnOptionBackPressed() { }
        public void OnSelectionManagerBackPressed() { }
        public void Start() { }
        public void UpdateHighlight() { }
        public partial class CleverMenuItemGroupItem
        {
            public CleverMenuItemGroupBase ItemGroup;
            public CleverMenuItem MenuItem;
            public CleverMenuItemGroupItem() { }
        }
    }
    public abstract partial class CleverMenuItemGroupBase : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache2;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public System.Action OnBackPressed;
        protected CleverMenuItemGroupBase() { }
        public abstract bool CanBeEntered { get; }
        public abstract bool IsActive { get; set; }
        public abstract bool IsHighlightVisible { get; set; }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public abstract bool IsVisible { get; set; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnBackPressed>m__A() { }
        public void Awake() { }
        public abstract void EnterInGroup();
        public void OnDestroy() { }
        public abstract bool OnMenuItemChangedInGroup(CleverMenuItemGroup group);
    }
    public partial class CleverMenuItemLayout : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<CleverMenuItem> MenuItems;
        public CleverMenuItemLayout.Alignment VerticalAlignment;
        public CleverMenuItemLayout() { }
        public void OnEnable() { }
        [UnityEngine.ContextMenu("Apply")]
        public void Sort() { }
        public enum Alignment
        {
            Bottom = 2,
            Center = 1,
            Top = 0,
        }
    }
    public partial class CleverMenuItemSelectionManager : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1A;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1B;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1C;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsLocked>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float AngleTolerance;
        public ActionMethod BackAction;
        public CleverMenuItem BackItem;
        public float ButtonPressDelay;
        public CageStructureTool CopyFromCage;
        public TransparencyAnimator FadeAnimator;
        public bool HighlightOnMouseOver;
        public const float HOLD_DELAY = 0.4f;
        public const float HOLD_FAST_DELAY = 0.04f;
        public int Index;
        public CleverMenuItemSelectionManager.Direction ItemDirection;
        private float m_buttonPressDelay;
        private int m_defaultIndex;
        private float m_holdDelayDuration;
        private float m_holdRemainingTime;
        private bool m_isActive;
        private bool m_isHighlightVisible;
        private bool m_isVisible;
        private float m_nextPressDelay;
        public System.Collections.Generic.List<CleverMenuItem> MenuItems;
        public System.Collections.Generic.List<CleverMenuItemSelectionManager.NavigationData> Navigation;
        public System.Action OnBackPressedCallback;
        public ActionMethod OptionChangeAction;
        public System.Action OptionChangeCallback;
        public System.Action OptionPressedCallback;
        public bool UnhighlightOnMouseLeave;
        public CleverMenuItemSelectionManager() { }
        public CleverMenuItem CleverMenuItemUnderCursor { get { return default(CleverMenuItem); } }
        public CleverMenuItem CurrentMenuItem { get { return default(CleverMenuItem); } }
        public bool IsActive { get { return default(bool); } set { } }
        public bool IsHighlightVisible { get { return default(bool); } set { } }
        public bool IsLocked { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsVisible { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnBackPressedCallback>m__57() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OptionChangeCallback>m__55() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OptionPressedCallback>m__56() { }
        public void Awake() { }
        public bool ChangeMenuItem() { return default(bool); }
        [UnityEngine.ContextMenu("Create navigation from cage")]
        public void CreateNavigationStructureFromCageTool() { }
        public void FixedUpdate() { }
        public void HandleNavigationCage() { }
        public void MoveSelection(bool forward) { }
        public void OnBackPressed() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnDrawGizmosSelected() { }
        public void OnEnable() { }
        public void PressCurrentItem() { }
        public void RefreshVisible() { }
        public void SetCurrentItem(int index) { }
        public void SetCurrentMenuItem(CleverMenuItem menuItem) { }
        public void SetIndexToFirst() { }
        public void SetVisible(bool visible) { }
        public void SetVisibleImmediate(bool visible) { }
        public void Start() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <SetCurrentMenuItem>c__AnonStorey50
        {
            internal CleverMenuItem menuItem;
            public <SetCurrentMenuItem>c__AnonStorey50() { }
            internal bool <>m__58(CleverMenuItem a) { return default(bool); }
        }
        public enum Direction
        {
            LeftToRight = 0,
            NavigationCage = 2,
            TopToBottom = 1,
        }
        public enum FocusState
        {
            ChildInFocus = 2,
            InFocus = 1,
            None = 0,
        }
        public partial class NavigationData
        {
            public System.Func<CleverMenuItemSelectionManager.NavigationData, bool> Condition;
            public CleverMenuItem From;
            public CleverMenuItem To;
            public NavigationData() { }
        }
    }
    public partial class CleverMenuItemTooltip : UnityEngine.MonoBehaviour
    {
        public MessageProvider Tooltip;
        public CleverMenuItemTooltip() { }
    }
    public partial class CleverMenuItemTooltipController : UnityEngine.MonoBehaviour
    {
        public CleverMenuItemSelectionManager Selection;
        public MessageBox Tooltip;
        public CleverMenuItemTooltipController() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void OnOptionChanged() { }
        public void Update() { }
        public void UpdateTooltip() { }
    }
    public partial class CleverMenuOptionsList : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject Item;
        private readonly System.Collections.Generic.List<UnityEngine.GameObject> m_items;
        private float m_scrollPosition;
        private float m_scrollPositionTarget;
        private CleverMenuItemSelectionManager m_selectionManager;
        public int OnScreenLimit;
        public UnityEngine.Transform Origin;
        public bool Scrollable;
        public float ScrollingSpeed;
        public UnityEngine.Transform ScrollPivot;
        public float Spacing;
        public CleverMenuOptionsList() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <FixedUpdate>m__D() { }
        public void AddItem(Language language, string label, System.Action onPressed) { }
        public void AddItem(string label, System.Action onPressed) { }
        public void Awake() { }
        public void ClearItems() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void OnOptionPressed() { }
        public void SetSelection(int index) { }
    }
    public abstract partial class CleverValueSlider : CleverMenuItemGroupBase
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsVisible>k__BackingField;
        public MessageProvider ActivateNavigateMessageProvider;
        public SoundProvider ChangeVolumeDownSound;
        public SoundProvider ChangeVolumeUpSound;
        public CleverMenuItem CleverMenuItem;
        public MessageProvider DeactivateNavigateMessageProvider;
        public BaseAnimator HighlightAnimator;
        private float m_holdRemainingTime;
        private bool m_isActive;
        private bool m_isDragged;
        private bool m_isHighlightVisible;
        private SoundPlayer m_soundPlayer;
        public float MaxValue;
        public float MaxX;
        public float MinValue;
        public float MinX;
        public MessageBox[] NavigateMessageBoxes;
        public UnityEngine.Transform SliderDot;
        public float Step;
        protected CleverValueSlider() { }
        public override bool CanBeEntered { get { return default(bool); } }
        public UnityEngine.Rect DotRect { get { return default(UnityEngine.Rect); } }
        public override bool IsActive { get { return default(bool); } set { } }
        public override bool IsHighlightVisible { get { return default(bool); } set { } }
        public override bool IsVisible { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float NormalizedValue { get { return default(float); } set { } }
        public abstract float Value { get; set; }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <PlayDownSound>m__B() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <PlayUpSound>m__C() { }
        public override void EnterInGroup() { }
        public void FixedUpdate() { }
        public override bool OnMenuItemChangedInGroup(CleverMenuItemGroup group) { return default(bool); }
        private void PlayDownSound() { }
        private void PlayUpSound() { }
        public void UpdateSlider() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ClipPlane : UnityEngine.MonoBehaviour
    {
        public float Bottom;
        public float Left;
        private UnityEngine.Rect m_lastRect;
        private UnityEngine.Mesh m_mesh;
        public float Right;
        public float Top;
        public ClipPlane() { }
        public void Awake() { }
        [UnityEngine.ContextMenu("Crop to texture")]
        public void CropToTexture() { }
        public void FreeMesh() { }
        public void GenerateMesh() { }
        public void OnDestroy() { }
    }
    public partial class CloneOfSeinForPortals : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Renderer CloneRenderer;
        public UnityEngine.Renderer PlayerRenderer;
        public CloneOfSeinForPortals() { }
        public void Awake() { }
        private void FixedUpdate() { }
    }
    public partial class CloseOptionScreenAction : ActionMethod
    {
        public CloseOptionScreenAction() { }
        public override void Perform(IContext context) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ClusterModifier : UberShaderModifier, IDynamicGraphic
    {
        public UnityEngine.Transform Handle;
        private bool m_didRebind;
        private int m_pivotId;
        [UnityEngine.SerializeField]
        private UnityEngine.Vector3 m_posOffset;
        [UnityEngine.SerializeField]
        private float m_rotOffset;
        private int m_varsId;
        public UberShaderTexture Mask;
        [UnityEngine.RangeAttribute(0f, 1f)]
        public float RotationWeight;
        public ClusterModifier() { }
        protected virtual string BoneName { get { return default(string); } }
        protected virtual bool ControlMask { get { return default(bool); } }
        public void CalibrateHandle() { }
        public override bool DoStrip() { return default(bool); }
        private void LateUpdate() { }
        private void OnEnable() { }
        private void RebindClusterTransform() { }
        public override bool RequiresVertexColor() { return default(bool); }
        public override void SetProperties() { }
        public void Update() { }
    }
    [CustomShaderModifier("Cluster Animation Bone 0")]
    [UberShaderCategoryAttribute((UberShaderCategory)(0))]
    [UberShaderOrderAttribute((UberShaderOrder)(13))]
    [UnityEngine.ExecuteInEditMode]
    public partial class ClusterModifierBone0 : ClusterModifier
    {
        public ClusterModifierBone0() { }
        protected override string BoneName { get { return default(string); } }
        protected override bool ControlMask { get { return default(bool); } }
    }
    [CustomShaderModifier("Cluster Animation Bone 1")]
    [UberShaderCategoryAttribute((UberShaderCategory)(0))]
    [UberShaderOrderAttribute((UberShaderOrder)(14))]
    [UnityEngine.ExecuteInEditMode]
    public partial class ClusterModifierBone1 : ClusterModifier
    {
        public ClusterModifierBone1() { }
        protected override string BoneName { get { return default(string); } }
    }
    [CustomShaderModifier("Cluster Animation Bone 2")]
    [UberShaderCategoryAttribute((UberShaderCategory)(0))]
    [UberShaderOrderAttribute((UberShaderOrder)(15))]
    [UnityEngine.ExecuteInEditMode]
    public partial class ClusterModifierBone2 : ClusterModifier
    {
        public ClusterModifierBone2() { }
        protected override string BoneName { get { return default(string); } }
    }
    public partial class CollapsingSolid : SaveSerialize
    {
        public BaseAnimator Animator;
        private bool m_activated;
        public CollapsingSolid() { }
        public void OnCollisionEnter(UnityEngine.Collision other) { }
        public override void Serialize(Archive ar) { }
    }
    public partial class CollectablePlaceholder : SaveSerialize, IDynamicGraphic, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public static AllContainer<CollectablePlaceholder> All;
        private bool m_collected;
        private UnityEngine.GameObject m_instance;
        private float m_remainingRespawnTime;
        public UnityEngine.GameObject Prefab;
        public float RespawnTime;
        public bool UseDebug;
        public CollectablePlaceholder() { }
        public bool Collected { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Instantiate>m__16A() { }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void Instantiate() { }
        public void OnCollect() { }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void Spawn() { }
    }
    [UnityEngine.RequireComponent(typeof(ListOfCollidedObjects))]
    public partial class ColliderEnterExitTrigger : UnityEngine.MonoBehaviour
    {
        public EnterExitActionsExecutor EnterExitActionsExecutor;
        public GameObjectFilter GameObjectFilter;
        public bool HasEntered;
        private ListOfCollidedObjects m_listOfCollidedObjects;
        public ColliderEnterExitTrigger() { }
        private void FixedUpdate() { }
        private void Start() { }
        public bool ValidObject(UnityEngine.GameObject go) { return default(bool); }
    }
    public partial class CollisionBasedSoundProvider : SoundProvider
    {
        public UnityEngine.AnimationCurve ForceToVolumeCurve;
        public System.Collections.Generic.List<CollisionMaterialSoundPair> SoundPairs;
        public CollisionBasedSoundProvider() { }
        public override SoundDescriptor GetSound(IContext context) { return default(SoundDescriptor); }
        public SoundDescriptor GetSoundForCollision(UnityEngine.Collision collision, IContext context) { return default(SoundDescriptor); }
    }
    public partial class CollisionContext : ICollisionContext, IContext
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Collision <Collision>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Collider <CollisionReciever>k__BackingField;
        public CollisionContext(UnityEngine.Collision collision, UnityEngine.Collider collisionReciever) { }
        public UnityEngine.Collision Collision { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Collision); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public UnityEngine.Collider CollisionReciever { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Collider); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
    }
    public partial class CollisionMaterialSoundPair
    {
        public float CosAngle;
        public SoundProvider IndependantSoundProvider;
        public UnityEngine.Vector2 Normal;
        public CollisionMaterialSoundPair() { }
    }
    public partial class CollisionSoundSource : UnityEngine.MonoBehaviour, IPooled
    {
        public CollisionBasedSoundProvider CollisionSound;
        public SoundSource ContinuousSound;
        private int m_collisionCount;
        private UnityEngine.Collider m_collisionReciever;
        private UnityEngine.Rigidbody m_rigidbody;
        public CollisionSoundSource() { }
        private void Awake() { }
        private void FixedUpdate() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionExit(UnityEngine.Collision collision) { }
        public void OnPoolSpawned() { }
    }
    public partial class CollisionStayTrigger : UnityEngine.MonoBehaviour
    {
        public LegacyAnimator[] Animators;
        public BaseAnimator[] BaseAnimators;
        public Condition Condition;
        public SoundSource EnterSound;
        public SoundSource ExitSound;
        public GameObjectFilter Filter;
        private UnityEngine.Rect m_bounds;
        private bool m_hasCollider;
        private bool m_isInside;
        public CollisionStayTrigger() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerExit(UnityEngine.Collider collider) { }
        public void TurnOff() { }
        public void TurnOn() { }
    }
    public partial class ColorCorrectionSettings
    {
        public UnityEngine.AnimationCurve Blue;
        public UnityEngine.AnimationCurve Green;
        public UnityEngine.AnimationCurve Red;
        public ColorCorrectionSettings() { }
        public ColorCorrectionSettings Clone() { return default(ColorCorrectionSettings); }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct ColorHSV
    {
        public float a;
        public float h;
        public float s;
        public float v;
        public ColorHSV(float h, float s, float v) { throw new System.NotImplementedException(); }
        public ColorHSV(float h, float s, float v, float a) { throw new System.NotImplementedException(); }
        public ColorHSV(UnityEngine.Color color) { throw new System.NotImplementedException(); }
        public UnityEngine.Color ToColor() { return default(UnityEngine.Color); }
        public string ToString() { return default(string); }
    }
    public partial class ColorVariation : UnityEngine.MonoBehaviour
    {
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Color[] m_cachedColors;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Renderer[] m_renderers;
        private float m_speed;
        private float m_time;
        public MoonGuid MetaDataGUID;
        public ColorVariation() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void Hide() { }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void OnValidate() { }
        public void Sample() { }
        public UnityEngine.Color SetAlpha(UnityEngine.Color color, float alpha) { return default(UnityEngine.Color); }
        public void Show() { }
    }
    public partial class ColorVariationManager : UnityEngine.MonoBehaviour
    {
        public static ColorVariationManager Instance;
        private readonly AllContainer<ColorVariation> m_colorVariations;
        private MoonGuid m_currentSceneMetaDataGUID;
        public ColorVariationManager() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void Register(ColorVariation colorVariation) { }
        public void Unregister(ColorVariation colorVariation) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ColorVariationRootGroup : UnityEngine.MonoBehaviour
    {
        public ColorVariationRootGroup() { }
    }
    public partial class CombinedMessageProvider : MessageProvider
    {
        public string CombiningString;
        public MessageProvider FirstMessageProvider;
        public MessageProvider SecondMessageProvider;
        public CombinedMessageProvider() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages() { return default(System.Collections.Generic.IEnumerable<MessageDescriptor>); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetMessages>c__Iterator1B : System.Collections.Generic.IEnumerable<MessageDescriptor>, System.Collections.Generic.IEnumerator<MessageDescriptor>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal MessageDescriptor $current;
            internal int $PC;
            internal CombinedMessageProvider <>f__this;
            public <GetMessages>c__Iterator1B() { }
            MessageDescriptor System.Collections.Generic.IEnumerator<MessageDescriptor>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(MessageDescriptor); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<MessageDescriptor> System.Collections.Generic.IEnumerable<MessageDescriptor>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<MessageDescriptor>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class CompareSeinLevelCondition : Condition
    {
        public int Value;
        public CompareSeinLevelCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class CompareVelocityCondition : Condition
    {
        private UnityEngine.Rigidbody m_rigidBody;
        public float Speed;
        public CompareVelocityCondition() { }
        public void Awake() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class CompleteGameAction : ActionMethod
    {
        public CompleteGameAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class CompoundCondition : Condition
    {
        public System.Collections.Generic.List<CompoundCondition.ConditionInformation> Tests;
        public CompoundCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
        public partial class ConditionInformation
        {
            public System.Collections.Generic.List<Condition> Conditions;
            public ConditionInformation() { }
        }
    }
    public partial class ConceptScreen : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SoundProvider CloseSound;
        public TransparencyAnimator FadeIn;
        public System.Collections.Generic.List<ConceptScreen.ImageData> Images;
        public static ConceptScreen Instance;
        private int m_index;
        private System.Collections.Generic.HashSet<ISuspendable> m_suspenables;
        public SoundProvider OpenSound;
        public CleverMenuItemSelectionManager Parent;
        public UnityEngine.Renderer Screen;
        public SoundProvider SwitchSound;
        public ConceptScreen() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Activate(UnityEngine.Texture texture) { }
        public void ApplyImage() { }
        public void Awake() { }
        private void ChangeImage(int e) { }
        public void Deactivate() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Activate>c__AnonStorey70
        {
            internal UnityEngine.Texture texture;
            public <Activate>c__AnonStorey70() { }
            internal bool <>m__179(ConceptScreen.ImageData a) { return default(bool); }
        }
        public partial class ImageData
        {
            public float Height;
            public UnityEngine.Texture2D Texture;
            public float Width;
            public ImageData(UnityEngine.Texture2D image, float width, float height) { }
        }
    }
    public partial class ConceptScreenAction : ActionMethod
    {
        public UnityEngine.Texture2D Texture;
        public ConceptScreenAction() { }
        public override void Perform(IContext context) { }
    }
    public abstract partial class Condition : UnityEngine.MonoBehaviour, fsm.ICondition
    {
        protected Condition() { }
        public virtual string GetNiceName() { return default(string); }
        public abstract bool Validate(IContext context);
    }
    public partial class ConditionBasedSoundProvider : SoundProvider
    {
        public Condition Condition;
        public SoundProvider FalseSoundProvider;
        public SoundProvider TrueSoundProvider;
        public ConditionBasedSoundProvider() { }
        public override SoundDescriptor GetSound(IContext context) { return default(SoundDescriptor); }
    }
    public partial class ConfirmChangingDifficulty : ActionMethod
    {
        public ConfirmChangingDifficulty() { }
        public override void Perform(IContext context) { }
    }
    public partial class ConfirmOrCancel : UnityEngine.MonoBehaviour
    {
        public System.Action OnCancel;
        public ActionMethod OnCancelAction;
        private System.Action OnConfirm;
        public ActionMethod OnConfirmAction;
        public ConfirmOrCancel() { }
        public event System.Action OnConfirm { add { } remove { } }
        private bool CanCopyOrDelete() { return default(bool); }
        public void FixedUpdate() { }
    }
    public partial class ConstantAcceleration : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Vector3 Acceleration;
        private UnityEngine.Rigidbody m_rigidbody;
        public ConstantAcceleration() { }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    public partial class ConstrainPlayerMovementZone : UnityEngine.MonoBehaviour
    {
        public bool ConstrainLeft;
        public bool ConstrainRight;
        private SeinCharacter m_sein;
        public ConstrainPlayerMovementZone() { }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        private void OnDestroy() { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
        private void OnTriggerExit(UnityEngine.Collider collider) { }
        private void Start() { }
    }
    public static partial class Context
    {
        public static void SendContextToGameObject(UnityEngine.GameObject target, IContext context) { }
        public static void SendContextToGameObjectAndChildren(UnityEngine.GameObject target, IContext context) { }
    }
    public partial class ContrastProvider : FloatValueProvider
    {
        public ContrastProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class ContrastSettings
    {
        public float Brightness;
        public float Contrast;
        public ContrastSettings() { }
        public ContrastSettings Clone() { return default(ContrastSettings); }
    }
    public partial class ContrastVolumeSlider : CleverValueSlider
    {
        public ContrastVolumeSlider() { }
        public override float Value { get { return default(float); } set { } }
    }
    public partial class ControllerSchemeOptions : CleverMenuOptionsList
    {
        public MessageProvider ControllerLabel;
        public static ControllerSchemeOptions Instance;
        public MessageProvider KeyboardLabel;
        public MessageProvider KeyboardMouseLabel;
        public ControllerSchemeOptions() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__10() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__E() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__F() { }
        public new void Awake() { }
        public new void OnDestroy() { }
        public new void OnEnable() { }
        public void SetControlScheme(ControlScheme scheme) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ControllerShake : BaseAnimator
    {
        public bool AffectedByDistance;
        public static AllContainer<ControllerShake> All;
        public float ImpactRadius;
        private float m_time;
        public ControllerShakeAsset Shake;
        public float ShakeObjectSize;
        public bool ShakeOnlyIfVisibleToCamera;
        public float Strength;
        public ControllerShake() { }
        public float CurrentShake { get { return default(float); } }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public float ModifiedStrength { get { return default(float); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        private static void .cctor() { }
        public override void CacheOriginals() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public override void OnPoolSpawned() { }
        public void PerformTheShake() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
        public new void Start() { }
    }
    public partial class ControllerShakeAsset : UnityEngine.ScriptableObject
    {
        private float m_duration;
        public UnityEngine.AnimationCurve ShakeCurve;
        public ControllerShakeAsset() { }
        public float Duration { get { return default(float); } }
    }
    public partial class ControllerShakeLogic : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public static ControllerShakeLogic Instance;
        public ControllerShakeLogic() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void UpdateShake() { }
        public static void Vibrate(float strength, float time) { }
    }
    public enum ControlScheme
    {
        Controller = 0,
        Keyboard = 2,
        KeyboardAndMouse = 1,
    }
    public partial class ControlsScreen : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject ControllerScheme;
        public static ControlsScreen Instance;
        public UnityEngine.GameObject KeyboardScheme;
        public UnityEngine.GameObject MouseKeyboardScheme;
        public ControlsScreen() { }
        public static bool IsVisible { get { return default(bool); } }
        public void Apply() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class Coroutiner : UnityEngine.MonoBehaviour
    {
        private System.Collections.Generic.List<System.Collections.IEnumerator> m_coroutines;
        private static Coroutiner m_instance;
        public Coroutiner() { }
        public static Coroutiner Instantce { get { return default(Coroutiner); } }
        private static void .cctor() { }
        private void Awake() { }
        public void RegisterCoroutine(System.Collections.IEnumerator coroutine) { }
        private void Update() { }
    }
    public partial class Counter : UnityEngine.MonoBehaviour
    {
        public float Value;
        public Counter() { }
        public void OnDrawGizmos() { }
    }
    public partial class CounterAction : ActionMethod
    {
        public NumberCounter Counter;
        public CounterAction.OperationType Operation;
        public int Value;
        public CounterAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public enum OperationType
        {
            Add = 0,
            Set = 2,
            Subtract = 1,
        }
    }
    public partial class CounterCondition : Condition
    {
        public LogicUtility.ComparisonType Comparison;
        public NumberCounter Counter;
        public float Value;
        public CounterCondition() { }
        public override string GetNiceName() { return default(string); }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class CounterTrigger : Trigger
    {
        private int m_counter;
        public int TriggerOnCounter;
        public CounterTrigger() { }
        public int Counter { get { return default(int); } }
        public void Decrement() { }
        public void Increment() { }
        public override void Serialize(Archive ar) { }
    }
    [CategoryAttribute("System")]
    public partial class CreateCheckpointAction : ActionMethod
    {
        public UnityEngine.Vector2 RespawnPosition;
        public bool SaveToDisk;
        public CreateCheckpointAction() { }
        public override void Perform(IContext context) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CreateSceneTool : UnityEngine.MonoBehaviour
    {
        [UnityEngine.HideInInspector]
        public bool DoDestroy;
        public CreateSceneTool() { }
        public void Update() { }
    }
    public partial class CreditsTextPosition : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        private float m_weight;
        public UnityEngine.Vector2 ScreenPosition;
        public CreditsTextPosition() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class Creep : Entity
    {
        public Creep() { }
    }
    public partial class CreepDamageReceiver : EntityDamageReciever
    {
        public CreepDamageReceiver() { }
        public override void OnRecieveDamage(Damage damage) { }
    }
    public partial class CropUtility
    {
        public CropUtility() { }
        public static void CropMaterial(UnityEngine.Material material) { }
        public static UnityEngine.Rect GetOccupiedRect(UnityEngine.Texture2D tex) { return default(UnityEngine.Rect); }
        public static UnityEngine.Rect GetOccupiedRectNormalized(UnityEngine.Texture2D tex) { return default(UnityEngine.Rect); }
    }
    public partial class CrossFadeControl : UnityEngine.MonoBehaviour
    {
        public UnityEngine.RenderTexture Buf;
        private int m_currentFrame;
        private int m_frameCounter;
        private int m_prevFrame;
        public UnityEngine.Material Material;
        private UnityEngine.Color settingFrom;
        private UnityEngine.Color settingTo;
        public UnityEngine.GameObject Target1;
        public UnityEngine.GameObject Target2;
        private float tweenTime;
        public CrossFadeControl() { }
        private void ApplySettings(UnityEngine.Color p0) { }
        private void OnDestroy() { }
        private void OnRenderImage(UnityEngine.RenderTexture from, UnityEngine.RenderTexture to) { }
        private void Update() { }
    }
    [CategoryAttribute("System")]
    public partial class CrossFadeSceneAction : ActionMethod
    {
        public float Duration;
        [NotNull]
        public SceneMetaData SceneMetaData;
        public CrossFadeSceneAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class CrushPlayer : UnityEngine.MonoBehaviour
    {
        public CrushPlayer() { }
    }
    public partial class CurrentCharacterFacingCondition : Condition
    {
        public bool FaceLeft;
        public CurrentCharacterFacingCondition() { }
        public override string GetNiceName() { return default(string); }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class CursorController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Texture2D CursorTexture;
        public static bool IsVisible;
        private static float m_idleTime;
        private UnityEngine.Vector2 m_mousePosition;
        public UnityEngine.Vector2 Offset;
        public TransparencyAnimator Transparency;
        public CursorController() { }
        private static void .cctor() { }
        public void Awake() { }
        public static void ResetIdleTime() { }
        private bool ShouldHide() { return default(bool); }
        private void ShowCursor() { }
        public void Start() { }
        public void Update() { }
    }
    public partial class CursorInputData : IFrameData
    {
        public UnityEngine.Vector2 Position;
        public CursorInputData() { }
        public CursorInputData(System.IO.BinaryReader binaryReader) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class CustomizeMaterial : UnityEngine.MonoBehaviour, IStrippable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Texture <LastMainTexture>k__BackingField;
        public UnityEngine.Vector2 BlurScale;
        public System.Collections.Generic.List<OverridableColorProperty> ColorPropertiesList;
        public System.Collections.Generic.List<OverridableFloatProperty> FloatPropertiesList;
        public UnityEngine.Material InstancedMaterial;
        public bool IsInstancedMaterialPersistent;
        private int m_forceUpdate;
        private UnityEngine.GameObject m_gameObject;
        private int m_lastLayer;
        protected bool m_needsRefreshing;
        private UnityEngine.Vector3 m_oldScale;
        private float m_oldZ;
        private UnityEngine.Transform m_transform;
        public int MaterialIndex;
        public float OffsetPositionZ;
        public UnityEngine.Material OriginalMaterial;
        public int RenderQueue;
        public OverridableShaderProperty Shader;
        public bool SpecifyRenderQueue;
        public System.Collections.Generic.List<OverridableTextureProperty> TexturePropertiesList;
        public CustomizeMaterial() { }
        public UnityEngine.Texture LastMainTexture { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Texture); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool DoStrip() { return default(bool); }
    }
    public partial class CustomShaderBlock : System.Attribute
    {
        public string Name;
        public CustomShaderBlock(string name) { }
    }
    public partial class CustomShaderModifier : System.Attribute
    {
        public string Name;
        public CustomShaderModifier(string name) { }
    }
    public partial class CustomWater : UnityEngine.MonoBehaviour
    {
        public float clipPlaneOffset;
        private bool m_insideWater;
        private UnityEngine.Camera reflectionCamera;
        private UnityEngine.RenderTexture reflectionRenderTexture;
        public float textureSizeMultiplier;
        private UnityEngine.Vector2 uvOffset;
        public float wavesHeight;
        public float wavesSize;
        public float wavesSpeed;
        public CustomWater() { }
        private static void CalculateObliqueMatrix(ref UnityEngine.Matrix4x4 projection, UnityEngine.Vector4 clipPlane) { }
        private UnityEngine.Matrix4x4 CalculateReflectionMatrix(UnityEngine.Vector4 plane) { return default(UnityEngine.Matrix4x4); }
        private UnityEngine.Vector4 CameraSpacePlane(UnityEngine.Camera cam, UnityEngine.Vector3 pos, UnityEngine.Vector3 normal, float sideSign) { return default(UnityEngine.Vector4); }
        private void OnWillRenderObject() { }
        private static float sgn(float a) { return default(float); }
        private void Start() { }
    }
    public partial class CutsceneButtonPressedTransition : CutsceneTransition
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<Core.Input.Button, bool> <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<Core.Input.Button, bool> <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<Core.Input.Button, bool> <>f__am$cache6;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<Core.Input.Button, bool> <>f__am$cache7;
        public System.Collections.Generic.List<Core.Input.Button> ButtonsOnPressed;
        public System.Collections.Generic.List<Core.Input.Button> ButtonsOnRelease;
        public System.Collections.Generic.List<Core.Input.Button> ButtonsPressed;
        public System.Collections.Generic.List<Core.Input.Button> ButtonsReleased;
        public CutsceneButtonPressedTransition() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <ShouldTransition>m__4(Core.Input.Button b) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <ShouldTransition>m__5(Core.Input.Button b) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <ShouldTransition>m__6(Core.Input.Button b) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <ShouldTransition>m__7(Core.Input.Button b) { return default(bool); }
        public override bool ShouldTransition() { return default(bool); }
    }
    public partial class CutsceneController : UnityEngine.MonoBehaviour
    {
        public CutsceneState CurrentState;
        public float CurrentStateTime;
        public CutsceneMusicPlayer CutsceneMusicPlayer;
        private SeinCharacter m_cutsceneSein;
        private bool m_foundSein;
        public CutsceneController() { }
        public void Awake() { }
        public void ChangeState(CutsceneState state) { }
        public void FixedUpdate() { }
        public void Start() { }
    }
    public partial class CutsceneItem : UnityEngine.MonoBehaviour
    {
        public UnlockedCutscenes Cutscene;
        public UnityEngine.GameObject LockTexture;
        public ActionMethod Pressed;
        public MessageBox TitleLabel;
        public MessageProvider TitleMessageProvider;
        public CutsceneItem() { }
        public bool IsLocked { get { return default(bool); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnEnable() { }
        public void OnPressed() { }
    }
    public partial class CutsceneMusicPlayer : UnityEngine.MonoBehaviour
    {
        public CutsceneController Cutscene;
        public bool KeepPreviousLoop;
        public float LoopDelay;
        public UnityEngine.AnimationCurve LoopFadeIn;
        public UnityEngine.AnimationCurve LoopFadeOut;
        public SoundProvider LoopMusicSoundProvider;
        private bool m_fadingOutLoop;
        private SoundPlayer m_lastLoop;
        private int m_loopIndex;
        private SoundPlayer m_musicPhrase;
        private float m_originalLastLoopVolume;
        private float m_originalMusicPhraseVolume;
        private float m_timeFadingOut;
        private float m_timePlaying;
        private float m_timePlayingLoop;
        public SoundDescriptor MusicPhrase;
        public CutsceneMusicPlayer() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <FixedUpdate>m__9() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Play>m__8() { }
        public void EndMusic(bool keepPlayingLoop) { }
        private void FixedUpdate() { }
        public SoundPlayer GetLastLoop() { return default(SoundPlayer); }
        public float GetLastLoopOriginalVolume() { return default(float); }
        public void OnDestroy() { }
        public void Play(bool pauseOnSuspend) { }
        public void Start() { }
    }
    public partial class CutsceneScreenController : UnityEngine.MonoBehaviour
    {
        public static CutsceneScreenController Instance;
        public MessageProvider LockedMessageProvider;
        public ActionMethod OnLockedItemPressed;
        public CutsceneScreenController() { }
        public void Awake() { }
        public void OnDestroy() { }
    }
    public abstract partial class CutsceneState : UnityEngine.MonoBehaviour
    {
        [UnityEngine.HideInInspector]
        public CutsceneController Parent;
        public System.Collections.Generic.HashSet<CutsceneTransition> Transitions;
        protected CutsceneState() { }
        public abstract void OnEnter();
        public abstract void OnExit();
        public virtual void OnUpdate() { }
        public void RegisterTransition(CutsceneTransition transition) { }
        public void UnregisterTransition(CutsceneTransition transition) { }
    }
    [UnityEngine.RequireComponent(typeof(CutsceneState))]
    public abstract partial class CutsceneTransition : UnityEngine.MonoBehaviour
    {
        private CutsceneState m_parentState;
        public CutsceneState NewState;
        protected CutsceneTransition() { }
        public CutsceneState ParentState { get { return default(CutsceneState); } }
        public void Awake() { }
        public void OnDestroy() { }
        public abstract bool ShouldTransition();
        public void Start() { }
    }
    public partial class CutsceneTrigger : UnityEngine.MonoBehaviour
    {
        public CutsceneController Cutscene;
        private bool m_wasTriggered;
        public CutsceneState State;
        public CutsceneTrigger() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
    }
    public partial class CutsceneUnlockedCondition : Condition
    {
        public UnlockedCutscenes Cutscene;
        public CutsceneUnlockedCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class Damage
    {
        private float m_amount;
        private UnityEngine.Vector2 m_force;
        private UnityEngine.Vector3 m_position;
        private UnityEngine.GameObject m_sender;
        private DamageType m_type;
        public Damage(float amount, UnityEngine.Vector2 force, UnityEngine.Vector3 position, DamageType type, UnityEngine.GameObject sender) { }
        public float Amount { get { return default(float); } }
        public UnityEngine.Vector2 Force { get { return default(UnityEngine.Vector2); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.GameObject Sender { get { return default(UnityEngine.GameObject); } }
        public DamageType Type { get { return default(DamageType); } }
        public void DealToComponents(UnityEngine.GameObject target) { }
        public void SetAmount(float amount) { }
    }
    public partial class DamageBasedPrefabProvider : PrefabProvider
    {
        public PrefabProvider Default;
        public System.Collections.Generic.List<DamageTypePrefabPair> Prefabs;
        public DamageBasedPrefabProvider() { }
        public override UnityEngine.GameObject Prefab(IContext context) { return default(UnityEngine.GameObject); }
    }
    public partial class DamageBasedSoundProvider : UnityEngine.MonoBehaviour
    {
        public SoundProvider DefaultSoundProvider;
        public System.Collections.Generic.List<DamageTypeSoundPair> SoundPairs;
        public DamageBasedSoundProvider() { }
        public SoundDescriptor GetSoundForDamage(Damage damage) { return default(SoundDescriptor); }
        public bool Match(Damage damage, SoundDamageType soundDamageType) { return default(bool); }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct DamageContext : IContext, IDamageContext
    {
        private Damage m_damage;
        public DamageContext(Damage damage) { throw new System.NotImplementedException(); }
        public Damage Damage { get { return default(Damage); } private set { } }
    }
    public partial class DamageDealer : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.GameObject, Damage> <>f__am$cache9;
        public bool Activated;
        public Condition Condition;
        public float Damage;
        public DamageType DamageType;
        private System.Collections.Generic.List<UnityEngine.Collider> m_colliders;
        public System.Action<UnityEngine.GameObject, Damage> OnDamageDealtEvent;
        public bool PlayerOnly;
        private static int s_oriMask;
        public System.Func<UnityEngine.GameObject, bool> ShouldDealDamage;
        public DamageDealer() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnDamageDealtEvent>m__34(UnityEngine.GameObject , Damage ) { }
        public virtual float AmountOfDamage(UnityEngine.GameObject target) { return default(float); }
        public virtual void DealDamage(UnityEngine.GameObject target) { }
        public void OnCollision(UnityEngine.GameObject collided) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
        public void Start() { }
    }
    public partial class DamageDealerUnlessCarryingNightberry : DamageDealer
    {
        private int m_frame;
        public DamageDealerUnlessCarryingNightberry() { }
        public void Awake() { }
        public override void DealDamage(UnityEngine.GameObject target) { }
    }
    public partial class DamagePrefabSpawner : UnityEngine.MonoBehaviour, IDamageReciever
    {
        public DamageBasedPrefabProvider DamagePrefab;
        public bool UseRotation;
        public DamagePrefabSpawner() { }
        public void OnRecieveDamage(Damage damage) { }
    }
    public partial class DamageReactionSettings
    {
        public DamageType DamageType;
        public float ForceMultiplier;
        public DamageReactionSettings() { }
    }
    public abstract partial class DamageReciever : SaveSerialize, IDamageReciever, IPooled, IRespawnReciever
    {
        public bool BounceOnStomp;
        public ActionMethod DamageAction;
        public LegacyAnimator DamageAnimator;
        public ActionMethod DeathAction;
        public bool DestroyWhenNoHealthLeft;
        public bool DisableWhenNoHealthLeft;
        [UnityEngine.HideInInspector]
        public float Health;
        public ActionMethod HurtAction;
        public System.Func<Damage, bool> IgnoreDamageCondition;
        public float MaxHealth;
        public UberDelegate<Damage> OnDeathEvent;
        protected DamageReciever() { }
        public abstract UnityEngine.GameObject DisableTarget { get; }
        public bool NoHealthLeft { get { return default(bool); } }
        public float NormalizedHealth { get { return default(float); } }
        public new void Awake() { }
        public virtual void OnPoolSpawned() { }
        public virtual void OnRecieveDamage(Damage damage) { }
        public void OnTimedRespawn() { }
        public void OnValidate() { }
        public void RegisterRespawnDelegate(System.Action onRespawn) { }
        public override void Serialize(Archive ar) { }
        public void SetHealth(float health) { }
        public void SetMaxHealth(float maxHealth) { }
        public void UpdateActive() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RegisterRespawnDelegate>c__AnonStorey55
        {
            internal System.Action onRespawn;
            public <RegisterRespawnDelegate>c__AnonStorey55() { }
            internal void <>m__9C(Damage a) { }
        }
    }
    public partial class DamageRecieverSettings
    {
        public DamageBasedPrefabProvider DamageEffect;
        public DamageBasedPrefabProvider DeathEffect;
        public DamageRecieverSettings() { }
    }
    public partial class DamageSoundSource : UnityEngine.MonoBehaviour, IDamageReciever
    {
        public DamageBasedSoundProvider DamageSound;
        private SoundPlayer m_lastDamageSound;
        public bool OneSoundOnly;
        public DamageSoundSource() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnRecieveDamage>m__A1() { }
        public void OnRecieveDamage(Damage damage) { }
    }
    public partial class DamageText : Suspendable, IPooled
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [PooledSafeAttribute]
        private UnityEngine.Vector3 m_speed;
        private float m_time;
        public UnityEngine.Color Red;
        public UnityEngine.AnimationCurve SizeByDamageAmount;
        public UnityEngine.Color Zero;
        public DamageText() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public new void Awake() { }
        public void ChangeText(Damage damage) { }
        public void FixedUpdate() { }
        public void OnPoolSpawned() { }
        private void Start() { }
    }
    public partial class DamageTextAction : ActionMethod
    {
        [NotNull]
        public DamageTextSpawner DamageTextSource;
        public DamageTextAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class DamageTextSpawner : UnityEngine.MonoBehaviour
    {
        public DamageTextSpawner() { }
        public void SpawnDamageText(IContext context) { }
    }
    public enum DamageType
    {
        Acid = 6,
        Bash = 14,
        Bat = 10,
        ChargeFlame = 25,
        Crush = 12,
        Drowning = 24,
        Enemy = 11,
        Explosion = 8,
        Grenade = 15,
        GrenadeSplatter = 16,
        Heat = 9,
        HitSurface = 21,
        Ice = 2,
        Laser = 4,
        Lava = 1,
        LevelUp = 23,
        NightBerryDied = 20,
        Nova = 19,
        Projectile = 5,
        SlugSpike = 7,
        Spikes = 3,
        SpiritFlame = 13,
        SpiritFlameSplatter = 22,
        Stomp = 17,
        StompBlast = 18,
        Water = 0,
    }
    public partial class DamageTypeCondition : Condition
    {
        public DamageType[] Allowed;
        public float DamageAmount;
        public LogicUtility.ComparisonType DamageAmountComparison;
        public UnityEngine.Vector2 DamageDirection;
        public float DamageDirectionWithinDegrees;
        public bool ValidateDamageAmount;
        public bool ValidateDamageDirection;
        public bool ValidateDamageType;
        public DamageTypeCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class DamageTypeEffectPair
    {
        public DamageType DamageType;
        public PrefabProvider EffectProvider;
        public DamageTypeEffectPair() { }
    }
    public partial class DamageTypePrefabPair
    {
        public DamageType DamageType;
        public PrefabProvider PrefabProvider;
        public DamageTypePrefabPair() { }
    }
    public partial class DamageTypeSoundPair
    {
        public SoundDamageType DamageType;
        public SoundProvider IndependantSoundProvider;
        public DamageTypeSoundPair() { }
    }
    public partial class DashOwlAlertState : DashOwlState
    {
        public DashOwlAlertState(DashOwlEnemy dashOwl) : base (default(DashOwlEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class DashOwlBashedState : DashOwlState
    {
        public DashOwlBashedState(DashOwlEnemy dashOwl) : base (default(DashOwlEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
    }
    public partial class DashOwlBounceState : DashOwlState
    {
        private UnityEngine.Vector2 m_direction;
        public DashOwlBounceState(DashOwlEnemy dashOwl) : base (default(DashOwlEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class DashOwlDashAlertState : DashOwlState
    {
        public DashOwlDashAlertState(DashOwlEnemy dashOwl) : base (default(DashOwlEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class DashOwlDashState : DashOwlState
    {
        private UnityEngine.Vector3 m_dashTargetOffset;
        public DashOwlDashState(DashOwlEnemy dashOwl) : base (default(DashOwlEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class DashOwlEnemy : OwlEnemy
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache6;
        public DashOwlEnemyAnimations Animations;
        public SoundSource DashAlertSound;
        public SoundSource DashSound;
        public Varying2DSoundProvider HitWallSound;
        public DashOwlEnemySettings Settings;
        public DashOwlEnemy.States State;
        public DashOwlEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <Awake>m__91() { return default(bool); }
        public new void Awake() { }
        public override bool CanBeOptimized() { return default(bool); }
        public bool CurrentStateTimeGreaterThan(float duration) { return default(bool); }
        public bool DamageTypeIsBash() { return default(bool); }
        public bool DamageTypeIsStompBlast() { return default(bool); }
        public new void FixedUpdate() { }
        public bool IsWithinDistanceFromStartPosition() { return default(bool); }
        public bool NearPlayer() { return default(bool); }
        public void OnBashBounce() { }
        public bool PlayerInAggressiveRange() { return default(bool); }
        public bool PlayerInDashRange() { return default(bool); }
        public bool PlayerOutsideAggressiveRange() { return default(bool); }
        public new void Start() { }
        public partial class States
        {
            public DashOwlBashedState Bashed;
            public DashOwlBounceState Bounce;
            public DashOwlDashState Dash;
            public DashOwlDashAlertState DashAlert;
            public DashOwlFlyHomeState FlyHome;
            public DashOwlHurtState Hurt;
            public DashOwlIdleState Idle;
            public States() { }
        }
    }
    public partial class DashOwlEnemyAnimations
    {
        public TextureAnimationWithTransitions Alert;
        public TextureAnimationWithTransitions Bashed;
        public TextureAnimationWithTransitions Dash;
        public TextureAnimationWithTransitions DashAlert;
        public TextureAnimationWithTransitions FlyHome;
        public TextureAnimationWithTransitions Frozen;
        public TextureAnimationWithTransitions HitCeiling;
        public TextureAnimationWithTransitions HitGround;
        public TextureAnimationWithTransitions HitWall;
        public TextureAnimationWithTransitions HurtBack;
        public TextureAnimationWithTransitions HurtFront;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions Spin;
        public DashOwlEnemyAnimations() { }
    }
    public partial class DashOwlEnemyPlaceholder : RespawningPlaceholder
    {
        public UnityEngine.GameObject DashOwlEnemy;
        public DashOwlEnemyPlaceholder.DashOwlEnemyPlaceholderSettings Settings;
        public DashOwlEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class DashOwlEnemyPlaceholderSettings
        {
            public float DamageOnTouch;
            public float DashRange;
            public float Health;
            public DropLootSettings LootSettings;
            public float MaxDistanceFromStartPosition;
            public int NumberOfExpOrbsToDrop;
            public bool Perched;
            public DashOwlEnemyPlaceholderSettings() { }
        }
    }
    public partial class DashOwlEnemySettings
    {
        public int BashBounceDamage;
        public UnityEngine.AnimationCurve BounceCurve;
        public float DashAlertDelay;
        public UnityEngine.AnimationCurve DashCurve;
        public float DashDistance;
        public float DashRange;
        public UnityEngine.AnimationCurve FlyBackHorizontal;
        public UnityEngine.AnimationCurve FlyBackVertical;
        public float MaxDistanceFromStartPosition;
        public float MoveBackSpeed;
        public bool Perched;
        public DashOwlEnemySettings() { }
    }
    public partial class DashOwlFlyHomeState : DashOwlState
    {
        private float m_duration;
        private bool m_flyLeft;
        private float m_remainingTime;
        private UnityEngine.Vector3 m_startPosition;
        public DashOwlFlyHomeState(DashOwlEnemy dashOwl) : base (default(DashOwlEnemy)) { }
        public bool IsHome() { return default(bool); }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class DashOwlHurtState : DashOwlState
    {
        private readonly TextureAnimationWithTransitions m_hurtBack;
        private readonly TextureAnimationWithTransitions m_hurtFront;
        public DashOwlHurtState(DashOwlEnemy dashOwl) : base (default(DashOwlEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class DashOwlIdleState : DashOwlState
    {
        public DashOwlIdleState(DashOwlEnemy dashOwl) : base (default(DashOwlEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class DashOwlState : fsm.IState
    {
        protected DashOwlEnemy DashOwl;
        public DashOwlState(DashOwlEnemy dashOwl) { }
        public float CurrentStateTime { get { return default(float); } }
        public virtual void OnEnter() { }
        public virtual void OnExit() { }
        public virtual void UpdateState() { }
    }
    public partial class DayFourBushSetupController : UnityEngine.MonoBehaviour
    {
        public BabySein BabySeinWithBerries;
        public TextureAnimation BerriesFallAnimation;
        public SpriteAnimator BerriesSpriteAnimator;
        public TextureAnimation BranchBreakAnimation;
        public TextureAnimation BranchIdleAnimation;
        public SpriteAnimator BranchSpriteAnimator;
        public UnityEngine.Transform CameraTargetDuringSequence;
        public TextureAnimation LeafIdleAnimation;
        public SpriteAnimator LeafSpriteAnimator;
        private bool m_berriesAnimationWasPlayed;
        private bool m_branchAnimationWasPlayed;
        public MovieTextureController MovieTextureController;
        public TextureAnimation SeinFloatAnimation;
        public UnityEngine.Transform SeinSpawnPisition;
        public SpriteAnimator SeinSpriteAnimator;
        public DayFourBushSetupController() { }
        private void EnterCaveTrigger() { }
        public void FixedUpdate() { }
        public void OnAnimationEnd() { }
        public void PlayerCollisionTrigger() { }
    }
    public partial class DayThreeBridgeSetupController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject Bridge;
        public TextureAnimation BridgeCollapseAAnimation;
        public SpriteAnimator BridgeCollapseASpriteAnimator;
        public TextureAnimation BridgeCollapseBAnimation;
        public SpriteAnimator BridgeCollapseBSpriteAnimator;
        public TextureAnimation BridgeCollapseNaruAnimation;
        public Naru Naru;
        public SpriteAnimator NaruCollapseSpriteAnimator;
        public UnityEngine.Transform NaruSpawnPisition;
        public UnityEngine.Collider SurfaceColliderAfterCrash;
        public UnityEngine.Collider SurfaceColliderBeforeCrash;
        public DayThreeBridgeSetupController() { }
        private void BridgeCollapseNaruOnAnimationEnded() { }
        private void NaruTrigger() { }
    }
    public partial class DayThreeTreeSetupController : UnityEngine.MonoBehaviour
    {
        public DayThreeTreeSetupController.State CurrentState;
        private int m_jumpsCount;
        private float m_stateCurrentTime;
        public MovieTextureController MovieTextureController;
        public CharacterAnimationSystem NaruBranchAnimationSystem;
        public TextureAnimationWithTransitions NaruBranchBackwardsAnimation;
        public TextureAnimation NaruBranchGrabAnimation;
        public TextureAnimationWithTransitions NaruBranchIdleAnimation;
        public TextureAnimationWithTransitions NaruBranchJumpAnimation;
        public TextureAnimationWithTransitions NaruBranchJumpIdleAnimation;
        public TextureAnimationWithTransitions NaruBranchJumpIdleCollapseAnimation;
        public TextureAnimationWithTransitions NaruBranchReachAnimation;
        public SpriteAnimatorWithTransitions NaruBranchSpriteAnimatorWithTransitions;
        public SpriteAnimator NaruClimbSpriteAnimator;
        public TextureAnimationWithTransitions TextureAnimationWithTransitions;
        public SpriteAnimator TreeSpriteAnimator;
        public DayThreeTreeSetupController() { }
        public void ChangeState(DayThreeTreeSetupController.State state) { }
        public void FixedUpdate() { }
        private void NaruBranchJumpOnAnimationEnd(TextureAnimation textureAnimation) { }
        private void NaruClimbTrigger() { }
        private void OnJumpAnimationEnd(TextureAnimation textureAnimation) { }
        private void OnNaruClimbAnimationFinished() { }
        public void Start() { }
        public void UpdateState() { }
        public enum State
        {
            BranchBackwards = 2,
            BranchIdle = 1,
            BranchReach = 3,
            Fall = 5,
            Jump = 4,
            JumpForward = 6,
            None = 0,
        }
    }
    public partial class DeactivateOnAwake : UnityEngine.MonoBehaviour
    {
        public DeactivateOnAwake() { }
        private void Awake() { }
    }
    public partial class DeadBatEnemy : UnityEngine.MonoBehaviour, IContextReciever, IDamageReciever, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public CharacterAnimationSystem Animation;
        public DeadBatEnemy.DeathBatEnemyAnimations Animations;
        public DeadBatEnemy.State CurrentState;
        public LegacyAnimator FadeOutAnimator;
        public float Gravity;
        public SurfaceToSoundProviderMap HitGroundSoundProvider;
        public float KnockedBackDuration;
        public UnityEngine.AnimationCurve KnockedBackGravityCurve;
        public UnityEngine.AnimationCurve KnockedBackRotationCurve;
        public UnityEngine.AnimationCurve KnockedBackSpeedCurve;
        public UnityEngine.GameObject LandOnGroundImpactEffect;
        private UnityEngine.Vector3 m_gravityVelocity;
        private UnityEngine.Rigidbody m_rigidbody;
        private float m_stateCurrentTime;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Transform Sprite;
        public UnityEngine.Vector3 Velocity;
        public DeadBatEnemy() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void ChangeState(DeadBatEnemy.State state) { }
        public void FixedUpdate() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnDestroy() { }
        public void OnHitFloor(UnityEngine.Vector3 normal) { }
        public void OnReceiveContext(IContext context) { }
        public void OnRecieveDamage(Damage damage) { }
        public void Start() { }
        public void UpdateState() { }
        public partial class DeathBatEnemyAnimations
        {
            public TextureAnimationWithTransitions DeathPlummet;
            public TextureAnimationWithTransitions DeathPlummetLand;
            public TextureAnimationWithTransitions Hurtling;
            public DeathBatEnemyAnimations() { }
        }
        public enum State
        {
            KnockedBack = 0,
            Plummit = 1,
            PlummitLand = 2,
        }
    }
    public partial class DeadEnemyRagdoll : UnityEngine.MonoBehaviour, IContextReciever, IDamageReciever, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public CharacterAnimationSystem Animation;
        public DeadEnemyRagdoll.RagdollAnimations Animations;
        public float DamageForceSpeed;
        public UnityEngine.GameObject ExplodeEffect;
        public bool ExplodeOnGround;
        public bool ExplodeUnlessBashed;
        public BaseAnimator FadeOutAnimator;
        public SoundProvider HitGroundSoundProvider;
        public UnityEngine.GameObject LandOnGroundImpactEffect;
        private UnityEngine.Vector3 m_actualVelocity;
        private DeadEnemyRagdoll.State m_currentState;
        private float m_currentStateTime;
        private bool m_drownAnimationPlaying;
        private UnityEngine.Vector3 m_gravityVelocity;
        private float m_lifeTime;
        private UnityEngine.Rigidbody m_rigidbody;
        private UnityEngine.SphereCollider m_sphereCollider;
        private UnityEngine.Vector3 m_startVelocity;
        private UnityEngine.Vector3 m_thrownDirection;
        public DeadEnemyRagdoll.EnemyPlumetSettings PlumetSettings;
        public float RayDistance;
        public UnityEngine.LayerMask RayMask;
        public UnityEngine.Transform Sprite;
        public CharacterSpriteMirror SpriteMirror;
        public float StartSpeed;
        public DeadEnemyRagdoll() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void ChangeState(DeadEnemyRagdoll.State state) { }
        public void Explode() { }
        public void FixedUpdate() { }
        public void OnCollision(UnityEngine.Collision collision) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnDestroy() { }
        public void OnEnterDrown() { }
        public void OnEnterFlatLand() { }
        public void OnEnterPlumit() { }
        public void OnHitFloor(UnityEngine.Vector3 normal, UnityEngine.GameObject targetGameObject) { }
        public void OnReceiveContext(IContext context) { }
        public void OnRecieveDamage(Damage damage) { }
        public void Start() { }
        public void UpdateDrown() { }
        public void UpdatePlummit() { }
        public void UpdateState() { }
        public partial class EnemyPlumetSettings
        {
            public float DrownDelay;
            public float Gravity;
            public UnityEngine.AnimationCurve GravityCurve;
            public UnityEngine.AnimationCurve RotationCurve;
            public UnityEngine.AnimationCurve SpeedCurve;
            public UnityEngine.AnimationCurve WaterFrictionCurve;
            public EnemyPlumetSettings() { }
        }
        public partial class RagdollAnimations
        {
            public TextureAnimationWithTransitions DeathPlummet;
            public TextureAnimationWithTransitions DeathPlummetEdgeLand;
            public TextureAnimationWithTransitions DeathPlummetFlatLand;
            public TextureAnimationWithTransitions DeathPlummetLoop;
            public TextureAnimationWithTransitions Drown;
            public RagdollAnimations() { }
        }
        public enum State
        {
            Drown = 2,
            Plummit = 0,
            PlummitLand = 1,
        }
    }
    public partial class DeadJumpingSootEnemy : UnityEngine.MonoBehaviour, IContextReciever, IDamageReciever, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public CharacterAnimationSystem Animation;
        public DeadJumpingSootEnemy.DeathJumpingSootEnemyAnimations Animations;
        public DeadJumpingSootEnemy.State CurrentState;
        public LegacyAnimator FadeOutAnimator;
        public float Gravity;
        public SoundProvider HitGroundSoundProvider;
        public float KnockedBackDuration;
        public UnityEngine.AnimationCurve KnockedBackGravityCurve;
        public UnityEngine.AnimationCurve KnockedBackRotationCurve;
        public UnityEngine.AnimationCurve KnockedBackSpeedCurve;
        public UnityEngine.GameObject LandOnGroundImpactEffect;
        private UnityEngine.Vector3 m_gravityVelocity;
        private UnityEngine.Rigidbody m_rigidbody;
        private float m_stateCurrentTime;
        private UnityEngine.Vector3 m_thrownDirection;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Transform Sprite;
        public CharacterSpriteMirror SpriteMirror;
        public UnityEngine.Vector3 Velocity;
        public DeadJumpingSootEnemy() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void ChangeState(DeadJumpingSootEnemy.State state) { }
        public void FixedUpdate() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnDestroy() { }
        public void OnHitFloor(UnityEngine.Vector3 normal) { }
        public void OnReceiveContext(IContext context) { }
        public void OnRecieveDamage(Damage damage) { }
        public void Start() { }
        public void UpdateState() { }
        public partial class DeathJumpingSootEnemyAnimations
        {
            public TextureAnimationWithTransitions DeathPlummet;
            public TextureAnimationWithTransitions DeathPlummetLand;
            public DeathJumpingSootEnemyAnimations() { }
        }
        public enum State
        {
            Plummit = 0,
            PlummitLand = 1,
        }
    }
    public partial class DealDamageAction : ActionMethod
    {
        public float Amount;
        public DamageType DamageType;
        public UnityEngine.GameObject Target;
        public DealDamageAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class DealDamageOverTime : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float DamageAmount;
        public int DamageDuration;
        public DamageType DamageType;
        public bool DestroyWhenAllDamageDealt;
        private float m_remainingTime;
        private UnityEngine.Transform m_transform;
        public DealDamageOverTime() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void Start() { }
    }
    public partial class DealDamageSphere : UnityEngine.MonoBehaviour
    {
        public int Damage;
        public DamageType DamageType;
        public float Delay;
        private UnityEngine.Transform m_transform;
        public float Radius;
        public DealDamageSphere() { }
        public void Awake() { }
        public void DealDamageSphereMethod() { }
    }
    public partial class DeathInformation
    {
        public int DeathNumber;
        public UnityEngine.Vector3 Position;
        public int Progress;
        public int TimeOfDeath;
        public DeathInformation() { }
        public DeathInformation(UnityEngine.Vector3 position, int timeOfDeath, int progress, int deathNumber) { }
        public void Serialize(Archive ar) { }
    }
    public partial class DeathsData : IFrameData
    {
        public UnityEngine.Vector3 Position;
        public DeathsData() { }
        public DeathsData(System.IO.BinaryReader reader) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    public partial class DeathsPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        public DeathsPlugin() { }
        public void Awake() { }
        public void Exit() { }
        public static System.Collections.Generic.List<UnityEngine.Vector3> ExtractDataFromRecorder(RecorderData recorderData) { return default(System.Collections.Generic.List<UnityEngine.Vector3>); }
        public void OnPlayerDeath() { }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
    }
    public partial class DeathWisp : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject CollectionEffect;
        public DeathInformation DeathInfo;
        public BaseAnimator Disappear;
        private bool m_collected;
        private UnityEngine.Transform m_transform;
        public float Radius;
        public DeathWisp() { }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public void Awake() { }
        public void Collect() { }
        public void FixedUpdate() { }
    }
    public partial class DeathWispsManager : UnityEngine.MonoBehaviour
    {
        public DeathInformation Collected;
        public ActionMethod CollectWispAction;
        public static DeathWispsManager Instance;
        private UnityEngine.Bounds m_lastCameraBounds;
        private System.Collections.Generic.HashSet<DeathWisp> m_leftOvers;
        private System.Collections.Generic.Dictionary<DeathInformation, DeathWisp> m_wisps;
        public UnityEngine.GameObject Wisp;
        public UnityEngine.GameObject WispIcon;
        public MessageProvider WispMessage;
        public DeathWispsManager() { }
        public SeinDeathsManager DeathsManager { get { return default(SeinDeathsManager); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public static void Refresh() { }
        private void UpdateWisps() { }
    }
    public partial class DebugGUIText : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache2;
        private static bool m_enabled;
        private static System.Action OnEnabledChangedEvent;
        public DebugGUIText() { }
        public static bool Enabled { get { return default(bool); } set { } }
        private static event System.Action OnEnabledChangedEvent { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnEnabledChangedEvent>m__16B() { }
        public void Awake() { }
        public void OnDestroy() { }
        private void OnEnabledChanged() { }
    }
    [CategoryAttribute("Debug")]
    public partial class DebugLogAction : ActionMethod
    {
        public string Message;
        public DebugLogAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class DebugMenu : UnityEngine.MonoBehaviour
    {
        public UnityEngine.AnimationCurve AxisToSpeedCurve;
        private bool m_doMotionBlur;
        private UnityEngine.GameObject m_noClipGhost;
        private bool m_noClipParamsEnabled;
        public UnityEngine.GameObject NoClipGhostPrefab;
        private static readonly System.Collections.Generic.HashSet<ISuspendable> SuspendablesToIgnoreForGameplay;
        public DebugMenu() { }
        public static bool DashOrGrenadeEnabled { get { return default(bool); } }
        private static void .cctor() { }
        public void FixedUpdate() { }
        private static void ResumeGameplay() { }
        private static void SuspendGameplay() { }
    }
    public partial class DebugMenuB : SaveSerialize
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<UnityEngine.GameObject, bool> <>f__am$cache33;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<UnityEngine.GameObject, bool> <>f__am$cache34;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache35;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache36;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache37;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache38;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache39;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache3A;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache3B;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache3C;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache3D;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache3E;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache3F;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache40;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache41;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache42;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache43;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache44;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache45;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache46;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache47;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache48;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache49;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache4A;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache4B;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache4C;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache4D;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache4E;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache4F;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache50;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache51;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache52;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache53;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache54;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache55;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<bool> <>f__am$cache56;
        public static bool Active;
        public int BuildID;
        public System.Collections.Generic.List<int> ColumnsWidth;
        public static bool DebugControlsEnabled;
        public static UnityEngine.GUIStyle DebugMenuStyle;
        public float FastForwardTimeScale;
        public System.Collections.Generic.List<GoToSequenceData> GumoSequence;
        public const float HOLD_DELAY = 0.4f;
        public const float HOLD_FAST_DELAY = 0.04f;
        public float HorizontalSpace;
        public System.Collections.Generic.List<SceneMetaData> ImportantLevels;
        public System.Collections.Generic.List<string> ImportantLevelsNames;
        public static DebugMenuB Instance;
        public static bool IsFullyInstalledDebugOverride;
        private UnityEngine.GameObject[] m_art;
        private UnityEngine.Vector2 m_cursorIndex;
        private UnityEngine.GameObject[] m_enemies;
        private UnityEngine.Vector2 m_gumoSequencesCursorIndex;
        private readonly System.Collections.Generic.List<System.Collections.Generic.List<IDebugMenuItem>> m_gumoSequencesMenuList;
        private bool m_highFPSPhysics;
        private float m_holdDelayDuration;
        private float m_holdRemainingTime;
        private bool m_lastDebugMenuActiveState;
        private UnityEngine.Vector2 m_lastGumoSequencesIndex;
        private UnityEngine.Vector2 m_lastIndex;
        private readonly System.Collections.Generic.List<System.Collections.Generic.List<IDebugMenuItem>> m_menuList;
        private System.Collections.Generic.List<UnityEngine.GameObject> m_particleSystems;
        private bool m_showGumoSequences;
        private bool m_showSceneFrameworkDebug;
        private bool m_superSlowMotion;
        private readonly System.Collections.Generic.List<WorldEvents> m_worldEvents;
        public float MenuHeight;
        public float MenuTopLeftX;
        public float MenuTopLeftY;
        public float MenuWidth;
        public static bool MuteAmbience;
        public static bool MuteMusic;
        public static bool MuteSoundEffects;
        public UnityEngine.GameObject NightberryPlaceholder;
        public static UnityEngine.GUIStyle PressedStyle;
        public MessageProvider ReplayGotResetMessageProvider;
        public static UnityEngine.GUIStyle SelectedStyle;
        public static bool ShouldShowOnlySelectedItem;
        public static bool ShowAchievementHint;
        public UnityEngine.GUISkin Skin;
        public static UnityEngine.GUIStyle Style;
        public static UnityEngine.GUIStyle StyleDisabled;
        public static UnityEngine.GUIStyle StyleEnabled;
        private static readonly System.Collections.Generic.HashSet<ISuspendable> SuspendablesToIgnoreForGameplay;
        public SceneMetaData TestScene;
        public static bool UnlockAllCutscenes;
        private long value;
        public float VerticalSpace;
        public DebugMenuB() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__65() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__66(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__67() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__68(bool value) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__69() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__6A(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__6B() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__6C(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__6D() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__6E(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__6F() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__70(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <BuildMenu>m__71() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <BuildMenu>m__72(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__73() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__74(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__75() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__76(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__77() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__78(bool v) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__79() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__7A(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__7B() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__7C(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__7D() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__7E(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__7F() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__80(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__81() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__82(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__83() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__84(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__85() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__86(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <BuildMenu>m__87() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <BuildMenu>m__88(bool val) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <DisableArt>m__63(UnityEngine.GameObject a) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <DisableEnemies>m__64(UnityEngine.GameObject a) { return default(bool); }
        private bool AchievementHintGetter() { return default(bool); }
        private void AchievementHintSetter(bool newValue) { }
        public void AddWorldEvent(WorldEvents worldEvent) { }
        public override void Awake() { }
        private bool BreakSteamTelemetryURL() { return default(bool); }
        private void BuildMenu() { }
        private bool CameraEnabledGetter() { return default(bool); }
        private void CameraEnabledSetter(bool obj) { }
        private bool CheatsGetter() { return default(bool); }
        private void CheatsSetter(bool arg) { }
        private bool CleanWaterGetter() { return default(bool); }
        private void CleanWaterSetter(bool newValue) { }
        private bool CreateCheckpoint() { return default(bool); }
        private bool DarknessLiftedGetter() { return default(bool); }
        private void DarknessLiftedSetter(bool isDarknessLifted) { }
        private bool DeactivateDarknessGetter() { return default(bool); }
        private void DeactivateDarknessSetter(bool arg) { }
        private bool DebugControlsGetter() { return default(bool); }
        private void DebugControlsSetter(bool arg) { }
        private bool DebugMuteAmbienceGetter() { return default(bool); }
        private void DebugMuteAmbienceSetter(bool value) { }
        private bool DebugMuteMusicGetter() { return default(bool); }
        private void DebugMuteMusicSetter(bool value) { }
        private bool DebugMuteSoundEffectsGetter() { return default(bool); }
        private void DebugMuteSoundEffectsSetter(bool value) { }
        private bool DebugSceneFrameworkGetter() { return default(bool); }
        private void DebugSceneFrameworkSetter(bool arg) { }
        private bool DebugTextGetter() { return default(bool); }
        private void DebugTextSetter(bool arg) { }
        private bool DebugXboxControllerGetter() { return default(bool); }
        private void DebugXboxControllerSetter(bool arg) { }
        public bool DisableAllParticles() { return default(bool); }
        public bool DisableArt() { return default(bool); }
        public bool DisableEnemies() { return default(bool); }
        private bool FaderBAction() { return default(bool); }
        public void FixedUpdate() { }
        private bool FixedUpdateSyncGetter() { return default(bool); }
        private void FixedUpdateSyncSetter(bool value) { }
        private bool ForlornEnergyRestoredGetter() { return default(bool); }
        private void ForlornEnergyRestoredSetter(bool obj) { }
        private bool ForlornRuinsKeyGetter() { return default(bool); }
        private void ForlornRuinsKeySetter(bool obj) { }
        private int GetColPosition(int index) { return default(int); }
        private bool GinsoKeyGetter() { return default(bool); }
        private void GinsoKeySetter(bool obj) { }
        private bool GoToScene() { return default(bool); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator GoToScene(string sceneName) { return default(System.Collections.IEnumerator); }
        private void GumFreeSetter(bool obj) { }
        private bool GumoFreeGetter() { return default(bool); }
        private bool GumoSequencesAction() { return default(bool); }
        public void HandleQuickQuit() { }
        public void HideDebugMenu() { }
        private bool HighFPSPhysicsGetter() { return default(bool); }
        private void HighFPSPhysicsSetter(bool value) { }
        private bool HoruKeyGetter() { return default(bool); }
        private void HoruKeySetter(bool obj) { }
        private void Initialize() { }
        private bool LimitPhysicsIterationGetter() { return default(bool); }
        private void LimitPhysicsIterationSetter(bool obj) { }
        private bool LoadGame() { return default(bool); }
        public bool LoadTestScene() { return default(bool); }
        private bool LogCallbackHookGetter() { return default(bool); }
        private void LogCallbackHookSetter(bool arg) { }
        public static void MakeDebugMenuExist() { }
        private bool MistLiftedGetter() { return default(bool); }
        private void MistLiftedSetter(bool value) { }
        public void OnGUI() { }
        public bool PrintReadableTextures() { return default(bool); }
        private bool Quit() { return default(bool); }
        public bool ReinstantiateOri() { return default(bool); }
        private bool ReplayEngineActiveGetter() { return default(bool); }
        private void ReplayEngineActiveSetter(bool newValue) { }
        private void ResetHold() { }
        public bool ResetInputLock() { return default(bool); }
        private bool ResetNightBerryPosition() { return default(bool); }
        private bool ResetSteamStats() { return default(bool); }
        private bool RestoreCheckpoint() { return default(bool); }
        private static void ResumeGameplay() { }
        private bool SaveGame() { return default(bool); }
        private bool SeinDamageTextGetter() { return default(bool); }
        private void SeinDamageTextSetter(bool obj) { }
        private bool SeinInvincibilityGetter() { return default(bool); }
        private void SeinInvincibilitySetter(bool newValue) { }
        private bool SeinUIGetter() { return default(bool); }
        private void SeinUISetter(bool obj) { }
        public bool SendLeaderboard() { return default(bool); }
        [System.Diagnostics.ConditionalAttribute("DEVELOPMENT_BUILD")]
        public void SendOneSteamTelemetry() { }
        public void SendSteamTelemetry(int repetition) { }
        [System.Diagnostics.ConditionalAttribute("DEVELOPMENT_BUILD")]
        public void SendTenSteamTelemetry() { }
        public override void Serialize(Archive ar) { }
        private bool SetSteamTelemetryURLToUPF() { return default(bool); }
        public void ShowDebugMenu() { }
        private bool ShowPinkBoxesGetter() { return default(bool); }
        private void ShowPinkBoxesSetter(bool arg) { }
        private bool ShowSoundLogGetter() { return default(bool); }
        private void ShowSoundLogSetter(bool arg) { }
        private bool SkipAction() { return default(bool); }
        public void Start() { }
        private bool StartFPSTest0() { return default(bool); }
        private bool StartFPSTest120() { return default(bool); }
        private bool StartFPSTest180() { return default(bool); }
        private bool StartFPSTest240() { return default(bool); }
        private bool StartFPSTest60() { return default(bool); }
        private bool StreamingInstallDebugGetter() { return default(bool); }
        private void StreamingInstallDebugSetter(bool value) { }
        private static void SuspendGameplay() { }
        public bool TeleportNightberry() { return default(bool); }
        public static void ToggleDebugMenu() { }
        private bool UnloadUnusedGetter() { return default(bool); }
        private void UnloadUnusedSetter(bool arg) { }
        private bool UnlockDifficulties() { return default(bool); }
        public void Update() { }
        private bool VisitAllAreas() { return default(bool); }
        private bool VisualLogGetter() { return default(bool); }
        private void VisualLogSetter(bool arg) { }
        private bool WindReleasedGetter() { return default(bool); }
        private void WindReleasedSetter(bool released) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GoToScene>c__Iterator16 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal string <$>sceneName;
            internal RuntimeSceneMetaData <sceneInformation>__0;
            internal string sceneName;
            public <GoToScene>c__Iterator16() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <ReinstantiateOri>c__AnonStorey52
        {
            internal UnityEngine.Vector3 position;
            public <ReinstantiateOri>c__AnonStorey52() { }
            internal void <>m__62() { }
        }
    }
    public partial class DebugMenuHandler : UnityEngine.MonoBehaviour
    {
        public DebugMenuHandler() { }
        public void FixedUpdate() { }
    }
    public partial class DebugMenuToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        public string HelpString;
        private string[] m_cachedOptionList;
        private int m_currentOptionId;
        public DebugMenuToggler.ToggleOption NoneEnabledOption;
        public System.Collections.Generic.List<DebugMenuToggler.ToggleOption> Options;
        public string TogglerName;
        public DebugMenuToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
        private void SetCurrentToggleOption(int toggleOptionId) { }
        public partial class ToggleOption
        {
            public System.Collections.Generic.List<UnityEngine.MonoBehaviour> ComponentsToEnable;
            public string Name;
            public System.Collections.Generic.List<UnityEngine.GameObject> ObjectToEnable;
            public ToggleOption() { }
        }
    }
    internal partial class DebugMenuTogglerItem : IDebugMenuItem
    {
        private IDebugMenuToggleable m_toggleable;
        public DebugMenuTogglerItem(IDebugMenuToggleable toggleable) { }
        public string HelpText { get { return default(string); } set { } }
        public string Text { get { return default(string); } set { } }
        public void Draw(UnityEngine.Rect rect, bool selected) { }
        public void OnSelected() { }
        public virtual void OnSelectedFixedUpdate() { }
        public virtual void OnSelectedUpdate() { }
    }
    public partial class DebugMenuWorldEventActionMenuItem : ActionDebugMenuItem
    {
        private WorldEvents m_worldEvent;
        public DebugMenuWorldEventActionMenuItem(WorldEvents worldEvent) { }
        private void UpdateText() { }
        private bool UpdateWorldEventValue() { return default(bool); }
    }
    public partial class DebugOutput : UnityEngine.MonoBehaviour
    {
        private static bool init;
        private static System.IO.StreamWriter sw;
        public DebugOutput() { }
        private void Awake() { }
        private void OnDestroy() { }
        public static void Output(string text) { }
    }
    [CustomShaderModifier("Decal Layer Distort Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(8))]
    [UberShaderOrderAttribute((UberShaderOrder)(53))]
    public partial class DecalLayerDistortModifier : UberShaderModifier
    {
        public UberShaderColor DecalLayerColor;
        public UberShaderTexture DecalLayerMaskTexture;
        public UberShaderTexture DecalLayerTexture;
        [UberShaderVectorDisplay("Strength", "")]
        public UberShaderVector DistortStrength;
        public UberShaderTexture DistortTexture;
        public DecalLayerDistortModifier() { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Decal Layer Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(8))]
    [UberShaderOrderAttribute((UberShaderOrder)(52))]
    public partial class DecalLayerModifier : UberShaderModifier
    {
        public UberShaderColor DecalLayerColor;
        public UberShaderTexture DecalLayerMaskTexture;
        public UberShaderTexture DecalLayerTexture;
        public DecalLayerModifier() { }
        public override void SetProperties() { }
    }
    public partial class DelayedActionExecuter : TimedActionExecuter
    {
        public float Delay;
        private ActionMethod m_action;
        public DelayedActionExecuter() { }
        public override ActionMethod ActionMethod { get { return default(ActionMethod); } }
        public override ActionWithDuration ActionWithDuration { get { return default(ActionWithDuration); } }
        public override float StartTime { get { return default(float); } set { } }
        public override void ExecuteAction(IContext context) { }
        public override void StopAction() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class DepthOfFieldController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.AnimationCurve DepthOfFieldCurve;
        private static double m_lastCheckTime;
        public DepthOfFieldController() { }
    }
    public partial class DesaturationSettings
    {
        public float Amount;
        public DesaturationSettings() { }
        public DesaturationSettings Clone() { return default(DesaturationSettings); }
    }
    [CategoryAttribute("General")]
    public partial class DestroyCharacterAction : ActionMethod
    {
        public DestroyCharacterAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Sein")]
    public partial class DestroyGameplayElementsAction : ActionMethod
    {
        public DestroyGameplayElementsAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class DestroyManager
    {
        private readonly System.Collections.Generic.Stack<UnityEngine.Transform> m_destroy;
        private readonly System.Collections.Generic.Stack<UnityEngine.Object> m_destroyResources;
        private readonly System.Collections.Generic.Stack<UnityEngine.Object> m_unloadResources;
        public DestroyManager() { }
        public bool IsDestroying { get { return default(bool); } }
        private void AddTransform(UnityEngine.Transform transform) { }
        public void DestroyAll() { }
        public void DestroyGameObjectAsync(UnityEngine.GameObject target) { }
        public void DestroyResourcesAsync(System.Collections.Generic.List<UnityEngine.Object> resources) { }
        public void UnloadResourcesAsync(System.Collections.Generic.List<UnityEngine.Object> runtimeResources) { }
        public void Update() { }
    }
    public partial class DestroyMaterialOnDestroy : UnityEngine.MonoBehaviour
    {
        public DestroyMaterialOnDestroy() { }
        private void OnDestroy() { }
    }
    public partial class DestroyMistTorchAction : ActionMethod
    {
        public DestroyMistTorchAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class DestroyNightBerryAction : ActionMethod
    {
        public DestroyNightBerryAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("General")]
    public partial class DestroyObjectAction : ActionMethod
    {
        [NotNull]
        public UnityEngine.GameObject ObjectToDestroy;
        public DestroyObjectAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class DestroyOnMenuOpen : UnityEngine.MonoBehaviour
    {
        public DestroyOnMenuOpen() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnMenuOpen() { }
    }
    public partial class DestroyOnRestoreCheckpoint : UnityEngine.MonoBehaviour
    {
        public DestroyOnRestoreCheckpoint() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
    }
    public partial class DestroyOnScrollLock : UnityEngine.MonoBehaviour
    {
        public DestroyOnScrollLock() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnScrollLockPassed() { }
    }
    public partial class DestroyOnStartUnlessDebug : UnityEngine.MonoBehaviour
    {
        public DestroyOnStartUnlessDebug() { }
        private void Start() { }
    }
    public partial class DestroyWhenInvisible : UnityEngine.MonoBehaviour
    {
        public BaseAnimator Animator;
        public bool DestroyAtEnd;
        public bool DestroyReversedToStart;
        public DestroyWhenInvisible() { }
        private void FixedUpdate() { }
    }
    public partial class DestroyWhenOutsideActiveBoundaries : UnityEngine.MonoBehaviour
    {
        private int m_index;
        public DestroyWhenOutsideActiveBoundaries() { }
        public void FixedUpdate() { }
    }
    public partial class DetachOnKill : UnityEngine.MonoBehaviour, IKillReciever, IPooled
    {
        public float LifetimeLimit;
        public bool LimitLifetime;
        private float m_countDown;
        private float m_emit;
        private UnityEngine.ParticleEmitter m_emitter;
        private bool m_killed;
        private float m_maxEmit;
        private float m_minEmit;
        private UnityEngine.ParticleSystem m_particleSystem;
        private static UnityEngine.GameObject s_detachOnKillObjectsParent;
        public bool StopParticleEmission;
        public DetachOnKill() { }
        private void Awake() { }
        public static UnityEngine.GameObject GetDetachOnKillObjectsParent() { return default(UnityEngine.GameObject); }
        public void OnKill() { }
        public void OnPoolSpawned() { }
        private void Update() { }
    }
    public partial class DetachRopeOnStomp : UnityEngine.MonoBehaviour, IAttackable, IDamageReciever, IStompAttackable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <Position>k__BackingField;
        public int DetachmentsPerStomp;
        public AttachToRope[] RopeAttachments;
        public DetachRopeOnStomp() { }
        public UnityEngine.Vector3 Position { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        public bool CountsTowardsSuperJumpAchievement() { return default(bool); }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void OnRecieveDamage(Damage damage) { }
    }
    public partial class DictionaryList<Key, Value>
    {
        public System.Collections.Generic.Dictionary<Key, Value> Dictionary;
        public System.Collections.Generic.List<DictionaryList<Key, Value>.KeyValuePair> List;
        public int Test;
        public DictionaryList() { }
        public int Count { get { return default(int); } }
        public void Add(Key key, Value value) { }
        public void Clear() { }
        public void Remove(Key key) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Remove>c__AnonStorey67
        {
            internal DictionaryList<Key, Value> <>f__this;
            internal Key key;
            public <Remove>c__AnonStorey67() { }
            internal bool <>m__142(DictionaryList<Key, Value>.KeyValuePair a) { return default(bool); }
        }
        public partial class KeyValuePair
        {
            public Key Key;
            public Value Value;
            public KeyValuePair(Key key, Value value) { }
        }
    }
    public partial class DifficultyCondition : Condition
    {
        public bool Easy;
        public bool Hard;
        public bool Normal;
        public bool OneLife;
        public DifficultyCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class DifficultyController : SaveSerialize
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache4;
        public DifficultyMode Difficulty;
        public static DifficultyController Instance;
        public DifficultyMode LowestDifficulty;
        public System.Action OnDifficultyChanged;
        public DifficultyController() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnDifficultyChanged>m__16F() { }
        public override void Awake() { }
        public void ChangeDifficulty(DifficultyMode easy) { }
        public override void OnDestroy() { }
        public void OnGameReset() { }
        public override void Serialize(Archive ar) { }
        public void SetDifficulty(DifficultyMode difficulty) { }
    }
    public enum DifficultyMode
    {
        Easy = 0,
        Hard = 2,
        Normal = 1,
        OneLife = 3,
    }
    public partial class DifficultyModeMessageProvider : MessageProvider
    {
        public MessageProvider Difficulty;
        public MessageProvider Easy;
        public MessageProvider Hard;
        public MessageProvider Normal;
        public MessageProvider OneLife;
        public DifficultyModeMessageProvider() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages() { return default(System.Collections.Generic.IEnumerable<MessageDescriptor>); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetMessages>c__Iterator17 : System.Collections.Generic.IEnumerable<MessageDescriptor>, System.Collections.Generic.IEnumerator<MessageDescriptor>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal MessageDescriptor $current;
            internal int $PC;
            internal DifficultyModeMessageProvider <>f__this;
            internal MessageProvider <modeMessage>__0;
            public <GetMessages>c__Iterator17() { }
            MessageDescriptor System.Collections.Generic.IEnumerator<MessageDescriptor>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(MessageDescriptor); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<MessageDescriptor> System.Collections.Generic.IEnumerable<MessageDescriptor>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<MessageDescriptor>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class DifficultyToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private int m_currentOption;
        public DifficultyToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
    }
    public partial class DifficultyUnlockedCondition : Condition
    {
        public DifficultyMode Difficulty;
        public DifficultyUnlockedCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class DirectionalPlayerCollisionTrigger : Trigger
    {
        private PlatformMovement m_platformMovement;
        public ActionMethod MovingLeftActionToRun;
        public ActionMethod MovingRightActionToRun;
        public DirectionalPlayerCollisionTrigger() { }
        private void OnCollisionEnter(UnityEngine.Collision collision) { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
        private void Process(UnityEngine.GameObject gameObject) { }
    }
    public partial class DisableEmitterOnKill : UnityEngine.MonoBehaviour, IKillReciever
    {
        private bool m_doEmit;
        private UnityEngine.ParticleEmitter m_emitter;
        private UnityEngine.ParticleSystem m_particleSystem;
        public DisableEmitterOnKill() { }
        private void Awake() { }
        public void OnKill() { }
        private void OnPoolSpawned() { }
    }
    public partial class DisableGameObjectWhenOutOfFrustrum : UnityEngine.MonoBehaviour, IFrustumOptimizable, IPooled, ISceneRootPreEnableObserver
    {
        public bool Activated;
        public UnityEngine.Rect BoundingBox;
        private bool m_awakeCalled;
        private UnityEngine.Bounds m_bounds;
        private bool m_insideFrustum;
        public UnityEngine.Bounds SetBounds;
        public bool SpecifyBoundingBox;
        public bool SpecifyBounds;
        public DisableGameObjectWhenOutOfFrustrum() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFrustum { get { return default(bool); } }
        public void Awake() { }
        public bool IsValid() { return default(bool); }
        public void OnDestroy() { }
        public void OnDrawGizmosSelected() { }
        public void OnFrustumEnter() { }
        public void OnFrustumExit() { }
        public void OnPoolSpawned() { }
        public void OnSceneRootPreEnable() { }
        private void UpdateBounds() { }
    }
    public partial class DisableGameObjectWithHealthWhenOutOfFrustum : UnityEngine.MonoBehaviour, IFrustumOptimizable
    {
        public HealthController HealthController;
        private UnityEngine.Bounds m_bounds;
        private bool m_insideFrustum;
        public DisableGameObjectWithHealthWhenOutOfFrustum() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFrustum { get { return default(bool); } }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnFrustumEnter() { }
        public void OnFrustumExit() { }
        public void Start() { }
    }
    public partial class DisableOnKill : UnityEngine.MonoBehaviour, IKillReciever
    {
        public DisableOnKill() { }
        public void OnKill() { }
    }
    public partial class DisableOnRestoreCheckpoint : UnityEngine.MonoBehaviour
    {
        public DisableOnRestoreCheckpoint() { }
        private void Awake() { }
        private void OnDestroy() { }
        private void OnRestoreCheckpoint() { }
    }
    public partial class DisableRendererWhenOutOfFrustrum : UnityEngine.MonoBehaviour, IFrustumOptimizable
    {
        private UnityEngine.Bounds m_bounds;
        private bool m_insideFrustum;
        public DisableRendererWhenOutOfFrustrum() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFrustum { get { return default(bool); } }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnFrustumEnter() { }
        public void OnFrustumExit() { }
        public void Start() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class DisableScale : UnityEngine.MonoBehaviour
    {
        public DisableScale() { }
        private void Start() { }
        private void Update() { }
    }
    [UnityEngine.RequireComponent(typeof(UnityEngine.GUIText))]
    public partial class DisplayMemoryData : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<DisplayMemoryData.TextureWithMemory> <>f__am$cache2;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<DisplayMemoryData.AudioWithMemory> <>f__am$cache3;
        public float Intervals;
        private float m_timeOfLastSample;
        public DisplayMemoryData() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <RefreshStats>m__170(DisplayMemoryData.TextureWithMemory a, DisplayMemoryData.TextureWithMemory b) { return default(int); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <RefreshStats>m__171(DisplayMemoryData.AudioWithMemory a, DisplayMemoryData.AudioWithMemory b) { return default(int); }
        public void RefreshStats() { }
        private void Start() { }
        private void Update() { }
        public partial class AudioWithMemory
        {
            public UnityEngine.AudioClip Clip;
            public float Memory;
            public AudioWithMemory(UnityEngine.AudioClip clip, float memory) { }
        }
        public partial class TextureWithMemory
        {
            public float Memory;
            public UnityEngine.Texture Texture;
            public TextureWithMemory(UnityEngine.Texture texture, float memory) { }
        }
    }
    [CustomShaderModifier("Distort extra")]
    [UberShaderCategoryAttribute((UberShaderCategory)(3))]
    [UberShaderOrderAttribute((UberShaderOrder)(17))]
    public partial class DistortExtraModifier : DistortModifier
    {
        public DistortExtraModifier() { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Distort")]
    [UberShaderCategoryAttribute((UberShaderCategory)(3))]
    [UberShaderOrderAttribute((UberShaderOrder)(16))]
    public partial class DistortModifier : UberShaderModifier, IAnimatedGraphic
    {
        public UberShaderTexture DistortMaskTexture;
        [UberShaderVectorDisplay("Distort strength (uv)", "Separation offsets (uv)")]
        public UberShaderVector DistortSettings;
        public UberShaderTexture DistortTexture;
        public DistortModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override float GetQuadExpandSize() { return default(float); }
        public override void Randomize() { }
        public override void SetProperties() { }
    }
    public partial class DontCrushPlayer : UnityEngine.MonoBehaviour
    {
        public DontCrushPlayer() { }
    }
    public partial class DontDestroyOnLoad : UnityEngine.MonoBehaviour
    {
        public DontDestroyOnLoad() { }
        private void Start() { }
    }
    public partial class Door : UnityEngine.MonoBehaviour
    {
        public ActionMethod ComeOutOfDoorAction;
        public bool CreateCheckpoint;
        public ActionMethod EnterDoorAction;
        public string OtherDoorName;
        public MessageProvider OverrideEnterDoorMessage;
        public float TransitionDelay;
        public Door() { }
        public SceneRoot SceneRoot { get { return default(SceneRoot); } }
        private void OnTriggerStay(UnityEngine.Collider other) { }
    }
    public partial class DoorSlot : UnityEngine.MonoBehaviour
    {
        public bool Activated;
        public DoorWithSlots Door;
        public int Index;
        private LegacyAnimator[] m_animators;
        public DoorSlot() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnGameSerializeLoad() { }
    }
    public partial class DoorWithSlots : SaveSerialize
    {
        public DoorWithSlots.State CurrentState;
        public ControllerShakeAsset DoorKeyInsertControllerShake;
        public CameraShakeAsset DoorKeyInsertShake;
        public MessageProvider HintMessage;
        private bool m_checkItOpened;
        private MessageBox m_hint;
        private SoundPlayer m_openDoorSound;
        private bool m_opensOnLeftSide;
        private int m_slotsFilled;
        private int m_slotsPending;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Transform m_transform;
        public SoundProvider NotEnoughLeafsSoundProvider;
        public int NumberOfOrbsRequired;
        public int NumberOfOrbsUsed;
        public ActionMethod OnFailAction;
        public ActionMethod OnOpenedAction;
        public SoundProvider OnOriEnterSoundProvider;
        public SoundProvider OnOriExitSoundProvider;
        public SoundProvider OpenDoorSoundProvider;
        public float OriDuration;
        public UnityEngine.Color OriHoverColor;
        public UnityEngine.Transform OriTarget;
        public SoundProvider PlaceLeafSoundSoundProvider;
        public float Radius;
        public SoundProvider RestoreLeafsSoundProvider;
        public DoorWithSlots() { }
        public float DistanceToSein { get { return default(float); } }
        public bool OriHasTargets { get { return default(bool); } }
        public bool SeinInRange { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <FixedUpdate>m__155() { }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void Highlight() { }
        private void MakeSureItsAtEnd(UnityEngine.Transform c) { }
        public void OnDisable() { }
        public void OnValidate() { }
        public void RestoreOrbs() { }
        public override void Serialize(Archive ar) { }
        public void Unhighlight() { }
        public enum State
        {
            Highlighted = 1,
            Normal = 0,
            Opened = 2,
        }
    }
    public partial class DropLootSettings
    {
        public float EnergyShardChance;
        public float HeartChance;
        public DropLootSettings() { }
    }
    [CategoryAttribute("Obsolete")]
    public partial class DropNightBerryAction : ActionMethod
    {
        public DropNightBerryAction.NightBerryAction Action;
        public DropNightBerryAction() { }
        public override void Perform(IContext context) { }
        public enum NightBerryAction
        {
            DropNightBerry = 0,
            ShrinkSpiritRing = 1,
        }
    }
    public partial class DropPickup : UnityEngine.MonoBehaviour, IDamageReciever, IPooled, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public DropPickup.State CurrentState;
        public DamageBasedPrefabProvider DeathEffectProvider;
        public float FallingDuration;
        public float FlashDuration;
        public UnityEngine.Vector3 Gravity;
        public float HoverDuration;
        [PooledSafeAttribute]
        private int m_frame;
        private float m_gravityWeight;
        private bool m_inWater;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private LegacyAnimator[] m_legacyAnimator;
        private float m_radius;
        private UnityEngine.Rigidbody m_rigidbody;
        private bool m_shouldSuckTowardsPlayer;
        private UnityEngine.SphereCollider m_sphereCollider;
        private UnityEngine.Vector3 m_startGravity;
        private float m_stateCurrentTime;
        private float m_suckTowardsPlayerCurrentTime;
        public UnityEngine.AnimationCurve SuckInForceOverDistance;
        public UnityEngine.AnimationCurve SuckInForceOverTime;
        public DropPickup() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool PlayerInControl { get { return default(bool); } }
        public void Awake() { }
        public void ChangeState(DropPickup.State state) { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnPoolSpawned() { }
        public void OnRecieveDamage(Damage damage) { }
        public void OnValidate() { }
        public void UpdateState() { }
        private void UpdateSuckTowardsPlayer() { }
        private void UpdateWaterBehaviour() { }
        public enum State
        {
            Falling = 1,
            Flashing = 2,
            Hover = 0,
        }
    }
    public partial class DropSlugAlertState : DropSlugState
    {
        public DropSlugAlertState(DropSlugEnemy slug) : base (default(DropSlugEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
    }
    public partial class DropSlugEnemy : Enemy
    {
        public SoundSource Alert;
        public DropSlugEnemyAnimations Animations;
        public SoundSource DropDown;
        public PrefabSpawner Explosion;
        public FlyMovement FlyMovement;
        public SoundSource Idle;
        private bool m_timedRespawn;
        public DropSlugEnemySettings Settings;
        public SpriteRotationController SpriteRotation;
        public DropSlugEnemy.States State;
        public DropSlugEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__93() { }
        public override bool CanBeOptimized() { return default(bool); }
        public new void FixedUpdate() { }
        public bool HasHitGround() { return default(bool); }
        public void OnThrow() { }
        public new void OnTimedRespawn() { }
        public bool ShouldAlert() { return default(bool); }
        public bool ShouldFall() { return default(bool); }
        public bool ShouldNotAlert() { return default(bool); }
        public bool ShouldThrow() { return default(bool); }
        public bool ShouldThrow2() { return default(bool); }
        public new void Start() { }
        public partial class States
        {
            public DropSlugAlertState Alert;
            public DropSlugFallState Fall;
            public DropSlugIdleState Idle;
            public DropSlugLandState Land;
            public fsm.State Respawn;
            public DropSlugThrownState Thrown;
            public States() { }
        }
    }
    public partial class DropSlugEnemyAnimations
    {
        public TextureAnimationWithTransitions Alert;
        public TextureAnimationWithTransitions Fall;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions Respawn;
        public TextureAnimationWithTransitions Thrown;
        public DropSlugEnemyAnimations() { }
    }
    public partial class DropSlugEnemyPlaceholder : RespawningPlaceholder
    {
        public UnityEngine.GameObject DropOwlEnemy;
        public DropSlugEnemyPlaceholder.DropOwlPlaceholderSettings Settings;
        public DropSlugEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class DropOwlPlaceholderSettings
        {
            public float AlertRange;
            public float DamageOnTouch;
            public float DropDistance;
            public float ExplosionDamage;
            public float FallRange;
            public float Health;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public float Speed;
            public DropOwlPlaceholderSettings() { }
        }
    }
    public partial class DropSlugEnemySettings
    {
        public float AlertRange;
        public float BelowOffset;
        public float ExplosionDamage;
        public float FallRange;
        public float HorizontalAcceleration;
        public float HorizontalMaxSpeed;
        public UnityEngine.GameObject RespawnEffect;
        public float Speed;
        public UnityEngine.AnimationCurve SpeedMultiplierOverTime;
        public float ThrownGravity;
        public DropSlugEnemySettings() { }
    }
    public partial class DropSlugFallState : DropSlugState
    {
        public DropSlugFallState(DropSlugEnemy slug) : base (default(DropSlugEnemy)) { }
        public override void OnEnter() { }
        public override void UpdateState() { }
    }
    public partial class DropSlugIdleState : DropSlugState
    {
        public DropSlugIdleState(DropSlugEnemy slug) : base (default(DropSlugEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public void SetSettings() { }
    }
    public partial class DropSlugLandState : DropSlugState
    {
        public DropSlugLandState(DropSlugEnemy slug) : base (default(DropSlugEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class DropSlugState : fsm.IState
    {
        protected DropSlugEnemy Slug;
        public DropSlugState(DropSlugEnemy slug) { }
        public float CurrentStateTime { get { return default(float); } }
        public virtual void OnEnter() { }
        public virtual void OnExit() { }
        public virtual void UpdateState() { }
    }
    public partial class DropSlugThrownState : DropSlugState
    {
        public DropSlugThrownState(DropSlugEnemy slug) : base (default(DropSlugEnemy)) { }
        public override void OnEnter() { }
        public override void UpdateState() { }
    }
    public partial class DrownPlayer : UnityEngine.MonoBehaviour
    {
        public DrownPlayer() { }
        private void OnTriggerStay(UnityEngine.Collider other) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class DynamicLightSource : UnityEngine.MonoBehaviour
    {
        public float LightFalloffExponent;
        public float LightFalloffRadius;
        public DynamicLightSource() { }
        private void Update() { }
    }
    public partial class DynamicPrefabPlaceholder : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.Dictionary<string, UnityEngine.GameObject> InstantiatedPrefabs;
        public UnityEngine.GameObject Prefab;
        public string UniqueName;
        public DynamicPrefabPlaceholder() { }
        private static void .cctor() { }
        public void Awake() { }
    }
    public static partial class EaseFunction
    {
        public static float easeInOutSine(float value) { return default(float); }
        public static float easeLinear(float value) { return default(float); }
    }
    public static partial class EditorGame
    {
    }
    public static partial class EditorInput
    {
        public static bool AltDown { get { return default(bool); } }
        public static bool ControlDown { get { return default(bool); } }
        public static bool DeletePressed { get { return default(bool); } }
        public static bool LeftMouseDown { get { return default(bool); } }
        public static bool LeftMouseDrag { get { return default(bool); } }
        public static bool LeftMouseUp { get { return default(bool); } }
        public static bool MiddleMouseDown { get { return default(bool); } }
        public static UnityEngine.Vector2 mousePosition { get { return default(UnityEngine.Vector2); } }
        public static bool OnLeftMouseDoubleClickDown { get { return default(bool); } }
        public static bool RightMouseDown { get { return default(bool); } }
        public static bool RightMouseDrag { get { return default(bool); } }
        public static bool RightMouseUp { get { return default(bool); } }
        public static bool ShiftDown { get { return default(bool); } }
        public static bool KeyDown(UnityEngine.KeyCode keyCode) { return default(bool); }
    }
    public static partial class EditorScene
    {
    }
    public enum EmotionType
    {
        Happy = 1,
        Neutral = 0,
        Sad = 2,
        Scared = 3,
        Urgent = 4,
    }
    [CategoryAttribute("General")]
    public partial class EnableComponentAction : ActionMethod
    {
        public bool ShouldEnable;
        [NotNull]
        public UnityEngine.MonoBehaviour Target;
        public EnableComponentAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Serialize(Archive ar) { }
    }
    public partial class EnableDisableByPause : UnityEngine.MonoBehaviour
    {
        public UnityEngine.MonoBehaviour ComponentToControl;
        public EnableDisableByPause() { }
        private void Start() { }
    }
    public partial class EnableMainMenuAction : ActionMethod
    {
        public bool Enabled;
        public EnableMainMenuAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class EnableMapAction : ActionMethod
    {
        public bool Enabled;
        public EnableMapAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class EnableParticleEmitterOnStart : UnityEngine.MonoBehaviour
    {
        public EnableParticleEmitterOnStart() { }
        public void Awake() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator Start() { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Start>c__Iterator42 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal EnableParticleEmitterOnStart <>f__this;
            public <Start>c__Iterator42() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class Enemy : SpriteEntity
    {
        public Enemy() { }
        public static float ScaleHealth(float health) { return default(float); }
    }
    public partial class EnemyStopper : UnityEngine.MonoBehaviour
    {
        private static AllContainer<EnemyStopper> m_all;
        private UnityEngine.Rect m_bounds;
        public EnemyStopper() { }
        private static void .cctor() { }
        public void Awake() { }
        public static bool InsideEnemyStopper(UnityEngine.Vector3 position) { return default(bool); }
        public static bool InsideEnemyStopper(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, out bool doesContain) { doesContain = default(bool); return default(bool); }
        public void OnDestroy() { }
    }
    public partial class EnemyZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<EnemyZone> All;
        private UnityEngine.Rect m_bounds;
        private UnityEngine.Rect[] m_childBounds;
        public EnemyZone() { }
        private static void .cctor() { }
        public void Awake() { }
        public static bool InSameZone(UnityEngine.Vector2 origin, UnityEngine.Vector2 position) { return default(bool); }
        public bool IsInside(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDestroy() { }
    }
    internal partial class EnergyDebugMenuItem : FloatDebugMenuItem
    {
        public EnergyDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class EnergyDoor : SaveSerialize
    {
        public SoundProvider ActivateSoundProvider;
        public int AmountOfEnergyRequired;
        public int AmountOfEnergyUsed;
        public EnergyDoor.State CurrentState;
        public MessageProvider HintMessage;
        public UnityEngine.Texture2D HintTexture;
        private MessageBox m_hint;
        private System.Collections.Generic.List<EnergyDoorSlot> m_slots;
        private int m_slotsFilled;
        private int m_slotsPending;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Transform m_transform;
        public ActionMethod OnFailAction;
        public ActionMethod OnOpenedAction;
        public SoundProvider OnOriEnterSoundProvider;
        public SoundProvider OnOriExitSoundProvider;
        public float OriDuration;
        public UnityEngine.Transform OriTarget;
        public SoundProvider PlaceSlotSoundProvider;
        public float Radius;
        public SoundProvider RestoreSoundProvider;
        public EnergyDoor() { }
        public float DistanceToSein { get { return default(float); } }
        public bool OriHasTargets { get { return default(bool); } }
        public bool SeinInRange { get { return default(bool); } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void Highlight() { }
        public void OnDisable() { }
        public void OnValidate() { }
        public void RegisterSlot(EnergyDoorSlot slot) { }
        public void RestoreOrbs() { }
        public override void Serialize(Archive ar) { }
        public void Unhighlight() { }
        public void UpdateSlots() { }
        public enum State
        {
            Highlighted = 1,
            Normal = 0,
            Opened = 2,
        }
    }
    public partial class EnergyDoorSlot : UnityEngine.MonoBehaviour
    {
        public bool Activated;
        public UnityEngine.GameObject ActivateSpawnEffect;
        public EnergyDoor Door;
        public int Index;
        public UnityEngine.GameObject Slot;
        public EnergyDoorSlot() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void Refresh() { }
    }
    public partial class EnergyOrbPickup : PickupBase
    {
        public int Amount;
        public EnergyOrbPickup() { }
        public override void OnCollectorCandidateTouch(UnityEngine.GameObject collector) { }
    }
    public partial class EnterExitActionsExecutor : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache8;
        public PerformingAction EnterAction;
        public PerformingAction ExitAction;
        private bool m_exitActionWasPerforming;
        private bool m_shouldPerformEnter;
        private bool m_shouldPerformExit;
        private System.Action OnExitActionFinished;
        public bool WaitForEnterActionToFinish;
        public bool WaitForExitActionToFinish;
        public EnterExitActionsExecutor() { }
        public event System.Action OnExitActionFinished { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnExitActionFinished>m__2A() { }
        public void EnterTrigger() { }
        public void ExitTrigger() { }
        private void FixedUpdate() { }
        private void PerformEnterAction() { }
        private void PerformExitAction() { }
    }
    public partial class Entity : SaveSerialize, IFrustumOptimizable, IRespawnReciever, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <StartPosition>k__BackingField;
        public UnityEngine.Rect BoundingBox;
        public EntityController Controller;
        public EntityDamageDealer DamageDealer;
        public EntityDamageReciever DamageReciever;
        public bool FrustrumOptimized;
        private bool m_insideFrustum;
        private bool m_registeredToSceneRootDisabled;
        protected MoonGuid SceneRootGUID;
        public EntityTargetting Targetting;
        public Entity() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFrustum { get { return default(bool); } }
        public bool IsInWater { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool LeftOfStartPosition { get { return default(bool); } }
        public bool PlayerIsToLeft { get { return default(bool); } }
        public UnityEngine.Vector3 PlayerPosition { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector3 PositionToPlayerPosition { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector3 PositionToStartPosition { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Quaternion Rotation { get { return default(UnityEngine.Quaternion); } set { } }
        public UnityEngine.Vector3 StartPosition { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 StartPositionToPlayerPosition { get { return default(UnityEngine.Vector3); } }
        public void ActivateDamageDealer() { }
        public void ActivateTargetting() { }
        public bool AfterTime(float duration) { return default(bool); }
        public override void Awake() { }
        public virtual bool CanBeOptimized() { return default(bool); }
        public void DeactivateDamageDealer() { }
        public void DeactivateTargetting() { }
        public void DestroyPrefab(PrefabSpawner prefabSpawner) { }
        public void Drown() { }
        public void FixedUpdate() { }
        public void FreeOwnership(RespawningPlaceholder placeholder) { }
        public bool IsOnScreen() { return default(bool); }
        public override void OnDestroy() { }
        public void OnFrustumEnter() { }
        public void OnFrustumExit() { }
        public void OnSceneUnloaded(SceneRoot sceneRoot) { }
        public void OnTimedRespawn() { }
        public bool PlayerInsideSameScene() { return default(bool); }
        public void PlaySound(SoundProvider sound) { }
        public void PlaySound(SoundSource sound) { }
        public void ReclaimOwernship(RespawningPlaceholder placeholder) { }
        public void RegisterRespawnDelegate(System.Action onRespawn) { }
        public override void Serialize(Archive ar) { }
        public void SetSceneRoot(MoonGuid sceneRoot) { }
        public void SpawnPrefab(PrefabSpawner prefabSpawner) { }
        public void SpawnPrefab(UnityEngine.GameObject prefab) { }
        public void Start() { }
        public void StopSound(SoundSource sound) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RegisterRespawnDelegate>c__AnonStorey54
        {
            internal System.Action onRespawn;
            public <RegisterRespawnDelegate>c__AnonStorey54() { }
            internal void <>m__90(Damage a) { }
        }
    }
    public partial class EntityController : SaveSerialize, IDamageReciever, INearSeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <LastSeenSeinPosition>k__BackingField;
        public Entity Entity;
        private bool m_nearSein;
        private fsm.TransitionManager m_transManager;
        public System.Action<Damage> OnReceiveDamage;
        public fsm.StateMachine StateMachine;
        public EntityController() { }
        public UnityEngine.Vector3 LastSeenSeinPosition { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool NearSein { get { return default(bool); } }
        private SpriteEntity SpriteEntity { get { return default(SpriteEntity); } }
        public new void Awake() { }
        public void FixedUpdate() { }
        public bool IsNearSein() { return default(bool); }
        public void OnAnimationEnd(TextureAnimation anim) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionExit(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnNearSeinEnter() { }
        public void OnNearSeinExit() { }
        public void OnRecieveDamage(Damage damage) { }
        public void OnSeinNearStay() { }
        public void OnValidate() { }
        public override void Serialize(Archive ar) { }
        [UnityEngine.ContextMenu("Current state class name")]
        public void ShowCurrentStateClassName() { }
    }
    public partial class EntityDamageDealer : DamageDealer
    {
        public Entity Entity;
        public EntityDamageDealer() { }
        public void Awake() { }
        public void OnValidate() { }
    }
    public partial class EntityDamageReciever : DamageReciever, IDynamicGraphicHierarchy, IProjectileDetonatable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static EntityDamageReciever.ModifyDamageDelegate <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<Entity> <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static EntityDamageReciever.ModifyDamageDelegate <>f__am$cache6;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<Entity> <>f__am$cache7;
        public bool CanBeCrushed;
        public Entity Entity;
        public static System.Action<Entity> OnEntityDeathEvent;
        public EntityDamageReciever.ModifyDamageDelegate OnModifyDamage;
        public EntityDamageReciever() { }
        public override UnityEngine.GameObject DisableTarget { get { return default(UnityEngine.GameObject); } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnEntityDeathEvent>m__9E(Entity ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnModifyDamage>m__9D(Damage ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnPoolSpawned>m__9F(Damage ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnPoolSpawned>m__A0(Entity ) { }
        public new void Awake() { }
        public bool CanDetonateProjectiles() { return default(bool); }
        public override void OnPoolSpawned() { }
        public override void OnRecieveDamage(Damage damage) { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public new void OnValidate() { }
        public delegate void ModifyDamageDelegate(Damage d);
    }
    public partial class EntityHealthProvider : FloatValueProvider
    {
        public Entity Entity;
        public EntityHealthProvider() { }
        public void Awake() { }
        public override float GetFloatValue() { return default(float); }
        public void OnValidate() { }
    }
    public partial class EntityHighlightColor : UnityEngine.MonoBehaviour, IEntityHighlight, IInScene
    {
        public UnityEngine.Color BashHighlight;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private bool m_isInScene;
        private bool m_madeMaterial;
        private UnityEngine.Color m_originalColor;
        private int m_propertyID;
        private UnityEngine.Renderer m_renderer;
        private UnityEngine.Color m_targetColor;
        public string Property;
        public UnityEngine.Color SpiritFlameHighlight;
        public EntityHighlightColor() { }
        public bool IsInScene { get { return default(bool); } set { } }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public void Reset() { }
        public void SetToBashHighlight() { }
        public void SetToChargeDash() { }
        public void SetToSpiritFlame() { }
        public void Update() { }
    }
    public partial class EntityHighlightLogic : UnityEngine.MonoBehaviour, IEntityHighlight
    {
        public UnityEngine.GameObject OnBashHighlightEffect;
        public UnityEngine.GameObject OnSpiritFlameHighlightEffect;
        public EntityHighlightLogic() { }
        public void Reset() { }
        public void SetToBashHighlight() { }
        public void SetToChargeDash() { }
        public void SetToSpiritFlame() { }
    }
    public partial class EntityNestedPrefab : UnityEngine.MonoBehaviour
    {
        public Entity Entity;
        public UnityEngine.GameObject Prefab;
        public EntityNestedPrefab() { }
        public void InstantiatePrefab() { }
        public void OnValidate() { }
        public void Start() { }
    }
    public partial class EntityPlatformingMovement : PlatformingMovement, IDamageReciever
    {
        public Kickback Kickback;
        private readonly MovingGroundHelper m_movingGround;
        public EntityPlatformingMovement() { }
        public void ApplyKickback(float kickbackMultiplier) { }
        public new void FixedUpdate() { }
        public void MovingGroundCollision(UnityEngine.Collision collision) { }
        public new void OnCollisionEnter(UnityEngine.Collision collision) { }
        public new void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnRecieveDamage(Damage damage) { }
    }
    public partial class EntityTargetting : UnityEngine.MonoBehaviour, IAttackable, IBashAttackable, IChargeDashAttackable, IChargeFlameAttackable, ISpiritFlameAttackable, IStompAttackable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsBashHighlighted>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsChargeDashHighlighted>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSpiritFlameHighlighted>k__BackingField;
        public bool Activated;
        public bool CanBash;
        public bool CanChargeFlame;
        public bool CanLevelUpBlast;
        public bool CanSpiritFlame;
        public bool CanStomp;
        public Entity Entity;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Component[] m_highlightColors;
        public int SpiritFlamePriorityNumber;
        public SpiritFlameProjectileOffsetGenerator SpiritFlameProjectileOffsetGenerator;
        public EntityTargetting() { }
        public int BashPriority { get { return default(int); } }
        public bool IsBashHighlighted { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool IsChargeDashHighlighted { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool IsOnScreen { get { return default(bool); } }
        public bool IsSpiritFlameHighlighted { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public float OriDistanceFromAttackable { get { return default(float); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public bool RequiresSpiritFlameAbilityToTarget { get { return default(bool); } }
        public int SpiritFlamePriority { get { return default(int); } }
        public float SpiritFlameRange { get { return default(float); } }
        public void Awake() { }
        public bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        public bool CountsTowardsPowerOfLightAchievement() { return default(bool); }
        public bool CountsTowardsSuperJumpAchievement() { return default(bool); }
        public UnityEngine.Vector3 GenerateSpiritFlameProjectileOffset(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public void OnBashDehighlight() { }
        public void OnBashHighlight() { }
        public void OnChargeDashDehighlight() { }
        public void OnChargeDashHighlight() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnEnterBash() { }
        public void OnSpiritFlameDehighlight() { }
        public void OnSpiritFlameHighlight() { }
        public void OnValidate() { }
        public void UpdateHighlighting() { }
    }
    public partial class EnvironmentBasedSurfaceToSoundProviderMap : SurfaceToSoundProviderMap
    {
        public SurfaceToSoundProviderMap DefaultSoundProvider;
        public AreaNameSurfaceToSoundProviderMapCouple[] Providers;
        public EnvironmentBasedSurfaceToSoundProviderMap() { }
        public override SoundDescriptor GetSoundForMaterial(SurfaceMaterialType surfaceMaterialType, IContext context) { return default(SoundDescriptor); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class EnvironmentLight : UnityEngine.MonoBehaviour
    {
        [UnityEngine.HideInInspector]
        public UnityEngine.Rect Area;
        public EnvironmentLightTexture BounceLight;
        public static readonly string BounceLightName;
        public UnityEngine.Color ChannelColorEffects;
        public UnityEngine.Color ChannelColorEnemies;
        public UnityEngine.Color ChannelColorNaru;
        public UnityEngine.Color ChannelColorOri;
        public int ChannelMask;
        public static string[,,] LightNames;
        public EnvironmentLightTexture MainLight;
        public static readonly string MainLightName;
        public EnvironmentLight() { }
        public bool IsSceneLight { get { return default(bool); } }
        private static void .cctor() { }
        public void BindLightToMaterial(UnityEngine.Material bindMaterial, float randomOffset, int num) { }
        public static void ClearBind(UnityEngine.Material bindMaterial, int num) { }
        public UnityEngine.Color GetColorForChannel(EnvironmentLight.Channel channel) { return default(UnityEngine.Color); }
        private void OnDisable() { }
        private void OnEnable() { }
        private void Update() { }
        public enum Channel
        {
            Effects = 2,
            Enemies = 3,
            Naru = 1,
            Ori = 0,
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class EnvironmentLightingManager : UnityEngine.MonoBehaviour
    {
        public AllContainer<EnvironmentLight> AllLights;
        public static EnvironmentLightingManager Instance;
        public EnvironmentLightingManager() { }
        public void AddLight(EnvironmentLight environmentLight) { }
        public EnvironmentLight GetCharacterLightAtPos(UnityEngine.Rect bounds) { return default(EnvironmentLight); }
        private void OnEnable() { }
        public void RemoveLight(EnvironmentLight environmentLight) { }
    }
    [CustomShaderModifier("Environment Lighting")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(45))]
    [UnityEngine.ExecuteInEditMode]
    public partial class EnvironmentLightingModifier : EnvironmentShadingModifier
    {
        public UberShaderFloat BounceStrength;
        private float m_randomOffset;
        public UberShaderFloat MainStrength;
        private static string s_turbScaleBounce;
        private static string s_turbScaleMain;
        private static string s_turbSetBounce;
        private static string s_turbSetMain;
        public EnvironmentLightingModifier() { }
        private static void .cctor() { }
        protected override void BindNow(EnvironmentLight characterLight, int index, bool curLight) { }
        protected override void ClearBind(int num) { }
        public override string GetBaseShaderProperties() { return default(string); }
        private void OnEnable() { }
        public override void SetProperties() { }
        protected override void UpdateBaseBind() { }
        private void UpdateFilterBind() { }
    }
    public partial class EnvironmentLightTexture
    {
        public UnityEngine.Color Color;
        public UnityEngine.Vector2 Offset;
        public float Rotation;
        public UnityEngine.Vector2 Scale;
        public UnityEngine.Texture2D Texture;
        public float TurbulenceBias;
        public UnityEngine.Vector2 TurbulenceScale;
        public float TurbulenceSpeed;
        public float TurbulenceStrength;
        public EnvironmentLightTexture() { }
        public void BindToMaterial(UnityEngine.Material bindMaterial, int light, float randomOffset, int num) { }
        public UnityEngine.Vector4 GetTurbScaleVec() { return default(UnityEngine.Vector4); }
        public UnityEngine.Vector4 GetTurbVec(float randomOffset) { return default(UnityEngine.Vector4); }
        public static UnityEngine.Vector2 Rotate(UnityEngine.Vector2 v, float degrees) { return default(UnityEngine.Vector2); }
    }
    [UnityEngine.ExecuteInEditMode]
    public abstract partial class EnvironmentShadingModifier : UberShaderModifier
    {
        private const float c_fadeDuration = 0.7f;
        protected EnvironmentLight FadeLight;
        protected EnvironmentLight LastLight;
        private float m_fadeTime;
        private int m_frame;
        protected EnvironmentShadingModifier() { }
        protected float CurFade { get { return default(float); } }
        private float FadeTime { get { return default(float); } }
        private UnityEngine.Rect RendererRect { get { return default(UnityEngine.Rect); } }
        protected abstract void BindNow(EnvironmentLight light, int index, bool curLight);
        protected abstract void ClearBind(int num);
        public override bool DoStrip() { return default(bool); }
        private void StartFade(EnvironmentLight from) { }
        private void Update() { }
        protected abstract void UpdateBaseBind();
    }
    public partial class EnvironmentSoundPair
    {
        public EnvironmentType EnvironmentType;
        public SoundProvider SoundProvider;
        public EnvironmentSoundPair() { }
    }
    [CustomShaderModifier("Environment Tint")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(46))]
    [UnityEngine.ExecuteInEditMode]
    public partial class EnvironmentTintModifier : EnvironmentShadingModifier
    {
        public EnvironmentLight.Channel Channel;
        private int m_envTintColorID;
        public UberShaderFloat TintStrength;
        public EnvironmentTintModifier() { }
        protected override void BindNow(EnvironmentLight characterLight, int index, bool curLight) { }
        protected override void ClearBind(int num) { }
        public override string GetBaseShaderProperties() { return default(string); }
        private int GetEnvTintColorID() { return default(int); }
        public override void SetProperties() { }
        protected override void UpdateBaseBind() { }
    }
    public enum EnvironmentType
    {
        MyngolyCaverns = 1,
        MyngolyForest = 0,
    }
    public partial class EnvrionmentBasedSoundProvider : SoundProvider
    {
        public System.Collections.Generic.List<EnvironmentSoundPair> Sounds;
        public EnvrionmentBasedSoundProvider() { }
        public override SoundDescriptor GetSound(IContext context) { return default(SoundDescriptor); }
    }
    public partial class ErrorMessageController : UnityEngine.MonoBehaviour
    {
        public BaseAnimator AppearAnimator;
        public MessageProvider CorruptSavesError;
        public MessageBox Message;
        private static ErrorMessageController s_instance;
        public MessageProvider SaveError;
        public ErrorMessageController() { }
        public void Awake() { }
        public void OnDestroy() { }
        public static void ReportFailedToLoad() { }
        public static void ReportSaveFailed(int errorCode) { }
    }
    public partial class EulerRotationAnimator : BaseAnimator
    {
        private UnityEngine.Vector3 m_originalEulerAngles;
        public UnityEngine.AnimationCurve X;
        public UnityEngine.AnimationCurve Y;
        public UnityEngine.AnimationCurve Z;
        public EulerRotationAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public UnityEngine.Vector3 OriginalEulerAngles { get { return default(UnityEngine.Vector3); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class ExceptionsTest : UnityEngine.MonoBehaviour
    {
        private int CurrentSceneMetaDataIndex;
        private ExceptionsTest.State CurrentState;
        private string EmptyTestSceneName;
        private float m_currentStateTime;
        private JUnitReporter.Failure m_failure;
        private LogCallbackHandler m_logCallbackHandler;
        private JUnitReporter.TestSuite m_testSuite;
        private string m_workspace;
        private float StartTestGraceTime;
        private float TestDuration;
        public string TestFolderName;
        public ExceptionsTest() { }
        private void Awake() { }
        private void ChangeState(ExceptionsTest.State state) { }
        private void FixedUpdate() { }
        private RuntimeSceneMetaData GetMetaData(int metaDataIndex) { return default(RuntimeSceneMetaData); }
        private bool IsLastLevel(int metaDataIndex) { return default(bool); }
        private void LoadEmptyLevel() { }
        private void LoadLevel(int metaDataIndex) { }
        private void OnDestroy() { }
        public void OnSceneRootLoadEarlyStart(SceneRoot sceneRoot) { }
        public void OnSceneRootPreEnabled(SceneRoot sceneRoot) { }
        private void Start() { }
        private void WriteResults() { }
        public enum State
        {
            Done = 10,
            EndLoadScene = 3,
            EndTest = 6,
            EndUnloadScene = 9,
            Idle = 0,
            SceneLoading = 2,
            StartLoadScene = 1,
            StartTest = 4,
            StartUnloadScene = 7,
            Testing = 5,
            UnloadingScene = 8,
        }
    }
    public partial class ExistOnceByName : UnityEngine.MonoBehaviour
    {
        private static System.Collections.Generic.Dictionary<string, ExistOnceByName> m_instances;
        public ExistOnceByName() { }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDestroy() { }
    }
    public partial class ExitGameAction : ActionMethod
    {
        public ExitGameAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ExitTrialAction : ActionMethod
    {
        public ExitTrialAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ExplodingRigidbody : UnityEngine.MonoBehaviour, IContextReciever, IDamageReciever
    {
        public bool ExplodeOnStart;
        public UnityEngine.Vector3 ExplodeOnStartDirection;
        public float Force;
        public UnityEngine.AnimationCurve ForceOverDistanceCurve;
        public float ForceRandom;
        public float TorqueRandom;
        public ExplodingRigidbody() { }
        public void OnReceiveContext(IContext context) { }
        public void OnRecieveDamage(Damage damage) { }
        public void Start() { }
    }
    public partial class ExpOrbPickup : PickupBase
    {
        public int Amount;
        public ExpOrbPickup.ExpOrbMessageType MessageType;
        public ExpOrbPickup() { }
        public override void OnCollectorCandidateTouch(UnityEngine.GameObject collector) { }
        public enum ExpOrbMessageType
        {
            None = 0,
            PickupLarge = 3,
            PickupMedium = 2,
            PickupSmall = 1,
        }
    }
    public partial class ExpText : Suspendable, IPooled
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [PooledSafeAttribute]
        private int m_amount;
        private float m_time;
        public LegacyScaleAnimator ScaleShake;
        public TransparencyAnimator TransparencyAnimator;
        public ExpText() { }
        public int Amount { get { return default(int); } set { } }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void FixedUpdate() { }
        public void OnPoolSpawned() { }
    }
    public partial class ExtractedIntFromInt64
    {
        private int m_bits;
        private long m_mask;
        private long m_value;
        public ExtractedIntFromInt64(int bits) { }
        protected int Bits { get { return default(int); } set { } }
        public long Mask { get { return default(long); } }
        public long MaxValue { get { return default(long); } }
        public long Value { get { return default(long); } set { } }
        public void Decode(ref long data) { }
        public void Encode(ref long data) { }
        public bool Validate() { return default(bool); }
    }
    [CategoryAttribute("Camera")]
    public partial class FadeFromBlackAction : ActionWithDuration
    {
        public float DurationOfFade;
        [NotNull]
        public UnityEngine.GameObject FaderToUse;
        private Fader m_fader;
        public FadeFromBlackAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class Fader : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache9;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheA;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public Fader.State CurrentState;
        public float FadeInTime;
        public float FadeOutTime;
        public float FadeStayTime;
        private UnityEngine.GUITexture m_guitexture;
        private float m_stateCurrentTime;
        public System.Action OnFadeInEvent;
        public System.Action OnFadeOutEvent;
        public Fader() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnFadeInEvent>m__143() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnFadeOutEvent>m__144() { }
        public void ChangeState(Fader.State state) { }
        private void FixedUpdate() { }
        public void ForceToOpaque() { }
        public virtual void OnFadeInFinished() { }
        public virtual void OnFadeOutFinished() { }
        private void SetOpacity(float opacity) { }
        protected void Start() { }
        public void UpdateState() { }
        public enum State
        {
            FadeIn = 0,
            FadeOut = 2,
            FadeStay = 1,
            Invisible = 3,
        }
    }
    public partial class FaderAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve FaderAnimationCurve;
        public FaderAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class FaderB : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheB;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheC;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public FaderB.State CurrentState;
        public float FadeInTime;
        public float FadeOutTime;
        public UnityEngine.AnimationCurve FaderBContrastCurve;
        public UnityEngine.AnimationCurve FaderBrightnessCurve;
        public UnityEngine.AnimationCurve FaderBWeightCurve;
        public float FadeStayTime;
        private float m_stateCurrentTime;
        public System.Action OnFadeInEvent;
        public System.Action OnFadeOutEvent;
        public FaderB() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnFadeInEvent>m__145() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnFadeOutEvent>m__146() { }
        public new void Awake() { }
        public void ChangeState(FaderB.State state) { }
        private void DoFade(FaderB.State state, float fadeInDuration, float fadeStayDuration, float fadeOutDuration) { }
        public void Fade(float fadeInDuration, float fadeStayDuration, float fadeOutDuration, System.Action fadeInComplete, System.Action fadeOutComplete) { }
        public void FadeIn(float duration) { }
        public void FadeIn(float duration, float stayDuration) { }
        public void FadeOut(float duration) { }
        public void FixedUpdate() { }
        public bool IsFadingIn() { return default(bool); }
        public bool IsFadingInOrStay() { return default(bool); }
        public bool IsFadingOut() { return default(bool); }
        public bool IsTimelineFading() { return default(bool); }
        public void OnEnable() { }
        public virtual void OnFadeInFinished() { }
        public virtual void OnFadeOutFinished() { }
        private void SetOpacity(float opacity) { }
        protected void Start() { }
        public void TimelineSample(float value) { }
        public void UpdateState() { }
        public enum State
        {
            FadeFromBlack = 2,
            FadeStay = 1,
            FadeToBlack = 0,
            Invisible = 3,
            Timeline = 4,
        }
    }
    [CategoryAttribute("Camera")]
    public partial class FaderBCustomFadeAction : ActionWithDuration
    {
        public float FadeInDuration;
        public float FadeOutDuration;
        public float FadeStayDuration;
        public FaderB.State State;
        public FaderBCustomFadeAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CategoryAttribute("Camera")]
    public partial class FaderBFadeInAction : ActionWithDuration
    {
        public float FadeInDuration;
        public FaderBFadeInAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CategoryAttribute("Camera")]
    public partial class FaderBFadeOutAction : ActionWithDuration
    {
        public float FadeOutDuration;
        public FaderBFadeOutAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class FaderBrightnessContrastSettings
    {
        public float Brightness;
        public float Contrast;
        public float Weight;
        public FaderBrightnessContrastSettings() { }
    }
    [CategoryAttribute("Camera")]
    public partial class FadeToBlackAction : ActionWithDuration
    {
        public float DurationOfFade;
        [NotNull]
        public UnityEngine.GameObject FaderToUse;
        public float FadeStayTime;
        private Fader m_fader;
        public FadeToBlackAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [UnityEngine.RequireComponent(typeof(UnityEngine.AudioSource))]
    public partial class FadingSound : UnityEngine.MonoBehaviour
    {
        private UnityEngine.AudioSource m_audioSource;
        private float m_originalVolume;
        public FadingSound() { }
        public void ChangeVolume(float value) { }
        private void Start() { }
    }
    [CustomShaderModifier("Fake Motion Blur Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(7))]
    [UberShaderOrderAttribute((UberShaderOrder)(48))]
    public partial class FakeMotionBlurModifier : UberShaderModifier
    {
        public UberShaderVector FakeMotionBlurSettings;
        public UberShaderVector FakeMotionBlurSettings2;
        public UberShaderTexture FakeRotationMotionBlurMask;
        public FakeMotionBlurModifier() { }
        public override float GetQuadExpandSize() { return default(float); }
        public override void SetProperties() { }
    }
    public partial class FallCutsceneCameraOffsetController : UnityEngine.MonoBehaviour
    {
        public CameraOffsetZone CameraOffsetZone;
        public float MaxOffset;
        public float MinOffset;
        public float PressDownSpeed;
        public float PressUpSpeed;
        public FallCutsceneCameraOffsetController() { }
        private void FixedUpdate() { }
    }
    public partial class FishAttackState : FishState
    {
        private float m_attackAngle;
        private float m_lastAngle;
        private float m_lastDistance;
        public FishAttackState(FishEnemy fish) : base (default(FishEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class FishBashedState : FishState
    {
        public FishBashedState(FishEnemy fish) : base (default(FishEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class FishBounceState : FishState
    {
        public FishBounceState(FishEnemy fish) : base (default(FishEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class FishEnemy : Enemy
    {
        public float Angle;
        public UnityEngine.AnimationCurve AnimationFromBend;
        public FishEnemyAnimations Animations;
        public FlyMovement FlyMovement;
        private float m_currentAngularVelocity;
        private bool m_inWater;
        private float m_lastAngle;
        public UnityEngine.Transform Rotation;
        public FishEnemySettings Settings;
        public FishEnemySounds Sounds;
        public FishEnemy.States State;
        public UnityEngine.Transform WanderTarget;
        public FishEnemy() { }
        public UnityEngine.Vector2 AngleAsVector { get { return default(UnityEngine.Vector2); } }
        public float BendValue { get { return default(float); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__94() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__95() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__96() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__97() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__98() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__99() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__9A() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__9B() { return default(bool); }
        public void ApplyGravity() { }
        public void ApplySoftSpeed(UnityEngine.Vector2 speed) { }
        public override bool CanBeOptimized() { return default(bool); }
        public new void FixedUpdate() { }
        public bool HitGround() { return default(bool); }
        public bool InAttackDistance() { return default(bool); }
        public bool InSwimDistance() { return default(bool); }
        public bool InWater() { return default(bool); }
        public void OnBashed() { }
        public void OnEnterWater() { }
        public void OnExitWater() { }
        public bool OutOfSwimDistance() { return default(bool); }
        public bool OutOfWater() { return default(bool); }
        public bool PlayerInWater() { return default(bool); }
        public bool PlayerIsTooFarFromStartPosition() { return default(bool); }
        public bool ShouldThrow() { return default(bool); }
        public new void Start() { }
        public void UpdateSpriteRotation() { }
        public bool WasBashed() { return default(bool); }
        public partial class States
        {
            public FishAttackState Attack;
            public FishBashedState Bashed;
            public FishBounceState Bounce;
            public FishFallState Fall;
            public FishFlopState Flop;
            public FishIdleState Idle;
            public FishSwimState Swim;
            public States() { }
        }
    }
    public partial class FishEnemyAnimations
    {
        public TextureAnimationWithTransitions Attack;
        public TextureAnimationWithTransitions Bashed;
        public TextureAnimationWithTransitions BounceCeiling;
        public TextureAnimationWithTransitions BounceFloor;
        public TextureAnimationWithTransitions BounceWall;
        public TextureAnimationWithTransitions Fall;
        public TextureAnimationWithTransitions Flop;
        public TwistAnimationSet Idle;
        public TextureAnimationWithTransitions IdleFlipHorizontal;
        public TextureAnimationWithTransitions IdleFlipVertical;
        public TwistAnimationSet Swim;
        public TextureAnimationWithTransitions SwimFlipHorizontal;
        public TextureAnimationWithTransitions SwimFlipVertical;
        public FishEnemyAnimations() { }
    }
    public partial class FishEnemyPlaceholder : RespawningPlaceholder
    {
        public UnityEngine.GameObject FishEnemy;
        public FishEnemyPlaceholder.FishEnemyPlaceholderSettings Settings;
        public UnityEngine.Transform WanderTarget;
        public FishEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class FishEnemyPlaceholderSettings
        {
            public float DamageOnTouch;
            public float Health;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public FishEnemyPlaceholderSettings() { }
        }
    }
    public partial class FishEnemySettings
    {
        public UnityEngine.AnimationCurve AttackAngleOverTime;
        public UnityEngine.AnimationCurve AttackDistanceOverTime;
        public float AttackDuration;
        public float AttackRange;
        public float AttackSpeed;
        public float BashDuration;
        public float BashSpeed;
        public float BounceDuration;
        public float EnterSwimRange;
        public float ExitSwimRange;
        public float Gravity;
        public float IdleSpeed;
        public UnityEngine.AnimationCurve IdleSpeedOverDistance;
        public float IdleTurnSpeed;
        public float MaxSwimDistance;
        public float MinSwimDuration;
        public float SwimSpeed;
        public UnityEngine.AnimationCurve SwimSpeedOverTime;
        public float SwimTurnSpeed;
        public FishEnemySettings() { }
    }
    public partial class FishEnemySounds
    {
        public SoundProvider Alert;
        public SoundSource Bite;
        public SoundSource EnterWater;
        public SoundSource ExitWater;
        public SoundSource Flop;
        public SoundSource Swim;
        public FishEnemySounds() { }
    }
    public partial class FishFallState : FishState
    {
        public FishFallState(FishEnemy fish) : base (default(FishEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class FishFlopState : FishState
    {
        public FishFlopState(FishEnemy fish) : base (default(FishEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class FishIdleState : FishState
    {
        private float m_lockAnimationTime;
        public FishIdleState(FishEnemy fish) : base (default(FishEnemy)) { }
        public UnityEngine.Vector3 WanderTargetPosition { get { return default(UnityEngine.Vector3); } }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public abstract partial class FishState : fsm.IState
    {
        public FishEnemy Fish;
        public FishState(FishEnemy fish) { }
        public float CurrentStateTime { get { return default(float); } }
        public abstract void OnEnter();
        public abstract void OnExit();
        public abstract void UpdateState();
    }
    public partial class FishSwimState : FishState
    {
        private float m_lockAnimationTime;
        public FishSwimState(FishEnemy fish) : base (default(FishEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class FixedGlobalPosition : UnityEngine.MonoBehaviour
    {
        public float X;
        public float Y;
        public float Z;
        public FixedGlobalPosition() { }
        public void FixedUpdate() { }
    }
    public partial class FixedRandom
    {
        public static int FixedUpdateIndex;
        public static float[] Values;
        public FixedRandom() { }
        private static void .cctor() { }
        public static T GetRandomArrayItem<T>(T[] list, int valuesIndex) where T : class { return default(T); }
        public static T GetRandomListItem<T>(System.Collections.Generic.List<T> list, int valuesIndex) where T : class { return default(T); }
        public static int IndexFromPosition(UnityEngine.Vector3 position) { return default(int); }
        public static int Range(int min, int max, int valuesIndex) { return default(int); }
        public static float Range(float min, float max, int valuesIndex) { return default(float); }
        public static void SetFixedUpdateIndex(int index) { }
        public static void UpdateValues() { }
        public static float ValueFromPosition(UnityEngine.Vector3 position) { return default(float); }
    }
    public partial class FixedRotation : UnityEngine.MonoBehaviour, IPooled
    {
        private UnityEngine.Quaternion m_originalRotation;
        public FixedRotation() { }
        private void FixedUpdate() { }
        public void OnPoolSpawned() { }
        private void Start() { }
    }
    public partial class FixedUpdateScheduler : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<FixedUpdateScheduler.ScheduledAction> SchedulesActions;
        public FixedUpdateScheduler() { }
        public void Awake() { }
        private void FixedUpdate() { }
        public void ScheduleAction(ISuspendable suspendable, System.Action action, float time) { }
        public partial class ScheduledAction
        {
            public System.Action Action;
            public float RemainingTime;
            public ISuspendable Suspendable;
            public ScheduledAction(System.Action action, ISuspendable suspendable, float remainingTime) { }
            public void Advance() { }
            public void Invoke() { }
        }
    }
    public partial class FixedUpdateSyncTracker : UnityEngine.MonoBehaviour
    {
        public static bool Enable;
        public int FixedUpdateCount;
        private UnityEngine.Texture2D m_block;
        private int m_index;
        private int m_x;
        private int m_y;
        public FixedUpdateSyncTracker() { }
        private static void .cctor() { }
        public void FixedUpdate() { }
        public void Flush() { }
        public void OnDestroy() { }
        public void Update() { }
    }
    public partial class FlipPlantLogic : UnityEngine.MonoBehaviour
    {
        private SpriteAnimator m_spriteAnimator;
        public TextureAnimation PlantDown;
        public TextureAnimation PlantUp;
        public FlipPlantLogic() { }
        public void Awake() { }
        public void GoDown() { }
        public void GoUp() { }
    }
    public partial class FloatCageMetaData : CageFaceMetaData<float>
    {
        public FloatCageMetaData() { }
        public override void Serialize(ref float worldMapAreaState, Archive ar) { }
    }
    internal partial class FloatDebugMenuItem : IDebugMenuItem
    {
        private string m_helpText;
        private string m_text;
        private float m_value;
        public FloatDebugMenuItem() { }
        public FloatDebugMenuItem(string str) { }
        public string HelpText { get { return default(string); } set { } }
        public string Text { get { return default(string); } set { } }
        public float Value { get { return default(float); } set { } }
        public void Draw(UnityEngine.Rect rect, bool selected) { }
        public void OnSelected() { }
        public virtual void OnSelectedFixedUpdate() { }
        public virtual void OnSelectedUpdate() { }
    }
    public partial class FloatingRockController : UnityEngine.MonoBehaviour
    {
        public float Acceleration;
        public float AngularAcceleration;
        private UnityEngine.Rigidbody m_rigidbody;
        private UnityEngine.Vector3 m_startPosition;
        private float m_time;
        public float Radius;
        public FloatingRockController() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnEnable() { }
    }
    public partial class FloatingRockLaserEnemy : Enemy
    {
        public CharacterAnimationSystem AnimationB;
        public CharacterAnimationSystem AnimationC;
        public FloatingRockLaserEnemyAnimations Animations;
        public FloatingRockLaserEnemyAnimations AnimationsB;
        public FloatingRockLaserEnemyAnimations AnimationsC;
        public PrefabSpawner ChargingEffect;
        public SoundSource ChargingSound;
        public SoundSource IdleSound;
        public BlockableLaser Laser;
        public UnityEngine.AnimationCurve LaserAngleOverTimeCurve;
        public SoundSource LaserHitSound;
        public UnityEngine.LayerMask LaserLayerMask;
        public SoundSource LaserSound;
        public UnityEngine.AnimationCurve LaserThicknessCurve;
        private UnityEngine.Vector3 m_laserDirection;
        private float m_laserRotationSpeed;
        private float m_laserSpeed;
        private UnityEngine.Vector3 m_laserStartPosition;
        public RigidbodyMovement Movement;
        public ProjectileSpawner ProjectileSpawner;
        public FloatingRockLaserEnemySettings Settings;
        public PrefabSpawner ShootingEffect;
        public SoundSource ShootingSound;
        public FloatingRockLaserEnemy.States State;
        public FloatingRockLaserEnemy() { }
        public float DesiredLaserRotationDirection { get { return default(float); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__CE() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__CF() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__D0() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__D1() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__D2() { return default(bool); }
        public void ActivateLaser() { }
        public void AimLaserAtPlayer() { }
        public new void Awake() { }
        public void DeactivateLaser() { }
        public new void FixedUpdate() { }
        public bool InCloseDistance() { return default(bool); }
        public new void OnDestroy() { }
        public void OnEnterCharge() { }
        public void OnEnterIdle() { }
        public void OnEnterLaser() { }
        public void OnEnterShooting() { }
        public void OnExitIdle() { }
        public void OnExitLaser() { }
        public virtual void OnModifyDamage(Damage damage) { }
        public void PlayAnimationLoop(CharacterAnimationSystem animationSystem, TextureAnimationWithTransitions anim, int layer=0) { }
        public void PlayAnimationOnce(CharacterAnimationSystem animationSystem, TextureAnimationWithTransitions anim, int layer=0) { }
        public void RestartAnimationLoop(CharacterAnimationSystem animationSystem, TextureAnimationWithTransitions anim, int layer=0) { }
        public bool ShouldCharge() { return default(bool); }
        public new void Start() { }
        public void UpdateLaser() { }
        public void UpdateLaserDirection() { }
        public void UpdateLaserState() { }
        public partial class States
        {
            public fsm.State Charge;
            public fsm.State Idle;
            public fsm.State Laser;
            public fsm.State Shooting;
            public States() { }
        }
    }
    public partial class FloatingRockLaserEnemyAnimations
    {
        public TextureAnimationWithTransitions Charging;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions Laser;
        public TextureAnimationWithTransitions Shooting;
        public FloatingRockLaserEnemyAnimations() { }
    }
    public partial class FloatingRockLaserEnemyPlaceholder : RespawningPlaceholder
    {
        public UnityEngine.GameObject FloatingRockLaserEnemy;
        public FloatingRockLaserEnemyPlaceholder.FloatingRockLaserEnemySettings Settings;
        public FloatingRockLaserEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class FloatingRockLaserEnemySettings
        {
            public float ChargeDuration;
            public float CloseDistance;
            public float DamageOnTouch;
            public float Drag;
            public float Health;
            public float LaserAngularOffset;
            public float LaserChaseSpeed;
            public float LaserChaseSpeedDistance;
            public float LaserDamage;
            public float LaserDuration;
            public float LaserForce;
            public float LaserLength;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public float ProjectileDamage;
            public float ProjectileSpeed;
            public float ShootingDuration;
            public float ShootingForce;
            public float SpringForce;
            public float TriggerDistance;
            public FloatingRockLaserEnemySettings() { }
        }
    }
    public partial class FloatingRockLaserEnemySettings
    {
        public float ChargeDuration;
        public float CloseDistance;
        public float Drag;
        public float LaserAngularOffset;
        public float LaserChaseSpeed;
        public float LaserChaseSpeedDistance;
        public float LaserDamage;
        public float LaserDuration;
        public float LaserForce;
        public float LaserLength;
        public UnityEngine.GameObject Projectile;
        public float ProjectileDamage;
        public float ProjectileSpeed;
        public float ShootingDuration;
        public float ShootingForce;
        public float SpringForce;
        public FloatingRockLaserEnemySettings() { }
    }
    public partial class FloatingRockTurrentEnemySettings
    {
        public float ChargeDuration;
        public float DisolveDistance;
        public float Drag;
        public UnityEngine.GameObject Projectile;
        public float ProjectileDamage;
        public float ProjectileSpeed;
        public UnityEngine.GameObject RespawnEffect;
        public float ShootingDuration;
        public float ShootingForce;
        public float SpringForce;
        public FloatingRockTurrentEnemySettings() { }
    }
    public partial class FloatingRockTurretEnemy : Enemy
    {
        public CharacterAnimationSystem AnimationB;
        public CharacterAnimationSystem AnimationC;
        public FloatingRockTurretEnemyAnimations Animations;
        public FloatingRockTurretEnemyAnimations AnimationsB;
        public FloatingRockTurretEnemyAnimations AnimationsC;
        public PrefabSpawner ChargingEffect;
        public SoundProvider DeformingSound;
        public FloatingRockTurretEnemyEffects Effects;
        public SoundProvider FormingSound;
        private bool m_timedRespawn;
        public RigidbodyMovement Movement;
        public ProjectileSpawner ProjectileSpawner;
        public BaseAnimator RespawnAnimator;
        public FloatingRockTurrentEnemySettings Settings;
        public PrefabSpawner ShootingEffect;
        public SoundProvider ShootingSound;
        public SpriteRotationController SpriteRotation;
        public FloatingRockTurretEnemy.States State;
        public FloatingRockTurretEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__D3() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__D4() { return default(bool); }
        public new void Awake() { }
        public new void FixedUpdate() { }
        public new void OnDestroy() { }
        public void OnEnterCharge() { }
        public void OnEnterIdle() { }
        private void OnEnterRespawn() { }
        public void OnEnterShooting() { }
        public void OnExitCharge() { }
        public virtual void OnModifyDamage(Damage damage) { }
        public new void OnTimedRespawn() { }
        public void PlayAnimationLoop(CharacterAnimationSystem animationSystem, TextureAnimationWithTransitions anim, int layer=0) { }
        public void PlayAnimationOnce(CharacterAnimationSystem animationSystem, TextureAnimationWithTransitions anim, int layer=0) { }
        public void RestartAnimationLoop(CharacterAnimationSystem animationSystem, TextureAnimationWithTransitions anim, int layer=0) { }
        public bool ShouldCharge() { return default(bool); }
        public bool ShouldDisolve() { return default(bool); }
        public new void Start() { }
        public void UpdateCharge() { }
        public partial class States
        {
            public fsm.State Charge;
            public fsm.State Idle;
            public fsm.State Laser;
            public fsm.State Respawn;
            public fsm.State Shooting;
            public States() { }
        }
    }
    public partial class FloatingRockTurretEnemyAnimations
    {
        public TextureAnimationWithTransitions Charging;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions Respawn;
        public TextureAnimationWithTransitions Shooting;
        public FloatingRockTurretEnemyAnimations() { }
    }
    public partial class FloatingRockTurretEnemyEffects : UnityEngine.MonoBehaviour
    {
        public BaseAnimator ChargingAnimator;
        public UnityEngine.ParticleEmitter ChargingEmitter;
        public FloatingRockTurretEnemyEffects() { }
        public void BeginCharge() { }
        public void OnShoot() { }
        public void StopCharge() { }
    }
    public partial class FloatingRockTurretEnemyPlaceholder : RespawningPlaceholder
    {
        [AssetReferenceChoiceAttribute("Floating Rock Type", new string[]{ "Assets\\frameworks\\enemies\\rockEnemy\\floatingRockTurretEnemy\\prefabs\\general\\floatTurretEnemy.prefab", "Assets\\frameworks\\enemies\\rockEnemy\\floatingRockTurretEnemy\\textures\\floatingRockTurretEnemyPlaceholder.png", "Regular Floating Rock", "Assets\\frameworks\\enemies\\rockEnemy\\floatingRockTurretEnemy\\prefabs\\fire\\floatTurretEnemyFire.prefab", "Assets\\frameworks\\enemies\\rockEnemy\\floatingRockTurretEnemy\\textures\\floatingRockTurretEnemyFirePlaceholder.png", "Fire Floating Rock", "Assets\\frameworks\\enemies\\rockEnemy\\floatingRockTurretEnemy\\prefabs\\wood\\floatTurretEnemyWood.prefab", "Assets\\frameworks\\enemies\\rockEnemy\\floatingRockTurretEnemy\\textures\\floatingRockTurretEnemyWoodPlaceholder.png", "Wooden Floating Rock"})]
        public UnityEngine.GameObject FloatingRockTurretEnemy;
        public FloatingRockTurretEnemyPlaceholder.FloatingRockLaserEnemySettings Settings;
        public FloatingRockTurretEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class FloatingRockLaserEnemySettings
        {
            public float ChargeDuration;
            public float DamageOnTouch;
            public float DisolveDistance;
            public float Drag;
            public float Health;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public float ProjectileDamage;
            public float ProjectileSpeed;
            public float ShootingDuration;
            public float ShootingForce;
            public float SpringForce;
            public float TriggerDistance;
            public FloatingRockLaserEnemySettings() { }
        }
    }
    public partial class FloatProviderAnimatorDriver : UnityEngine.MonoBehaviour
    {
        public BaseAnimator Animator;
        private float m_lastValue;
        public FloatValueProvider Value;
        public FloatProviderAnimatorDriver() { }
        public void FixedUpdate() { }
        public void Start() { }
    }
    public partial class FloatProviderZone : UnityEngine.MonoBehaviour
    {
        public float fallOffDistance;
        public FloatProviderZone() { }
        public float GetValue() { return default(float); }
        private float XValue(float x) { return default(float); }
        private float YValue(float y) { return default(float); }
    }
    public abstract partial class FloatValueProvider : UnityEngine.MonoBehaviour
    {
        protected FloatValueProvider() { }
        public abstract float GetFloatValue();
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class FloatZone : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float Acceleration;
        public static System.Collections.Generic.List<FloatZone> All;
        public UnityEngine.Rect BoundingRect;
        public float Deceleration;
        public float DesiredSpeed;
        public Varying2DSoundProvider LoopSoundProvider;
        private SoundPlayer m_lastLoopSound;
        private SoundDescriptor m_soundDescriptor;
        public bool RequiresWindRestored;
        public float TooFastDeceleration;
        public FloatZone() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <FixedUpdate>m__151() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class FlyMovement : SaveSerialize, IDamageReciever, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public bool HasKickback;
        public Kickback Kickback;
        private UnityEngine.Rigidbody m_rigidbody;
        public UnityEngine.Vector2 Velocity;
        public FlyMovement() { }
        public float Angle { get { return default(float); } set { } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Rigidbody Rigidbody { get { return default(UnityEngine.Rigidbody); } }
        public float Speed { get { return default(float); } set { } }
        public UnityEngine.Vector2 VelocityAsDelta { get { return default(UnityEngine.Vector2); } set { } }
        public float VelocityX { get { return default(float); } set { } }
        public float VelocityY { get { return default(float); } set { } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        public void OnRecieveDamage(Damage damage) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class FlyToUserInterfaceSpot : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.Vector2 BiezerIn;
        public UnityEngine.Vector2 BiezerOut;
        public float Duration;
        private UnityEngine.Vector3 m_startPosition;
        private float m_time;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Vector2 ScreenPosition;
        public UnityEngine.AnimationCurve TimeCurve;
        public FlyToUserInterfaceSpot() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void FixedUpdate() { }
        private void LateUpdate() { }
        public void Start() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class FogGradientController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Gradient FogGradient;
        public float FogRange;
        public FogGradientController() { }
    }
    public partial class FogSettings
    {
        public UnityEngine.Gradient Gradient;
        public float Range;
        public FogSettings() { }
    }
    public partial class FollowPositionRotation : UnityEngine.MonoBehaviour, IPooled
    {
        public bool FollowRotation;
        [PooledSafeAttribute]
        private UnityEngine.Vector3 m_localPosition;
        [PooledSafeAttribute]
        private UnityEngine.Quaternion m_localRotation;
        private UnityEngine.Transform m_target;
        public FollowPositionRotation() { }
        public void FixedUpdate() { }
        public void OnPoolSpawned() { }
        public void SetTarget(UnityEngine.Transform target) { }
    }
    public partial class ForceGrabReleaseZone : UnityEngine.MonoBehaviour
    {
        private static AllContainer<ForceGrabReleaseZone> m_all;
        private UnityEngine.Rect m_bounds;
        public ForceGrabReleaseZone() { }
        private static void .cctor() { }
        public void Awake() { }
        public static bool InsideZone(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDestroy() { }
    }
    public partial class ForceLanguageTranslatedMessageProvider : TranslatedMessageProvider
    {
        public Language Language;
        public ForceLanguageTranslatedMessageProvider() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages() { return default(System.Collections.Generic.IEnumerable<MessageDescriptor>); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetMessages>c__Iterator1D : System.Collections.Generic.IEnumerable<MessageDescriptor>, System.Collections.Generic.IEnumerator<MessageDescriptor>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal MessageDescriptor $current;
            internal int $PC;
            internal System.Collections.Generic.List<TranslatedMessageProvider.MessageItem>.Enumerator <$s_346>__0;
            internal ForceLanguageTranslatedMessageProvider <>f__this;
            internal TranslatedMessageProvider.MessageItem <message>__1;
            public <GetMessages>c__Iterator1D() { }
            MessageDescriptor System.Collections.Generic.IEnumerator<MessageDescriptor>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(MessageDescriptor); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<MessageDescriptor> System.Collections.Generic.IEnumerable<MessageDescriptor>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<MessageDescriptor>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class ForceLightTorchStopChasingZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<ForceLightTorchStopChasingZone> All;
        private UnityEngine.Rect m_rect;
        public ForceLightTorchStopChasingZone() { }
        private static void .cctor() { }
        public void Awake() { }
        public static bool IsInside(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class ForceRigidBodyWakeUp : UnityEngine.MonoBehaviour
    {
        public ForceRigidBodyWakeUp() { }
        private void Awake() { }
    }
    [UnityEngine.RequireComponent(typeof(UnityEngine.GUIText))]
    public partial class FPSCounter : UnityEngine.MonoBehaviour
    {
        public int AverageFPS;
        private bool m_fixedUpdateHappened;
        private bool m_isSynced;
        private float m_lastTime;
        private float m_maxFrameTime;
        private float m_renderedFrames;
        private float m_timePassed;
        private bool m_visible;
        public int MinimumFPS;
        public float UpdateInterval;
        public FPSCounter() { }
        private void FixedUpdate() { }
        private void Start() { }
        private void Update() { }
    }
    public partial class FPSData : IFrameData
    {
        public int FPS;
        public FPSData() { }
        public FPSData(int fps) { }
        public FPSData(System.IO.BinaryReader binaryReader) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter, int fps) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    public partial class FPSMonitor : UnityEngine.MonoBehaviour
    {
        public int AverageFPS;
        private float m_currentSampleTime;
        private float m_lastTime;
        private float m_maxFrameTime;
        private int m_renderedFrames;
        private float m_timePassed;
        public int MinimumFPS;
        public FPSMonitor() { }
        public void Reset() { }
        private void Start() { }
        private void Update() { }
    }
    public partial class FPSPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        private int m_accumulatingFPS;
        private int m_lastFPS;
        private System.IO.StreamWriter m_streamWriter;
        private float m_timeInterval;
        public FPSPlugin() { }
        public void Awake() { }
        public void Exit() { }
        private void OnApplicationQuit() { }
        private void OnDestroy() { }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
        private void Update() { }
    }
    public partial class FPSSampleData
    {
        public float AudioMemory;
        public int AverageFPS;
        public int CPUAverageFPS;
        public int CPUBAverageFPS;
        public int CPUBMinimumFPS;
        public int CPUMinimumFPS;
        public int MinimumFPS;
        public string SampleID;
        public float TextureMemory;
        public float TotalMemory;
        public FPSSampleData() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class FPSSamplePositionMarker : UnityEngine.MonoBehaviour
    {
        public FPSSamplePositionMarker() { }
    }
    public partial class FPSTestOutput
    {
        private float ID;
        private string m_outputFolder;
        private System.IO.StreamWriter m_streamWriter;
        public FPSTestOutput(string outputFileName="") { }
        public void Close() { }
        public string GetOutputPath() { return default(string); }
        public void Write(FPTTestResult fptTestResult) { }
    }
    public partial class FPTTestResult
    {
        public int ActiveScenes;
        public System.DateTime DateTime;
        public int LoadedScenes;
        public System.Collections.Generic.List<FPSSampleData> SampleList;
        public float SceneLoadTime;
        public string SceneName;
        public float SceneUnloadTime;
        public FPTTestResult() { }
    }
    [UnityEngine.RequireComponent(typeof(UnityEngine.GUIText))]
    public partial class FrameCounter : UnityEngine.MonoBehaviour
    {
        public static int Count;
        public FrameCounter() { }
        private void FixedUpdate() { }
        private void Start() { }
        private void Update() { }
    }
    public partial class FramePerformanceMonitor : UnityEngine.MonoBehaviour
    {
        public static bool GarbageCollectionFlag;
        private readonly System.Collections.Generic.Stack<FramePerformanceMonitor.PerformanceEntry> m_activeEntries;
        private static FramePerformanceMonitor m_instance;
        private float m_lastGarbageCollectionTime;
        private readonly System.Collections.Generic.List<FramePerformanceMonitor.PerformanceFrameData> m_recordedFrames;
        private readonly FramePerformanceMonitor.PerformanceEntry m_root;
        private System.IO.StreamWriter m_streamWriter;
        public FramePerformanceMonitor() { }
        public static bool Enabled { get { return default(bool); } set { } }
        public void Awake() { }
        [System.Diagnostics.ConditionalAttribute("NOT_FINAL_BUILD")]
        public static void BeginSample(string label) { }
        public void CloseWriter() { }
        [System.Diagnostics.ConditionalAttribute("NOT_FINAL_BUILD")]
        public static void EndSample() { }
        public void Flush() { }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void Update() { }
        private partial class PerformanceEntry
        {
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private static System.Comparison<FramePerformanceMonitor.PerformanceEntry> <>f__am$cache4;
            public readonly System.Collections.Generic.List<FramePerformanceMonitor.PerformanceEntry> Children;
            public float Duration;
            private readonly string m_label;
            public float StartTime;
            public PerformanceEntry(string label) { }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private static int <Write>m__123(FramePerformanceMonitor.PerformanceEntry a, FramePerformanceMonitor.PerformanceEntry b) { return default(int); }
            public void Write(System.IO.StreamWriter writer, int depth, float totalDuration) { }
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct PerformanceFrameData
        {
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private static System.Comparison<FramePerformanceMonitor.PerformanceEntry> <>f__am$cache5;
            private readonly float m_duration;
            private readonly System.Collections.Generic.List<FramePerformanceMonitor.PerformanceEntry> m_entries;
            private readonly int m_frame;
            private readonly bool m_garbageCollection;
            private readonly float m_lastGarbageCollectionTime;
            public PerformanceFrameData(FramePerformanceMonitor.PerformanceEntry root, bool garbageCollection, float lastGarbageCollectionTime) { throw new System.NotImplementedException(); }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private static int <PerformanceFrameData>m__122(FramePerformanceMonitor.PerformanceEntry a, FramePerformanceMonitor.PerformanceEntry b) { return default(int); }
            public void Write(System.IO.StreamWriter writer) { }
        }
    }
    public partial class Frapser
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<string, bool> <>f__am$cache1;
        private static string STOP_FRAPS_FILE_NAME;
        public Frapser() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <IsFrapserActive>m__61(string argument) { return default(bool); }
        public static bool IsFrapserActive() { return default(bool); }
        public static void StopFrapser() { }
    }
    public partial class FuncAction : IAction
    {
        public System.Action Action;
        public FuncAction(System.Action action) { }
        public void Perform(IContext context) { }
    }
    public partial class GainAreaCompletionTrigger : Trigger
    {
        public GainAreaCompletionTrigger() { }
    }
    public partial class GainKeystoneTrigger : Trigger
    {
        public GainKeystoneTrigger() { }
        public void OnCollectKeystones() { }
        public new void OnDestroy() { }
        public void Start() { }
    }
    public partial class GainMaxEnergyContainerTrigger : Trigger
    {
        public GainMaxEnergyContainerTrigger() { }
        public void OnCollectMaxEnergyContainer() { }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class GameController : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <GameplaySuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <GameplaySuspendedForUI>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <LockInput>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <LockInputByAction>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <MainMenuCanBeOpened>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <PreventFocusPause>k__BackingField;
        public AllContainer<Objective> ActiveObjectives;
        public UberAtlassingPlatform AtlasPlatform;
        public const string BootLoadSceneName = "loadBootstrap";
        public string BuildIDString;
        public string BuildName;
        public WorldEvents DebugWorldEvents;
        public bool EditorTrialValue;
        public const string EmptyTestSceneName = "emptyTestScene";
        public static bool FreezeFixedUpdate;
        public ActionSequence GameSaveSequence;
        public GameScheduler GameScheduler;
        public const string GameStartScene = "sunkenGladesRunaway";
        public float GameTime;
        public static GameController Instance;
        public const string IntroLogosSceneName = "introLogos";
        public static bool IsClosing;
        public static bool IsFocused;
        public bool IsLoadingGame;
        private static bool m_isPackageFullyInstalled;
        private float m_isPackageFullyInstalledTimer;
        private bool m_isRestartingGame;
        private bool m_lastDebugControlsEnabledValue;
        private LogCallbackHandler m_logCallbackHandler;
        private string m_logOutputFile;
        private System.Action m_onRestoreCheckpointFinished;
        private int m_previousScreenHeight;
        private int m_previousScreenWidth;
        private RestoreCheckpointController m_restoreCheckpointController;
        private bool m_setRunInBackgroundToFalse;
        private System.Collections.Generic.HashSet<ISuspendable> m_suspendablesToIgnoreForGameplay;
        private UnityEngine.GameObject m_systemsGameObject;
        public System.Collections.Generic.List<Objective> Objectives;
        public bool PCTrialValue;
        public bool RequireInitialValues;
        public System.Collections.Generic.List<UnityEngine.Object> Resources;
        public SaveGameController SaveGameController;
        public System.Collections.Generic.List<UnityEngine.GameObject> Systems;
        public GameTimer Timer;
        public const string TitleScreenSceneName = "titleScreenSwallowsNest";
        public const string TrailerSceneName = "trailerScene";
        public const string TrialEndScreenSceneName = "trialEndScreen";
        public int VSyncCount;
        public const string WorldMapSceneName = "worldMapScene";
        public GameController() { }
        public bool GameInTitleScreen { get { return default(bool); } }
        public bool GameplaySuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool GameplaySuspendedForUI { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public int GameTimeInSeconds { get { return default(int); } }
        public bool InputLocked { get { return default(bool); } }
        public bool IsDemo { get { return default(bool); } }
        public bool IsPackageFullyInstalled { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsTrial { get { return default(bool); } }
        public bool LockInput { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool LockInputByAction { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool MainMenuCanBeOpened { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool PreventFocusPause { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        public override void Awake() { }
        private static void CheckPackageFullyInstalled() { }
        public void ClearCheckpointData() { }
        public void CreateCheckpoint() { }
        public void ExitGame() { }
        public void ExitTrial() { }
        public void FixedUpdate() { }
        public Objective GetObjectiveFromIndex(int index) { return default(Objective); }
        public int GetObjectiveIndex(Objective objective) { return default(int); }
        public void GoToEndTrialScreen() { }
        [System.Diagnostics.ConditionalAttribute("NOT_FINAL_BUILD")]
        private void HandleBuildIDString() { }
        [System.Diagnostics.ConditionalAttribute("NOT_FINAL_BUILD")]
        private void HandleBuildName() { }
        [System.Diagnostics.ConditionalAttribute("NOT_FINAL_BUILD")]
        private void HandleCommands() { }
        private void HandleTrialData() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator LoadAssets(System.Collections.Generic.List<string> assetsToLoad) { return default(System.Collections.IEnumerator); }
        private void OnApplicationFocus(bool focusStatus) { }
        public void OnApplicationQuit() { }
        public override void OnDestroy() { }
        public void OnFinishedLoadingTrialEndScene() { }
        private void OnFinishedRestarting() { }
        private void OnGameAwake() { }
        public void OnGameReset() { }
        public void PerformSaveGameSequence() { }
        [UnityEngine.ContextMenu("Print out sizes of SaveSlot")]
        public void PrintOutSizesOfSaveSlot() { }
        public void QuitApplication() { }
        public void RemoveGameplayObjects() { }
        public void ResetInputLocks() { }
        public void ResetStateForDebugMenuGoToScene() { }
        public void RestartGame() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator RestartingCleanupNextFrame() { return default(System.Collections.IEnumerator); }
        public void RestoreCheckpoint(System.Action onFinished=null) { }
        public void RestoreCheckpointImmediate() { }
        public void ResumeGameplay() { }
        public void ResumeGameplayForUI() { }
        public override void Serialize(Archive ar) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator SetRunInBackgroundToTrue() { return default(System.Collections.IEnumerator); }
        public void SetupGameplay(SceneRoot sceneRoot, WorldEventsOnAwake worldEventsOnAwake) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator Start() { return default(System.Collections.IEnumerator); }
        public void SuspendGameplay() { }
        public void SuspendGameplayForUI() { }
        public void Update() { }
        public void WarmUpResources() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <LoadAssets>c__Iterator46 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal System.Collections.Generic.List<string> <$>assetsToLoad;
            internal System.Collections.Generic.List<string>.Enumerator <$s_665>__0;
            internal string <assetToLoad>__1;
            internal UnityEngine.WWW <www>__2;
            internal System.Collections.Generic.List<string> assetsToLoad;
            public <LoadAssets>c__Iterator46() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RestartingCleanupNextFrame>c__Iterator43 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal GameController <>f__this;
            public <RestartingCleanupNextFrame>c__Iterator43() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <SetRunInBackgroundToTrue>c__Iterator45 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal GameController <>f__this;
            public <SetRunInBackgroundToTrue>c__Iterator45() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Start>c__Iterator44 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal GameController <>f__this;
            internal GameplayCamera <currentCamera>__0;
            public <Start>c__Iterator44() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class GameControllerLate : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject LateStartHookPrefab;
        public GameControllerLate() { }
        public void FixedUpdate() { }
        public void Start() { }
    }
    public partial class GameDVRPerformanceMonitor : UnityEngine.MonoBehaviour
    {
        private const float FPS_INTERVAL = 4f;
        private int m_frameCount;
        private static GameDVRPerformanceMonitor m_instance;
        private float m_lastRecordedTime;
        private float m_lastTime;
        private float m_previousFrameTime;
        public GameDVRPerformanceMonitor() { }
        public static bool Enabled { get { return default(bool); } set { } }
        private void Update() { }
    }
    public partial class GameMapObjectiveIcons : UnityEngine.MonoBehaviour
    {
        public GameMapObjectiveIcons() { }
        public void Advance() { }
        public void HideIcons() { }
        public void ShowIcons() { }
    }
    public partial class GameMapShowObjective : UnityEngine.MonoBehaviour
    {
        public float AreaMapWaitTime;
        public float BeginWaitTime;
        public float BlipInterval;
        public GameMapShowObjective.State CurrentState;
        public float EndWaitTime;
        public Varying2DSoundProvider FinishShowObjectiveSound;
        public UnityEngine.AnimationCurve IconMovingCurve;
        private bool m_isPerforming;
        private Objective m_objective;
        private UnityEngine.Vector3 m_startPositionUI;
        private float m_stateCurrentTime;
        private UnityEngine.Vector3 m_targetPositionUI;
        public float MoveTime;
        public UnityEngine.GameObject ObjectiveAppearEffect;
        private System.Action OnFinish;
        public UnityEngine.Vector3 Position;
        public UnityEngine.Vector3 StartPosition;
        public UnityEngine.Vector3 TargetPosition;
        public GameMapShowObjective() { }
        public bool IsComplete { get { return default(bool); } }
        public bool IsInEndWait { get { return default(bool); } }
        public bool IsPerforming { get { return default(bool); } }
        public event System.Action OnFinish { add { } remove { } }
        public void ChangeState(GameMapShowObjective.State state) { }
        public void Finish() { }
        public void FixedUpdate() { }
        public void OnDisable() { }
        public void ShowObjective(Objective objective, System.Action onFinish) { }
        public void UpdateState() { }
        public UnityEngine.Vector3 WorldToUIPosition(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public enum State
        {
            AreaMap = 4,
            Complete = 5,
            EndWait = 3,
            Move = 2,
            None = 0,
            StartWait = 1,
        }
    }
    public partial class GameMapTeleporter
    {
        public bool Activated;
        public string Identifier;
        private UnityEngine.GameObject m_areaMapIconGameObject;
        private TransparencyAnimator m_areaMapIconHighlightAnimator;
        private UnityEngine.Transform m_areaMapIconTransform;
        private UnityEngine.GameObject m_worldMapIconGameObject;
        private TransparencyAnimator m_worldMapIconHighlightAnimator;
        private UnityEngine.Transform m_worldMapIconTransform;
        public MessageProvider Name;
        public UnityEngine.Vector3 WorldPosition;
        public GameMapTeleporter(SceneMetaData.Teleporter teleporter, SceneMetaData sceneMetaData) { }
        public RuntimeGameWorldArea Area { get { return default(RuntimeGameWorldArea); } }
        public UnityEngine.Vector2 AreaMapIconPosition { get { return default(UnityEngine.Vector2); } }
        public UnityEngine.Vector2 WorldMapIconPosition { get { return default(UnityEngine.Vector2); } }
        public UnityEngine.Vector2 WorldProjectedPositon { get { return default(UnityEngine.Vector2); } }
        public void Dehighlight() { }
        public void Hide() { }
        public void Highlight() { }
        public void Show() { }
        public void Update() { }
    }
    public partial class GameMapTeleporters : UnityEngine.MonoBehaviour
    {
        public SoundProvider CloseWindowSound;
        private UnityEngine.Vector2 m_clickedPosition;
        private float m_flyBackTime;
        private UnityEngine.Vector2 m_previousScrollPosition;
        private bool m_released;
        public SoundProvider OpenWindowSound;
        public SoundProvider ReachDestinationTeleporterSound;
        public int SelectedIndex;
        public SoundProvider SelectTeleporterSound;
        public SoundProvider StartTeleportingSound;
        public SoundProvider SwitchTeleporterSelectionSound;
        public GameMapTeleporters() { }
        public GameMapTeleporter SelectedTeleporter { get { return default(GameMapTeleporter); } }
        public System.Collections.Generic.List<GameMapTeleporter> Teleporters { get { return default(System.Collections.Generic.List<GameMapTeleporter>); } }
        public void Advance() { }
        private void AdvanceAreaMap() { }
        private void AdvanceWorldMap() { }
        private void ChangeSelection(int index) { }
        public void HideTeleporters() { }
        public void OnDisable() { }
        public void Select(string identifier) { }
        public void SetIndex(int index) { }
        [UnityEngine.ContextMenu("Show teleporters")]
        public void ShowTeleporters() { }
        private int TeleporterUnderMouse() { return default(int); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Select>c__AnonStorey69
        {
            internal string identifier;
            public <Select>c__AnonStorey69() { }
            internal bool <>m__149(GameMapTeleporter a) { return default(bool); }
        }
    }
    public partial class GameMapTransitionManager : UnityEngine.MonoBehaviour
    {
        public SoundSource InAreaMapZoomInSound;
        public SoundSource InAreaMapZoomOutSound;
        public static GameMapTransitionManager Instance;
        private bool m_areaMode;
        private float m_mouseWheel;
        private float m_mouseWheelSmooth;
        private bool m_zeroZoom;
        private float m_zoomSpeed;
        private float m_zoomTime;
        public float ZoomDuration;
        public SoundSource ZoomInSound;
        public SoundSource ZoomOutSound;
        public GameMapTransitionManager() { }
        public bool InAreaMapMode { get { return default(bool); } }
        public bool InWorldMapMode { get { return default(bool); } }
        public bool IsTransitioning { get { return default(bool); } }
        public float ZoomTime { get { return default(float); } }
        public void Advance() { }
        public void Awake() { }
        public void GoToAreaMap() { }
        public void GoToAreaMapInstantly() { }
        public void GoToWorldMap() { }
        public void GoToWorldMapInstantly() { }
        public void OnDestroy() { }
        public void Update() { }
        public void ZoomToAreaMap() { }
        public void ZoomToWorldMap() { }
    }
    public partial class GameMapUI : MenuScreen, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private GameMapObjectiveIcons <ObjectiveIcons>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private GameMapShowObjective <ShowObjective>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private GameMapTeleporters <Teleporters>k__BackingField;
        public MessageBox AreaCompletion;
        public TimelineSequence AreaCompletionIcon;
        public UnityEngine.GameObject AreaMapLegend;
        public MessageBox AreaText;
        public UnityEngine.GameObject BottomLegend;
        public UnityEngine.GameObject BottomTeleportersLegend;
        public RuntimeGameWorldArea CurrentHighlightedArea;
        public TransparencyAnimator FadeAnimator;
        public UnityEngine.Transform Group;
        public static GameMapUI Instance;
        private bool m_fadeStarted;
        private bool m_isVisible;
        private GameMapUI.WorldMapStates m_mapState;
        private bool m_showingObjective;
        public GameMapUI() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsVisible { get { return default(bool); } set { } }
        public GameMapObjectiveIcons ObjectiveIcons { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(GameMapObjectiveIcons); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool RevealingMap { get { return default(bool); } }
        public bool ShowingObjective { get { return default(bool); } }
        public bool ShowingTeleporters { get { return default(bool); } }
        public GameMapShowObjective ShowObjective { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(GameMapShowObjective); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public GameMapTeleporters Teleporters { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(GameMapTeleporters); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void ChangeState(GameMapUI.WorldMapStates state) { }
        public void FixedUpdate() { }
        public override void Hide() { }
        public override void HideImmediate() { }
        public void Init() { }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void SetNormal() { }
        public void SetRevealingMap() { }
        public void SetShowingObjective() { }
        public void SetShowingTeleporters() { }
        public override void Show() { }
        public override void ShowImmediate() { }
        public void UpdateAreaText() { }
        public enum WorldMapStates
        {
            Normal = 0,
            RevealingMap = 2,
            ShowingObjective = 1,
            ShowingTeleporters = 3,
        }
    }
    public partial class GameObjectActivator : SaveSerialize, IDynamicGraphicHierarchy
    {
        public bool ActiveAtStart;
        private bool m_hasSerialized;
        private bool m_hasStarted;
        public GameObjectActivator() { }
        public override void Serialize(Archive ar) { }
        private void Start() { }
    }
    public static partial class GameObjectExtender
    {
        public static T FindComponent<T>(this UnityEngine.GameObject gameObject) where T : class { return default(T); }
        public static T FindComponentInChildren<T>(this UnityEngine.GameObject gameObject) where T : class { return default(T); }
        public static UnityEngine.Component[] FindComponents<T>(this UnityEngine.GameObject gameObject) where T : class { return default(UnityEngine.Component[]); }
        public static UnityEngine.Component[] FindComponentsInChildren<T>(this UnityEngine.GameObject gameObject) where T : class { return default(UnityEngine.Component[]); }
        public static T FindComponentUpwards<T>(this UnityEngine.Transform transform) where T : class { return default(T); }
        public static void GetComponents<T>(this UnityEngine.GameObject gameObject, System.Collections.Generic.List<T> list) where T : class { }
        public static void GetComponentsInChildren<T>(this UnityEngine.GameObject gameObject, bool inactive, System.Collections.Generic.List<T> list) where T : class { }
        public static void GetComponentsInChildren<T>(this UnityEngine.GameObject gameObject, System.Collections.Generic.List<T> list) where T : class { }
        public static bool HasComponent<T>(this UnityEngine.GameObject gameObject) where T : class { return default(bool); }
    }
    public partial class GameObjectFilter : UnityEngine.MonoBehaviour
    {
        public GameObjectFilter() { }
        public virtual bool Valid(UnityEngine.GameObject gameObject) { return default(bool); }
    }
    public partial class GameObjectReference
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.GameObject <GameObject>k__BackingField;
        public GameObjectReference(UnityEngine.GameObject gameObject) { }
        public UnityEngine.GameObject GameObject { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.GameObject); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public static void ChangeReference(UnityEngine.GameObject oldGameObject, UnityEngine.GameObject newGameObject) { }
        public static UnityEngine.GameObject GetReference(GameObjectReference gameObjectReference) { return default(UnityEngine.GameObject); }
        public static GameObjectReference MakeReference(UnityEngine.GameObject gameObject) { return default(GameObjectReference); }
    }
    internal partial class GameObjectReferenceComponent : UnityEngine.MonoBehaviour
    {
        public GameObjectReference GameObjectReference;
        public GameObjectReferenceComponent() { }
    }
    public partial class GameObjectTransformVisualizer : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject GameObject;
        public GameObjectTransformVisualizer() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class GamePlaceholder : UnityEngine.MonoBehaviour, IDynamicGraphic
    {
        [UnityEngine.HideInInspector]
        public UberAtlassingPlatform AtlasPlatform;
        public UnityEngine.GameObject GameControllerPrefab;
        [UnityEngine.HideInInspector]
        public SceneRoot SceneRoot;
        public GamePlaceholder() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void Start() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class GameplayCamera : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Bounds <CameraBoundingBox>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <TimeDelta>k__BackingField;
        public UnityEngine.Vector3 CameraPositionForSampling;
        public CameraTarget CameraTarget;
        public CameraChaseTarget ChaseTarget;
        public CameraController Controller;
        public CameraSettingsAsset CurrentCameraSettings;
        public UnityEngine.GameObject Fader;
        public UnityEngine.GameObject GameObject;
        private UnityEngine.Vector3 m_cameraCenterInGameplayPlane;
        private CameraGoThroughScrollLocks m_cameraGoThroughScrollLocks;
        private UnityEngine.Bounds m_editorBounds;
        private UnityEngine.Rigidbody m_rigidbody;
        private bool m_straightLineMotionTargetIsPlayer;
        public GameplayCamera.MotionType Motion;
        public CameraOffsetController OffsetController;
        public CameraScrollLockConstraint ScrollLockConstraint;
        public UnityEngine.Vector2 ScrollLockConstraintOffset;
        public bool ScrollLockIsFadingOut;
        public CameraStraightLineMotion StraightLineMotion;
        public SinMovement SwayingSinMovement;
        public UnityEngine.Transform TargetHelper;
        public UnityEngine.Vector3 TargetHelperPosition;
        public UnityEngine.Transform Transform;
        public GameplayCamera() { }
        public UnityEngine.Camera Camera { get { return default(UnityEngine.Camera); } }
        public UnityEngine.Bounds CameraBoundingBox { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Bounds); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public UnityEngine.Vector3 CameraCenterInGameplayPlane { get { return default(UnityEngine.Vector3); } }
        public CameraPostProcessing CameraPostProcessing { get { return default(CameraPostProcessing); } }
        public float CameraWidthWorldUnits { get { return default(float); } }
        public UnityEngine.Transform GameplayPuppet { get { return default(UnityEngine.Transform); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Transform Target { get { return default(UnityEngine.Transform); } set { } }
        public float TimeDelta { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void ChangeTarget(UnityEngine.Transform targetTransform) { }
        public void ChangeTargetToCurrentCharacter() { }
        public void FixedUpdate() { }
        public void ForceCameraToObayScrollLockConstraints() { }
        public void GoToChaseMode() { }
        public bool IsOnScreen(UnityEngine.Vector3 position) { return default(bool); }
        public bool IsOnScreenPadded(UnityEngine.Vector3 position, float padding) { return default(bool); }
        public void LockSmoothScrollingForAFrame() { }
        public void MoveCameraToTargetInstantly(bool updateTargetPosition=true) { }
        public void MoveCameraToTargetPosition() { }
        public void MoveToTarget(UnityEngine.Vector3 target, float duration, bool ignoreScrollLock) { }
        public void MoveToTargetCharacter(float duration) { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnRestoreCheckpoint() { }
        public void Start() { }
        public void UpdateCameraBounds() { }
        public void UpdateTarget() { }
        public void UpdateTargetHelperPosition() { }
        public enum MotionType
        {
            Chase = 0,
            Move = 1,
        }
    }
    public partial class GameplaySystemsCreator : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject InventoryPrefab;
        public UnityEngine.GameObject OriPrefab;
        public UnityEngine.GameObject SeinUIPrefab;
        public UnityEngine.GameObject SkillTreeUIPrefab;
        public UnityEngine.GameObject WorldMapLogicPrefab;
        public UnityEngine.GameObject WorldMapUIPrefab;
        public GameplaySystemsCreator() { }
        public void Awake() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator CreateSetups() { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <CreateSetups>c__Iterator0 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal GameplaySystemsCreator <>f__this;
            internal UnityEngine.GameObject <go>__1;
            internal UnityEngine.GameObject <oriGameObject>__0;
            internal UnityEngine.GameObject <worldMapLogicGameObject>__2;
            public <CreateSetups>c__Iterator0() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class GameplayToCinematicAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        public FloatProviderZone[] AnimationZones;
        private CameraPuppetController m_puppet;
        public WideScreenAdjustmentSettings WideScreenAdjustment;
        public GameplayToCinematicAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public new void OnDestroy() { }
        public void OnGameReset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class GameScheduler
    {
        public UberDelegate OnGameAwake;
        public UberDelegate OnGameControlSchemeChange;
        public UberDelegate OnGameFixedUpdate;
        public UberDelegate OnGameFixedUpdateLate;
        public UberDelegate OnGameLanguageChange;
        public UberDelegate OnGameReset;
        public UberDelegate OnGameSerializeLoad;
        public UberDelegate OnGameStart;
        public UberDelegate OnGameStartLate;
        public UberDelegate OnMenuClose;
        public UberDelegate OnMenuOpen;
        public UberDelegate OnPassThroughScrollLock;
        public UberDelegate OnPlayerDeath;
        public UberDelegate<SceneRoot> OnSceneRootDisabled;
        public UberDelegate<SceneRoot> OnSceneRootEnabledAfterSerialize;
        public UberDelegate<SceneRoot> OnSceneRootLoadEarlyStart;
        public UberDelegate<SceneRoot> OnSceneRootPreEnabled;
        public UberDelegate<SceneRoot> OnSceneStartLateAfterSerialize;
        public UberDelegate<SceneRoot> OnSceneStartLateBeforeSerialize;
        public GameScheduler() { }
    }
    public partial class GameSettings : UnityEngine.MonoBehaviour
    {
        public const int DATA_VERSION = 6;
        public static GameSettings Instance;
        [UnityEngine.SerializeField]
        private bool m_achieved_activateFirstSkill;
        [UnityEngine.SerializeField]
        private bool m_achieved_completePrologue;
        [UnityEngine.SerializeField]
        private bool m_achieved_findMapStone;
        [UnityEngine.SerializeField]
        private bool m_achieved_findSecret;
        [UnityEngine.SerializeField]
        private bool m_achieved_reachSpiritTree;
        [UnityEngine.SerializeField]
        private float m_ambienceVolume;
        [UnityEngine.SerializeField]
        private float m_brightness;
        [UnityEngine.SerializeField]
        private float m_contrast;
        [UnityEngine.SerializeField]
        private ControlScheme m_currentControlSchemes;
        [UnityEngine.SerializeField]
        private bool m_damageTextEnabled;
        private bool m_isTrialAchievementsDirty;
        [UnityEngine.SerializeField]
        private ControlScheme m_keyboardControlSchemes;
        [UnityEngine.SerializeField]
        private KeyboardLayout m_keyboardLayout;
        [UnityEngine.SerializeField]
        private Language m_language;
        [UnityEngine.SerializeField]
        private bool m_motionBlurEnabled;
        [UnityEngine.SerializeField]
        private float m_musicVolume;
        [UnityEngine.SerializeField]
        private bool m_oneLifeModeUnlocked;
        [UnityEngine.SerializeField]
        private float m_soundEffectsVolume;
        [UnityEngine.SerializeField]
        private UnlockedCutscenes m_unlockedCutscenes;
        [UnityEngine.SerializeField]
        private float m_vibrationStrength;
        public GameSettings() { }
        public bool Achieved_ActivateFirstSkill { get { return default(bool); } set { } }
        public bool Achieved_CompletePrologue { get { return default(bool); } set { } }
        public bool Achieved_FindMapStone { get { return default(bool); } set { } }
        public bool Achieved_FindSecret { get { return default(bool); } set { } }
        public bool Achieved_ReachSpiritTree { get { return default(bool); } set { } }
        public float AmbienceVolume { get { return default(float); } set { } }
        public float Brightness { get { return default(float); } set { } }
        public float Contrast { get { return default(float); } set { } }
        public ControlScheme CurrentControlScheme { get { return default(ControlScheme); } set { } }
        public bool DamageTextEnabled { get { return default(bool); } set { } }
        public bool Fullscreen { get { return default(bool); } set { } }
        public bool IsTrialAchievementsDirty { get { return default(bool); } }
        public KeyboardLayout KeyboardLayout { get { return default(KeyboardLayout); } set { } }
        public ControlScheme KeyboardScheme { get { return default(ControlScheme); } set { } }
        public Language Language { get { return default(Language); } set { } }
        public bool MotionBlurEnabled { get { return default(bool); } set { } }
        public float MusicVolume { get { return default(float); } set { } }
        public bool OneLifeModeUnlocked { get { return default(bool); } set { } }
        public string PCSettingsPath { get { return default(string); } }
        public UnityEngine.Vector2 RenderedResolution { get { return default(UnityEngine.Vector2); } }
        public UnityEngine.Vector2 Resolution { get { return default(UnityEngine.Vector2); } set { } }
        public float SoundEffectsVolume { get { return default(float); } set { } }
        public UnlockedCutscenes UnlockedCutscenes { get { return default(UnlockedCutscenes); } set { } }
        public float VibrationStrength { get { return default(float); } set { } }
        public bool Vsync { get { return default(bool); } set { } }
        public void ApplyDefaultValues() { }
        public void ApplySystemLanguage() { }
        public void Awake() { }
        public bool CutsceneUnlocked(UnlockedCutscenes cutscene) { return default(bool); }
        public void LoadFromReader(System.IO.BinaryReader reader) { }
        public void LoadSettings() { }
        public void SaveSettings() { }
        public void SaveToWriter(System.IO.BinaryWriter writer) { }
        public void SetControlScheme(ControlScheme controller) { }
    }
    public partial class GameStateMachine : SaveSerialize
    {
        public static GameStateMachine Instance;
        private GameStateMachine.State m_currentState;
        public GameStateMachine() { }
        public GameStateMachine.State CurrentState { get { return default(GameStateMachine.State); } set { } }
        public override void Awake() { }
        public bool IsInExtendedTitleScreen() { return default(bool); }
        public override void Serialize(Archive ar) { }
        public void SetToGame() { }
        public void SetToLogos() { }
        public void SetToPrologue() { }
        public void SetToStartScreen() { }
        public void SetToTitleScreen() { }
        public void SetToTrialEnd() { }
        public void SetToWatchCutscene() { }
        public enum State
        {
            Game = 3,
            Logos = 0,
            Prologue = 6,
            StartScreen = 1,
            TitleScreen = 2,
            TrialEnd = 5,
            WatchCutscenes = 4,
        }
    }
    public partial class GameTimer : SaveSerialize
    {
        public float CurrentTime;
        public static GameTimer Instance;
        private System.Text.StringBuilder m_builder;
        private string m_displayText;
        private float m_sendTelemetryTimer;
        private float m_waitTillSave;
        public GameTimer() { }
        public string DisplayTimeAsString { get { return default(string); } }
        public int Hours { get { return default(int); } }
        public string HoursAsString { get { return default(string); } }
        public int Minutes { get { return default(int); } }
        public string MinutesAsString { get { return default(string); } }
        public int Seconds { get { return default(int); } }
        public int TotalMinutes { get { return default(int); } }
        public override void Awake() { }
        public void FixedUpdate() { }
        private void OnDeath() { }
        public override void OnDestroy() { }
        public void Reset() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator SendTelemetry() { return default(System.Collections.IEnumerator); }
        public override void Serialize(Archive ar) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <SendTelemetry>c__Iterator47 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal GameTimer <>f__this;
            public <SendTelemetry>c__Iterator47() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class GameWorld : SaveSerialize
    {
        public System.Collections.Generic.List<GameWorldArea> Areas;
        public RuntimeGameWorldArea CurrentArea;
        public static GameWorld Instance;
        private readonly System.Collections.Generic.HashSet<MoonGuid> m_revealedIcons;
        public MessageProvider ObjectiveText;
        public System.Collections.Generic.List<MessageProvider> ObjectiveTextProviders;
        public System.Collections.Generic.List<RuntimeGameWorldArea> RuntimeAreas;
        public GameWorld() { }
        public float CompletionAmount { get { return default(float); } }
        public int CompletionPercentage { get { return default(int); } }
        public GameWorldArea AreaFromIndex(int i) { return default(GameWorldArea); }
        public override void Awake() { }
        public GameWorldArea FindAreaFromPosition(UnityEngine.Vector3 position) { return default(GameWorldArea); }
        public RuntimeGameWorldArea FindRuntimeArea(GameWorldArea area) { return default(RuntimeGameWorldArea); }
        public bool HasCompletedEverything() { return default(bool); }
        public bool IconRevealed(MoonGuid icon) { return default(bool); }
        public int IndexOfArea(GameWorldArea area) { return default(int); }
        public override void OnDestroy() { }
        public void OnGameReset() { }
        public void RevealIcon(MoonGuid icon) { }
        public override void Serialize(Archive ar) { }
        public void VisitMapAreasAtPosition(UnityEngine.Vector3 currentPlayerPosition) { }
        public GameWorldArea WorldAreaAtPosition(UnityEngine.Vector3 worldPosition) { return default(GameWorldArea); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <IndexOfArea>c__AnonStorey6A
        {
            internal GameWorldArea area;
            public <IndexOfArea>c__AnonStorey6A() { }
            internal bool <>m__14A(RuntimeGameWorldArea a) { return default(bool); }
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class GameWorldArea : UnityEngine.MonoBehaviour
    {
        public string AreaIdentifier;
        public MessageProvider AreaName;
        public string AreaNameString;
        public CageStructureTool BoundaryCage;
        public UnityEngine.Transform BoundingTransform;
        public CageStructureTool CageStructureTool;
        public System.Collections.Generic.List<GameWorldArea.WorldMapIcon> Icons;
        public MessageProvider LowerAreaName;
        private const float PIXELS_PER_UNIT = 5f;
        public Condition VisitableCondition;
        public UnityEngine.Texture WorldMapTexture;
        public GameWorldArea() { }
        public UnityEngine.Rect BoundingRect { get { return default(UnityEngine.Rect); } }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFace(UnityEngine.Vector3 worldPosition) { return default(bool); }
        public partial class WorldMapIcon
        {
            public MoonGuid Guid;
            public WorldMapIconType Icon;
            public bool IsSecret;
            public UnityEngine.Vector2 Position;
            public WorldMapIcon(SceneMetaData.WorldMapIcon worldMapIcon) { }
        }
    }
    public partial class GarbageCollectionDetector
    {
        public GarbageCollectionDetector() { }
        ~GarbageCollectionDetector() { }
    }
    public partial class GarbageCollectorManager : UnityEngine.MonoBehaviour
    {
        public GarbageCollectorManager() { }
        private void Update() { }
    }
    public partial class GarbageRunner : ActionDebugMenuItem
    {
        public GarbageRunner() { }
        private static bool GarbageTest() { return default(bool); }
    }
    public partial class GenericCollisionTrigger : Trigger
    {
        public bool OnCollision;
        public bool OnTrigger;
        public System.Collections.Generic.List<UnityEngine.GameObject> TriggeringObjects;
        public GenericCollisionTrigger() { }
        private void OnCollisionEnter(UnityEngine.Collision collision) { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
        private void Process(UnityEngine.GameObject gameObject, UnityEngine.Collision collision) { }
    }
    [CategoryAttribute("Sein")]
    public partial class GetAbilityAction : ActionMethod
    {
        public AbilityType Ability;
        public bool Gain;
        public GetAbilityAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class GetAbilityPedestal : SaveSerialize
    {
        public AbilityType Ability;
        public PerformingAction ActivatePedestalSequence;
        public float ActivationDuration;
        public GetAbilityPedestal.States CurrentState;
        public TextureAnimationWithTransitions GetAbilityAnimation;
        private MessageBox m_message;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Texture2D PressUpToActivatePedestal;
        public MessageProvider PressUpToActivatePedestalMessage;
        public float Radius;
        public GetAbilityPedestal() { }
        public bool SeinInRange { get { return default(bool); } }
        public void ActivatePedestal() { }
        public override void Awake() { }
        private void ChangeState(GetAbilityPedestal.States state) { }
        private void ExitInRangeState() { }
        public void FixedUpdate() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator MoveSeinToCenterSmoothly() { return default(System.Collections.IEnumerator); }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void UpdateInRangeState() { }
        private void UpdateOutOfRange() { }
        public void UpdateStates() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <MoveSeinToCenterSmoothly>c__Iterator39 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal GetAbilityPedestal <>f__this;
            internal int <i>__1;
            internal PlatformMovement <seinPlatformMovement>__0;
            public <MoveSeinToCenterSmoothly>c__Iterator39() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public enum States
        {
            Completed = 2,
            InRange = 1,
            OutOfRange = 0,
        }
    }
    public partial class GetItemAction : ActionMethod
    {
        public UnityEngine.GameObject Item;
        public GetItemAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class GetWorldEventCondition : Condition
    {
        public int State;
        public System.Collections.Generic.List<int> States;
        public WorldEvents WorldEvents;
        public GetWorldEventCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public static partial class GizmoHelper
    {
        private static UnityEngine.GUIStyle m_centeredWhiteBoldText;
        private static UnityEngine.Color m_color;
        private static UnityEngine.Camera m_editorCamera;
        private static UnityEngine.Vector3 m_lastCameraPosition;
        private static UnityEngine.Vector3 m_previousCameraPosition;
        private static UnityEngine.Vector2 m_previousDelta;
        private static System.Collections.Generic.Dictionary<UnityEngine.Bounds, bool> m_transformsCache;
        public static UnityEngine.Color RectangleFillColor;
        public static UnityEngine.Color RectangleOutlineColor;
        public static UnityEngine.Color RectangleSelectedFillColor;
        public static UnityEngine.Color RectangleSelectedOutlineColor;
        public static UnityEngine.GUIStyle CenteredWhiteBoldText { get { return default(UnityEngine.GUIStyle); } }
        private static void .cctor() { }
        public static void DrawCenteredText(string text, UnityEngine.Vector3 position, UnityEngine.GUIStyle style, bool sideways) { }
        public static void DrawCenteredText(UnityEngine.GUIContent content, UnityEngine.Vector3 position, UnityEngine.GUIStyle style, bool sideways) { }
        public static void DrawLine(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Color fill) { }
        public static void DrawOutline(UnityEngine.Vector3 position, UnityEngine.Vector3 size, UnityEngine.Color outline) { }
        public static void DrawRectangle(UnityEngine.Vector3 position, UnityEngine.Vector3 size, UnityEngine.Color fill, UnityEngine.Color outline) { }
        public static void DrawSelectedTextFilled(UnityEngine.Transform transform, string title, bool bounds=false) { }
        public static void DrawSelectedTextFilled(UnityEngine.Transform transform, string title, UnityEngine.Color fillColor, UnityEngine.Color outlineColor) { }
        public static void DrawSelectedTextFilled(UnityEngine.Transform transform, string title, UnityEngine.Color fillColor, UnityEngine.Color outlineColor, bool bound) { }
        public static void DrawTextFilled(UnityEngine.Transform transform, string title, bool bounds=false) { }
        public static void DrawTextFilled(UnityEngine.Transform transform, string title, UnityEngine.Color fillColor, UnityEngine.Color outlineColor, bool bound=false) { }
        public static void DrawTextNoFill(UnityEngine.Transform transform, string title, bool bounds=false) { }
        public static UnityEngine.Vector2 GetCameraDistance(UnityEngine.Transform transform) { return default(UnityEngine.Vector2); }
        public static bool IsOnCamera(UnityEngine.Vector3 position, UnityEngine.Vector3 scale) { return default(bool); }
        private static UnityEngine.Vector3 ScreenToWorld(UnityEngine.Vector2 screen, UnityEngine.Transform transform) { return default(UnityEngine.Vector3); }
        public static void SelectableBox(UnityEngine.Vector3 position, UnityEngine.Vector3 size) { }
        public static bool ShouldTextBeSideways(UnityEngine.Vector3 size) { return default(bool); }
        private static UnityEngine.Vector2 WorldToScreen(UnityEngine.Vector3 world) { return default(UnityEngine.Vector2); }
    }
    public partial class GlideFeatherAnimator : UnityEngine.MonoBehaviour, ISeinReceiver, IUberAtlasExternal
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<TextureAnimation, System.Collections.Generic.IEnumerable<Atlas>> <>f__am$cache8;
        public TextureAnimation[] Animations;
        private Atlas[] m_atlases;
        private AtlasSpriteTextureBinder m_binder;
        private UnityEngine.Mesh m_mesh;
        private UnityEngine.MeshFilter m_meshFilter;
        private readonly System.Collections.Generic.Dictionary<string, GlideFeatherAnimator.AtlasAndSpriteTexture> m_nameToFrames;
        private UnityEngine.Renderer m_renderer;
        public SeinCharacter Sein;
        public GlideFeatherAnimator() { }
        private Atlas[] Atlases { get { return default(Atlas[]); } }
        private AtlasSpriteTexture SeinCurrentTexture { get { return default(AtlasSpriteTexture); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Collections.Generic.IEnumerable<Atlas> <InitAtlases>m__172(TextureAnimation textureAnimation) { return default(System.Collections.Generic.IEnumerable<Atlas>); }
        public void Awake() { }
        public bool DoesProvideAtlas() { return default(bool); }
        public void FixedUpdate() { }
        public UberScreenMode GetExternalUberScreenMode() { return default(UberScreenMode); }
        public float GetUberTweakValue() { return default(float); }
        private void InitAtlases() { }
        private bool MatchFrame(string name, out GlideFeatherAnimator.AtlasAndSpriteTexture texture) { texture = default(GlideFeatherAnimator.AtlasAndSpriteTexture); return default(bool); }
        public void OnDestroy() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void Start() { }
        public void Update() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct AtlasAndSpriteTexture
        {
            public Atlas Atlas;
            public AtlasSpriteTexture AtlasSpriteTexture;
        }
    }
    internal partial class GlobalDebugQuadScaleMenuItem : FloatDebugMenuItem
    {
        private static float GlobalQuadScale;
        public GlobalDebugQuadScaleMenuItem(string str) { }
        private static void .cctor() { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class GoThroughPlatform : UnityEngine.MonoBehaviour
    {
        [UnityEngine.HideInInspector]
        public UnityEngine.Collider[] Colliders;
        public static int Layer;
        [UnityEngine.HideInInspector]
        public LightPlatform LightPlatform;
        [UnityEngine.HideInInspector]
        public UnityEngine.Transform[] Transforms;
        public GoThroughPlatform() { }
        public int Length { get { return default(int); } }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnValidate() { }
    }
    public partial class GoThroughPlatformHandler : UnityEngine.MonoBehaviour
    {
        private float m_disabledTimeRemaing;
        private static bool m_ignore;
        private int m_platformLayer;
        private int m_playerLayer;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private IGoThroughPlatformTester m_tester;
        public GoThroughPlatformHandler() { }
        private static void .cctor() { }
        public void Awake() { }
        public bool FallThroughPlatform() { return default(bool); }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void OnRestoreCheckpoint() { }
        [UberBuildMethod]
        private void ProvideComponent() { }
        public void UpdateColliders() { }
        public void UpdateLayerCollision(bool ignore) { }
    }
    public static partial class GoThroughPlatformManager
    {
        public static AllContainer<GoThroughPlatform> GoThroughPlatforms;
        private static void .cctor() { }
        public static void Register(GoThroughPlatform platform) { }
        public static void Unregister(GoThroughPlatform platform) { }
    }
    public partial class GoToSceneController : UnityEngine.MonoBehaviour
    {
        public static GoToSceneController Instance;
        private bool m_createCheckpointLater;
        private bool m_isMovingImmediately;
        private System.Action m_onCompleteImmediateLoad;
        private System.Action m_onCompleteLoad;
        private UnityEngine.Vector3 m_position;
        private bool m_useAfterSceneLoad;
        public MoonGuid StartInScene;
        public GoToSceneController() { }
        public ScenesManager ScenesManager { get { return default(ScenesManager); } }
        public void Awake() { }
        public static bool CheckStartInScene(MoonGuid guid) { return default(bool); }
        public void CompleteGoingToAScene() { }
        private void FinishGoingToPositionImmediately() { }
        private void GoToScene(MoonGuid sceneGuid, UnityEngine.Vector3 position, string sceneName, System.Action onComplete, bool createCheckpoint, bool async) { }
        public void GoToScene(RuntimeSceneMetaData sceneMetaData, System.Action onComplete, bool createCheckpoint) { }
        public void GoToScene(SceneMetaData sceneMetaData, System.Action onComplete, bool createCheckpoint) { }
        public void GoToScene(string path) { }
        public void GoToSceneAsync(RuntimeSceneMetaData sceneMetaData, System.Action onComplete, bool createCheckpoint) { }
        public void GoToSceneAsync(SceneMetaData sceneMetaData, System.Action onComplete, bool createCheckpoint) { }
        public void GoToSceneImmediately(SceneMetaData scene, System.Action onComplete) { }
        public void OnDestroy() { }
        public void OnInstantLoadScenesControllerCompletedLoading() { }
        public void OnScenesEnabled() { }
        public void OnScenesManagerFixedUpdate() { }
    }
    public partial class GoToSequenceData
    {
        public string HelpText;
        public SceneMetaData Scene;
        public string SceneName;
        public string SequenceName;
        public System.Collections.Generic.List<string> TriggerStrings;
        public GoToSequenceData() { }
    }
    public partial class GoToSequenceMenuItem : IDebugMenuItem
    {
        private GoToSequenceData GoToSequenceData;
        private string m_helpText;
        private float m_pressedTimeCountDown;
        public string TitleText;
        public GoToSequenceMenuItem() { }
        public GoToSequenceMenuItem(GoToSequenceData goToSequenceData) { }
        public string HelpText { get { return default(string); } set { } }
        public string Text { get { return default(string); } set { } }
        public void Action() { }
        public void Draw(UnityEngine.Rect rect, bool selected) { }
        public void OnSelected() { }
        public void OnSelectedFixedUpdate() { }
        public virtual void OnSelectedUpdate() { }
    }
    public partial class GoToTrialEndAction : ActionMethod
    {
        public GoToTrialEndAction() { }
        public override void Perform(IContext context) { }
    }
    [CustomShaderModifier("Gradient Remap Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(36))]
    public partial class GradientRemapModifier : UberShaderModifier
    {
        public UberShaderColor BaseColorA;
        public UberShaderColor BaseColorB;
        public UberShaderVector GradientSettings;
        public UberShaderColor RemapColorA;
        public UberShaderColor RemapColorB;
        public GradientRemapModifier() { }
        public override void SetProperties() { }
    }
    public partial class GravityDirectionChangerZone : UnityEngine.MonoBehaviour
    {
        public GravityDirectionChangerZone() { }
        private void OnTriggerEnter(UnityEngine.Collider other) { }
    }
    public partial class GravityPlatformMovementSettings
    {
        public float GravityAngle;
        public float GravityStrength;
        public float MaxFallSpeed;
        public GravityPlatformMovementSettings() { }
        public void CopyFrom(GravityPlatformMovementSettings settings) { }
    }
    public partial class GravityToGroundSurface : UnityEngine.MonoBehaviour
    {
        public bool RequiresNightberry;
        public GravityToGroundSurface() { }
    }
    public partial class GrenadeBurst : UnityEngine.MonoBehaviour, IPooled, ISuspendable
    {
        public UnityEngine.GameObject BurstImpactEffectPrefab;
        public float BurstRadius;
        public float DamageAmount;
        public float DealDamageDuration;
        private readonly System.Collections.Generic.HashSet<IAttackable> m_damageAttackables;
        private static GrenadeBurst m_lastInstance;
        private bool m_suspended;
        private float m_time;
        private float m_waitDelay;
        public GrenadeBurst() { }
        public bool IsSuspended { get { return default(bool); } set { } }
        public void Awake() { }
        public void DealDamage() { }
        public void FixedUpdate() { }
        public static void IgnoreOnLastInstance(IAttackable attackable) { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnPoolSpawned() { }
        public void Start() { }
    }
    public partial class GroundEnemy : Enemy
    {
        public UnityEngine.Transform FeetTransform;
        public PlatformMovement PlatformMovement;
        public PlatformMovementListOfColliders PlatformMovementListOfColliders;
        public GroundEnemy() { }
    }
    public abstract partial class GroundEnemyState : fsm.IState
    {
        protected GroundEnemy GroundEnemy;
        public GroundEnemyState(GroundEnemy groundEnemy) { }
        public float CurrentStateTime { get { return default(float); } }
        public abstract void OnEnter();
        public abstract void OnExit();
        public abstract void UpdateState();
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class GUICamera : UnityEngine.MonoBehaviour
    {
        [UnityEngine.HideInInspector]
        public UnityEngine.Camera Camera;
        public GUICamera() { }
        public void Awake() { }
        public UnityEngine.Vector3 ScreenToWorldPoint(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
    }
    public partial class GUIController : UnityEngine.MonoBehaviour
    {
        public static string[] alignmentOptions;
        private const int AlphaBlend = 0;
        private float alphaBoundary;
        private const int AlphaTest = 1;
        public static string[] contentOptions;
        private float edgeMax;
        private float edgeMin;
        private float fadeDistance;
        private float fadeStrength;
        private string[] fontOptions;
        public GUIController.FontPackage[] fontPackages;
        private const int FoxDog = 0;
        private const int Gradient = 6;
        private UnityEngine.Texture2D[] gradientMaps;
        public CCGradient[] gradients;
        private const int LoremIpsum = 1;
        public static string[] modifierOptions;
        public CCTextModifier[] modifiers;
        private float outlineMax;
        private float outlineMin;
        private UnityEngine.Vector3 rotation;
        private const float rotationLimit = 60f;
        private float scale;
        private int selectedAlignment;
        private int selectedContent;
        private int selectedFont;
        private int selectedGradient;
        private int selectedModifier;
        private int selectedShader;
        public static string[] shaderOptions;
        public UnityEngine.Shader[] shaders;
        private float shadowMax;
        private float shadowMin;
        private float shadowOffsetU;
        private float shadowOffsetV;
        private const int Smooth = 2;
        private const int SmoothFade = 3;
        private const int SmoothOutline = 4;
        private const int SmoothShadow = 5;
        private System.Text.StringBuilder stringBuilder;
        private const int Table = 3;
        public CCText text;
        private UnityEngine.Material textMaterial;
        private UnityEngine.Transform textTransform;
        private const int Timer = 2;
        private bool useDistanceMap;
        private float width;
        public GUIController() { }
        private static void .cctor() { }
        private float ShaderFloat(string name, float value) { return default(float); }
        private float ShaderFloat(string name, float value, float min, float max) { return default(float); }
        private void Start() { }
        private void Update() { }
        private void UpdateContent() { }
        private void UpdateFont() { }
        private void UpdateShader() { }
        public partial class FontPackage
        {
            public UnityEngine.Texture2D atlas;
            public UnityEngine.Texture2D distanceMap;
            public CCFont font;
            public FontPackage() { }
        }
    }
    public partial class GuidOwner : UnityEngine.MonoBehaviour
    {
        [UnityEngine.HideInInspector]
        public MoonGuid MoonGuid;
        public static MoonGuid UNINITIALIZED_GUID;
        public GuidOwner() { }
        private static void .cctor() { }
        private static MoonGuid GenerateGUID() { return default(MoonGuid); }
        public MoonGuid GetGuid() { return default(MoonGuid); }
        public bool IsGuidInitialized() { return default(bool); }
        public void RegenerateGuid() { }
    }
    public partial class HasComponentGameObjectFilter : GameObjectFilter
    {
        public System.Collections.Generic.List<string> AffectingClasses;
        private readonly System.Collections.Generic.List<System.Type> m_affectingClasses;
        public HasComponentGameObjectFilter() { }
        public void Start() { }
        public override bool Valid(UnityEngine.GameObject gameObject) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Valid>c__AnonStorey51
        {
            internal UnityEngine.GameObject gameObject;
            public <Valid>c__AnonStorey51() { }
            internal bool <>m__5A(System.Type affectingClass) { return default(bool); }
        }
    }
    public partial class HasUnlockedAnyCutscenesCondition : Condition
    {
        public HasUnlockedAnyCutscenesCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class HasVisitedOrDiscoveredAreaCondition : Condition
    {
        public GameWorldArea Area;
        private RuntimeGameWorldArea m_area;
        public bool Visited;
        public HasVisitedOrDiscoveredAreaCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class HealthBar : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<LegacyMaterialColorGradientAnimator> Gradients;
        private UnityEngine.Vector3 m_lastPosition;
        private float m_maxValue;
        private float m_minValue;
        private UnityEngine.Transform m_transform;
        public BaseAnimator MaxAnimator;
        public BaseAnimator MinAnimator;
        public BaseAnimator OnChangeAnimator;
        public float ValueChangeRate;
        public FloatValueProvider ValueProvider;
        public HealthBar() { }
        public float Value { get { return default(float); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void LateUpdate() { }
        public void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public void Start() { }
        public void UpdateVisuals() { }
    }
    public partial class HealthController : ValueWithMaxValue
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1;
        private System.Action OnHealthDepletedEvent;
        public HealthController() { }
        public event System.Action OnHealthDepletedEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnHealthDepletedEvent>m__101() { }
        public new void Awake() { }
        public void OnValueChanged() { }
    }
    internal partial class HealthDebugMenuItem : FloatDebugMenuItem
    {
        public HealthDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class HeatUpPlatform : SaveSerialize
    {
        public bool Activated;
        public SoundSource ActivateSoundSource;
        public UnityEngine.Color ColdColor;
        public float CoolingDuration;
        public HeatUpPlatform.State CurrentState;
        public float Damage;
        public SoundSource DeacivateSoundSource;
        public UnityEngine.AnimationCurve HeatCurve;
        public float HeatingDuration;
        public UnityEngine.Color HotColor;
        private bool m_beingTriggered;
        private float m_heat;
        private float m_stateCurrentTime;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Renderer Target;
        public HeatUpPlatform() { }
        public override void Awake() { }
        public void ChangeState(HeatUpPlatform.State state) { }
        public void FixedUpdate() { }
        public void OnCollision(UnityEngine.Collision collision) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void Trigger() { }
        public void UpdateMaterial() { }
        public void UpdateState() { }
        public enum State
        {
            Cold = 0,
            Cooling = 3,
            Heating = 1,
            Hot = 2,
        }
    }
    public partial class HeatUpPlatformAction : ActionMethod
    {
        [NotNull]
        public UnityEngine.GameObject HeatUpPlatform;
        public HeatUpPlatformAction.HeatupPlatformMethod Method;
        public HeatUpPlatformAction() { }
        public override void Perform(IContext context) { }
        public enum HeatupPlatformMethod
        {
            Activate = 0,
            Deactivate = 1,
        }
    }
    public partial class HideOnMenuOpen : UnityEngine.MonoBehaviour
    {
        public HideOnMenuOpen() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnMenuClose() { }
        public void OnMenuOpen() { }
    }
    public partial class HideOrShowOnWorldMap : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Vector2 Offset;
        public HideOrShowOnWorldMap() { }
        public void OnDrawGizmos() { }
        public void Start() { }
    }
    public partial class HideWhenMainMenuOpen : UnityEngine.MonoBehaviour
    {
        public TransparencyAnimator Fader;
        private static readonly AllContainer<HideWhenMainMenuOpen> m_all;
        public HideWhenMainMenuOpen() { }
        private bool MainMenuVisible { get { return default(bool); } }
        private static void .cctor() { }
        public void Awake() { }
        private void MakeInvisible() { }
        private void MakeVisible() { }
        public void OnDestroy() { }
        public static void OnMenuHide() { }
        public static void OnMenuShow() { }
    }
    public partial class HierarchyDebugMenu : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<HierarchyDebugMenu.GameObjectItem> <>f__am$cacheF;
        public static UnityEngine.GUIStyle DebugMenuStyle;
        private float m_holdAccumulation;
        private float m_holdSpeed;
        private readonly System.Collections.Generic.List<HierarchyDebugMenu.GameObjectItem> m_items;
        private int m_maxIndex;
        private HierarchyDebugMenu.GameObjectItem m_selected;
        private int m_selectionIndex;
        public static UnityEngine.GUIStyle PressedStyle;
        public static UnityEngine.GUIStyle SelectedStyle;
        public int ShowAboveCount;
        public int ShowBelowCount;
        public UnityEngine.GUISkin Skin;
        public static UnityEngine.GUIStyle Style;
        public static UnityEngine.GUIStyle StyleDisabled;
        public static UnityEngine.GUIStyle StyleEnabled;
        public HierarchyDebugMenu() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <OnEnable>m__89(HierarchyDebugMenu.GameObjectItem a, HierarchyDebugMenu.GameObjectItem b) { return default(int); }
        public void Awake() { }
        public void FixedUpdate() { }
        public void MoveSelectionDown() { }
        public void MoveSelectionUp() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnGUI() { }
        public void OnItemGUI(HierarchyDebugMenu.GameObjectItem item, ref int index, int depth) { }
        private void ResetHold() { }
        public partial class GameObjectItem
        {
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private static System.Comparison<HierarchyDebugMenu.GameObjectItem> <>f__am$cache4;
            public System.Collections.Generic.List<HierarchyDebugMenu.GameObjectItem> Children;
            public bool Expanded;
            public string Label;
            public UnityEngine.GameObject Target;
            public GameObjectItem(UnityEngine.GameObject go) { }
            public bool HasChildren { get { return default(bool); } }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private static int <GameObjectItem>m__8A(HierarchyDebugMenu.GameObjectItem a, HierarchyDebugMenu.GameObjectItem b) { return default(int); }
        }
    }
    public partial class HighlightNearSein : UnityEngine.MonoBehaviour, INearSeinReceiver
    {
        public System.Collections.Generic.List<LegacyAnimator> Animators;
        public HighlightNearSein() { }
        public void OnNearSeinEnter() { }
        public void OnNearSeinExit() { }
        public void OnSeinNearStay() { }
    }
    internal partial class HighPerformanceCounter
    {
        private long freq;
        private long startTime;
        private long stopTime;
        public HighPerformanceCounter() { }
        public double Duration { get { return default(double); } }
        [System.Runtime.InteropServices.DllImport("Kernel32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static bool QueryPerformanceCounter(out long lpPerformanceCount) { lpPerformanceCount = default(long); return default(bool); }
        [System.Runtime.InteropServices.DllImport("Kernel32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static bool QueryPerformanceFrequency(out long lpFrequency) { lpFrequency = default(long); return default(bool); }
        public void Start() { }
        public void Stop() { }
    }
    public enum HintLayer
    {
        Gameplay = 2,
        GameSaved = 3,
        HintZone = 1,
        SoulFlame = 0,
    }
    public partial class HoldingLightTorchCondition : Condition
    {
        public bool IsHolding;
        public HoldingLightTorchCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class HoldingNightberryCondition : Condition
    {
        public bool IsHolding;
        public HoldingNightberryCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class HoldingTorchCondition : Condition
    {
        public bool IsHolding;
        public HoldingTorchCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class HoldRightCutsceneState : NormalBackwardsCutsceneState
    {
        public System.Collections.Generic.List<Core.Input.Button> OnPressButtonList;
        public HoldRightCutsceneState() { }
        public CharacterAnimationSystem Animation { get { return default(CharacterAnimationSystem); } }
        public SeinCutsceneBlocked CutsceneBlocked { get { return default(SeinCutsceneBlocked); } }
        public override void OnEnter() { }
        public override void OnUpdate() { }
    }
    public partial class HoloLensController : UnityEngine.MonoBehaviour
    {
        private int m_fileCount;
        private System.IAsyncResult m_IAsyncResult;
        private long m_updateID;
        private float m_writeTelemetryTimer;
        private static string OUTPUT_FOLDER;
        private static string TELEMETRY_FILE_NAME;
        public HoloLensController() { }
        private static void .cctor() { }
        private void FixedUpdate() { }
        private void Start() { }
        private void WriteCallback(System.IAsyncResult ar) { }
        private void WriteHoloLensData() { }
    }
    public partial class HoloLensFileWriteState
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private System.IO.FileStream <Stream>k__BackingField;
        public HoloLensFileWriteState(System.IO.FileStream fileStream) { }
        public System.IO.FileStream Stream { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.IO.FileStream); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    }
    public partial class HorizontalPlatformMovementSettings
    {
        public HorizontalPlatformMovementSettings.SpeedSet Air;
        public HorizontalPlatformMovementSettings.SpeedSet Ground;
        public bool LockInput;
        public HorizontalPlatformMovementSettings() { }
        public void CopyFrom(HorizontalPlatformMovementSettings settings) { }
        public partial class SpeedMultiplierSet
        {
            public float AccelerationMultiplier;
            public float DeceelerationMultiplier;
            public float MaxSpeedMultiplier;
            public SpeedMultiplierSet() { }
        }
        public partial class SpeedSet
        {
            public float Acceleration;
            public float Decceleration;
            public float MaxSpeed;
            public SpeedSet() { }
            public void ApplySpeedMultiplier(HorizontalPlatformMovementSettings.SpeedMultiplierSet speedMultiplierSet) { }
            public void CopyFrom(HorizontalPlatformMovementSettings.SpeedSet speedSet) { }
        }
    }
    [CustomShaderModifier("Hue Shift")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(35))]
    public partial class HueShiftModifier : UberShaderModifier
    {
        public UberShaderFloat HueShift;
        public HueShiftModifier() { }
        public override void SetProperties() { }
    }
    public partial class HurtPlayer : UnityEngine.MonoBehaviour
    {
        public float Damage;
        public HurtPlayer() { }
        public void Start() { }
    }
    public partial interface IAction
    {
        void Perform(IContext context);
    }
    public partial interface IAnimatedGraphic
    {
    }
    public partial interface IAnimationVertex
    {
    }
    public partial interface IAttackable
    {
        UnityEngine.Vector3 Position { get; }
        bool CanBeBashed();
        bool CanBeChargeDashed();
        bool CanBeChargeFlamed();
        bool CanBeGrenaded();
        bool CanBeLevelUpBlasted();
        bool CanBeSpiritFlamed();
        bool CanBeStomped();
        bool IsDead();
        bool IsStompBouncable();
    }
    public partial interface IBashAttackable
    {
        int BashPriority { get; }
        void OnBashDehighlight();
        void OnBashHighlight();
        void OnEnterBash();
    }
    public partial interface ICageMetaData
    {
    }
    public partial interface ICanActivateStompers
    {
    }
    public partial interface ICarryable
    {
        bool CanBeCarried();
        void Drop();
        void Pickup();
    }
    public partial class IceSpiritFlameProjectile : SpiritFlameProjectile
    {
        public IceSpiritFlameProjectile() { }
    }
    public partial class IceWall : UnityEngine.MonoBehaviour
    {
        public IceWall() { }
    }
    public partial interface ICharacter
    {
        bool FaceLeft { get; set; }
        UnityEngine.GameObject GameObject { get; }
        bool IsOnGround { get; }
        UnityEngine.Vector3 Position { get; set; }
        UnityEngine.Vector3 Speed { get; set; }
        UnityEngine.Transform Transform { get; }
        void Activate(bool active);
        void PlaceOnGround();
    }
    public partial interface IChargeDashAttackable
    {
        void OnChargeDashDehighlight();
        void OnChargeDashHighlight();
    }
    public partial interface IChargeFlameAttackable
    {
        bool CountsTowardsPowerOfLightAchievement();
    }
    public partial interface ICheckpointZoneReciever
    {
        void OnEnterCheckpoint(InvisibleCheckpoint checkpoint);
    }
    public partial interface ICollisionContext : IContext
    {
        UnityEngine.Collision Collision { get; }
        UnityEngine.Collider CollisionReciever { get; }
    }
    public partial interface IContext
    {
    }
    public partial interface IContextReciever
    {
        void OnReceiveContext(IContext context);
    }
    public partial interface IDamageContext : IContext
    {
        Damage Damage { get; }
    }
    public partial interface IDamageReciever
    {
        void OnRecieveDamage(Damage damage);
    }
    internal partial interface IDebugMenuItem
    {
        string HelpText { get; set; }
        string Text { get; set; }
        void Draw(UnityEngine.Rect rect, bool b);
        void OnSelected();
        void OnSelectedFixedUpdate();
        void OnSelectedUpdate();
    }
    public partial interface IDebugMenuToggleable
    {
        int CurrentToggleOptionId { get; set; }
        string HelpText { get; }
        string Name { get; }
        string[] ToggleOptions { get; }
    }
    public partial interface IDynamicGraphic
    {
    }
    public partial interface IDynamicGraphicHierarchy
    {
    }
    public partial interface IEntityHighlight
    {
        void Reset();
        void SetToBashHighlight();
        void SetToChargeDash();
        void SetToSpiritFlame();
    }
    public partial interface IFrameData
    {
        RecorderFrame.FrameDataTypes FrameType();
        void Load(System.IO.BinaryReader binaryReader);
        void Save(System.IO.BinaryWriter binaryWriter);
    }
    public partial interface IFreezable
    {
        event System.Action OnFreezeEvent;
        event System.Action OnUnfreezeEvent;
        bool CanBeFrozen();
        void Freeze();
        bool IsFrozen();
        void Unfreeze();
    }
    public partial interface IFrustumOptimizable
    {
        UnityEngine.Bounds Bounds { get; }
        bool InsideFrustum { get; }
        void OnFrustumEnter();
        void OnFrustumExit();
    }
    public partial class IgnitableSpiritTorch : SaveSerialize
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheA;
        private const int GRENADE_IGNITE_RADIUS = 2;
        public BaseAnimator IgniteAnimator;
        public UnityEngine.GameObject LightSource;
        public float LitRadius;
        private static System.Collections.Generic.List<IgnitableSpiritTorch> m_all;
        private bool m_isLit;
        private UnityEngine.Transform m_transform;
        private static System.Action OnLightTorchWithGrenadeEvent;
        public ActionSequence OnLitAction;
        public float TouchRadius;
        public float UnlitRadius;
        public IgnitableSpiritTorch() { }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public static event System.Action OnLightTorchWithGrenadeEvent { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnLightTorchWithGrenadeEvent>m__103() { }
        public override void Awake() { }
        public void FixedUpdate() { }
        public static IgnitableSpiritTorch IgniteAnyTorchesNearPosition(UnityEngine.Vector3 position) { return default(IgnitableSpiritTorch); }
        public void Light(bool byGrenade) { }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void UpdateLightSettings() { }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct IgnoreCollisionsHelper
    {
        public System.Collections.Generic.HashSet<UnityEngine.Collider> IgnoredColliders;
        private readonly UnityEngine.Collider m_collider;
        public IgnoreCollisionsHelper(UnityEngine.Collider collider) { throw new System.NotImplementedException(); }
        public void ApplyIgnoredColliders() { }
        public void IgnoreCollision(UnityEngine.Collider other, bool ignore=true) { }
        public bool IsIgnorning(UnityEngine.Collider other) { return default(bool); }
        public void ResetCollisions() { }
    }
    public partial interface IGoThroughPlatformTester
    {
        UnityEngine.Collider GoThroughPlatformTesterCollider { get; }
        UnityEngine.Ray GoThroughPlatformTestingRayLeft { get; }
        float GoThroughPlatformTestingRayRadius { get; }
        UnityEngine.Ray GoThroughPlatformTestingRayRight { get; }
    }
    public partial interface IInScene
    {
        bool IsInScene { get; set; }
    }
    public partial interface IInteractable
    {
        int Index { get; set; }
        bool IsRegistered { get; set; }
        bool DoesOverlap(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity, float radius, float zScale);
        UnityEngine.Vector3 GetExplodePoint(UnityEngine.Vector3 position);
        UnityEngine.Vector3 GetPosition();
        bool IsWater();
        float MaxRadius();
        void OnRegistered();
        void SetInteraction(float time, UnityEngine.Vector3 position, UnityEngine.Vector3 prevPos, UnityEngine.Vector4 strength, UnityEngine.Vector3 velocity, float radius, bool explosion);
    }
    public partial interface IKillReciever
    {
        void OnKill();
    }
    public partial interface ILocationInformation
    {
        string SceneName { get; }
        string TargetName { get; }
        UnityEngine.Transform TargetTransform { get; }
        bool UseFader { get; }
        UnityEngine.Vector3 TargetOffset(UnityEngine.Transform other);
    }
    public partial interface INearSeinReceiver
    {
        void OnNearSeinEnter();
        void OnNearSeinExit();
        void OnSeinNearStay();
    }
    public partial interface INightBerrySpiritRingReciever
    {
        void OnSpiritRingEnter();
        void OnSpiritRingLeave();
    }
    public partial class InputBasedStringProvider : MessageProvider
    {
        public MessageProvider Keyboard;
        public MessageProvider TouchDevice;
        public MessageProvider Xbox360Controller;
        public MessageProvider XboxOneController;
        public InputBasedStringProvider() { }
        public override System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages() { return default(System.Collections.Generic.IEnumerable<MessageDescriptor>); }
    }
    public partial class InputData : IFrameData
    {
        public bool ActionButtonA;
        public bool AnyStart;
        public bool Bash;
        public bool Cancel;
        public bool ChargeJump;
        public bool Copy;
        public bool Delete;
        public bool Filter;
        public bool Focus;
        public bool Glide;
        public bool Grab;
        public int HorizontalDigiPad;
        public bool Jump;
        public bool LeftClick;
        public bool LeftShoulder;
        public bool LeftStick;
        public bool Legend;
        public bool MenuDown;
        public bool MenuLeft;
        public bool MenuPageLeft;
        public bool MenuPageRight;
        public bool MenuRight;
        public bool MenuUp;
        public bool RightClick;
        public bool RightShoulder;
        public bool RightStick;
        public bool SaveFileExists;
        public bool Select;
        public bool SoulFlame;
        public bool SpiritFlame;
        public bool Start;
        public int VerticalDigiPad;
        public bool ZoomIn;
        public bool ZoomOut;
        public InputData() { }
        public InputData(System.IO.BinaryReader binaryReader) { }
        private void CheckButtonChanged(ref bool changed, ref bool member, ref Core.Input.InputButtonProcessor button) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
        public bool UpdateInputs() { return default(bool); }
    }
    public partial class InputLockAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        public bool LastSampledValue;
        public InputLockAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class InputPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        private AnalogueInputData m_analogueInputData;
        private CursorInputData m_cursorInputData;
        private bool m_cursorMoved;
        private InputData m_inputData;
        public InputPlugin() { }
        public void Apply(AnalogueInputData inputData) { }
        public void Apply(InputData inputData) { }
        public void Awake() { }
        public void Exit() { }
        public void OnDestroy() { }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
    }
    public partial class InstanciationToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private bool m_doProfile;
        public InstanciationToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
    }
    [CategoryAttribute("General")]
    public partial class InstantiateAction : ActionMethod
    {
        public UnityEngine.Transform Parent;
        public UnityEngine.Transform Position;
        [NotNull]
        public UnityEngine.GameObject Prefab;
        public bool ShouldSetParent;
        public bool SpawnWhenNotOnScreen;
        public InstantiateAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class InstantiateAnimator : BaseAnimator
    {
        [UnityEngine.SerializePrivateVariables]
        private float m_duration;
        private UnityEngine.GameObject m_gameObject;
        public UnityEngine.GameObject Prefab;
        public UnityEngine.Transform Target;
        public InstantiateAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [CategoryAttribute("General")]
    public partial class InstantiateCharacterAction : ActionMethod
    {
        public CharacterFactory.Characters Character;
        public UnityEngine.Transform Position;
        [NotNull]
        public UnityEngine.GameObject Prefab;
        public InstantiateCharacterAction() { }
        public void AfterLoad() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class InstantiateUtility
    {
        public static bool DisableParticles;
        public static bool ProfileInstantiate;
        private static System.Collections.Generic.List<InstantiateUtility.InstanceInfo> s_info;
        public InstantiateUtility() { }
        private static void .cctor() { }
        public static void AddOnDestroy(UnityEngine.GameObject @get, System.Action @set) { }
        public static void Destroy(UnityEngine.GameObject gameObject) { }
        public static void Destroy(UnityEngine.GameObject gameObject, float time) { }
        public static void DumpInstanceCount() { }
        public static UnityEngine.Object Instantiate(UnityEngine.Object original) { return default(UnityEngine.Object); }
        public static UnityEngine.Object Instantiate(UnityEngine.Object original, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) { return default(UnityEngine.Object); }
        public static bool IsDestroyed(UnityEngine.Component comp) { return default(bool); }
        public static bool IsDestroyed(UnityEngine.GameObject gameObject) { return default(bool); }
        [System.Diagnostics.ConditionalAttribute("DEVELOPMENT_BUILD")]
        [System.Diagnostics.ConditionalAttribute("UNITY_EDITOR")]
        private static void Process(UnityEngine.GameObject go) { }
        public static void UpdateInstanceCount(UnityEngine.Object original) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Destroy>c__AnonStorey5A
        {
            internal UnityEngine.GameObject gameObject;
            public <Destroy>c__AnonStorey5A() { }
            internal void <>m__113() { }
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct InstanceInfo
        {
            public string Name;
            public float Time;
        }
    }
    public partial class InstantLoadScenesController : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <LockFinishingLoading>k__BackingField;
        public static InstantLoadScenesController Instance;
        private bool m_entireGameFrozen;
        private bool m_isLoading;
        private System.Action m_onFinishedLoading;
        private UnityEngine.Vector2 m_position;
        private float m_startInstantlyLoadingScenesTime;
        public System.Action OnScenesEnabledCallback;
        public InstantLoadScenesController() { }
        public bool IsLoading { get { return default(bool); } }
        public bool LockFinishingLoading { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public ScenesManager ScenesManager { get { return default(ScenesManager); } }
        public void Awake() { }
        public void CompleteLoading() { }
        public void FreezeIfLoadingScenes() { }
        public void FreezeIfNotFrozen() { }
        public void LoadScenesAtPosition(System.Action action, bool async, bool pointSample=true) { }
        public void LogState() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void OnScenesManagerFixedUpdate() { }
        public void UnfreezeIfFrozen() { }
    }
    [CustomShaderModifier("Interaction Light Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(2))]
    [UberShaderOrderAttribute((UberShaderOrder)(6))]
    [UnityEngine.ExecuteInEditMode]
    public partial class InteractionLightModifier : UberInteractionModifier
    {
        public UberShaderColor LightColor;
        public UberShaderTexture LightMask;
        private static UberInteractionManager.PropertyIDCache s_cache;
        private static string s_name;
        [UberShaderVectorDisplay("Waviness X", "Waviness Y", "Faloff", "Speed")]
        public UberShaderVector Settings;
        public float Strength;
        public UberShaderColor Tint;
        public InteractionLightModifier() { }
        public override string InteractionName { get { return default(string); } }
        protected override UberInteractionManager.PropertyIDCache PropertyCache { get { return default(UberInteractionManager.PropertyIDCache); } }
        private static void .cctor() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        protected override float GetStrength(UnityEngine.Vector3 velocity, UnityEngine.Vector4 strengthVal) { return default(float); }
        public override bool RequiresVertexColor() { return default(bool); }
        private void Reset() { }
        public override void SetProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator2F : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal System.Collections.Generic.IEnumerator<string> <$s_486>__0;
            internal InteractionLightModifier <>f__this;
            internal string <key>__1;
            public <GetKeywordsForShader>c__Iterator2F() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    [CustomShaderModifier("Interaction Punch Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(2))]
    [UberShaderOrderAttribute((UberShaderOrder)(8))]
    [UnityEngine.ExecuteInEditMode]
    public partial class InteractionPunchModifier : UberInteractionModifier
    {
        public UberShaderTexture Mask;
        private static UberInteractionManager.PropertyIDCache s_cache;
        private static string s_name;
        [UberShaderVectorDisplay("Waviness x", "Waviness y", "Faloff Size", "Speed")]
        public UberShaderVector Settings;
        public float Strength;
        public InteractionPunchModifier() { }
        public override string InteractionName { get { return default(string); } }
        protected override float OverrideDifficulty { get { return default(float); } }
        protected override UberInteractionManager.PropertyIDCache PropertyCache { get { return default(UberInteractionManager.PropertyIDCache); } }
        private static void .cctor() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        protected override float GetStrength(UnityEngine.Vector3 velocity, UnityEngine.Vector4 strengthVal) { return default(float); }
        public override bool RequiresVertexColor() { return default(bool); }
        public override void SetProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator30 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal System.Collections.Generic.IEnumerator<string> <$s_487>__0;
            internal InteractionPunchModifier <>f__this;
            internal string <key>__1;
            public <GetKeywordsForShader>c__Iterator30() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    [CustomShaderModifier("Interaction Rotation Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(2))]
    [UberShaderOrderAttribute((UberShaderOrder)(7))]
    [UnityEngine.ExecuteInEditMode]
    public partial class InteractionRotationModifier : UberInteractionModifier
    {
        private const float c_timeBetweenPlays = 0.4f;
        public UberShaderTexture DistortionMask;
        private float m_lastSoundPlay;
        [UberShaderVectorDisplay("Pivot", "Pivot mask", ShowAsVector2=true)]
        public UberShaderVector Pivot;
        private static UberInteractionManager.PropertyIDCache s_cache;
        private static Varying2DSoundProvider s_largeInteractionProvider;
        private static string s_name;
        [UberShaderVectorDisplay("Waviness x", "Waviness y", "Faloff Size", "Speed")]
        public UberShaderVector Settings;
        public float Strength;
        public InteractionRotationModifier() { }
        public override string InteractionName { get { return default(string); } }
        protected override UberInteractionManager.PropertyIDCache PropertyCache { get { return default(UberInteractionManager.PropertyIDCache); } }
        private static void .cctor() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        protected override int GetFlip(UnityEngine.Vector3 pos, bool explode) { return default(int); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        protected override float GetStrength(UnityEngine.Vector3 velocity, UnityEngine.Vector4 strengthVal) { return default(float); }
        protected override void OnPlay(float strength, bool explosion) { }
        public override void Randomize() { }
        public override bool RequiresVertexColor() { return default(bool); }
        public static UnityEngine.Vector2 Rotate(UnityEngine.Vector2 v, float degrees) { return default(UnityEngine.Vector2); }
        public override void SetProperties() { }
        public static void WarmUpResource() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator31 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal System.Collections.Generic.IEnumerator<string> <$s_488>__0;
            internal InteractionRotationModifier <>f__this;
            internal string <key>__1;
            public <GetKeywordsForShader>c__Iterator31() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class InteractionToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private bool m_doInteraction;
        public InteractionToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
    }
    public partial class InteractiveMessageBox : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.GameObject Button;
        public BaseAnimator ButtonAnimator;
        public bool CanCancel;
        public SoundSource CloseMessageBoxSound;
        private float m_remainingWaitTime;
        private InteractiveMessageBox.State m_state;
        public MessageBox MessageBox;
        public SoundSource MessageFinishedSound;
        public SoundSource NextMessageSound;
        public float WaitTimeFirstMessage;
        public InteractiveMessageBox() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool OnButtonPressed { get { return default(bool); } }
        public void Awake() { }
        public void ChangeState(InteractiveMessageBox.State state) { }
        public void EndMessageBox() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void Start() { }
        public void UpdateComplete() { }
        public void UpdateWriting() { }
        public enum State
        {
            Completed = 1,
            Inactive = 2,
            Writing = 0,
        }
    }
    public partial class IntroLogosSkip : UnityEngine.MonoBehaviour
    {
        private const float c_inputRepeatDelay = 0.3f;
        public ActionSequence EndSequence;
        private float m_lastInput;
        public ActionSequence TimelineRunning;
        public IntroLogosSkip() { }
        private void SkipLogos() { }
        private void Update() { }
    }
    public partial class InventoryAbilityItem : UnityEngine.MonoBehaviour
    {
        public AbilityType Ability;
        public MessageProvider AbilityDescription;
        public MessageProvider AbilityName;
        public InventoryAbilityItem() { }
        public bool HasAbility { get { return default(bool); } }
        public void OnEnable() { }
    }
    public partial class InventoryDEAbilityConnector : UnityEngine.MonoBehaviour
    {
        public InventoryDEAbilityConnector() { }
        public void OnEnable() { }
    }
    public partial class InventoryItemHelpText : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject Avatar;
        public MessageProvider HelpMessage;
        public InventoryItemHelpText() { }
    }
    public partial class InventoryManager : MenuScreen
    {
        public UnityEngine.GameObject AbilityItemHighlight;
        public MessageBox AbilityNameText;
        public SoundProvider CloseAbilityMessageSound;
        public SoundProvider CloseSound;
        public SoundProvider CloseStatisticsMessageSound;
        public MessageBox CompletionText;
        public MessageBox DeathText;
        public MessageProvider DiedMultipleTimesMessageProvider;
        public MessageProvider DiedOneTimeMessagProvider;
        public MessageProvider DiedZeroTimesMessageProvider;
        public MessageBox Difficulty;
        public MessageBox EnergyUpgradesText;
        public UnityEngine.GameObject ForlornRuinsKey;
        public UnityEngine.GameObject GinsoTreeKey;
        public MessageBox HealthUpgradesText;
        public UnityEngine.GameObject HelpMessageBox;
        public static InventoryManager Instance;
        public MessageProvider LockedMessageProvider;
        private SoundProvider m_currentCloseMessageSound;
        public const int MaxLevel = 20;
        public UnityEngine.GameObject MountHoruKey;
        public CleverMenuItemSelectionManager NavigationManager;
        public MessageProvider NotAvailableYetMessageProvider;
        public SoundProvider OpenSound;
        public SoundProvider PressAbilityOptionSound;
        public SoundProvider PressUngainedAbilityOptionSound;
        public MessageBox SkillPointUniquesText;
        public MessageBox TimeText;
        public const int TotalEnergyUpgrades = 15;
        public const int TotalHealthUpgrades = 12;
        public const int TotalSkillPoints = 33;
        public UnityEngine.GameObject WorldEventsGroup;
        public InventoryManager() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public override void Hide() { }
        public override void HideImmediate() { }
        public void OnBackPressed() { }
        public void OnDestroy() { }
        public void OnDifficultyChanged() { }
        public void OnEnable() { }
        public void OnMenuItemChange() { }
        public void OnMenuItemPressed() { }
        public void OnMessageScreenHide() { }
        public override void Show() { }
        public override void ShowImmediate() { }
        public void UpdateItems() { }
    }
    public partial class InvisibleCheckpoint : UnityEngine.MonoBehaviour
    {
        public Condition Condition;
        private UnityEngine.Rect m_bounds;
        private bool m_shouldAcceptRecievers;
        public UnityEngine.Vector2 RespawnPosition;
        public InvisibleCheckpoint() { }
        public void Awake() { }
        public virtual bool CanCreateCheckpoint() { return default(bool); }
        public void FixedUpdate() { }
        public void OnCheckpointCreated() { }
    }
    public partial class InvisibleOnStartUnlessDebug : UnityEngine.MonoBehaviour, IDynamicGraphic
    {
        public InvisibleOnStartUnlessDebug() { }
        private void Start() { }
    }
    public partial interface IPickupCollector
    {
        void OnCollectEnergyOrbPickup(EnergyOrbPickup energyOrbPickup);
        void OnCollectExpOrbPickup(ExpOrbPickup expOrbPickup);
        void OnCollectKeystonePickup(KeystonePickup keystonePickup);
        void OnCollectMapStonePickup(MapStonePickup mapStonePickup);
        void OnCollectMaxEnergyContainerPickup(MaxEnergyContainerPickup energyOrbPickup);
        void OnCollectMaxHealthContainerPickup(MaxHealthContainerPickup maxHealthContainerPickup);
        void OnCollectRestoreHealthPickup(RestoreHealthPickup restoreHealthPickup);
        void OnCollectSkillPointPickup(SkillPointPickup skillPointPickup);
    }
    public partial interface IPlatformMovement
    {
        UnityEngine.Vector3 FeetPosition { get; set; }
        float GravityAngle { get; set; }
        float GroundAngle { get; }
        bool HasWallLeft { get; }
        bool HasWallRight { get; }
        bool IsOnGround { get; }
        bool IsOnWall { get; }
        bool Jumping { get; }
        UnityEngine.Vector2 LocalSpeed { get; set; }
        bool MovingHorizontally { get; }
        UnityEngine.Vector3 Position { get; set; }
        UnityEngine.Vector2 WorldSpeed { get; set; }
    }
    public partial interface IPooled
    {
        void OnPoolSpawned();
    }
    public partial interface IPortalVisitor
    {
        UnityEngine.Vector3 Position { get; set; }
        UnityEngine.Vector3 Speed { get; set; }
        void OnGoThroughPortal();
        void OnPortalOverlapEnter();
        void OnPortalOverlapExit();
    }
    public partial interface IProjectileDetonatable
    {
        bool CanDetonateProjectiles();
    }
    public partial interface IPushable
    {
        bool IsGrabbed { get; }
        bool CanBeBashed();
        void OnDehighlight();
        void OnGrabbed(PlatformMovement platformMovement);
        void OnHighlight();
        void OnPushOrPull(PlatformMovement platformMovement);
        void OnReleased(PlatformMovement platformMovement);
        float PushableSpeedRatio();
    }
    public partial interface IRecorderPlugin
    {
        void Exit();
        void PlayCycle(int frame);
        void RecordCycle(int frame);
    }
    internal partial interface IReflectable
    {
        UnityEngine.Vector3 Direction { get; set; }
        UnityEngine.GameObject LastReflector { get; set; }
        float Speed { get; set; }
        bool CanBeReflected(float maximumReflectableDamage);
        void OnGrabbed();
        void OnReleased(float speed, UnityEngine.Vector3 direction);
    }
    public partial interface IRespawnReciever
    {
        void OnTimedRespawn();
        void RegisterRespawnDelegate(System.Action onRespawn);
    }
    public partial class IsAct3EndedCondition : Condition
    {
        public IsAct3EndedCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsActiveCondition : Condition
    {
        public IsActiveCondition.Mode ActivationType;
        public bool Active;
        public UnityEngine.GameObject Target;
        public IsActiveCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
        public enum Mode
        {
            ActiveInHierarchy = 1,
            ActiveSelf = 0,
        }
    }
    public partial interface ISceneManagerRegisterReciever
    {
        void RegisterToSaveSceneManager(SaveSceneManager saveSceneManager);
    }
    public partial interface ISceneRootPreEnableObserver
    {
        void OnSceneRootPreEnable();
    }
    public partial interface ISeinReceiver
    {
        void SetReferenceToSein(SeinCharacter sein);
    }
    public partial interface ISerializable
    {
        void Serialize(Archive ar);
    }
    public partial class IsFullyInstalledCondition : Condition
    {
        public IsFullyInstalledCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsInZoneCondition : Condition
    {
        public UnityEngine.Transform Target;
        public UnityEngine.Transform[] Zones;
        public IsInZoneCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsOnCollisionState : ISerializable
    {
        public bool FutureOn;
        public bool IsOn;
        public bool WasOn;
        public IsOnCollisionState() { }
        public bool IsOnOrFutureOn { get { return default(bool); } }
        public bool OffThisFrame { get { return default(bool); } }
        public bool OnThisFrame { get { return default(bool); } }
        public bool WasOnButNotIsOn { get { return default(bool); } }
        public void Serialize(Archive ar) { }
        public void Update() { }
    }
    public partial class IsOnlineCondition : Condition
    {
        public IsOnlineCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial interface ISpiritFlameAttackable
    {
        float OriDistanceFromAttackable { get; }
        bool RequiresSpiritFlameAbilityToTarget { get; }
        int SpiritFlamePriority { get; }
        float SpiritFlameRange { get; }
        UnityEngine.Vector3 GenerateSpiritFlameProjectileOffset(UnityEngine.Vector3 position);
        void OnSpiritFlameDehighlight();
        void OnSpiritFlameHighlight();
    }
    public partial class IsRendererVisible : Condition
    {
        [NotNull]
        public UnityEngine.Renderer Renderer;
        public bool Visible;
        public IsRendererVisible() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsReplayPlayingCondition : Condition
    {
        public IsReplayPlayingCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsSafeToExitCondition : Condition
    {
        public IsSafeToExitCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsServiceOnlineCondition : Condition
    {
        public IsServiceOnlineCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial interface IStompAttackable
    {
        bool CountsTowardsSuperJumpAchievement();
    }
    public partial class IsTrialCondition : Condition
    {
        public IsTrialCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial interface IStrippable
    {
        bool DoStrip();
    }
    public partial interface ISurfaceContext : IContext
    {
        SurfaceMaterialType SurfaceMaterialType { get; }
    }
    public partial class IsUsingAzertyKeyboardCondition : Condition
    {
        public IsUsingAzertyKeyboardCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial interface ISuspendable
    {
        bool IsSuspended { get; set; }
    }
    public partial class IsWarmingShadersCondition : Condition
    {
        public IsWarmingShadersCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsWatchingCutsceneCondition : Condition
    {
        public IsWatchingCutsceneCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsWebBuildCondition : Condition
    {
        public IsWebBuildCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class IsXboxOneCondition : Condition
    {
        public IsXboxOneCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial interface ITriggerContext : IContext
    {
        UnityEngine.Collider Collider { get; }
        UnityEngine.Collider TriggerReciever { get; }
    }
    public partial interface IUberAtlasExternal
    {
        bool DoesProvideAtlas();
        UberScreenMode GetExternalUberScreenMode();
        float GetUberTweakValue();
        void Update();
    }
    public partial interface IUberDictionary
    {
    }
    public partial interface IVideoPlayer
    {
        string Filename { set; }
        bool IsPaused { get; }
        bool IsPlaying { get; }
        OnDelegate OnPlaybackFinished { get; set; }
        void Pause();
        void Play();
        void Stop();
    }
    public partial class JumperEnemy : GroundEnemy
    {
        public JumpingSootEnemyAnimations Animations;
        public UnityEngine.Transform JumpingZone;
        public UnityEngine.GameObject LandEffect;
        private UnityEngine.Vector3 m_playerSmoothSpeed;
        private bool m_shouldStomp;
        private UnityEngine.Vector3 m_thrownDirection;
        private bool m_timedRespawn;
        public UnityEngine.LayerMask RaycastLayerMask;
        public JumpingSootEnemySettings Settings;
        public JumpingSootEnemySounds Sounds;
        public JumperEnemy.States State;
        public UnityEngine.GameObject StompEffect;
        public JumperEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <DoJump>m__B9() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <DoJump>m__BA() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__B4() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__B5() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__B6() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__B7() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__B8() { return default(bool); }
        public override bool CanBeOptimized() { return default(bool); }
        public void DoJump() { }
        public new void FixedUpdate() { }
        public void ForceAttackPlayer() { }
        public bool IsOnGround() { return default(bool); }
        public bool LandedOnGround() { return default(bool); }
        public void OnLanded() { }
        public void OnStomped() { }
        public void OnThrow() { }
        public new void OnTimedRespawn() { }
        public bool OutOfJumpingZone() { return default(bool); }
        public bool PlayerInRange() { return default(bool); }
        public bool ShouldStomped() { return default(bool); }
        public bool ShouldThrow() { return default(bool); }
        public new void Start() { }
        public void UpdateRotation() { }
        public partial class States
        {
            public JumperEnemyFallState Fall;
            public JumperEnemyIdleState Idle;
            public JumperEnemyChargingState JumpCharge;
            public fsm.State Respawn;
            public JumperEnemyStompedState Stomped;
            public JumperEnemyStunnedState Stunned;
            public JumperEnemyThrownState Thrown;
            public States() { }
        }
    }
    public partial class JumperEnemyChargingState : JumperEnemyState
    {
        public JumperEnemyChargingState(JumperEnemy jumperEnemy) : base (default(JumperEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class JumperEnemyFallState : JumperEnemyState
    {
        public JumperEnemyFallState(JumperEnemy jumperEnemy) : base (default(JumperEnemy)) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <OnEnter>m__BB() { return default(bool); }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class JumperEnemyIdleState : JumperEnemyState
    {
        public JumperEnemyIdleState(JumperEnemy jumperEnemy) : base (default(JumperEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class JumperEnemyPlaceholder : RespawningPlaceholder
    {
        public UnityEngine.GameObject JumpingSootEnemy;
        public UnityEngine.Transform JumpingZone;
        public JumperEnemyPlaceholder.JumpingSootEnemyPlaceholderSettings Settings;
        public JumperEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class JumpingSootEnemyPlaceholderSettings
        {
            public float ChargeRange;
            public float ChargingDuration;
            public float DamageOnTouch;
            public float ExplosionDamage;
            public float Gravity;
            public int GroundStompDamage;
            public bool HasStompExplosion;
            public float Health;
            public float JumpDistance;
            public float JumpHeight;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public float ShortJumpHeight;
            public JumpingSootEnemyPlaceholderSettings() { }
        }
    }
    public abstract partial class JumperEnemyState : GroundEnemyState
    {
        protected JumperEnemy JumperEnemy;
        public JumperEnemyState(JumperEnemy groundEnemy) : base (default(GroundEnemy)) { }
    }
    public partial class JumperEnemyStompedState : JumperEnemyState
    {
        public JumperEnemyStompedState(JumperEnemy jumperEnemy) : base (default(JumperEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class JumperEnemyStunnedState : JumperEnemyState
    {
        public JumperEnemyStunnedState(JumperEnemy jumperEnemy) : base (default(JumperEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class JumperEnemyThrownState : JumperEnemyState
    {
        public JumperEnemyThrownState(JumperEnemy jumperEnemy) : base (default(JumperEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class JumpFlipPlatform : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache15;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache16;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache17;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache18;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public System.Collections.Generic.List<LegacyAnimator> Animators;
        public System.Collections.Generic.List<BaseAnimator> BaseAnimators;
        private bool m_active;
        private UnityEngine.Collider m_collider;
        [UnityEngine.SerializeField]
        private FlipPlantLogic[] m_flipPlants;
        private LegacyTransparancyAnimator m_transparancyAnimator;
        public ActionMethod OnActivateAction;
        public SoundProvider OnActivateSoundProvider;
        public ActionMethod OnDeactivateAction;
        public SoundProvider OnDeactivateSoundProvider;
        public static System.Action OnSeinChargeJumpEvent;
        public static System.Action OnSeinDoubleJumpEvent;
        public static System.Action OnSeinJumpEvent;
        public static System.Action OnSeinWallJumpEvent;
        public bool ShowAtStart;
        public static float TimeOfLastAudio;
        public bool ToggleOnChargeJump;
        public bool ToggleOnDoubleJump;
        public bool ToggleOnJump;
        public bool ToggleOnWallJump;
        public JumpFlipPlatform() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnSeinChargeJumpEvent>m__166() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnSeinDoubleJumpEvent>m__164() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnSeinJumpEvent>m__163() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnSeinWallJumpEvent>m__165() { }
        public new void Awake() { }
        public void FixedUpdate() { }
        public new void OnDestroy() { }
        public void OnPlayerChargeJump() { }
        public void OnPlayerDoubleJump() { }
        public void OnPlayerJump() { }
        public void OnPlayerWallJump() { }
        public void OnValidate() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void Toggle() { }
        public void UpdateState() { }
    }
    public partial class JumpingSootEnemyAnimations
    {
        public TextureAnimationWithTransitions Confused;
        public TextureAnimationWithTransitions Fall;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions Jump;
        public TextureAnimationWithTransitions JumpCharge;
        public TextureAnimationWithTransitions JumpFlip;
        public TextureAnimationWithTransitions Respawn;
        public TextureAnimationWithTransitions ShortJump;
        public TextureAnimationWithTransitions Stomped;
        public TextureAnimationWithTransitions Thrown;
        public JumpingSootEnemyAnimations() { }
    }
    public partial class JumpingSootEnemySettings
    {
        public float ChargeRange;
        public float ChargingDuration;
        public float ExplosionDamage;
        public float Gravity;
        public int GroundStompDamage;
        public bool HasStompExplosion;
        public float JumpDistance;
        public float JumpHeight;
        public float MaxFallSpeed;
        public UnityEngine.GameObject RespawnEffect;
        public float ShortJumpHeight;
        public UnityEngine.LayerMask SphereCastMask;
        public float SphereCastRadius;
        public float StompAttackDistance;
        public float StunnedDuration;
        public float ThrownDrag;
        public JumpingSootEnemySettings() { }
    }
    public partial class JumpingSootEnemySounds
    {
        public SoundProvider Charge;
        public SoundSource FallOnGround;
        public SoundSource Idle;
        public SoundProvider Impact;
        public SoundProvider Jump;
        public SoundProvider Land;
        public JumpingSootEnemySounds() { }
    }
    public partial class JumpShootShark : Enemy
    {
        public static System.Collections.Generic.List<JumpShootShark> All;
        public JumpShootSharkAnimations Animations;
        public SoundSource Emerge;
        public SoundSource EmergeAnticipation;
        public UnityEngine.Vector3 EmergePosition;
        public PrefabSpawner EmergePrefab;
        public UnityEngine.GameObject HideGroup;
        public UnityEngine.AnimationCurve JumpCurve;
        private bool m_hasFired;
        public UnityEngine.GameObject Projectile;
        public UnityEngine.Transform ProjectileSpawner;
        public float ProjectileSpeed;
        public JumpShootSharkSettings Settings;
        public SoundSource Shoot;
        public JumpShootShark.States State;
        public SoundSource Submerge;
        public PrefabSpawner SubmergePrefab;
        public JumpShootShark() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__D5() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__D6() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__D7() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__D8() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__D9() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__DA() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__DB() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__DC() { return default(bool); }
        public override void Awake() { }
        public void ExitJumpingState() { }
        public void HideGraphics() { }
        public override void OnDestroy() { }
        public void SetEmergeLocation(UnityEngine.Vector3 position) { }
        public void ShootProjectileAtPlayer() { }
        public bool ShouldEmerge() { return default(bool); }
        public bool ShouldIgnoreDamage(Damage damage) { return default(bool); }
        public void ShowGraphics() { }
        public new void Start() { }
        public void UpdateJumpingState() { }
        public partial class States
        {
            public fsm.State Emerging;
            public fsm.State Hidden;
            public fsm.State Jumping;
            public fsm.State Submerge;
            public States() { }
        }
    }
    public partial class JumpShootSharkAction : ActionMethod
    {
        public JumpShootSharkAction.ActionType Action;
        public JumpShootSharkPlaceholder JumpShootShark;
        public UnityEngine.Transform Position;
        public JumpShootSharkAction() { }
        public override void Perform(IContext context) { }
        public enum ActionType
        {
            Emerge = 0,
        }
    }
    public partial class JumpShootSharkAnimations
    {
        public TextureAnimationWithTransitions Jumping;
        public JumpShootSharkAnimations() { }
    }
    public partial class JumpShootSharkPlaceholder : RespawningPlaceholder
    {
        [AssetReferenceChoiceAttribute("Shark Type", new string[]{ "Assets\\frameworks\\enemies\\shark\\prefabs\\jumpShootSharkEnemy.prefab", "Assets\\frameworks\\enemies\\shark\\texture\\jumpShootSharkPlaceholder.png", "Regular Shark", "Assets\\frameworks\\enemies\\shark\\prefabs\\jumpShootSharkEnemyFire.prefab", "Assets\\frameworks\\enemies\\shark\\texture\\jumpShootSharkFirePlaceholder.png", "Fire Shark"})]
        public UnityEngine.GameObject Prefab;
        public JumpShootSharkPlaceholder.JumpShootSharkPlaceholderSettings Settings;
        public JumpShootSharkPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class JumpShootSharkPlaceholderSettings
        {
            public float DamageOnTouch;
            public float Health;
            public float JumpHeight;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public JumpShootSharkPlaceholderSettings() { }
        }
    }
    public partial class JumpShootSharkSettings
    {
        public float EmergingDuration;
        public float JumpDuration;
        public float JumpHeight;
        public float MaxFallSpeed;
        public UnityEngine.GameObject Projectile;
        public float ProjectileSpeed;
        public float ShootDelay;
        public float SubmergeDuration;
        public JumpShootSharkSettings() { }
    }
    public partial class JumpShootSharkZone : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<JumpShootSharkPlaceholder> JumpShootSharkPlaceholders;
        public JumpShootSharkZone() { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
    }
    public partial class JUnitReporter
    {
        public JUnitReporter() { }
        public partial class Failure
        {
            private string m_message;
            private string m_stackTrace;
            private string m_type;
            public Failure(string message, string type, string stackTrace) { }
            public string Message { get { return default(string); } set { } }
            public string StackTrace { get { return default(string); } set { } }
            public string Type { get { return default(string); } set { } }
            public override string ToString() { return default(string); }
        }
        public partial class TestCase
        {
            private string m_className;
            private float m_duration;
            private JUnitReporter.Failure m_failure;
            private string m_name;
            public TestCase(string name, string className, JUnitReporter.Failure failure, float duration) { }
            public string ClassName { get { return default(string); } set { } }
            public float Duration { get { return default(float); } set { } }
            public JUnitReporter.Failure Failure { get { return default(JUnitReporter.Failure); } set { } }
            public string Name { get { return default(string); } set { } }
            public override string ToString() { return default(string); }
        }
        public partial class TestSuite
        {
            private int m_numberOfTestCasesWrittenToOutput;
            private System.Collections.Generic.List<JUnitReporter.TestCase> m_testCases;
            private int m_testCount;
            public TestSuite() { }
            public JUnitReporter.TestCase AddTestCase(JUnitReporter.TestCase testCase) { return default(JUnitReporter.TestCase); }
            public JUnitReporter.TestCase AddTestCase(string name, string className, JUnitReporter.Failure failure, float duration) { return default(JUnitReporter.TestCase); }
            public void BeginOutputFile(string filePath) { }
            public void FinalizeOutputFile(string filePath) { }
            public void WriteToFile(string filePath) { }
        }
        public partial class XmlProperty
        {
            private string m_key;
            private string m_value;
            public XmlProperty(string key, string value) { }
            public override string ToString() { return default(string); }
        }
    }
    public partial class KamikazeSootEnemy : GroundEnemy
    {
        public SoundSource AlertSound;
        public KamikazeSootEnemyAnimations Animations;
        public SoundSource HitGroundSound;
        public SoundSource IdleSound;
        public UnityEngine.GameObject KamikazeExplosion;
        private bool m_isSelfDestructing;
        private bool m_timedRespawn;
        public RollingMovement RollingMovement;
        public SoundSource RollingSound;
        public KamikazeSootEnemySettings Settings;
        public SoundSource StartRollingSound;
        public KamikazeSootEnemy.States State;
        public KamikazeSootEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__BC() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__BD() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__BE() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__BF() { }
        public void AccelerateForwards(float acceleration, float maxSpeed) { }
        public void ApplyGravity(float gravity, float maxFallSpeed) { }
        public override bool CanBeOptimized() { return default(bool); }
        public bool DamageTypeIsBash() { return default(bool); }
        public void Decelerate(float deceleration) { }
        public new void FixedUpdate() { }
        public void ForceAttackPlayer() { }
        public bool InRange() { return default(bool); }
        public void OnDamageDealt(UnityEngine.GameObject target, Damage damage) { }
        public void OnGroundCollision(UnityEngine.Vector3 normal, float strength, UnityEngine.Collider collider) { }
        public void OnModifyDamage(Damage damage) { }
        public new void OnTimedRespawn() { }
        public void OnWallCollision(UnityEngine.Vector3 normal, float strength, UnityEngine.Collider collider) { }
        public bool OutOfRange() { return default(bool); }
        public void SelfDestruct() { }
        public new void Start() { }
        public void UpdateRotation() { }
        public partial class States
        {
            public KamikazeSootEnemyAlertState Alert;
            public KamikazeSootEnemyDropState Drop;
            public KamikazeSootEnemyIdleState Idle;
            public fsm.State Respawn;
            public KamikazeSootEnemyRollingState Rolling;
            public States() { }
        }
    }
    public partial class KamikazeSootEnemyAlertState : KamikazeSootEnemyState
    {
        public KamikazeSootEnemyAlertState(KamikazeSootEnemy kamikazeSootEnemy) : base (default(KamikazeSootEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class KamikazeSootEnemyAnimations
    {
        public TextureAnimationWithTransitions Alert;
        public TextureAnimationWithTransitions Drop;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions Respawn;
        public TextureAnimationWithTransitions Rolling;
        public TextureAnimationWithTransitions Run;
        public KamikazeSootEnemyAnimations() { }
    }
    public partial class KamikazeSootEnemyDropState : KamikazeSootEnemyState
    {
        public KamikazeSootEnemyDropState(KamikazeSootEnemy kamikazeSootEnemy) : base (default(KamikazeSootEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class KamikazeSootEnemyIdleState : KamikazeSootEnemyState
    {
        public KamikazeSootEnemyIdleState(KamikazeSootEnemy kamikazeSootEnemy) : base (default(KamikazeSootEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class KamikazeSootEnemyPlaceholder : RespawningPlaceholder
    {
        public UnityEngine.GameObject Prefab;
        public KamikazeSootEnemyPlaceholder.KamikazeSootEnemyPlaceholderSettings Settings;
        public KamikazeSootEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class KamikazeSootEnemyPlaceholderSettings
        {
            public float Health;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public KamikazeSootEnemyPlaceholderSettings() { }
        }
    }
    public partial class KamikazeSootEnemyRollingState : KamikazeSootEnemyState
    {
        private float m_timeOffGround;
        public KamikazeSootEnemyRollingState(KamikazeSootEnemy kamikazeSootEnemy) : base (default(KamikazeSootEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class KamikazeSootEnemyRunState : KamikazeSootEnemyState
    {
        public KamikazeSootEnemyRunState(KamikazeSootEnemy kamikazeSootEnemy) : base (default(KamikazeSootEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class KamikazeSootEnemySettings
    {
        public float AirDeceleration;
        public float AlertDuration;
        public float Decceleration;
        public int ExplosionDamage;
        public float Gravity;
        public float InRange;
        public float MaxFallSpeed;
        public float MaxRollSpeed;
        public float MaxRunSpeed;
        public float MaxWalkSpeed;
        public float OutRange;
        public UnityEngine.GameObject RespawnEffect;
        public float RollAcceleration;
        public float RollDecceleration;
        public float RunAcceleration;
        public float RunDuration;
        public float WalkAcceleration;
        public KamikazeSootEnemySettings() { }
    }
    public abstract partial class KamikazeSootEnemyState : GroundEnemyState
    {
        protected KamikazeSootEnemy KamikazeSootEnemy;
        public KamikazeSootEnemyState(KamikazeSootEnemy kamikazeSootEnemy) : base (default(GroundEnemy)) { }
    }
    public enum KeyboardLayout
    {
        AZERTY = 1,
        QWERTY = 0,
    }
    public partial class KeyboardLayoutOptions : CleverMenuOptionsList
    {
        public MessageProvider Azerty;
        public static KeyboardLayoutOptions Instance;
        public MessageProvider Qwerty;
        public KeyboardLayoutOptions() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__11() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__12() { }
        public new void Awake() { }
        public new void OnDestroy() { }
        public new void OnEnable() { }
        public void SetKeyboardLayout(KeyboardLayout scheme) { }
    }
    public partial class KeystonePickup : PickupBase
    {
        public int Amount;
        public KeystonePickup() { }
        public UnityEngine.Vector3 AreaCompletorPosition { get { return default(UnityEngine.Vector3); } }
        public int CompletionAmount { get { return default(int); } }
        public override void OnCollectorCandidateTouch(UnityEngine.GameObject collector) { }
    }
    public partial class Kickback
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector2 <KickbackDirection>k__BackingField;
        public UnityEngine.AnimationCurve KickbackCurve;
        private float m_kickbackMultiplier;
        private float m_kickbackTimeRemaining;
        public Kickback() { }
        public float CurrentKickbackSpeed { get { return default(float); } }
        public UnityEngine.Vector2 KickbackDirection { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector2); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public float KickbackDuration { get { return default(float); } }
        public UnityEngine.Vector2 KickbackVector { get { return default(UnityEngine.Vector2); } }
        public void AdvanceTime() { }
        public void ApplyKickback(float kickbackMultiplier) { }
        public void ApplyKickback(float kickbackMultiplier, UnityEngine.Vector2 kickbackDirection) { }
        public void Stop() { }
    }
    public partial class KillCounter : UnityEngine.MonoBehaviour
    {
        private int m_lastKillCount;
        public KillCounter() { }
        public int KillCount { get { return default(int); } }
        private void FixedUpdate() { }
    }
    public partial class KillCounterDisplay : UnityEngine.MonoBehaviour
    {
        private int m_kills;
        public KillCounterDisplay() { }
        public void Update() { }
    }
    public partial class KillPlayer : UnityEngine.MonoBehaviour
    {
        public bool KillEnemiesToo;
        public KillPlayer() { }
        public void DealDamage(UnityEngine.GameObject gameObject) { }
        private void OnCollisionEnter(UnityEngine.Collision other) { }
        private void OnTriggerEnter(UnityEngine.Collider other) { }
        public void Start() { }
    }
    public enum Language
    {
        Chinese = 7,
        English = 0,
        French = 1,
        German = 3,
        Italian = 2,
        Japanese = 5,
        Portuguese = 6,
        Russian = 8,
        Spanish = 4,
    }
    public partial class LanguageChanger : UnityEngine.MonoBehaviour
    {
        public SoundProvider ChangeSound;
        private CleverMenuItem m_cleverMenuItem;
        public CleverMenuItemSelectionManager SelectionManager;
        public LanguageChanger() { }
        public bool ItemSelected { get { return default(bool); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnItemPressed() { }
    }
    public partial class LanguageCondition : Condition
    {
        public Language Language;
        public LanguageCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class LanguageOptions : CleverMenuOptionsList
    {
        public MessageProvider Chinese;
        public MessageProvider English;
        public MessageProvider French;
        public MessageProvider German;
        public MessageProvider Italian;
        public MessageProvider Japanese;
        public MessageProvider Portuguese;
        public MessageProvider Russian;
        public MessageProvider Spanish;
        public LanguageOptions() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__13() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__14() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__15() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__16() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__17() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__18() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__19() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnEnable>m__1A() { }
        public new void OnEnable() { }
        public void SetLanguage(Language language) { }
    }
    public partial class LanguageToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private int m_currentOption;
        public LanguageToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
    }
    public partial class LaserBeam : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject AnticipationEffect;
        public BaseAnimator BeamEngageAnimator;
        public UnityEngine.Transform BeamLenghtScaleTransform;
        public SoundProvider BeamLoopSoundProvider;
        public UnityEngine.ParticleSystem[] BeamParticleSystems;
        public UnityEngine.GameObject BurstEffect;
        public int DamageAmount;
        public UnityEngine.GameObject ImpactEffect;
        public UnityEngine.GameObject ImpactPointLoopEffect;
        public float LaserBeamSizeToTilingRatio;
        public DamageType LaserDamageType;
        public UnityEngine.GameObject StopEffect;
        public LaserBeam() { }
    }
    public partial class LaserObstacle : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject Anticipation;
        public UnityEngine.AnimationCurve AnticipationCurve;
        public Varying2DSoundProvider AnticipationSoundProvider;
        public UnityEngine.GameObject Beam;
        public UnityEngine.AnimationCurve BeamTransparancyCurve;
        public Varying2DSoundProvider EndSoundProvider;
        public UnityEngine.GameObject Impact;
        public Varying2DSoundProvider ImpactSoundProvider;
        public Varying2DSoundProvider LoopSoundProvider;
        private float m_anticipationCountdown;
        private float m_anticipationSoundOffset;
        private float m_beamDuration;
        private float m_beamOnCountdown;
        private float m_beamStartCountdown;
        private float m_beamStartOffset;
        private float m_curveDuration;
        private SoundPlayer m_lastImpactLoop;
        private SoundPlayer m_lastLoop;
        private float m_time;
        public float Offset;
        public Varying2DSoundProvider StartSoundProvider;
        public LaserObstacle() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <FixedUpdate>m__168() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <FixedUpdate>m__169() { }
        private void FixedUpdate() { }
        private void Start() { }
    }
    public partial class LaserPulsator : SaveSerialize, ISuspendable
    {
        public UnityEngine.AnimationCurve AnticipationCurve;
        public BlockableLaser BlockableLaser;
        public UnityEngine.AnimationCurve LaserCurve;
        private bool m_isSuspended;
        private float m_previousAnticipationValue;
        private bool m_shouldPlayAnticipation;
        private float m_time;
        public float Offset;
        public float Speed;
        public LaserPulsator() { }
        public bool IsSuspended { get { return default(bool); } set { } }
        public new void Awake() { }
        public void FixedUpdate() { }
        public new void OnDestroy() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class LaserSocket : UnityEngine.MonoBehaviour
    {
        public BlockableLaser BlockableLaser;
        public LaserSocket() { }
    }
    public partial class LateStartHook : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<System.Action> Actions;
        private static System.Collections.Generic.List<UnityEngine.GameObject> m_poolsToDo;
        public LateStartHook() { }
        private static void .cctor() { }
        public static void AddLateStartMethod(System.Action method) { }
        private void Start() { }
    }
    public partial class LazyInitialization<T> where T : class
    {
        private readonly System.Func<T> m_initializer;
        private T m_value;
        public LazyInitialization(System.Func<T> initializer) { }
        public T Value { get { return default(T); } }
        public void Refresh() { }
    }
    public enum Leaderboard
    {
        Explorer = 1,
        SpeedRunner = 0,
        Survivor = 2,
    }
    public enum LeaderboardB
    {
        ExplorerEasy = 1,
        ExplorerHard = 7,
        ExplorerNormal = 4,
        ExplorerOneLife = 10,
        SpeedRunnerEasy = 0,
        SpeedRunnerHard = 6,
        SpeedRunnerNormal = 3,
        SpeedRunnerOneLife = 9,
        SurvivorEasy = 2,
        SurvivorHard = 8,
        SurvivorNormal = 5,
        SurvivorOneLife = 11,
    }
    public partial class LeaderboardData : System.Collections.Generic.IEnumerable<LeaderboardData.Entry>, System.Collections.IEnumerable
    {
        private System.Collections.Generic.List<LeaderboardData.Entry> m_entries;
        private Leaderboards.Filter m_filter;
        private string m_title;
        private uint m_totalRowCount;
        private Leaderboard m_type;
        public LeaderboardData(Leaderboard type, Leaderboards.Filter filter, string title, uint totalRowCount, System.Collections.Generic.IEnumerable<LeaderboardData.Entry> entries) { }
        public int Count { get { return default(int); } }
        public Leaderboards.Filter Filter { get { return default(Leaderboards.Filter); } }
        public LeaderboardData.Entry this[int index] { get { return default(LeaderboardData.Entry); } }
        public string Title { get { return default(string); } }
        public uint TotalRowCount { get { return default(uint); } }
        public Leaderboard Type { get { return default(Leaderboard); } }
        public System.Collections.Generic.IEnumerator<LeaderboardData.Entry> GetEnumerator() { return default(System.Collections.Generic.IEnumerator<LeaderboardData.Entry>); }
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        public override string ToString() { return default(string); }
        public bool Update(LeaderboardData newData) { return default(bool); }
        public partial class Entry
        {
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private uint <Rank>k__BackingField;
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private string <UserHandle>k__BackingField;
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private string <UserID>k__BackingField;
            private int m_completionPercentage;
            private int m_deathCount;
            private int m_time;
            public Entry(Leaderboard leaderboard, uint rank, long score, string userID, string userHandle) { }
            public int CompletionPercentage { get { return default(int); } }
            public int DeathCount { get { return default(int); } }
            public uint Rank { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(uint); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
            public int Time { get { return default(int); } }
            public string UserHandle { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
            public string UserID { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]protected set { } }
            public override string ToString() { return default(string); }
        }
    }
    public partial class LeaderboardEntryData
    {
        public const int CompletionWeight = 1080;
        public const int DeathWeight = 60;
        private readonly ExtractedIntFromInt64 m_deathCount;
        private readonly ExtractedIntFromInt64 m_incompletionPercentage;
        private readonly ExtractedIntFromInt64 m_time;
        public const int MaxCompletion = 100;
        public LeaderboardEntryData() { }
        public LeaderboardEntryData(int time, int deaths, int completion) { }
        public int CompletionPercentage { get { return default(int); } set { } }
        public int DeathCount { get { return default(int); } set { } }
        public int Time { get { return default(int); } set { } }
        public long DecodeExplorer(long data) { return default(long); }
        public void DecodeSpeedRunner(long data) { }
        public void DecodeSurvivor(long data) { }
        public long EncodeExplorer() { return default(long); }
        public long EncodeSpeedRunner() { return default(long); }
        public long EncodeSurvivor() { return default(long); }
    }
    public partial class LeaderboardRowUI : UnityEngine.MonoBehaviour
    {
        public MessageBox Completion;
        public MessageBox Deaths;
        public BaseAnimator Glow;
        public MessageBox Rank;
        public MessageBox Tag;
        public MessageBox Time;
        public LeaderboardRowUI() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public void Awake() { }
        public void Hide() { }
        public void Highlight() { }
        public void SetContent(LeaderboardData.Entry entry) { }
        public void Show() { }
        public void Unhighlight() { }
    }
    public partial class Leaderboards
    {
        public Leaderboards() { }
        public enum Filter
        {
            Friends = 1,
            MyScore = 2,
            Overall = 0,
        }
        public enum Properties
        {
            ValueA = 0,
            ValueB = 1,
            ValueC = 2,
        }
        public enum Views
        {
            ViewA = 0,
            ViewB = 1,
            ViewC = 2,
        }
    }
    public partial class LeaderboardsB : CleverMenuItemGroupBase
    {
        public TranslatedMessageProvider BoardExplorerMessageProvider;
        public TranslatedMessageProvider BoardGlobalMessageProvider;
        public TranslatedMessageProvider BoardSpeedRunnerMessageProvider;
        public SoundProvider ChangeSelectionSound;
        public SoundProvider CloseSound;
        public SoundProvider CycleFilterSound;
        public SoundProvider CycleLeaderboardSound;
        public TranslatedMessageProvider DifficultyEasyMessageProvider;
        public TranslatedMessageProvider DifficultyHardMessageProvider;
        public TranslatedMessageProvider DifficultyMessageProvider;
        public TranslatedMessageProvider DifficultyNormalMessageProvider;
        public TranslatedMessageProvider DifficultyOneLifeMessageProvider;
        public MessageBox DifficultyTextPC;
        public MessageBox DifficultyTextXbox;
        public TranslatedMessageProvider EntriesMessageProvider;
        public MessageBox EntriesTextPC;
        public MessageBox EntriesTextXbox;
        public TransparencyAnimator FadeAnimator;
        public TranslatedMessageProvider FilterMessageProvider;
        public TranslatedMessageProvider FilterMyFriendsMessageProvider;
        public TranslatedMessageProvider FilterMyScoreMessageProvider;
        public TranslatedMessageProvider FilterOverallMessageProvider;
        public MessageBox FilterTextPC;
        public MessageBox FilterTextXbox;
        public TransparencyAnimator HighlightAnimator;
        public static LeaderboardsB Instance;
        public TranslatedMessageProvider LeaderboardMessageProvider;
        public MessageBox LeaderboardTitlePC;
        public MessageBox LeaderboardTitleXbox;
        private DifficultyMode m_currentDifficulty;
        private Leaderboards.Filter m_currentFilter;
        private Leaderboard m_currentLeaderboard;
        private int m_currentRowIndex;
        private readonly System.Collections.Generic.Dictionary<LeaderboardB, LeaderboardData> m_data;
        private float m_inactiveTime;
        private bool m_isActive;
        private bool m_isHighlightVisible;
        private bool m_isVisible;
        public ActionSequence OnBackAction;
        public ActionMethod OnHighlightChangedAction;
        public SoundProvider OpenSound;
        private const string s_TotalEntriesCountIdentifier = "[Count]";
        public LeaderboardTableUI TableUI;
        public SoundProvider ViewGamerSound;
        public LeaderboardsB() { }
        public static bool Available { get { return default(bool); } }
        public override bool CanBeEntered { get { return default(bool); } }
        public static LeaderboardData CurrentLeaderboardData { get { return default(LeaderboardData); } }
        public LeaderboardRowUI CurrentRowUI { get { return default(LeaderboardRowUI); } }
        public override bool IsActive { get { return default(bool); } set { } }
        public override bool IsHighlightVisible { get { return default(bool); } set { } }
        public override bool IsVisible { get { return default(bool); } set { } }
        public new void Awake() { }
        public static void ClearTableUI() { }
        public override void EnterInGroup() { }
        public void FixedUpdate() { }
        public static LeaderboardData GetLeaderboard(LeaderboardB leaderboard) { return default(LeaderboardData); }
        private void HandleMouseMove() { }
        private void NextDifficulty() { }
        private void NextFilter() { }
        private void NextLeaderboard() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public override bool OnMenuItemChangedInGroup(CleverMenuItemGroup group) { return default(bool); }
        public void OnOnlineStateChanged() { }
        private void PreviousDifficulty() { }
        private void PreviousLeaderboard() { }
        public void RefreshRowIndex() { }
        public static void RefreshTableUI() { }
        public static void RefreshUIStrings() { }
        private void RowDown() { }
        private void RowUp() { }
        public void ShowScoreCard() { }
        public void UpdateHighlight() { }
        public static bool UpdateLeaderboard(Leaderboard leaderboard, Leaderboards.Filter filter, DifficultyMode difficulty) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <UpdateLeaderboard>c__AnonStorey5F
        {
            internal LeaderboardB leaderboardB;
            public <UpdateLeaderboard>c__AnonStorey5F() { }
            internal void <>m__121() { }
        }
    }
    public partial class LeaderboardsController : UnityEngine.MonoBehaviour
    {
        public static bool AutoUpload;
        public static long Int52Max;
        private const float kMinInputDelay = 0.2f;
        private DifficultyMode m_currentDifficulty;
        private Leaderboards.Filter m_currentFilter;
        private Leaderboard m_currentLeaderboard;
        private int m_currentRow;
        private System.Collections.Generic.Dictionary<Leaderboard, LeaderboardData> m_data;
        private float m_lastInputTime;
        private static float m_lastScoreUploadTime;
        private bool m_placeholderGUIVisible;
        private bool m_previousPlaceholderGUIVisible;
        private float m_updateLeaderboardsTime;
        private static LeaderboardsController s_instance;
        public LeaderboardsController() { }
        public static bool Available { get { return default(bool); } }
        public static LeaderboardsController Instance { get { return default(LeaderboardsController); } }
        public static bool Visible { get { return default(bool); } set { } }
        private static void .cctor() { }
        public static bool Clear(Leaderboard leaderboard) { return default(bool); }
        public void FixedUpdate() { }
        public static LeaderboardData GetLeaderboard(Leaderboard leaderboard) { return default(LeaderboardData); }
        public static UnityEngine.Rect PushDown(ref UnityEngine.Rect rect, float offset) { return default(UnityEngine.Rect); }
        public static void SendExplorerLeaderboardData(LeaderboardEntryData data, DifficultyMode difficultyMode) { }
        private static void SendLeaderboardData(Leaderboard leaderboard, long data, DifficultyMode difficultyMode) { }
        public static void SendSpeedRunnersLeaderboardData(LeaderboardEntryData data, DifficultyMode difficultyMode) { }
        public static void SendSurvivorLeaderboardData(LeaderboardEntryData data, DifficultyMode difficultyMode) { }
        private void Update() { }
        public static bool UpdateLeaderboard(Leaderboard leaderboard, Leaderboards.Filter filter, DifficultyMode difficulty, LeaderboardsController.UpdateCallback callback=null) { return default(bool); }
        public static void UploadScore() { }
        public static void UploadScores() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator UploadScoresRoutine(int time, int deathCount, int completionPercentage, DifficultyMode difficulty) { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <UpdateLeaderboard>c__AnonStorey57
        {
            internal Leaderboard leaderboard;
            public <UpdateLeaderboard>c__AnonStorey57() { }
            internal void <>m__102() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <UploadScoresRoutine>c__Iterator19 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal int <$>completionPercentage;
            internal int <$>deathCount;
            internal DifficultyMode <$>difficulty;
            internal int <$>time;
            internal int completionPercentage;
            internal int deathCount;
            internal DifficultyMode difficulty;
            internal int time;
            public <UploadScoresRoutine>c__Iterator19() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public delegate void UpdateCallback(Leaderboard leaderboard, LeaderboardData data);
    }
    public partial class LeaderboardsUI
    {
        public Leaderboards.Filter CurrentFilter;
        public Leaderboards.Views CurrentView;
        public int DataIndex;
        private LeaderboardsUI.State m_currentState;
        private bool m_visible;
        public LeaderboardsUI() { }
        private void ChangeState(LeaderboardsUI.State state) { }
        public void Destroy() { }
        public void DrawContent() { }
        public LeaderboardsUI.State GetCurrentState() { return default(LeaderboardsUI.State); }
        public void HideLeaderboards() { }
        public void NextFilter() { }
        public void PreviousFilter() { }
        public void ShowLeaderboards() { }
        public void Update() { }
        public void UpdateLeaderboardData() { }
        public enum State
        {
            Idle = 2,
            Requesting = 1,
            Uninitialized = 0,
        }
    }
    public partial class LeaderboardTableUI : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Transform HeaderParent;
        public UnityEngine.GameObject LeaderboardRowBackground;
        private UnityEngine.GameObject m_header;
        private readonly System.Collections.Generic.List<LeaderboardRowUI> m_leaderboardRows;
        private Leaderboard m_leaderboardType;
        private System.Collections.Generic.List<UnityEngine.GameObject> m_rowBackgrounds;
        private bool m_tableExists;
        public LeaderboardTableUI.LeaderboardMetaData[] MetaData;
        public int RowCount;
        public float RowSpacing;
        public UnityEngine.Transform RowsParent;
        public LeaderboardTableUI() { }
        public LeaderboardTableUI.LeaderboardMetaData CurrentMetaData { get { return default(LeaderboardTableUI.LeaderboardMetaData); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <get_CurrentMetaData>m__120(LeaderboardTableUI.LeaderboardMetaData x) { return default(bool); }
        public void Awake() { }
        public void ClearTable() { }
        public void DestroyTable() { }
        public void GenerateTable() { }
        public LeaderboardRowUI GetRowByIndex(int index) { return default(LeaderboardRowUI); }
        public void UpdateTable(LeaderboardData data) { }
        public partial class LeaderboardMetaData
        {
            public UnityEngine.GameObject Header;
            public Leaderboard Leaderboard;
            public LeaderboardRowUI Row;
            public LeaderboardMetaData() { }
        }
    }
    public static partial class LeaderboardUtility
    {
        public static Leaderboard LeaderboardBToLeaderboard(LeaderboardB table) { return default(Leaderboard); }
        public static LeaderboardB LeaderboardToLeaderboardB(Leaderboard table, DifficultyMode difficultyMode) { return default(LeaderboardB); }
    }
    internal partial class LeafsDebugMenuItem : FloatDebugMenuItem
    {
        public LeafsDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class LeakDetector : UnityEngine.MonoBehaviour
    {
        private int AudioClipCount;
        private int ComponentCount;
        private int GameObjectCount;
        public static string[] m_assetPaths;
        private float m_nextSample;
        private float m_sampleInterval;
        private int MaterialCount;
        private int MeshCount;
        private int ObjectsCount;
        private int TextureCount;
        public LeakDetector() { }
        private static void .cctor() { }
        public static string GetTexturePath(string textureName) { return default(string); }
        private void Start() { }
        private void Update() { }
    }
    public partial class LeakedSceneObjectDetector : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<LeakedSceneObjectDetector.ObjectData> <>f__am$cache7;
        private System.Collections.Generic.Dictionary<int, LeakedSceneObjectDetector.ObjectData> m_data;
        private float m_delay;
        private string[] m_ignoreList;
        private string[] m_ignoreStartsWithList;
        private static LeakedSceneObjectDetector m_instance;
        private System.Collections.Generic.Dictionary<int, LeakedSceneObjectDetector.ObjectData> m_previousData;
        private string[] m_rootsToCheck;
        public LeakedSceneObjectDetector() { }
        public static bool Enabled { get { return default(bool); } set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <Print>m__174(LeakedSceneObjectDetector.ObjectData a, LeakedSceneObjectDetector.ObjectData b) { return default(int); }
        public void Awake() { }
        public bool IsPrefab(UnityEngine.GameObject go) { return default(bool); }
        public bool IsValid(UnityEngine.GameObject go) { return default(bool); }
        public void OnDisable() { }
        public void Print() { }
        public void Update() { }
        public void UpdateLeakedItem() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Print>c__AnonStorey6E
        {
            internal float time;
            public <Print>c__AnonStorey6E() { }
            internal bool <>m__173(LeakedSceneObjectDetector.ObjectData a) { return default(bool); }
        }
        public partial class ObjectData
        {
            public int ID;
            public string Name;
            public string Scene;
            public float StartTime;
            public ObjectData(int id, UnityEngine.GameObject gameObject) { }
        }
    }
    public partial class LeakLocator : UnityEngine.MonoBehaviour
    {
        public float CheckInterval;
        private readonly System.Collections.Generic.HashSet<UnityEngine.Object> m_initialListOfObjects;
        private float m_time;
        public LeakLocator() { }
        private void Awake() { }
        private void FixedUpdate() { }
        private void UpdateList() { }
    }
    public partial class LeftTriggerRightTriggerCycle : UnityEngine.MonoBehaviour
    {
        public int CurrentPanelIndex;
        public System.Collections.Generic.List<Panel> Panels;
        public LeftTriggerRightTriggerCycle() { }
        public Panel CurrentPanel { get { return default(Panel); } }
        private void FixedUpdate() { }
    }
    public partial class LegacyAdditiveScaleAnimator : LegacyAnimator
    {
        public UnityEngine.Vector3 AddScale;
        private bool m_initialized;
        private UnityEngine.Vector3 m_originalScale;
        public LegacyAdditiveScaleAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    public abstract partial class LegacyAnimator : UnityEngine.MonoBehaviour, IDynamicGraphicHierarchy, IInScene, IPooled, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <CurrentTime>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <MaxTime>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <MinTime>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Reversed>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Stopped>k__BackingField;
        public UnityEngine.AnimationCurve AnimationCurve;
        public float CurveMagnitude;
        private bool m_hasStarted;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private bool m_isInScene;
        private bool m_isSuspended;
        private float m_startSpeed;
        private bool m_wasStopped;
        private System.Action OnAnimationEndEvent;
        public bool PlayAutomatically;
        public bool SampleFirstFrameOnStart;
        public float Speed;
        public float TimeOffset;
        protected LegacyAnimator() { }
        public bool AtEnd { get { return default(bool); } }
        public bool AtStart { get { return default(bool); } }
        public float CurrentTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsInScene { get { return default(bool); } set { } }
        public bool IsSuspended { get { return default(bool); } set { } }
        public float MaxTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public float MinTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool Reversed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool Stopped { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float TimeOfFirstCurvePoint { get { return default(float); } }
        public float TimeOfLastCurvePoint { get { return default(float); } }
        public event System.Action OnAnimationEndEvent { add { } remove { } }
        protected abstract void AnimateIt(float value);
        public virtual void Awake() { }
        public void Continue() { }
        public void ContinueBackward() { }
        public void ContinueForward() { }
        public void FixedUpdate() { }
        protected virtual void OnDestroy() { }
        public virtual void OnPoolSpawned() { }
        public virtual void Restart() { }
        public virtual void RestartReverse() { }
        public abstract void RestoreToOriginalState();
        public void Reverse() { }
        public void Sample(float time) { }
        public void SetAnimationCurve(UnityEngine.AnimationCurve curve) { }
        public virtual void Start() { }
        public void Stop() { }
        public void StopAndSampleAtEnd() { }
        public void StopAndSampleAtStart() { }
        public void UpdateMaxMinTime() { }
        public float ValueInCurrentFrame() { return default(float); }
    }
    public partial class LegacyAnimatorResponder : UnityEngine.MonoBehaviour
    {
        public float ActionReverseTime;
        public float ActionTime;
        public LegacyAnimator Animator;
        public ActionMethod ContinueAction;
        public ActionMethod ContinueReverseAction;
        private bool m_reverseTimeActionDone;
        private bool m_timeActionDone;
        private bool m_wasReversed;
        private bool m_wasStopped;
        public ActionMethod OnReachTimeAction;
        public ActionMethod OnReachTimeReverseAction;
        public ActionMethod StopAction;
        public ActionMethod StopReverseAction;
        public LegacyAnimatorResponder() { }
        public void FixedUpdate() { }
    }
    public partial class LegacyAnimatorSerializer : SaveSerialize
    {
        [UnityEngine.SerializeField]
        private LegacyAnimator[] m_animators;
        public LegacyAnimatorSerializer() { }
        public void OnValidate() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class LegacyCameraSettingsAnimator : LegacyAnimator
    {
        public CameraSettingsAsset CameraSettings;
        public LegacyCameraSettingsAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void Restart() { }
        public override void RestoreToOriginalState() { }
    }
    public partial class LegacyCameraSettingsDistanceBasedAnimator : UnityEngine.MonoBehaviour
    {
        public float BottomMargin;
        public CameraSettingsAsset CameraSettings;
        public FogGradientController FogGradientController;
        public float LeftMargin;
        private CameraSettingsAsset m_currentSettings;
        private UnityEngine.Color m_innerColor;
        private CameraSettingsAsset m_originalCameraSettings;
        private UnityEngine.Color m_outerColor;
        private float m_previousValue;
        private bool m_shouldAnimate;
        public float RightMargin;
        public float TopMargin;
        public LegacyCameraSettingsDistanceBasedAnimator() { }
        private void AnimateIt(float value) { }
        public void FixedUpdate() { }
        public UnityEngine.Bounds GetInnerBounds() { return default(UnityEngine.Bounds); }
        public UnityEngine.Bounds GetOuterBounds() { return default(UnityEngine.Bounds); }
        public void Init() { }
        public float NormalizedMarginPenetration(UnityEngine.Vector3 worldPosition) { return default(float); }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class LegacyCameraSwayingAnimator : LegacySinMovementAnimator
    {
        public LegacyCameraSwayingAnimator() { }
        protected override void AnimateIt(float value) { }
    }
    public partial class LegacyColorFlashAnimator : LegacyAnimator
    {
        public UnityEngine.Color FlashColor;
        private string[] m_colorPropertyNames;
        private bool m_isDirty;
        private UnityEngine.Color[] m_originalColors;
        private UnityEngine.Renderer m_renderer;
        private static string[] SupportedProperties;
        public LegacyColorFlashAnimator() { }
        private static void .cctor() { }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        public void CacheShaderInformation() { }
        public void OnMaterialChanged() { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    [CategoryAttribute("World Map")]
    public partial class LegacyDiscoverWorldMapAreasAction : ActionMethod
    {
        public float FadeDelay;
        public float FadeDuration;
        public float MoveDuration;
        public ActionMethod OnClosedAction;
        public UnityEngine.Transform RevealPosition;
        public SoundProvider RevealSound;
        public LegacyDiscoverWorldMapAreasAction() { }
        public override void Perform(IContext context) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator ReleaseTexture(AreaMapCanvas canvas) { return default(System.Collections.IEnumerator); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator ShowWorldMap() { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <ReleaseTexture>c__Iterator35 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal AreaMapCanvas <$>canvas;
            internal AreaMapCanvas canvas;
            public <ReleaseTexture>c__Iterator35() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <ShowWorldMap>c__Iterator34 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal LegacyDiscoverWorldMapAreasAction <>f__this;
            internal AreaMapCanvas <canvas>__3;
            internal RuntimeGameWorldArea <currentArea>__0;
            internal UnityEngine.Vector2 <playerMapPoition>__1;
            internal float <t>__4;
            internal float <t>__5;
            internal float <t>__6;
            internal UnityEngine.Vector2 <targetMapPosition>__2;
            public <ShowWorldMap>c__Iterator34() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public abstract partial class LegacyDistanceAnimator : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public bool AccountForX;
        public bool AccountForY;
        public UnityEngine.AnimationCurve AnimationCurve;
        public bool ShouldTargetPlayer;
        public UnityEngine.Transform Target;
        protected LegacyDistanceAnimator() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        protected abstract void AnimateIt(float value);
        private void FixedUpdate() { }
        public virtual void Start() { }
    }
    public partial class LegacyEnvironmentFogColorAnimator : LegacyAnimator
    {
        private UnityEngine.Color m_initialFogColor;
        public UnityEngine.Color TargetFogColor;
        public LegacyEnvironmentFogColorAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    public partial class LegacyFloatShaderPropertyAnimator : LegacyAnimator
    {
        public bool AnimateVectorXYAsFloat;
        private float m_originalValue;
        private UnityEngine.Vector4 m_originalValueVector;
        public string PropertyName;
        public LegacyFloatShaderPropertyAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        public override void RestoreToOriginalState() { }
    }
    public partial class LegacyHierarchyTransparancyAnimatorController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        public bool DeactivateWhenInvisible;
        private System.Collections.Generic.List<LegacyTransparancyAnimator> m_list;
        public bool PlayAutomatically;
        public bool RestartOnEnable;
        public float Speed;
        public LegacyHierarchyTransparancyAnimatorController() { }
        private void OnAnimationEnd() { }
        private void OnEnable() { }
        public void RestartAnimators() { }
        private void Start() { }
    }
    public partial class LegacyMaterialColorAnimator : LegacyAnimator
    {
        public bool Alpha;
        public bool AnimateChildren;
        public bool Blue;
        public bool Green;
        private readonly System.Collections.Generic.List<LegacyMaterialColorAnimator.RendererData> m_rendererData;
        public string Property;
        public bool Red;
        public UnityEngine.Color Value;
        public LegacyMaterialColorAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
        public partial class RendererData
        {
            public UnityEngine.Color OriginalValue;
            public UnityEngine.Renderer Renderer;
            public RendererData(UnityEngine.Color originalValue, UnityEngine.Renderer renderer) { }
        }
    }
    public partial class LegacyMaterialColorGradientAnimator : LegacyAnimator
    {
        public bool Alpha;
        public bool AnimateChildren;
        public bool Blue;
        public UnityEngine.Texture2D Gradient;
        public UnityEngine.AnimationCurve GradientCurve;
        public UnityEngine.Color[] GradientPixels;
        public bool Green;
        public bool Half;
        private readonly System.Collections.Generic.List<LegacyMaterialColorGradientAnimator.RendererData> m_rendererData;
        public string Property;
        public bool Red;
        public LegacyMaterialColorGradientAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct RendererData
        {
            public UnityEngine.Color OriginalValue;
            public UnityEngine.Renderer Renderer;
            public RendererData(UnityEngine.Color originalValue, UnityEngine.Renderer renderer) { throw new System.NotImplementedException(); }
        }
    }
    public partial class LegacyMaterialFloatAnimator : LegacyAnimator
    {
        public bool AnimateChildren;
        private bool m_madeMaterial;
        private readonly System.Collections.Generic.List<LegacyMaterialFloatAnimator.RendererData> m_rendererData;
        public string Property;
        public float Value;
        public LegacyMaterialFloatAnimator() { }
        protected override void AnimateIt(float value) { }
        protected override void OnDestroy() { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
        public partial class RendererData
        {
            public float OriginalValue;
            public UnityEngine.Renderer Renderer;
            public RendererData(float originalValue, UnityEngine.Renderer renderer) { }
        }
    }
    public partial class LegacyMaterialTransparencyAnimator : LegacyAnimator
    {
        private bool m_madeMaterial;
        private float m_originalValue;
        private UnityEngine.Renderer m_renderer;
        public string Property;
        public LegacyMaterialTransparencyAnimator() { }
        private UnityEngine.Material Mat { get { return default(UnityEngine.Material); } }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        protected override void OnDestroy() { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    public partial class LegacyParticleEmissionRateAnimator : LegacyAnimator
    {
        private UnityEngine.ParticleEmitter m_emitter;
        private UnityEngine.ParticleSystem m_particleSystem;
        private float m_startEmission;
        private float m_startMaxEmission;
        private float m_startMinEmission;
        public LegacyParticleEmissionRateAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        private void FetchInitialEmitterValues() { }
        public override void RestoreToOriginalState() { }
    }
    public partial class LegacyRotateAnimator : LegacyAnimator
    {
        private UnityEngine.Quaternion m_originalRotation;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Vector3 RotateAxisFilter;
        public LegacyRotateAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        public override void Restart() { }
        public override void RestartReverse() { }
        public override void RestoreToOriginalState() { }
    }
    public partial class LegacyScaleAnimator : LegacyAnimator, IPooled
    {
        private UnityEngine.Vector3 m_originalScale;
        private UnityEngine.Renderer m_renderer;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Vector3 ScaleAxisFilter;
        public UnityEngine.GameObject Target;
        public LegacyScaleAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        public override void RestoreToOriginalState() { }
    }
    public partial class LegacySinMovementAnimator : LegacyAnimator
    {
        public SinMovement.Affect.AffectType AffectToTarget;
        private SinMovement.Affect m_target;
        public UnityEngine.AnimationCurve RangeAnimationCurve;
        public SinMovement Target;
        public LegacySinMovementAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
    }
    public partial class LegacyTextureUVAnimator : LegacyAnimator
    {
        private UnityEngine.Material m_mainMaterial;
        private UnityEngine.Vector2 m_originalOffset;
        private UnityEngine.Renderer m_renderer;
        public string TextureName;
        public float UMultiplier;
        public float VMultiplier;
        public LegacyTextureUVAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    public partial class LegacyTranslateAnimator : LegacyAnimator
    {
        public bool AnimateX;
        public bool AnimateY;
        public bool AnimateZ;
        private UnityEngine.Vector3 m_originalPosition;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Transform Target;
        public UnityEngine.Vector3 Translate;
        public LegacyTranslateAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        private void CacheOriginals() { }
        public override void OnPoolSpawned() { }
        public override void RestoreToOriginalState() { }
    }
    public partial class LegacyTransparancyAnimator : LegacyAnimator
    {
        public bool DeactivateWhenInvisible;
        public bool DestroyWhenInvisible;
        private UnityEngine.Collider m_collider;
        [PooledSafeAttribute]
        private string[] m_colorPropertyNames;
        [PooledSafeAttribute]
        private UnityEngine.Color[] m_colors;
        private bool m_isDirty;
        private bool m_madeMaterial;
        private UnityEngine.Material m_material;
        [PooledSafeAttribute]
        private float[] m_originalAlphas;
        private UnityEngine.Renderer m_renderer;
        public bool OptimizeRenderEnable;
        private static string[] SupportedProperties;
        public LegacyTransparancyAnimator() { }
        private static void .cctor() { }
        protected override void AnimateIt(float value) { }
        public override void Awake() { }
        public void CacheShaderInformation() { }
        public void LinearFadeOut(float time) { }
        protected override void OnDestroy() { }
        private void OnEnable() { }
        public void OnMaterialChanged() { }
        private new void Restart() { }
        private new void RestartReverse() { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    public partial class LegacyTwoPointTransformAnimator : LegacyAnimator
    {
        private UnityEngine.Vector3 m_originalLocalPosition;
        private UnityEngine.Transform m_transform;
        public UnityEngine.GameObject Target;
        public LegacyTwoPointTransformAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    public partial class LegacyUnityTextFadeWordsAnimator : LegacyAnimator
    {
        private readonly System.Collections.Generic.List<string> m_text;
        private UnityEngine.TextMesh m_textMesh;
        public UnityEngine.AnimationCurve WordFade;
        public LegacyUnityTextFadeWordsAnimator() { }
        protected override void AnimateIt(float value) { }
        private string ColorToHex(UnityEngine.Color32 color) { return default(string); }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    public partial class Letterbox : UnityEngine.MonoBehaviour
    {
        public static UnityEngine.AnimationCurve AnimationCurve;
        public static Letterbox Instance;
        public static bool ShowLetterboxes;
        public Letterbox() { }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void OnRestoreCheckpoint() { }
        private void Start() { }
    }
    public partial class LetterboxAction : ActionMethod
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        public bool ShowLetterboxes;
        public LetterboxAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class LevelLoadingPriority : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private int m_currentOption;
        public LevelLoadingPriority() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
    }
    public partial class LevelUpDamageAction : ActionMethod, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public int Damage;
        public UnityEngine.AnimationCurve DistanceOverTime;
        public float Duration;
        private bool m_active;
        private readonly System.Collections.Generic.HashSet<IAttackable> m_attackables;
        private float m_delayTime;
        private float m_time;
        public LevelUpDamageAction() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        public override void Perform(IContext context) { }
    }
    public partial class Lever : SaveSerialize, IDynamicGraphicHierarchy, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1D;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1E;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1F;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache20;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache21;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache22;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache23;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache24;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache25;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache26;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache27;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <InRange>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsGrabbed>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public static System.Collections.Generic.List<Lever> All;
        public Condition CanGrabCondition;
        public System.Func<bool> CanLeverLeft;
        public System.Func<bool> CanLeverRight;
        public Lever.LeverDirections Direction;
        public System.Action GrabLeverEvent;
        public UnityEngine.AnimationCurve HandleRotation;
        public float HandleRotationAmount;
        public float HandleRotationSpeed;
        public LegacyAnimator[] HighlightAnimators;
        public Varying2DSoundProvider LeftSound;
        public System.Action LeverEnterEvent;
        public System.Action LeverExitEvent;
        public System.Action LeverLeftEvent;
        public System.Action LeverLeftFailedEvent;
        public System.Action LeverMiddleEvent;
        public System.Action LeverRightEvent;
        public System.Action LeverRightFailedEvent;
        public Lever.LeverMode LeverType;
        private float m_handleRotationTime;
        public Varying2DSoundProvider MiddleSound;
        public float Radius;
        public System.Action ReleaseLeverEvent;
        public Varying2DSoundProvider RightSound;
        public UnityEngine.Transform RotatingHandle;
        public UnityEngine.Transform Transform;
        public Lever() { }
        public bool CanBeGrabbed { get { return default(bool); } }
        public bool InRange { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool IsGrabbed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool NeedsToBeOnGround { get { return default(bool); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public SeinCharacter Sein { get { return default(SeinCharacter); } }
        public float SeinPositionOffset { get { return default(float); } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <CanLeverLeft>m__15F() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <CanLeverRight>m__160() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <GrabLeverEvent>m__156() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <LeverEnterEvent>m__15D() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <LeverExitEvent>m__15E() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <LeverLeftEvent>m__158() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <LeverLeftFailedEvent>m__15A() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <LeverMiddleEvent>m__15C() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <LeverRightEvent>m__159() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <LeverRightFailedEvent>m__15B() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <ReleaseLeverEvent>m__157() { }
        public override void Awake() { }
        public void FixedUpdate() { }
        private void HackyRotatingHandle() { }
        public override void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnEnterLever() { }
        public void OnExitLever() { }
        public void OnGrabLever() { }
        public void OnPushLeverLeft() { }
        public void OnPushLeverMiddle() { }
        public void OnPushLeverRight() { }
        public void OnReleaseLever() { }
        public bool PlayLeverAnimation() { return default(bool); }
        public override void Serialize(Archive ar) { }
        public void SetLeverDirection(Lever.LeverDirections leverDirection) { }
        public enum LeverDirections
        {
            Left = 0,
            Middle = 1,
            Right = 2,
        }
        public enum LeverMode
        {
            LeftMiddleRightSpring = 2,
            LeftMiddleRightStay = 3,
            LeftRightGrab = 1,
            LeftRightToggle = 0,
        }
    }
    public partial class LightColliderGroup : UnityEngine.MonoBehaviour
    {
        public bool Dynamic;
        public bool InsideLight;
        private readonly System.Collections.Generic.List<UnityEngine.Vector3> m_centers;
        private readonly System.Collections.Generic.List<UnityEngine.Collider> m_colliders;
        private const float PLATFORM_LIGHT_PADDING = 0.6f;
        public LightColliderGroup() { }
        public void Awake() { }
        private void EnableCollider(UnityEngine.Collider collider, bool enable) { }
        public void FixedUpdate() { }
    }
    public partial class LightningAnimator : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject LightningObject;
        private float m_nextLightningTime;
        public float MaxLightningDuration;
        public float MaxTimeBetweenLightnings;
        public float MinLightningDuration;
        public float MinTimeBetweenLightnings;
        public UnityEngine.Transform SoundTarget;
        public UnityEngine.Transform[] SoundZones;
        public SoundProvider ThunderSound;
        public LightningAnimator() { }
        private void AnimateLightning() { }
        private void FixedUpdate() { }
        private float GetNextLightningTime() { return default(float); }
        private void Start() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator ThunderControllerShake() { return default(System.Collections.IEnumerator); }
        public bool ZoneRectanglesContain(UnityEngine.Vector2 position) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <ThunderControllerShake>c__Iterator2 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            public <ThunderControllerShake>c__Iterator2() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class LightPlatform : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<LightPlatform> All;
        public bool InsideLight;
        public LightPlatform() { }
        private static void .cctor() { }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class LightSource : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<LightSource> All;
        public float Radius;
        public LightSource() { }
        public static bool AnyExist { get { return default(bool); } }
        private static void .cctor() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public static bool TestPosition(UnityEngine.Vector2 position, float padding=0) { return default(bool); }
    }
    public partial class LightTorch : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.GameObject AppearEffect;
        public SoundProvider AppearSound;
        public UnityEngine.AnimationCurve DeltaOverTime;
        public UnityEngine.GameObject DisappearEffect;
        public SoundProvider DisappearSound;
        public UnityEngine.AnimationCurve DragOverDistance;
        public BaseAnimator FadeAnimator;
        public UnityEngine.AnimationCurve ForceOverDistance;
        public UnityEngine.AnimationCurve ForceOverTime;
        public UnityEngine.GameObject LightSource;
        private CarryableRigidBody m_carryableRigidBody;
        private float m_chaseTime;
        private int m_check;
        private UnityEngine.Collider m_collider;
        private bool m_found;
        private bool m_isChasing;
        private float m_lockFadeAnimatorRemainingTime;
        private UnityEngine.Rigidbody m_rigidbody;
        public SoundSource MagicMovementSound;
        public float MinDistance;
        public UnityEngine.GameObject ParticlesGroup;
        public float StopChaseRange;
        public float StopChaseVelocity;
        public BaseAnimator TransparencyAnimator;
        public UnityEngine.AnimationCurve UpForceOverTime;
        public LightTorch() { }
        public bool IsCarried { get { return default(bool); } }
        public bool IsChasing { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public bool SeinInsideTorchZone { get { return default(bool); } }
        public override void Awake() { }
        private void ChangeToChase() { }
        private void ChangeToNormal() { }
        private void ChangeToNormalImmediate() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        private void OnGameReset() { }
        public override void Serialize(Archive ar) { }
        private void SetToNormal() { }
        private void UpdateChasing() { }
    }
    public partial class LightTorchIsSolidCondition : Condition
    {
        public LightTorchIsSolidCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class LightTorchPlaceholder : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject LightTorchPrefab;
        public LightTorchPlaceholder() { }
        public void FixedUpdate() { }
        public void OnDrawGizmos() { }
        public void OnDrawGizmosSelected() { }
    }
    public partial class LightTorchZone : UnityEngine.MonoBehaviour
    {
        public CageStructureTool CageStructureTool;
        public static LightTorchZone Instance;
        public LightTorchZone() { }
        public void Awake() { }
        public static bool IsInside(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDestroy() { }
    }
    public partial class LimitedLifetime : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float Lifetime;
        private float m_lifeTimeRemaining;
        public LimitedLifetime() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private void FixedUpdate() { }
        private void OnPoolSpawned() { }
        public void SetRemainingLifetime(float lifetime) { }
        public void Start() { }
    }
    public partial class LimitFramesPerSecond : UnityEngine.MonoBehaviour
    {
        public float FramesPerSecond;
        private float m_time;
        public LimitFramesPerSecond() { }
        private void LateUpdate() { }
    }
    public partial class LinearPath : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<UnityEngine.Vector3> Path;
        public UnityEngine.Color PathColor;
        public LinearPath() { }
        public UnityEngine.Vector3 LocalToWorld(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public void OnDrawGizmos() { }
    }
    public partial class LineMesh : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Mesh m_mesh;
        private UnityEngine.MeshFilter m_meshFilter;
        private UnityEngine.Vector3[] m_normals;
        private int[] m_triangles;
        private UnityEngine.Vector2[] m_uvs;
        private UnityEngine.Vector3[] m_vertices;
        public UnityEngine.Vector3 Normal;
        public System.Collections.Generic.List<UnityEngine.Vector3> Position;
        public bool PreventOverlap;
        public LineMesh.UVModeType UVMode;
        public float Width;
        public LineMesh() { }
        public UnityEngine.Vector3 LastPosition { get { return default(UnityEngine.Vector3); } }
        public int Length { get { return default(int); } }
        public float WorldSpaceLength { get { return default(float); } }
        public void Awake() { }
        public void UpdateMesh() { }
        private void UpdateTriangles() { }
        private void UpdateVertices() { }
        public enum UVModeType
        {
            StretchEntireLine = 1,
            StretchOverUnit = 2,
            StretchPerPoint = 0,
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class LineMeshTextureTiler : UnityEngine.MonoBehaviour
    {
        private LineMesh m_lineMesh;
        private UnityEngine.Vector2 m_scale;
        public string TextureName;
        public LineMeshTextureTiler() { }
        public void Awake() { }
        public void LateUpdate() { }
        public void Start() { }
    }
    public static partial class ListExtension
    {
        public static bool RemoveAtUnordered<T>(this System.Collections.Generic.List<T> list, int index) { return default(bool); }
        public static bool RemoveUnordered<T>(this System.Collections.Generic.List<T> list, T item) { return default(bool); }
    }
    public partial class ListOfCollidedObjects : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<UnityEngine.GameObject> <>f__am$cache3;
        public System.Collections.Generic.List<UnityEngine.GameObject> CollisionObjects;
        private System.Predicate<UnityEngine.GameObject> m_removeFunc;
        public System.Collections.Generic.List<UnityEngine.GameObject> TriggerObjects;
        public ListOfCollidedObjects() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <FixedUpdate>m__59(UnityEngine.GameObject a) { return default(bool); }
        public void FixedUpdate() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionExit(UnityEngine.Collision collision) { }
        public void OnEnable() { }
        public void OnTriggerEnter(UnityEngine.Collider other) { }
        private void OnTriggerExit(UnityEngine.Collider other) { }
    }
    [CategoryAttribute("System")]
    public partial class LoadFirstBuildSceneAction : ActionMethod
    {
        public SceneMetaData SceneMetaData;
        public LoadFirstBuildSceneAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class LoadFromMasterAtStart : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache2;
        public System.Action AfterLoading;
        private static readonly System.Collections.Generic.List<SaveSerialize> s_saveSerialized;
        public LoadFromMasterAtStart() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <AfterLoading>m__115() { }
        public void Start() { }
    }
    public partial class LoadGameAction : ActionMethod
    {
        public LoadGameAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class LoadingBootstrap : UnityEngine.MonoBehaviour
    {
        public float FadeDuration;
        public TransparencyAnimator Fader;
        public static LoadingBootstrap Instance;
        private bool m_faded;
        public LoadingBootstrap() { }
        public void Awake() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator Start() { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Start>c__Iterator1A : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal LoadingBootstrap <>f__this;
            internal int <i>__0;
            internal UnityEngine.AsyncOperation <operation>__1;
            public <Start>c__Iterator1A() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class LoadingFinishedCondition : Condition
    {
        public SceneMetaData SceneMetaData;
        public LoadingFinishedCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    [CategoryAttribute("System")]
    public partial class LoadNextSceneAction : ActionMethod
    {
        public LoadNextSceneAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class LoadRemoveAction : ActionMethod
    {
        public LoadRemoveAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("System")]
    public partial class LoadSceneAction : ActionMethod
    {
        public bool CreateCheckpoint;
        [NotNull]
        public SceneMetaData SceneMetaData;
        public bool UseSceneInitialValues;
        public LoadSceneAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("System")]
    public partial class LoadSceneFrameworkSceneAction : ActionMethod
    {
        [NotNull]
        public SceneMetaData SceneMetaData;
        public LoadSceneFrameworkSceneAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class LoadTimeMeasurer : UnityEngine.MonoBehaviour
    {
        private UnityEngine.AsyncOperation asyncOp;
        public static double loadTime;
        public bool TestSceneAtIndexOne;
        public string TestSceneName;
        public LoadTimeMeasurer() { }
        private static void .cctor() { }
        private void Awake() { }
        private void Update() { }
    }
    public partial class LocalSpacePointSet : UnityEngine.MonoBehaviour
    {
        public bool IsParentDynamic;
        public UnityEngine.Vector3[] LocalSpaceInteractionPoints;
        private System.Collections.Generic.List<UnityEngine.Vector3> m_cachedWorldSpaceInteractionPoints;
        public UnityEngine.Transform ParentTransform;
        public UnityEngine.Color PointColor;
        public LocalSpacePointSet() { }
        public System.Collections.Generic.List<UnityEngine.Vector3> WorldSpaceWorldSpaceInteractionPoints { get { return default(System.Collections.Generic.List<UnityEngine.Vector3>); } set { } }
        public void MarkDirty() { }
        private void UpdateWorldSpacePointCache() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class LocationChanger : UnityEngine.MonoBehaviour, ILocationInformation
    {
        private UnityEngine.Transform m_target;
        public bool MaintainOffsetOfPlayer;
        public UnityEngine.Vector3 Offset;
        public string Scene;
        public string Target;
        public bool UseFade;
        public bool UsePostionZ;
        public LocationChanger() { }
        public string SceneName { get { return default(string); } }
        public string TargetName { get { return default(string); } }
        public UnityEngine.Transform TargetTransform { get { return default(UnityEngine.Transform); } }
        public bool UseFader { get { return default(bool); } }
        public void Start() { }
        public UnityEngine.Vector3 TargetOffset(UnityEngine.Transform other) { return default(UnityEngine.Vector3); }
    }
    public partial class LockMovementAction : ActionMethod
    {
        public bool ShouldLock;
        public LockMovementAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Sein")]
    public partial class LockPlayerInputAction : ActionWithDuration
    {
        public float DurationPlayerCantMove;
        public LockPlayerInputAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator PerformActionCoroutine() { return default(System.Collections.IEnumerator); }
        public override void Stop() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <PerformActionCoroutine>c__IteratorB : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal LockPlayerInputAction <>f__this;
            internal float <t>__0;
            public <PerformActionCoroutine>c__IteratorB() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    [CategoryAttribute("Sein")]
    public partial class LockPlayerInputManualAction : ActionMethod
    {
        public bool ShouldLock;
        public LockPlayerInputManualAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class LockRotation : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Vector3 m_originalRotation;
        private UnityEngine.Transform m_transform;
        public LockRotation() { }
        public void Awake() { }
        private void LateUpdate() { }
        private void Start() { }
    }
    public partial class LogCallbackData : IFrameData
    {
        public string LogString;
        public UnityEngine.LogType LogType;
        public string StackTrace;
        public LogCallbackData() { }
        public LogCallbackData(System.IO.BinaryReader binaryReader) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    public partial class LogCallbackHandler
    {
        public static LogCallbackHandler Instance;
        public System.Collections.Generic.List<LogCallbackHandler.LogEntry> LogEntries;
        private int m_assertCount;
        private bool m_autoScroll;
        private int m_errorCount;
        private int m_exceptionCount;
        private int m_logCount;
        private float m_logEntryHeight;
        private UnityEngine.Vector2 m_scrollPosition;
        private bool m_showErrors;
        private bool m_showInfo;
        private bool m_showWarnings;
        private bool m_showWindow;
        private System.Collections.Generic.List<LogCallbackHandler.LogEntry> m_tempLogEntries;
        private int m_warningCount;
        private const float m_windowHeight = 0.5f;
        private const float m_windowWidth = 1f;
        public LogCallbackHandler() { }
        private static void .cctor() { }
        private void ClearLogEntries() { }
        public void FlushEntriesToFile(string filePath) { }
        public int GetEditorEntriesCount() { return default(int); }
        private void HandleException(string condition, string stackTrace, UnityEngine.LogType type) { }
        public void Hide() { }
        public bool IsVisible() { return default(bool); }
        private void MoveTempEntries() { }
        public void RemoveHandler() { }
        public bool ShouldFilterOut(string msg) { return default(bool); }
        public bool ShouldShowWarnings() { return default(bool); }
        public void Show() { }
        public partial class LogEntry
        {
            private string m_condition;
            private UnityEngine.LogType m_logType;
            private string m_stackTrace;
            public LogEntry(string condition, string stackTrace, UnityEngine.LogType logType) { }
            public string Condition { get { return default(string); } }
            public UnityEngine.LogType LogType { get { return default(UnityEngine.LogType); } }
            public string StackTrace { get { return default(string); } }
            public override string ToString() { return default(string); }
        }
    }
    public partial class LogFile : MonoSingleton<LogFile>
    {
        private readonly System.IO.StreamWriter m_file;
        public LogFile() { }
        public static void Log(object s) { }
        private void OnDestroy() { }
        public void Write(object s) { }
    }
    public partial class LogicUtility
    {
        public LogicUtility() { }
        public static bool Compare(float a, float b, LogicUtility.ComparisonType comparison) { return default(bool); }
        public static string GetComparisonNiceName(string a, string b, LogicUtility.ComparisonType comparison) { return default(string); }
        public enum ComparisonType
        {
            Equal = 4,
            GreaterThan = 2,
            GreaterThanOrEqual = 3,
            LessThan = 0,
            LessThanOrEqual = 1,
            NotEqual = 5,
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class LookAt : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Transform Target;
        public LookAt() { }
        private void Start() { }
        private void Update() { }
    }
    public partial class LowerDifficultyAction : ActionMethod
    {
        public LowerDifficultyAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class LowestDifficultyToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private int m_currentOption;
        public LowestDifficultyToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
    }
    public partial class LowPassFilterSettings
    {
        public bool Active;
        public UnityEngine.AnimationCurve CutoffFrequency;
        public UnityEngine.AnimationCurve LowpassResonance;
        private static LowPassFilterSettings m_standardSetting;
        public LowPassFilterSettings() { }
        public static LowPassFilterSettings StandardSetting { get { return default(LowPassFilterSettings); } }
    }
    public partial class MaintainAspectRatio : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Camera m_camera;
        public MaintainAspectRatio() { }
        public void Awake() { }
        public void LateUpdate() { }
    }
    public partial class MakeEnemyAttackPlayerAction : ActionMethod
    {
        public RespawningPlaceholder Placeholder;
        public MakeEnemyAttackPlayerAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class MapStone : SaveSerialize
    {
        public MapStone.State CurrentState;
        public MessageProvider HintMessage;
        public UnityEngine.Texture2D HintTexture;
        private MessageBox m_hint;
        private UnityEngine.Transform m_transform;
        public ActionMethod OnFailAction;
        public ActionMethod OnOpenedAction;
        public float OriDuration;
        public ActionMethod OriEnterAction;
        public ActionMethod OriExitAction;
        public UnityEngine.Color OriHoverColor;
        public UnityEngine.Transform OriTarget;
        public float Radius;
        public GameWorldArea WorldArea;
        public MapStone() { }
        public bool Activated { get { return default(bool); } }
        public float DistanceToSein { get { return default(float); } }
        public bool OriHasTargets { get { return default(bool); } }
        public override void Awake() { }
        public void FindWorldArea() { }
        public void FixedUpdate() { }
        public void Highlight() { }
        public void OnDisable() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void Unhighlight() { }
        public enum State
        {
            Activated = 2,
            Highlighted = 1,
            Normal = 0,
        }
    }
    public partial class MapStoneActivatedCondition : Condition
    {
        public bool Activated;
        [NotNull]
        public MapStone MapStone;
        public MapStoneActivatedCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class MapStonePickup : PickupBase
    {
        public int Amount;
        public MapStonePickup() { }
        public override void OnCollectorCandidateTouch(UnityEngine.GameObject collector) { }
    }
    internal partial class MapStonesDebugMenuItem : FloatDebugMenuItem
    {
        public MapStonesDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class MarkActiveScenesAsCheckpointKeepLoaded : ActionMethod
    {
        public MarkActiveScenesAsCheckpointKeepLoaded() { }
        public override void Perform(IContext context) { }
    }
    public partial class MarkSavePedestalAsUsedAction : ActionMethod
    {
        [NotNull]
        public SavePedestal SavePedestal;
        public MarkSavePedestalAsUsedAction() { }
        public override void Perform(IContext context) { }
    }
    [CustomShaderModifier("Mask Dissolve")]
    [UberShaderCategoryAttribute((UberShaderCategory)(5))]
    [UberShaderOrderAttribute((UberShaderOrder)(31))]
    public partial class MaskDissolveModifier : UberShaderModifier
    {
        public UberShaderColor DissolveColor;
        [UberShaderVectorDisplay("Distort Strength X", "Distort Strength Y", "Hardness", "Color Fade")]
        public UberShaderVector DistortStrength;
        public UberShaderTexture DistortTexture;
        public UberShaderTexture MaskTexture;
        public bool UseVertexColor;
        public MaskDissolveModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override bool DoesChangeShape() { return default(bool); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        public override void Randomize() { }
        public override bool RequiresVertexColor() { return default(bool); }
        public override void SetProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator32 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal MaskDissolveModifier <>f__this;
            public <GetKeywordsForShader>c__Iterator32() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class MaskedValueBar : UnityEngine.MonoBehaviour
    {
        private readonly ChangeDetectorFloat m_changeDetector;
        private bool m_hasRun;
        private UnityEngine.Renderer m_renderer;
        public float MaxX;
        public float MinX;
        public string Property;
        public FloatValueProvider Value;
        public MaskedValueBar() { }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    [CustomShaderModifier("Mask Extra")]
    [UberShaderCategoryAttribute((UberShaderCategory)(5))]
    [UberShaderOrderAttribute((UberShaderOrder)(29))]
    public partial class MaskExtraModifier : UberShaderModifier
    {
        public UberShaderFloat MaskStrength;
        public UberShaderTexture MaskTexture;
        public MaskExtraModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override bool DoesChangeShape() { return default(bool); }
        public override void Randomize() { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Mask")]
    [UberShaderCategoryAttribute((UberShaderCategory)(5))]
    [UberShaderOrderAttribute((UberShaderOrder)(28))]
    public partial class MaskModifier : UberShaderModifier
    {
        public UberShaderFloat MaskStrength;
        public UberShaderTexture MaskTexture;
        public MaskModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override bool DoesChangeShape() { return default(bool); }
        public override void Randomize() { }
        public override void SetProperties() { }
    }
    public partial class MasterTimelineSequence : BaseAnimator
    {
        public ActionSequence BeforeFinishAction;
        public float BeforeFinishActionTimeOffset;
        private float m_crossFadePadding;
        private float m_crossFadeTimeOffset;
        private MasterTimelineSequence.SceneSettings m_crossFadingFromScene;
        private MasterTimelineSequence.SceneSettings m_currentScene;
        private bool m_hasFinished;
        private bool m_hasRunBeforeFinishAction;
        private float m_lastRealTime;
        private bool m_playing;
        private System.Collections.Generic.HashSet<MasterTimelineSequence.SceneSettings> m_preloadedScenes;
        private float m_realTime;
        private float m_time;
        public ActionSequence OnFinish;
        public System.Collections.Generic.List<MasterTimelineSequence.SceneSettings> Scenes;
        public TimelineSequence TimelineSequence;
        public MasterTimelineSequence() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public int FindEntryIndex(MasterTimelineSequence.SceneSettings entry) { return default(int); }
        public MasterTimelineSequence.SceneSettings FindSceneAtTime(float time) { return default(MasterTimelineSequence.SceneSettings); }
        public MasterTimelineSequence.SceneSettings FindSceneToPreloadAtTime(float time) { return default(MasterTimelineSequence.SceneSettings); }
        [UnityEngine.ContextMenu("Generate start times")]
        public void GenerateStartTimes() { }
        public void OnLoadedScene() { }
        public void OnSkipCutscene() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
        public new void Start() { }
        public void Update() { }
        public partial class SceneSettings
        {
            public float CrossfadeDuration;
            public float Duration;
            private BaseAnimator m_animator;
            public float PreloadTime;
            public SceneMetaData SceneMetaData;
            public float StartTime;
            public SceneSettings() { }
            public BaseAnimator Animator { get { return default(BaseAnimator); } }
            public float EndTime { get { return default(float); } set { } }
        }
    }
    public partial class MaterialProperties
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<OverridableTextureProperty> <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<OverridableFloatProperty> <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<OverridableColorProperty> <>f__am$cache6;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<OverridableTextureProperty, string> <>f__am$cache7;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<OverridableFloatProperty, string> <>f__am$cache8;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<OverridableColorProperty, string> <>f__am$cache9;
        public System.Collections.Generic.Dictionary<string, OverridableColorProperty> ColorProperties;
        public System.Collections.Generic.Dictionary<string, OverridableFloatProperty> FloatProperties;
        public OverridableShaderProperty Shader;
        public System.Collections.Generic.Dictionary<string, OverridableTextureProperty> TextureProperties;
        public MaterialProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <RemovePropertiesThatArntOverwridden>m__5B(OverridableTextureProperty a) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <RemovePropertiesThatArntOverwridden>m__5C(OverridableFloatProperty a) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <RemovePropertiesThatArntOverwridden>m__5D(OverridableColorProperty a) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static string <RemovePropertiesThatArntOverwridden>m__5E(OverridableTextureProperty a) { return default(string); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static string <RemovePropertiesThatArntOverwridden>m__5F(OverridableFloatProperty a) { return default(string); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static string <RemovePropertiesThatArntOverwridden>m__60(OverridableColorProperty a) { return default(string); }
        public void ApplyMaterialProperties(MaterialProperties materialProperties) { }
        public void OverrideAll() { }
        public void RemovePropertiesThatArntOverwridden() { }
    }
    public static partial class MaterialPropertiesUtility
    {
        public static void ApplyColorProperties(System.Collections.Generic.Dictionary<string, OverridableColorProperty> colorPropertiesDictionaryFrom, System.Collections.Generic.Dictionary<string, OverridableColorProperty> colorPropertiesDictionaryTo) { }
        public static void ApplyFloatProperties(System.Collections.Generic.Dictionary<string, OverridableFloatProperty> floatPropertiesDictionaryFrom, System.Collections.Generic.Dictionary<string, OverridableFloatProperty> floatPropertiesDictionaryTo) { }
        public static void ApplyShaderProperty(OverridableShaderProperty shaderPropertyFrom, OverridableShaderProperty shaderPropertyTo) { }
        public static void ApplyTextureProperties(System.Collections.Generic.Dictionary<string, OverridableTextureProperty> texturePropertiesDictionaryFrom, System.Collections.Generic.Dictionary<string, OverridableTextureProperty> texturePropertiesDictionaryTo) { }
    }
    public partial class MaxEnergyContainerPickup : PickupBase
    {
        public int Amount;
        public MaxEnergyContainerPickup() { }
        public override void OnCollectorCandidateTouch(UnityEngine.GameObject collector) { }
    }
    internal partial class MaxEnergyDebugMenuItem : FloatDebugMenuItem
    {
        public MaxEnergyDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class MaxHealthContainerPickup : PickupBase
    {
        public MaxHealthContainerPickup() { }
        public override void OnCollectorCandidateTouch(UnityEngine.GameObject collector) { }
    }
    internal partial class MaxHealthDebugMenuItem : FloatDebugMenuItem
    {
        public MaxHealthDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    [UnityEngine.RequireComponent(typeof(UnityEngine.GUIText))]
    public partial class MemoryCounter : UnityEngine.MonoBehaviour
    {
        private float m_lastCheckTime;
        private float m_monoHeap;
        private float m_monoUsed;
        public MemoryCounter() { }
        private void FixedUpdate() { }
    }
    public abstract partial class MenuScreen : UnityEngine.MonoBehaviour
    {
        protected MenuScreen() { }
        public abstract void Hide();
        public abstract void HideImmediate();
        public abstract void Show();
        public abstract void ShowImmediate();
    }
    public partial class MenuScreenManager : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SoundProvider CloseSound;
        public MenuScreenManager.Screens CurrentScreen;
        public bool LockClosingMenu;
        private bool m_isPaused;
        private ResumeGameController m_resumeScreen;
        private System.Collections.Generic.HashSet<ISuspendable> m_suspendables;
        public SoundProvider OpenSound;
        public UnityEngine.GameObject OptionsPrefab;
        public UnityEngine.GameObject PausePrefab;
        public UnityEngine.GameObject ResumeScreen;
        public MenuScreenManager() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool MainMenuVisible { get { return default(bool); } set { } }
        public static bool MenuOpenKeyPressed { get { return default(bool); } }
        public bool ResumeScreenVisible { get { return default(bool); } }
        public new void Awake() { }
        private bool CanOpenMenus() { return default(bool); }
        public void ChangeScreen(MenuScreenManager.Screens screen) { }
        public void DoMenuKeyPress() { }
        public void FixedUpdate() { }
        public void HideMenuScreen(bool immediate=false) { }
        public void HideResumeScreen() { }
        public UnityEngine.GameObject Instantiate(UnityEngine.GameObject prefab) { return default(UnityEngine.GameObject); }
        public bool IsInventoryVisible() { return default(bool); }
        public new void OnDestroy() { }
        public void OnGameReset() { }
        public void PlayOpenSound(MenuScreenManager.Screens screen, bool open) { }
        public void RemoveGameplayObjects() { }
        public void SetupInventoryUI(UnityEngine.GameObject inventoryManager) { }
        public void SetupOptionsScreen(UnityEngine.GameObject optionsPrefab) { }
        public void SetupPauseScreen(UnityEngine.GameObject pauseScreenPrefab) { }
        public void SetupSkillTreeUI(UnityEngine.GameObject skillTreeUIPrefab) { }
        public void SetupWorldMapUI(UnityEngine.GameObject worldMapUI) { }
        private void Show(MenuScreen menuScreen, MenuScreenManager.Screens screen) { }
        public void ShowAreaMap() { }
        public void ShowInventory() { }
        public void ShowInventoryOrPauseMenu() { }
        private void ShowMenuScreen(MenuScreenManager.Screens screen, bool playOpenSound=true) { }
        public void ShowMenuScreen(bool immediate=false) { }
        public void ShowObjective(Objective objective, System.Action method) { }
        public void ShowOptions() { }
        public void ShowResumeScreen() { }
        public void ShowSkillTree() { }
        public void ShowWorldMap(bool playOpenSound=true) { }
        public enum Screens
        {
            Inventory = 4,
            Options = 3,
            Pause = 0,
            SkillTree = 1,
            WorldMap = 2,
        }
    }
    public partial class MeshRendererFrustrumOptimiser : IFrustumOptimizable
    {
        public UnityEngine.Bounds BoundingBox;
        public UnityEngine.GameObject GameObject;
        private bool m_outsideFrustum;
        public MeshRendererFrustrumOptimiser(UnityEngine.GameObject gameObject) { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFrustum { get { return default(bool); } }
        public void OnFrustumEnter() { }
        public void OnFrustumExit() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class MessageBox : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache16;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache17;
        public UnityEngine.Transform Avatar;
        public float FadeSpread;
        public bool FormatText;
        public MessageBoxLanguageStyles LanguageStyles;
        private UnityEngine.GameObject m_avatar;
        private UnityEngine.GameObject[] m_avatarPrefabs;
        private MessageDescriptor m_currentMessage;
        private bool m_forceLanguage;
        private Language m_language;
        private MessageDescriptor[] m_messageDescriptors;
        private string m_previousOverrideText;
        private float m_remainingWaitTime;
        public int MessageIndex;
        public MessageProvider MessageProvider;
        public BaseAnimator NextMessageAnimator;
        private System.Action OnMessageScreenHide;
        private System.Action OnNextMessage;
        public string OverrideText;
        public UnityEngine.AnimationCurve ScaleOverLetterCount;
        public CatlikeCoding.TextBox.TextBox TextBox;
        public MessageBoxVisibility Visibility;
        public const float WaitTimeBetweenMessages = 0.3f;
        public WriteOutTextBox WriteOutTextBox;
        public MessageBox() { }
        public EmotionType CurrentEmotion { get { return default(EmotionType); } }
        public SoundProvider CurrentMessageSound { get { return default(SoundProvider); } }
        public bool FinishedWriting { get { return default(bool); } }
        public bool IsLastMessage { get { return default(bool); } }
        public int MessageCount { get { return default(int); } }
        public event System.Action OnMessageScreenHide { add { } remove { } }
        public event System.Action OnNextMessage { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnMessageScreenHide>m__104() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnNextMessage>m__105() { }
        public void Awake() { }
        public void FinishWriting() { }
        public System.Collections.Generic.HashSet<ISuspendable> GetSuspendables() { return default(System.Collections.Generic.HashSet<ISuspendable>); }
        public void HideMessageScreen() { }
        public void NextMessage() { }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void OverrideLanuage(Language language) { }
        public void RefreshText() { }
        public void RemoveMessageFade() { }
        public void SetAvatar(UnityEngine.GameObject avatarPrefab) { }
        public void SetAvatarArray(UnityEngine.GameObject[] avatarPrefabs) { }
        public void SetMessage(MessageDescriptor messageDescriptor) { }
        public void SetMessageFade(float time) { }
        public void SetMessageProvider(MessageProvider messageProvider) { }
        public void SetWaitDuration(float duration) { }
        public void Start() { }
        public void Update() { }
    }
    public partial class MessageBoxLanguageStyles : UnityEngine.ScriptableObject
    {
        public CatlikeCoding.TextBox.TextStyleCollection Chinese;
        public CatlikeCoding.TextBox.TextStyleCollection English;
        public CatlikeCoding.TextBox.TextStyleCollection French;
        public CatlikeCoding.TextBox.TextStyleCollection German;
        public CatlikeCoding.TextBox.TextStyleCollection Italian;
        public CatlikeCoding.TextBox.TextStyleCollection Japanese;
        public CatlikeCoding.TextBox.TextStyleCollection Portuguese;
        public CatlikeCoding.TextBox.TextStyleCollection Russian;
        public int Space;
        public CatlikeCoding.TextBox.TextStyleCollection Spanish;
        public MessageBoxLanguageStyles() { }
        public CatlikeCoding.TextBox.TextStyleCollection Current { get { return default(CatlikeCoding.TextBox.TextStyleCollection); } }
        public CatlikeCoding.TextBox.TextStyleCollection GetStyle(Language language) { return default(CatlikeCoding.TextBox.TextStyleCollection); }
    }
    public partial class MessageBoxMessageScreen : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private float m_delayTime;
        private bool m_fadingOut;
        private UnityEngine.GUITexture m_guiTexture;
        private UnityEngine.Vector3 m_originalScale;
        private UnityEngine.Renderer m_renderer;
        private float m_time;
        private float m_timeSpeed;
        public UnityEngine.AnimationCurve OpacityIn;
        public UnityEngine.AnimationCurve OpacityOut;
        public UnityEngine.AnimationCurve ScaleIn;
        public UnityEngine.AnimationCurve ScaleOut;
        public float TransitionInDuration;
        public float TransitionOutDuration;
        public float WaitDuration;
        public MessageBoxMessageScreen() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool Visible { get { return default(bool); } }
        private new void Awake() { }
        private void FixedUpdate() { }
        public void HideImmediately() { }
        public void HideMessageScreen() { }
        public void ResetWaitDuration() { }
        public void ResetWaitDuration(float waitDuration) { }
        private void SetOpacity(float opacity) { }
        public void SetTexture(UnityEngine.Texture2D texture) { }
        public void ShowMessageScreen() { }
        private void Start() { }
    }
    public partial class MessageBoxVisibility : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private float m_delayTime;
        private UnityEngine.Vector3 m_originalScale;
        private float[] m_rendererAlphas;
        private UnityEngine.Renderer[] m_renderers;
        private float m_time;
        private float m_timeSpeed;
        public UnityEngine.AnimationCurve OpacityIn;
        public UnityEngine.AnimationCurve OpacityOut;
        public UnityEngine.AnimationCurve ScaleIn;
        public UnityEngine.AnimationCurve ScaleOut;
        public float TransitionInDuration;
        public float TransitionOutDuration;
        public float WaitDuration;
        public MessageBoxVisibility() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool Visible { get { return default(bool); } }
        public void Advance() { }
        public void Awake() { }
        public void Cache() { }
        public void FixedUpdate() { }
        public UnityEngine.Vector3 Flatten(UnityEngine.Vector3 v) { return default(UnityEngine.Vector3); }
        public void HideImmediately() { }
        public void HideMessageScreen() { }
        public void HideMessageScreenImmediately() { }
        public void OnDestroy() { }
        public void Recache() { }
        public void ResetWaitDuration() { }
        public void ResetWaitDuration(float waitDuration) { }
        private void SetOpacity(float opacity) { }
        public void ShowMessageScreen() { }
        public void Start() { }
    }
    public partial class MessageControllerB : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject AbilityMessage;
        public UnityEngine.GameObject AreaMessage;
        public float DefaultDuration;
        public UnityEngine.GameObject HelpMessage;
        public UnityEngine.GameObject HintMessage;
        private MessageBox m_currentMessageBox;
        public UnityEngine.GameObject PickupMessage;
        public UnityEngine.GameObject SpiritTreeText;
        public UnityEngine.GameObject StoryMessage;
        public MessageControllerB() { }
        public bool AnyAbilityPickupStoryMessagesVisible { get { return default(bool); } }
        public MessageBox ShowAbilityMessage(MessageProvider messageProvider, UnityEngine.GameObject avatar) { return default(MessageBox); }
        public MessageBox ShowAreaMessage(MessageProvider messageProvider) { return default(MessageBox); }
        public MessageBox ShowHelpMessage(MessageProvider messageProvider, UnityEngine.GameObject avatar) { return default(MessageBox); }
        public MessageBox ShowHintMessage(MessageProvider messageProvider, UnityEngine.Vector3 position, float duration=3) { return default(MessageBox); }
        public UnityEngine.GameObject ShowMessageBox(UnityEngine.GameObject messageBoxPrefab, MessageProvider messageProvider, UnityEngine.Vector3 position, float duration=3) { return default(UnityEngine.GameObject); }
        public MessageBox ShowMessageBoxB(UnityEngine.GameObject messageBoxPrefab, MessageProvider messageProvider, UnityEngine.Vector3 position, float duration=3) { return default(MessageBox); }
        public MessageBox ShowPickupMessage(MessageProvider messageProvider, UnityEngine.GameObject avatar) { return default(MessageBox); }
        public UnityEngine.GameObject ShowSpiritTreeTextMessage(MessageProvider messageProvider, UnityEngine.Vector3 position) { return default(UnityEngine.GameObject); }
        public MessageBox ShowStoryMessage(MessageProvider messageProvider) { return default(MessageBox); }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct MessageDescriptor
    {
        public EmotionType Emotion;
        public string Message;
        public SoundProvider Sound;
        public MessageDescriptor(string message) { throw new System.NotImplementedException(); }
        public MessageDescriptor(string message, EmotionType emotion, SoundProvider sound) { throw new System.NotImplementedException(); }
    }
    public static partial class MessageParserUtility
    {
        private static System.Text.StringBuilder s_currentBuilder;
        private static string s_currentString;
        private static void ProcessColorsInString(System.Text.StringBuilder builder) { }
        public static string ProcessString(string s) { return default(string); }
        public static string[] ProcessStringArray(string s) { return default(string[]); }
        private static void Replace(string replace, string with) { }
    }
    public abstract partial class MessageProvider : UnityEngine.ScriptableObject
    {
        protected MessageProvider() { }
        public abstract System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages();
        public override string ToString() { return default(string); }
    }
    public partial class MessageZoneB : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public Condition Condition;
        public float Duration;
        [NotNull]
        public MessageProvider HintMessage;
        private MessageBox m_messageBox;
        private UnityEngine.Transform m_transform;
        public MessageZoneB() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
    }
    public partial class MistAction : ActionMethod
    {
        public MistAction.ActionType Action;
        public MistAction() { }
        public override void Perform(IContext context) { }
        public enum ActionType
        {
            HideMist = 1,
            ShowMist = 0,
        }
    }
    public partial class MistController : UnityEngine.MonoBehaviour
    {
        public LegacyTransparancyAnimator MistAnimator;
        public MistController() { }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    public partial class MistTorch : UnityEngine.MonoBehaviour
    {
        public MistTorch() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
    }
    public partial class MistTorchPlaceholder : UnityEngine.MonoBehaviour
    {
        private float m_remainingTime;
        public UnityEngine.GameObject MistTorchPrefab;
        public MistTorchPlaceholder() { }
        public void FixedUpdate() { }
        public void OnDisable() { }
        public void OnDrawGizmos() { }
        public void OnDrawGizmosSelected() { }
    }
    public partial class MistyWoodsAreaMapCanvas : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<MistyWoodsAreaMapCanvas.CanvasItem> Items;
        public MistyWoodsAreaMapCanvas() { }
        public void OnEnable() { }
        public partial class CanvasItem
        {
            public Condition Condition;
            public UnityEngine.Texture Texture;
            public CanvasItem() { }
        }
    }
    public partial class MistyWoodsKuroController : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public MistyWoodsKuroController.State CurrentState;
        public MistyWoodsKuroGameplayController GameplayController;
        public SoundSource IdleSound;
        public MistyWoodsKuroController.Animations KuroAnimations;
        public SpriteAnimatorWithTransitions KuroAnimator;
        public SoundSource ReturningSound;
        public MistyWoodsKuroController() { }
        public bool IsHunting { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public new void Awake() { }
        public void ChangeState(MistyWoodsKuroController.State state) { }
        private void DebugLog(string str) { }
        public void FixedUpdate() { }
        public void KillPlayer() { }
        public void OnAnimationEnded(TextureAnimation animation) { }
        public override void OnDestroy() { }
        public void OnHide() { }
        public void OnVisible() { }
        public void PlayIdleSound(TextureAnimation notUsed) { }
        public override void Serialize(Archive ar) { }
        public void UpdateState() { }
        public partial class Animations
        {
            public TextureAnimationWithTransitions FlyUp;
            public TextureAnimationWithTransitions Idle;
            public TextureAnimationWithTransitions Notice;
            public TextureAnimationWithTransitions Returning;
            public Animations() { }
        }
        public enum State
        {
            Hidden = 0,
            Hunting = 2,
            KillPlayer = 3,
            Returning = 4,
            SequenceFinished = 5,
            Visible = 1,
        }
    }
    public partial class MistyWoodsKuroGameplayController : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SoundProvider FlyKillSound;
        public float HiddenSoundFadeOutDuration;
        public SoundProvider HiddenSoundProvider;
        public UnityEngine.Transform[] InstaKillZones;
        public UnityEngine.GameObject KuroFlyAttack;
        public SoundProvider LandKillSound;
        private MistyWoodsKuroGameplayController.State m_currentState;
        private float m_currentTime;
        private SoundPlayer m_previousSound;
        private CatAndMouseKuroLandZone[] m_zones;
        public MistyWoodsKuroController MistyWoodsKuroController;
        public ActionMethod OnHideAction;
        public ActionMethod OnVisibleAction;
        public float TimeToHide;
        public BaseAnimator VisibilityAnimator;
        public float VisibleSoundFadeOutDuration;
        public SoundProvider VisibleSoundProvider;
        public MistyWoodsKuroGameplayController() { }
        public bool IsHidden { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnHide>m__176() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <OnVisible>m__177() { }
        public override void Awake() { }
        public void ChangeState(MistyWoodsKuroGameplayController.State state) { }
        public void FixedUpdate() { }
        public bool InstaKillZonesContain(UnityEngine.Vector2 position) { return default(bool); }
        public void KillPlayer() { }
        public override void OnDestroy() { }
        public void OnHide() { }
        public void OnVisible() { }
        public override void Serialize(Archive ar) { }
        public enum State
        {
            Hidden = 0,
            HiddenInDanger = 2,
            Killed = 3,
            Visible = 1,
        }
    }
    public partial class MistyWoodsKuroGameplayHideZone : SaveSerialize
    {
        public bool Active;
        public static System.Collections.Generic.List<MistyWoodsKuroGameplayHideZone> All;
        public UnityEngine.Bounds Bounds;
        public MistyWoodsKuroGameplayHideZone() { }
        private static void .cctor() { }
        public void FixedUpdate() { }
        public void OnDisable() { }
        public void OnDrawGizmos() { }
        public void OnEnable() { }
        public static bool PositionInside(UnityEngine.Vector3 position) { return default(bool); }
        public override void Serialize(Archive ar) { }
        private void Start() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <PositionInside>c__AnonStorey6F
        {
            internal UnityEngine.Vector3 position;
            public <PositionInside>c__AnonStorey6F() { }
            internal bool <>m__178(MistyWoodsKuroGameplayHideZone hideZone) { return default(bool); }
        }
    }
    public partial class MistyWoodsKuroHideZoneAction : ActionMethod
    {
        public bool Activate;
        [NotNull]
        public MistyWoodsKuroGameplayHideZone HideZone;
        public MistyWoodsKuroHideZoneAction() { }
        public override void Perform(IContext context) { }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct MixerGroupSettings
    {
        public float AmbiencePoint;
        public float AmbienceQuad;
        public float Attacks;
        public float Collectibles;
        public float Cutscenes;
        public float Destruction;
        public float Doors;
        public float EnemiesAttack;
        public float EnemiesFoley;
        public float Foley;
        public float Footsteps;
        public float Music;
        public float MusicLoops;
        public float MusicStingers;
        private static readonly float NEGATIVE_DECIBEL_RANGE_SIZE;
        public float Props;
        public float Reverb;
        public float Sein;
        public float SoundEffects;
        public float SpiritTree;
        public float UI;
        public float Underwater;
        private static void .cctor() { }
        public void ApplyGroupSettingsToMixer(UnityEngine.Audio.AudioMixer mixer) { }
        public void MultiplyBlendWith(MixerGroupSettings settings, float weight) { }
        public void Reset() { }
    }
    public enum MixerGroupType
    {
        AmbiencePoint = 110,
        AmbienceQuad = 100,
        Attacks = 220,
        Collectibles = 700,
        Cutscenes = 500,
        Destruction = 230,
        Doors = 400,
        EnemiesAttack = 210,
        EnemiesFoley = 211,
        Foley = 200,
        Footsteps = 201,
        MusicLoops = 820,
        MusicStingers = 810,
        Props = 600,
        Sein = 280,
        SpiritTree = 250,
        UI = 240,
        Unspecified = 0,
    }
    public partial class MixerManager : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<MixerSnapshot> <>f__am$cacheD;
        private static readonly System.Predicate<MixerSnapshot> CachedIsSnapshotInactivePredicate;
        public MixerSnapshot DefaultSceneSnapshot;
        private System.Collections.Generic.List<MixerSnapshot> m_currentlyActiveSnapshots;
        private MixerGroupSettings m_currentMixerGroupSettings;
        private MixerSnapshot m_currentSceneMixerSnapshot;
        private MixerGroupSettings m_settings;
        private System.Collections.Generic.List<MixerSnapshotZone> m_snapshotZones;
        private bool m_wasInUI;
        public MixerSnapshot ModulatingSnapshot;
        private static UnityEngine.Audio.AudioMixer s_cachedMasterMixer;
        private static MixerManager s_manager;
        private static System.Collections.Generic.Dictionary<MixerGroupType, UnityEngine.Audio.AudioMixerGroup> s_typeToGroup;
        public MixerSnapshot UISnapshot;
        public MixerManager() { }
        public static MixerManager Instance { get { return default(MixerManager); } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <CachedIsSnapshotInactivePredicate>m__11F(MixerSnapshot snapshot) { return default(bool); }
        public void Awake() { }
        public void DeregisterSnapshotZone(MixerSnapshotZone mixerSnapshotZone) { }
        public void FixedUpdate() { }
        public static UnityEngine.Audio.AudioMixer GetMasterMixer() { return default(UnityEngine.Audio.AudioMixer); }
        public static UnityEngine.Audio.AudioMixerGroup GetMixerGroup(MixerGroupType group) { return default(UnityEngine.Audio.AudioMixerGroup); }
        public void RegisterActiveSnapshot(MixerSnapshot snapshot) { }
        public void RegisterSnapshotZone(MixerSnapshotZone mixerSnapshotZone) { }
        private void UpdateMixerSettingsBasedOnActiveSnapshots() { }
        private void UpdateMixerSnapshotZones() { }
        public static void WarmUpResource() { }
    }
    public partial class MixerSnapshot : UnityEngine.ScriptableObject
    {
        public float FadeInTime;
        public float FadeOutTime;
        private float m_fadeTime;
        private MixerSnapshot.MixerSnapshotState m_state;
        public MixerGroupSettings SnapshotSettings;
        public MixerSnapshot() { }
        public MixerSnapshot.MixerSnapshotState State { get { return default(MixerSnapshot.MixerSnapshotState); } }
        public float Weight { get { return default(float); } }
        public void FadeIn() { }
        public void FadeOut() { }
        public void UpdateMixerSnapshotState(float timeDelta) { }
        public enum MixerSnapshotState
        {
            Active = 3,
            FadingIn = 0,
            FadingOut = 1,
            Inactive = 2,
        }
    }
    public partial class MixerSnapshotZone : UnityEngine.MonoBehaviour
    {
        private bool m_isCurrentlyActive;
        public MixerSnapshot Snapshot;
        public MixerSnapshotZone() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        private void OnDisable() { }
        private void OnEnable() { }
        public void UpdateSnapshotZoneState(bool isZoneActive) { }
    }
    public partial class MonoSingleInstance<T> : UnityEngine.MonoBehaviour where T : UnityEngine.MonoBehaviour, new()
    {
        private static bool m_initialize;
        private static T m_instance;
        public MonoSingleInstance() { }
        public static T Instance { get { return default(T); } set { } }
        private static void .cctor() { }
        public void Awake() { }
    }
    public partial class MonoSingleton<T> : UnityEngine.MonoBehaviour where T : UnityEngine.MonoBehaviour, new()
    {
        protected static T m_instance;
        public MonoSingleton() { }
        public static T Instance { get { return default(T); } }
        private static void .cctor() { }
        public void Awake() { }
    }
    [UnityEngine.RequireComponent(typeof(UnityEngine.Rigidbody))]
    public partial class MoonCharacterController : UnityEngine.MonoBehaviour
    {
        private PlatformMovementRigidbodyMoonCharacterControllerPenetrate m_controllerPenetrate;
        private UnityEngine.Rigidbody m_rigidbody;
        private int m_safeRecursion;
        public float MinPenetration;
        public MoonCharacterController() { }
        public void Awake() { }
        public void Move(UnityEngine.Vector3 delta) { }
        public void Move(UnityEngine.Vector3 delta, UnityEngine.Vector3 originalDelta) { }
        private void MovePrivate(UnityEngine.Vector3 delta, UnityEngine.Vector3 originalDelta) { }
        public bool SweepTestSafe(UnityEngine.Vector3 direction, out UnityEngine.RaycastHit hitInfo, float magnitude) { hitInfo = default(UnityEngine.RaycastHit); return default(bool); }
        public bool Test(UnityEngine.Vector3 delta) { return default(bool); }
        public bool Test(UnityEngine.Vector3 delta, ref MoonControllerColliderHit moonHitInfo) { return default(bool); }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct MoonControllerColliderHit
    {
        public UnityEngine.Collider Collider;
        public UnityEngine.Vector3 ContinueMoveDirection;
        public float ContinueMoveLength;
        public MoonCharacterController Controller;
        public float Distance;
        public UnityEngine.Vector3 MoveDirection;
        public float MoveLength;
        public UnityEngine.Vector3 Normal;
        public UnityEngine.Vector3 Point;
    }
    public partial class MoonDebug
    {
        public System.Collections.Generic.List<MoonDebugMessage> m_debugMessages;
        private int m_flushThreshhold;
        private static MoonDebug m_instance;
        private string m_outputFilePath;
        private System.IO.StreamWriter m_streamWriter;
        public MoonDebug() { }
        private static void .cctor() { }
        private static void AddMessage(MoonDebugMessageType typ, string text, UnityEngine.Object obj) { }
        public static void DrawCircle(UnityEngine.Vector3 position, float radius, UnityEngine.Color color) { }
        [System.Diagnostics.ConditionalAttribute("DEVELOPMENT_BUILD")]
        [System.Diagnostics.ConditionalAttribute("UNITY_EDITOR")]
        public static void DrawLine(UnityEngine.Vector3 origin, UnityEngine.Vector3 target, UnityEngine.Color color) { }
        private static void Flush() { }
        public static string GetCurrentSceneName() { return default(string); }
        [System.Diagnostics.ConditionalAttribute("DEVELOPMENT_BUILD")]
        [System.Diagnostics.ConditionalAttribute("UNITY_EDITOR")]
        public static void Log(object message, UnityEngine.Object obj=null) { }
        [System.Diagnostics.ConditionalAttribute("DEVELOPMENT_BUILD")]
        [System.Diagnostics.ConditionalAttribute("UNITY_EDITOR")]
        public static void LogError(string text, UnityEngine.Object obj=null) { }
        [System.Diagnostics.ConditionalAttribute("DEVELOPMENT_BUILD")]
        [System.Diagnostics.ConditionalAttribute("UNITY_EDITOR")]
        public static void LogException(System.Exception exception, UnityEngine.Object obj=null) { }
        [System.Diagnostics.ConditionalAttribute("DEVELOPMENT_BUILD")]
        [System.Diagnostics.ConditionalAttribute("UNITY_EDITOR")]
        public static void LogWarning(string text, UnityEngine.Object obj=null) { }
        public static void OnApplicationQuit() { }
    }
    public partial class MoonDebugMessage
    {
        private UnityEngine.Object m_object;
        private string m_text;
        private MoonDebugMessageType m_type;
        public MoonDebugMessage(MoonDebugMessageType typ, string text, UnityEngine.Object obj) { }
        public override string ToString() { return default(string); }
    }
    public enum MoonDebugMessageType
    {
        Error = 2,
        Exception = 3,
        Log = 0,
        Warning = 1,
    }
    [PooledSafeAttribute]
    public partial class MoonGuid : ISerializable
    {
        public int A;
        public int B;
        public int C;
        public int D;
        public MoonGuid(MoonGuid moonGuid) { }
        public MoonGuid(byte[] guidByteArray) { }
        public MoonGuid(System.Guid guid) { }
        public MoonGuid(int a, int b, int c, int d) { }
        public MoonGuid(System.IO.BinaryReader reader) { }
        public MoonGuid(string guid) { }
        public static MoonGuid Empty { get { return default(MoonGuid); } }
        public bool Equals(MoonGuid moonGuid) { return default(bool); }
        public override bool Equals(object obj) { return default(bool); }
        public override int GetHashCode() { return default(int); }
        public static bool operator ==(MoonGuid a, MoonGuid b) { return default(bool); }
        public static bool operator !=(MoonGuid a, MoonGuid b) { return default(bool); }
        private void Parse(byte[] guidByteArray) { }
        private void Parse(System.Guid guid) { }
        private void Parse(string guid) { }
        public void Serialize(Archive ar) { }
        public byte[] ToByteArray() { return default(byte[]); }
        public override string ToString() { return default(string); }
    }
    public partial class MoonInput
    {
        public MoonInput() { }
        public static bool anyKey { get { return default(bool); } }
        public static bool anyKeyDown { get { return default(bool); } }
        public static UnityEngine.Vector3 mousePosition { get { return default(UnityEngine.Vector3); } }
        public static float GetAxis(string axisName) { return default(float); }
        public static bool GetButton(string buttonName) { return default(bool); }
        public static bool GetButtonDown(string buttonName) { return default(bool); }
        public static bool GetKey(UnityEngine.KeyCode keyCode) { return default(bool); }
        public static bool GetKeyDown(string name) { return default(bool); }
        public static bool GetKeyDown(UnityEngine.KeyCode keyCode) { return default(bool); }
        public static bool GetKeyUp(string name) { return default(bool); }
        public static bool GetKeyUp(UnityEngine.KeyCode keyCode) { return default(bool); }
        public static bool GetMouseButton(int button) { return default(bool); }
        public static bool GetMouseButtonDown(int button) { return default(bool); }
        public static bool GetMouseButtonUp(int button) { return default(bool); }
    }
    public static partial class MoonMath
    {
        public static partial class Angle
        {
            public static float AngleFromDirection(UnityEngine.Vector2 delta) { return default(float); }
            public static float AngleFromVector(UnityEngine.Vector2 delta) { return default(float); }
            public static float AngleSubtract(float start, float target) { return default(float); }
            public static float Difference(float value1, float value2) { return default(float); }
            public static UnityEngine.Vector2 Rotate(UnityEngine.Vector2 v, float angle) { return default(UnityEngine.Vector2); }
            public static float RotateTowards(float startDegrees, float targetDegrees, float degrees) { return default(float); }
            public static UnityEngine.Vector2 Unrotate(UnityEngine.Vector2 v, float angle) { return default(UnityEngine.Vector2); }
            public static UnityEngine.Vector2 VectorFromAngle(float angle) { return default(UnityEngine.Vector2); }
            public static float Wrap(float angle) { return default(float); }
            public static float Wrap180(float angle) { return default(float); }
        }
        public static partial class Float
        {
            public static float AbsoluteDifference(float a, float b) { return default(float); }
            public static float AbsoluteMax(float a, float b) { return default(float); }
            public static float AbsoluteMin(float a, float b) { return default(float); }
            public static float ClampedAdd(float start, float offset, float min, float max) { return default(float); }
            public static float ClampedDecrease(float start, float amount, float min, float max) { return default(float); }
            public static float ClampedSubtract(float start, float offset, float min, float max) { return default(float); }
            public static float MoveTowards(float start, float target, float distance) { return default(float); }
            public static float Normalize(float x) { return default(float); }
            public static float Wrap(float value, float min, float max) { return default(float); }
        }
        public static partial class Int
        {
            public static int GreatestCommonDenominator(int x, int y) { return default(int); }
        }
        public static partial class Line
        {
            public static UnityEngine.Vector3 ClosestPointOnLineSegmentToPoint(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p) { return default(UnityEngine.Vector3); }
            public static float DistancePointToLine(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p) { return default(float); }
        }
        public static partial class Movement
        {
            public static float AccelerateSpeed(float speed, float acceleration, float maxSpeed, bool left) { return default(float); }
            public static float ApplyGravity(float speed, float gravity, float maxSpeed) { return default(float); }
            public static float DecelerateSpeed(float speed, float deceleration) { return default(float); }
        }
        public static partial class Normal
        {
            public static bool WithinDegrees(UnityEngine.Vector2 normal1, UnityEngine.Vector2 normal2, float degrees) { return default(bool); }
        }
        public static partial class Physics
        {
            public static float SpeedFromHeightAndGravity(float gravity, float height) { return default(float); }
        }
        public static partial class Rectangle
        {
            public static UnityEngine.Rect Absolute(UnityEngine.Rect rect) { return default(UnityEngine.Rect); }
        }
        public static partial class Vector
        {
            public static UnityEngine.Vector3 Abs(UnityEngine.Vector3 v) { return default(UnityEngine.Vector3); }
            public static UnityEngine.Vector2 ApplyCircleDeadzone(UnityEngine.Vector2 axis, float deadzoneRadius) { return default(UnityEngine.Vector2); }
            public static UnityEngine.Vector2 ApplyRectangleDeadzone(UnityEngine.Vector2 axis, float deadzoneX, float deadzoneY) { return default(UnityEngine.Vector2); }
            public static float Distance(UnityEngine.Vector3 start, UnityEngine.Vector2 target) { return default(float); }
            public static float Distance(UnityEngine.Vector3 start, UnityEngine.Vector3 target) { return default(float); }
            public static UnityEngine.Vector3 Divide(UnityEngine.Vector3 a, UnityEngine.Vector3 b) { return default(UnityEngine.Vector3); }
            public static bool PointInTriangle(UnityEngine.Vector2 pt, UnityEngine.Vector2 v1, UnityEngine.Vector2 v2, UnityEngine.Vector2 v3) { return default(bool); }
            public static UnityEngine.Vector2 RotateTowards(UnityEngine.Vector2 angleVector, UnityEngine.Vector2 targetVector, float delta) { return default(UnityEngine.Vector2); }
            private static float sign(UnityEngine.Vector2 p1, UnityEngine.Vector2 p2, UnityEngine.Vector2 p3) { return default(float); }
        }
    }
    public static partial class MoonPhysics
    {
        public static bool FastSphereCast(UnityEngine.Ray ray, float radius, out UnityEngine.RaycastHit hitInfo, float distance, UnityEngine.LayerMask layerMask) { hitInfo = default(UnityEngine.RaycastHit); return default(bool); }
    }
    public partial class MoonWater : UnityEngine.MonoBehaviour
    {
        public MoonWater() { }
        public void Start() { }
    }
    public partial class MortarTrajectoryHelper
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <HitTarget>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <RemainingWaitTime>k__BackingField;
        private readonly MortarWormEnemy m_mortarWormEnemy;
        public MortarTrajectoryHelper(MortarWormEnemy mortarWormEnemy) { }
        public bool HitTarget { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public float RemainingWaitTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void UpdateMortarTrajectory() { }
        public void UpdateProjectileSpawner(bool cast) { }
    }
    public partial class MortarWormBlockedDetector : UnityEngine.MonoBehaviour
    {
        private bool m_isBlocked;
        public MortarWormEnemy Mortar;
        public MortarWormBlockedDetector() { }
        public void Awake() { }
        public void FixedUpdate() { }
        private void OnTrigger(UnityEngine.Collider collider) { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
        public void OnValidate() { }
    }
    public partial class MortarWormChargingState : WormChargingState
    {
        private readonly PrefabSpawner m_chargingEffect;
        private readonly SoundSource m_chargingSound;
        public MortarWormChargingState(MortarWormEnemy mortarWormEnemy, TextureAnimationWithTransitions charging, PrefabSpawner chargingEffect, SoundSource chargingSound) : base (default(WormEnemy), default(TextureAnimationWithTransitions), default(PrefabSpawner)) { }
        public override void OnEnter() { }
    }
    public partial class MortarWormDirectionalAnimations
    {
        public TextureAnimationWithTransitions Left;
        public TextureAnimationWithTransitions Right;
        public TextureAnimationWithTransitions Up;
        public TextureAnimationWithTransitions UpLeft;
        public TextureAnimationWithTransitions UpRight;
        public MortarWormDirectionalAnimations() { }
        public TextureAnimationWithTransitions PickWithDirection(UnityEngine.Vector3 direction) { return default(TextureAnimationWithTransitions); }
    }
    public partial class MortarWormEnemy : WormEnemy
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<MortarWormEnemy> <>f__am$cache15;
        public MortarWormEnemyAnimations Animations;
        public PrefabSpawner ChargingEffect;
        public SoundSource ChargingSound;
        public PrefabSpawner EmergingEffect;
        public SoundSource EmergingSound;
        public UnityEngine.GameObject HideGroup;
        public PrefabSpawner HidingEffect;
        public SoundSource HidingSound;
        public bool IsBlocked;
        public UnityEngine.Vector3 LocalShootDirection;
        private MortarTrajectoryHelper m_trajectoryHelper;
        public static System.Action<MortarWormEnemy> OnMortarHide;
        public ProjectileSpawner ProjectileSpawner;
        public UnityEngine.Transform ProjectileTrajectorySpawnPoint;
        public UnityEngine.LayerMask RayTestLayerMask;
        public MortarWormSettings Settings;
        public PrefabSpawner ShootingEffect;
        public SoundSource ShootingSound;
        public MortarWormEnemyProjectileSpawnerTransform Spawn;
        public MortarWormEnemy.States State;
        public WormHole WormHole;
        public MortarWormEnemy() { }
        public bool IsHidden { get { return default(bool); } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnMortarHide>m__FB(MortarWormEnemy ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Start>m__100() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__FC() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__FD() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__FE() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__FF() { return default(bool); }
        public new void Awake() { }
        public override bool CanBeOptimized() { return default(bool); }
        public new void FixedUpdate() { }
        public void ForceEmerge() { }
        public bool IgnoreDamage(Damage damage) { return default(bool); }
        public override void OnDestroy() { }
        public void PrintDebugText(string param) { }
        public bool ShouldCharge() { return default(bool); }
        public bool ShouldEmerge() { return default(bool); }
        public bool ShouldHide() { return default(bool); }
        public new void Start() { }
        public void UpdateMortarTrajectoryPeriodically() { }
        public partial class States
        {
            public fsm.IState Charging;
            public fsm.IState Emerging;
            public fsm.IState Frozen;
            public fsm.IState Hidden;
            public fsm.IState Hiding;
            public fsm.IState Idle;
            public fsm.IState Shooting;
            public States() { }
        }
    }
    public partial class MortarWormEnemyAnimations
    {
        public TextureAnimationWithTransitions Charging;
        public TextureAnimationWithTransitions Emerging;
        public TextureAnimationWithTransitions Hidden;
        public TextureAnimationWithTransitions Hiding;
        public TextureAnimationWithTransitions Idle;
        public MortarWormDirectionalAnimations Shooting;
        public MortarWormEnemyAnimations() { }
    }
    public partial class MortarWormEnemyDeath : UnityEngine.MonoBehaviour
    {
        public TextureAnimation Diagonal;
        public TextureAnimation Upright;
        public TextureAnimation UpsideDown;
        public TextureAnimation Wall;
        public MortarWormEnemyDeath() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator Start() { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Start>c__Iterator18 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal MortarWormEnemyDeath <>f__this;
            internal SpriteAnimator <animator>__3;
            internal UnityEngine.Vector3 <right>__0;
            internal UnityEngine.Vector3 <scale>__2;
            internal UnityEngine.Vector3 <up>__1;
            internal float <x>__4;
            public <Start>c__Iterator18() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class MortarWormEnemyPlaceholder : RespawningPlaceholder
    {
        [AssetReferenceChoiceAttribute("Mortar Type", new string[]{ "Assets\\frameworks\\enemies\\worm\\prefabs\\mortarWorm\\mortarWormEnemy.prefab", "Assets\\frameworks\\enemies\\worm\\textures\\mortarWormEnemyPlaceholder.png", "Regular Mortar", "Assets\\frameworks\\enemies\\worm\\prefabs\\mortarWorm\\mortarWormFireEnemy.prefab", "Assets\\frameworks\\enemies\\worm\\textures\\mortarWormEnemyFirePlaceholder.png", "Fire Mortar"})]
        public UnityEngine.GameObject MortarWormEnemy;
        public MortarWormEnemyPlaceholder.MortarWormEnemyPlaceholderSettings Settings;
        public MortarWormEnemyPlaceholder() { }
        public override bool CheckForOverlap { get { return default(bool); } }
        public override Entity Instantiate() { return default(Entity); }
        public partial class MortarWormEnemyPlaceholderSettings
        {
            public bool CanTurnAround;
            public float DamageOnTouch;
            public float Health;
            public float HideDistance;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public float ProjectileDamage;
            public float ProjectileGravity;
            public float ProjectileSpeed;
            public float Range;
            public float WaitBetweenShots;
            public MortarWormEnemyPlaceholderSettings() { }
        }
    }
    public partial class MortarWormEnemyProjectileSpawnerTransform
    {
        public UnityEngine.Transform Left;
        public UnityEngine.Transform Right;
        public UnityEngine.Transform Up;
        public UnityEngine.Transform UpLeft;
        public UnityEngine.Transform UpRight;
        public MortarWormEnemyProjectileSpawnerTransform() { }
        public UnityEngine.Vector3 FindPosition(UnityEngine.Vector3 direction) { return default(UnityEngine.Vector3); }
    }
    public partial class MortarWormIdleState : WormIdleState
    {
        public MortarWormIdleState(MortarWormEnemy worm, TextureAnimationWithTransitions idle) : base (default(WormEnemy), default(TextureAnimationWithTransitions)) { }
    }
    public partial class MortarWormSettings
    {
        public bool CanTurnAround;
        public float ChargingDuration;
        public float HideDistance;
        public float MinHideTime;
        public float ProjectileDamage;
        public float ProjectileGravity;
        public float ProjectileSpeed;
        public float ShootDelay;
        public float ShootingDuration;
        public float WaitBetweenShots;
        public MortarWormSettings() { }
    }
    [CategoryAttribute("Camera")]
    public partial class MoveCameraAction : PerformingAction
    {
        public float MovementDuration;
        [NotNull]
        public UnityEngine.GameObject Target;
        public MoveCameraAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CategoryAttribute("Camera")]
    public partial class MoveCameraHereAction : ActionWithDuration
    {
        public bool Active;
        public bool AutoDetermineSkipMiddle;
        public float AutoDistance;
        public float DurationOfMovement;
        public bool IgnoreScrollLock;
        public bool MoveCamera;
        public bool SkipMiddle;
        [NotNull]
        public UnityEngine.GameObject Target;
        [UnityEngine.RangeAttribute(-1f, 1f)]
        public float WideScreenAdjustment;
        public float ZoomOffset;
        public MoveCameraHereAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CategoryAttribute("Camera")]
    public partial class MoveCameraToPlayerAction : ActionWithDuration
    {
        public float DurationOfMovement;
        public MoveCameraToPlayerAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class MoveHorizontallyZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<MoveHorizontallyZone> All;
        public MoveHorizontallyZone.MoveDirection Direction;
        private UnityEngine.Rect m_bounds;
        public MoveHorizontallyZone() { }
        private static void .cctor() { }
        public void Awake() { }
        public bool Contains(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
        public enum MoveDirection
        {
            Left = 0,
            Right = 1,
        }
    }
    public partial class MovePivotAlert : UnityEngine.MonoBehaviour
    {
        public MovePivotAlert() { }
        private void OnDrawGizmos() { }
    }
    public partial class MoveRandomly : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float Delta;
        private UnityEngine.Vector3 m_startPosition;
        public MoveRandomly() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    [CategoryAttribute("Sein")]
    public partial class MoveSeinViaCurveAction : ActionWithDuration
    {
        public bool Active;
        public float DurationOfMovement;
        public UnityEngine.AnimationCurve PositionX;
        public UnityEngine.AnimationCurve PositionY;
        public MoveSeinViaCurveAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator PerformActionCoroutine() { return default(System.Collections.IEnumerator); }
        public override void Stop() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <PerformActionCoroutine>c__IteratorC : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal MoveSeinViaCurveAction <>f__this;
            internal UnityEngine.Vector3 <originalPosition>__1;
            internal PlatformMovement <platformMovement>__0;
            internal UnityEngine.Vector3 <position>__3;
            internal float <t>__2;
            public <PerformActionCoroutine>c__IteratorC() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class MoveWorldObjectiveIcon
    {
        public MoveWorldObjectiveIcon() { }
    }
    public partial class MovieTextureController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject Fader;
        public string LevelToLoad;
        private Fader m_fader;
        private UnityEngine.MovieTexture m_movieTexture;
        public UnityEngine.Vector3 MovieCameraOffset;
        public UnityEngine.GameObject MovieTextureGameObject;
        public MovieTextureController() { }
        private void FixedUpdate() { }
        private void OnFadeInAfterMovieEvent() { }
        private void OnFadeInEvent() { }
        private void OnFadeOutAfterMovieEvent() { }
        private void OnFadeOutEvent() { }
        public void StartMovieSequence() { }
    }
    public partial class MovieTextureControllerB : UnityEngine.MonoBehaviour
    {
        public bool CanBePaused;
        public bool CanBeSkipped;
        public bool DestroyOnFinish;
        public bool Loop;
        private LegacyAnimator[] m_dimmerAnimators;
        private bool m_finished;
        private MessageBox m_messageScreen;
        private float m_movieTexturePlayingDuration;
        private bool m_pausedByPlayer;
        private float m_prevTimeScale;
        private bool m_started;
        public UnityEngine.AudioSource MovieAudioSource;
        public UnityEngine.Renderer MovieTextureRenderer;
        public ActionMethod OnFinishedAction;
        public UnityEngine.GameObject PauseDimmer;
        public bool PlayAtStart;
        public MessageProvider PressToSkipVideoMessage;
        public UnityEngine.GUISkin Skin;
        public bool SkippedWithButtonPress;
        [UnityEngine.HideInInspector]
        public static UnityEngine.GUIStyle style;
        public bool UseAudio;
        public VideoDescriptor VideoDescriptor;
        public MovieTextureControllerB() { }
        private static void .cctor() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator DestroyRoutine() { return default(System.Collections.IEnumerator); }
        public void FixedUpdate() { }
        private void HideDimmer() { }
        public bool IsFinished() { return default(bool); }
        public bool IsPlaying() { return default(bool); }
        public void OnDestroy() { }
        public void Pause() { }
        public void Play() { }
        public void Resume() { }
        private void ShowDimmer() { }
        public void Start() { }
        public void Stop() { }
        public void Update() { }
        public void UpdateMainTexture() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <DestroyRoutine>c__Iterator33 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal MovieTextureControllerB <>f__this;
            public <DestroyRoutine>c__Iterator33() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class MovingCutsceneState : CutsceneState
    {
        public UnityEngine.GameObject[] BlockingMovingLeftZones;
        public float ForceMoveLeftTime;
        public TextureAnimationWithTransitions Idle;
        private bool m_enteringTransitionFinished;
        public TextureAnimationWithTransitions Moving;
        public MovingCutsceneState() { }
        public SeinCharacter Sein { get { return default(SeinCharacter); } }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void OnUpdate() { }
    }
    public partial class MovingGroundHelper
    {
        public UnityEngine.Transform Ground;
        public UnityEngine.Matrix4x4 GroundMatrix;
        public MovingGroundHelper() { }
        public UnityEngine.Vector2 CalculateDelta(UnityEngine.Transform target) { return default(UnityEngine.Vector2); }
        public void SetGround(UnityEngine.Transform ground) { }
        public void Update() { }
        private void UpdateGroundMatrix() { }
    }
    public partial class MovingPlatformsController
    {
        private UnityEngine.Transform m_ceilingPlatform;
        private UnityEngine.Matrix4x4 m_ceilingPlatformMatrix;
        private UnityEngine.Transform m_groundPlatform;
        private UnityEngine.Matrix4x4 m_groundPlatformMatrix;
        private bool m_ignoreForAFrameBecauseOfUnitysDelayedCollisionCallbacks;
        private UnityEngine.Transform m_oldCeilingPlatform;
        private UnityEngine.Transform m_oldGroundPlatform;
        private UnityEngine.Transform m_oldWallLeftPlatform;
        private UnityEngine.Transform m_oldWallRightPlatform;
        private readonly PlatformMovement m_platformMovement;
        private UnityEngine.Transform m_wallLeftPlatform;
        private UnityEngine.Matrix4x4 m_wallLeftPlatformMatrix;
        private UnityEngine.Transform m_wallRightPlatform;
        private UnityEngine.Matrix4x4 m_wallRightPlatformMatrix;
        public MovingPlatformsController(PlatformMovement platformMovement) { }
        public void DetachFromAll() { }
        public void OnCeilingMovingPlatform(UnityEngine.Transform platform) { }
        public void OnGroundMovingPlatform(UnityEngine.Transform platform) { }
        public void OnWallLeftMovingPlatform(UnityEngine.Transform platform) { }
        public void OnWallRightMovingPlatform(UnityEngine.Transform platform) { }
        public void UpdateMovingPlatform() { }
    }
    public partial class MovingStaticCollidersChecker : UnityEngine.MonoBehaviour
    {
        private System.Collections.Generic.Dictionary<UnityEngine.Collider, UnityEngine.Vector3> m_collidersPreviousPosition;
        private System.Collections.Generic.Dictionary<UnityEngine.Collider, UnityEngine.Quaternion> m_collidersPreviousRotation;
        private System.Collections.Generic.Dictionary<UnityEngine.Collider, UnityEngine.Vector3> m_collidersPreviousScale;
        private System.Collections.Generic.HashSet<UnityEngine.Collider> m_reportedColliders;
        public MovingStaticCollidersChecker() { }
        public void FixedUpdate() { }
    }
    public partial class MultiplatformVideoPlayer : UnityEngine.MonoBehaviour
    {
        public UnityEngine.AudioClip AudioTrack;
        public string Filename;
        private bool returnPlaybackWhenFocused;
        private IVideoPlayer videoPlayer;
        public UnityEngine.GameObject windowsVideoPlayer;
        public UnityEngine.GameObject xboxOneVideoPlayer;
        public MultiplatformVideoPlayer() { }
        public bool IsPaused() { return default(bool); }
        public bool IsPlaying() { return default(bool); }
        private void OnApplicationFocus(bool focusStatus) { }
        private void OnPlaybackFinished() { }
        private void OnValidate() { }
        public void Pause() { }
        public void Perform() { }
        public void Stop() { }
        private void Update() { }
    }
    public partial class MultiplatformVideoPlayerAction : PerformingAction
    {
        public UnityEngine.AudioClip AudioTrack;
        public string Filename;
        private MultiplatformVideoPlayer m_multiplatformVideoPlayer;
        public UnityEngine.GameObject MultiplatformVideoPlayer;
        public MultiplatformVideoPlayerAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CustomShaderModifier("Multiply Layer Distort Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(41))]
    public partial class MultiplyLayerDistortedModifier : UberShaderModifier
    {
        [UberShaderVectorDisplay("Strength", "")]
        public UberShaderVector DistortStrength;
        public UberShaderTexture DistortTexture;
        public UberShaderMultiplyLayerColor MultiplyColor;
        public UberShaderTexture MultiplyLayerMaskTexture;
        public UberShaderTexture MultiplyLayerTexture;
        public MultiplyLayerDistortedModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Multiply Layer Extra Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(39))]
    public partial class MultiplyLayerExtraModifier : UberShaderModifier
    {
        public UberShaderMultiplyLayerColor MultiplyColor;
        public UberShaderTexture MultiplyLayerMaskTexture;
        public UberShaderTexture MultiplyLayerTexture;
        public MultiplyLayerExtraModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Multiply Layer Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(38))]
    public partial class MultiplyLayerModifier : UberShaderModifier
    {
        public UberShaderMultiplyLayerColor MultiplyColor;
        public UberShaderTexture MultiplyLayerMaskTexture;
        public UberShaderTexture MultiplyLayerTexture;
        public MultiplyLayerModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Multiply Layer Third Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(40))]
    public partial class MultiplyLayerThirdModifier : UberShaderModifier
    {
        public UberShaderMultiplyLayerColor MultiplyColor;
        public UberShaderTexture MultiplyLayerMaskTexture;
        public UberShaderTexture MultiplyLayerTexture;
        public MultiplyLayerThirdModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    [CategoryAttribute("Music")]
    public partial class MusicAction : ActionMethod
    {
        public MusicAction.MusicCommand Command;
        [NotNull]
        public MusicSource Music;
        public MusicAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public enum MusicCommand
        {
            Play = 0,
            Stop = 1,
        }
    }
    public partial class MusicListener : UnityEngine.MonoBehaviour
    {
        public static float FadeInDuration;
        public static float FadeOutDuration;
        private Core.Music.Layer m_lastMusicLayer;
        private SceneRoot m_lastSceneRoot;
        public MusicListener() { }
        private static void .cctor() { }
        public void FixedUpdate() { }
    }
    public partial class MusicSource : UnityEngine.MonoBehaviour
    {
        public float FadeInDuration;
        public float FadeOutDuration;
        private Core.Music.Layer m_musicLayer;
        public bool PlayAtStart;
        public SoundProvider SoundProvider;
        public MusicSource() { }
        public void OnDestroy() { }
        public void Play() { }
        public void Start() { }
        public void Stop() { }
    }
    public partial class MusicSourceTrigger : MusicSource
    {
        public MusicSourceTrigger() { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
    }
    public partial class MusicVolumeProvider : FloatValueProvider
    {
        public MusicVolumeProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class MusicVolumeSlider : CleverValueSlider
    {
        public MusicVolumeSlider() { }
        public override float Value { get { return default(float); } set { } }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class MusicZone : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Activated>k__BackingField;
        public static System.Collections.Generic.List<MusicZone> All;
        public UnityEngine.Rect Bounds;
        public float FadeInDuration;
        public float FadeOutDuration;
        private Core.Music.Layer m_musicLayer;
        public SoundProvider SoundProvider;
        public MusicZone() { }
        public bool Activated { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        public void ActivateMusicZone() { }
        public void Awake() { }
        public void DeactiveMusicZone() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void SetSoundProvider(SoundProvider soundProvider) { }
    }
    public partial class Naru : UnityEngine.MonoBehaviour, ICharacter
    {
        public CharacterAnimationSystem Animation;
        public NaruController Controller;
        public PlatformBehaviour PlatformBehaviour;
        public bool SeinNaruComboEnabled;
        public NaruSounds Sounds;
        public Naru() { }
        public bool FaceLeft { get { return default(bool); } set { } }
        public UnityEngine.GameObject GameObject { get { return default(UnityEngine.GameObject); } }
        public bool IsOnGround { get { return default(bool); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector3 Speed { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Transform Transform { get { return default(UnityEngine.Transform); } }
        public void Activate(bool active) { }
        public void Awake() { }
        public void OnDestroy() { }
        public void PlaceOnGround() { }
    }
    public partial class NaruController : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public NaruController.AnimationSet Animations;
        public float JumpHeight;
        public fsm.StateMachine Logic;
        private float m_lockChangingDirectionDuration;
        private float m_lockHorizontalMovementDuration;
        public Naru Naru;
        public NaruController() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool LockedInput { get { return default(bool); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnNaruLand() { }
        public bool ShouldAgainstWallAnimationPlay() { return default(bool); }
        public bool ShouldFallAnimationPlay() { return default(bool); }
        public bool ShouldFallIdleAnimationPlay() { return default(bool); }
        public bool ShouldIdleAnimationPlay() { return default(bool); }
        public bool ShouldJumpAnimationPlay() { return default(bool); }
        public bool ShouldJumpIdleAnimationPlay() { return default(bool); }
        public bool ShouldLookUpAnimationPlay() { return default(bool); }
        public bool ShouldWalkAnimationPlay() { return default(bool); }
        public void Start() { }
        public void UpdateAnimations() { }
        public enum AnimationLayers
        {
            FallLayer = 0,
            JumpLayer = 2,
            PushLayer = 3,
            WalkLayer = 1,
        }
        public partial class AnimationSet
        {
            public TextureAnimationWithTransitions AgainstWall;
            public TextureAnimationWithTransitions Fall;
            public TextureAnimationWithTransitions FallIdle;
            public TextureAnimationWithTransitions Idle;
            public TextureAnimationWithTransitions Jump;
            public TextureAnimationWithTransitions JumpIdle;
            public TextureAnimationWithTransitions LookUp;
            public TextureAnimationWithTransitions Walk;
            public AnimationSet() { }
        }
    }
    public partial class NaruLookUpZone : UnityEngine.MonoBehaviour
    {
        public static AllContainer<NaruLookUpZone> All;
        private UnityEngine.Rect m_bounds;
        private bool m_inside;
        public NaruLookUpZone() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public static bool IsInside { get { return default(bool); } }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class NaruSounds : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject FootstepsEffectPrefab;
        public SurfaceToSoundProviderMap FootstepsSounds;
        public UnityEngine.GameObject JumpEffectPrefab;
        public SurfaceToSoundProviderMap JumpSound;
        public UnityEngine.GameObject LandEffectPrefab;
        private float m_nextStepTime;
        private UnityEngine.Transform m_transform;
        public Naru Naru;
        public UnityEngine.AnimationCurve SoundsPerSecondOverSpeed;
        public NaruSounds() { }
        private SurfaceMaterialType GroundSurfaceType { get { return default(SurfaceMaterialType); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void Awake() { }
        public void HandleFootstepEvents() { }
        public void OnJump() { }
        public void OnLand() { }
    }
    public partial class NaruSpriteRotationController : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float Angle;
        private UnityEngine.Transform m_transform;
        public Naru Naru;
        public NaruSpriteRotationController() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public new void Awake() { }
        public void FixedUpdate() { }
        public void Start() { }
    }
    public partial class NearSeinTrigger : UnityEngine.MonoBehaviour
    {
        public float DelayUntilNextTrigger;
        public float DistanceSmoothFactor;
        private bool m_eventTriggered;
        [UnityEngine.SerializeField]
        private UnityEngine.Component[] m_recievers;
        private float m_time;
        public float TriggerDistance;
        public bool TriggerOnEventEnd;
        public NearSeinTrigger() { }
        public void FixedUpdate() { }
        [UberBuildMethod]
        private void ProvideComponents() { }
        public void Start() { }
    }
    public partial class NewGameAction : ActionMethod
    {
        public NewGameAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class NewObjectiveMessageProvider : MessageProvider
    {
        private MessageProvider m_messageProvider;
        public MessageProvider NewObjective;
        public NewObjectiveMessageProvider() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages() { return default(System.Collections.Generic.IEnumerable<MessageDescriptor>); }
        public void SetMessage(MessageProvider message) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetMessages>c__Iterator36 : System.Collections.Generic.IEnumerable<MessageDescriptor>, System.Collections.Generic.IEnumerator<MessageDescriptor>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal MessageDescriptor $current;
            internal int $PC;
            internal NewObjectiveMessageProvider <>f__this;
            public <GetMessages>c__Iterator36() { }
            MessageDescriptor System.Collections.Generic.IEnumerator<MessageDescriptor>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(MessageDescriptor); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<MessageDescriptor> System.Collections.Generic.IEnumerable<MessageDescriptor>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<MessageDescriptor>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class NightBerry : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float ActivateChaseRange;
        public UnityEngine.AnimationCurve DragOverDistance;
        public UnityEngine.AnimationCurve ForceOverDistance;
        public SoundSource GrowSound;
        public float InnerRadius;
        private bool m_canChase;
        private CarryableRigidBody m_carryable;
        private UnityEngine.Collider m_collider;
        private bool m_isChasing;
        private UnityEngine.Rigidbody m_rigidbody;
        private float m_spiritRingRadiusMultiplier;
        private float m_spiritRingSpeed;
        private UnityEngine.Transform m_transform;
        public Varying2DSoundProvider OnChaseSound;
        public float OuterRadius;
        public UnityEngine.ParticleSystem[] Particles;
        public UnityEngine.Transform Ring;
        public SoundSource ShrinkSound;
        public float SpiritRingRadius;
        public float StartChaseRange;
        public float StopChaseRange;
        public float StopChaseVelocity;
        public NightBerry() { }
        public bool IsCarried { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public float SafeFromDamageRadius { get { return default(float); } }
        public new void Awake() { }
        public void FixedUpdate() { }
        public void GrowSpiritRing() { }
        public new void OnDestroy() { }
        public void OnGameReset() { }
        public void OnReleaseNightberry() { }
        public override void Serialize(Archive ar) { }
        public void SetRespawnPosition(UnityEngine.Vector3 position) { }
        public void SetToDropMode() { }
        public void ShrinkSpiritRing() { }
    }
    public partial class NightberryCutscene : CutsceneController
    {
        public NightberryCutscene() { }
        public new void Start() { }
    }
    [CustomShaderModifier("Night Berry")]
    [UberShaderCategoryAttribute((UberShaderCategory)(8))]
    [UberShaderOrderAttribute((UberShaderOrder)(51))]
    public partial class NightBerryModifier : UberShaderModifier
    {
        public UberShaderColor HurtColor;
        public NightBerryModifier() { }
        public override void SetProperties() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class NightberryPlaceholder : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject NightberryPrefab;
        public NightberryPlaceholder() { }
        public void FixedUpdate() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator HackForFixingNightberry() { return default(System.Collections.IEnumerator); }
        public void OnDrawGizmos() { }
        public void OnDrawGizmosSelected() { }
        public void Update() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <HackForFixingNightberry>c__Iterator3A : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal NightberryPlaceholder <>f__this;
            public <HackForFixingNightberry>c__Iterator3A() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class NightBerryResponder : UnityEngine.MonoBehaviour
    {
        private int m_frame;
        private bool m_isInRadius;
        public ActionMethod OnEnterNightBerryAura;
        public ActionMethod OnExitNightBerryAura;
        public NightBerryResponder() { }
        private void FixedUpdate() { }
    }
    public partial class NightBerrySpiritRing : UnityEngine.MonoBehaviour
    {
        public NightBerrySpiritRing() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerExit(UnityEngine.Collider collider) { }
    }
    public partial class NodeActionPair
    {
        public ActionMethod Action;
        public string NodeNade;
        public NodeActionPair() { }
    }
    public partial class NodeSoundPlayerPair
    {
        public string NodeName;
        public Varying2DSoundProvider SoundProvider;
        public NodeSoundPlayerPair() { }
    }
    public partial class NoiseSettings
    {
        public float GrainIntensityMax;
        public float GrainIntensityMin;
        public float GrainSize;
        public UnityEngine.Texture GrainTexture;
        public NoiseSettings() { }
        public NoiseSettings Clone() { return default(NoiseSettings); }
    }
    public partial class NonEdgeClamberble : UnityEngine.MonoBehaviour
    {
        public NonEdgeClamberble() { }
    }
    public partial class NormalBackwardsCutsceneState : CutsceneState
    {
        public ActionMethod ActionOnEnter;
        public ActionMethod ActionOnExit;
        public TextureAnimationWithTransitions Backwards;
        public CutsceneMusicPlayer CutsceneMusicPlayer;
        public CutsceneState Next;
        public TextureAnimationWithTransitions Normal;
        public NormalBackwardsCutsceneState() { }
        public override void OnEnter() { }
        public override void OnExit() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class NoSoulFlameZone : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Rect <BoundingRect>k__BackingField;
        public static System.Collections.Generic.List<NoSoulFlameZone> All;
        public NoSoulFlameZone() { }
        public UnityEngine.Rect BoundingRect { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Rect); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class NotCondition : Condition
    {
        public Condition Condition;
        public NotCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class NotMovingPlatform : UnityEngine.MonoBehaviour
    {
        public NotMovingPlatform() { }
    }
    public partial class NotNull : System.Attribute
    {
        public NotNull() { }
    }
    public partial class NumberCounter : SaveSerialize
    {
        public int Value;
        public NumberCounter() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class ObjectBasedMotionBlur : UnityEngine.MonoBehaviour
    {
        private System.Collections.Generic.List<UnityEngine.GameObject> m_generatedGameObjects;
        private UnityEngine.Vector3 m_oldPosition;
        public float MotionBlurAmount;
        public ObjectBasedMotionBlur() { }
        private void CleanupGeneratedObjects() { }
        private void FixedUpdate() { }
        private void GenerateBlurObjects() { }
        private void Start() { }
    }
    public static partial class ObjectExtender
    {
        public static T GetComponentInChildrenAndParents<T>(this UnityEngine.Component component) where T : UnityEngine.Component { return default(T); }
        public static T GetComponentInChildrenAndParents<T>(this UnityEngine.GameObject gameObject) where T : UnityEngine.Component { return default(T); }
        public static T GetComponentInChildrenAndParents<T>(UnityEngine.Transform transform) where T : UnityEngine.Component { return default(T); }
        public static T GetComponentInParents<T>(this UnityEngine.Component component) where T : class { return default(T); }
        public static T GetComponentInParents<T>(this UnityEngine.GameObject gameObject) where T : class { return default(T); }
        public static T GetComponentInParents<T>(UnityEngine.Transform transform) where T : class { return default(T); }
    }
    public partial class Objective : UnityEngine.ScriptableObject
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Transform <AreaMapTransform>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Transform <WorldMapTransform>k__BackingField;
        public UnityEngine.Texture2D Icon;
        private UnityEngine.GameObject m_appearEffect;
        public UnityEngine.Vector2 Position;
        public Objective() { }
        public RuntimeGameWorldArea Area { get { return default(RuntimeGameWorldArea); } }
        public UnityEngine.Transform AreaMapTransform { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Transform); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public UnityEngine.Transform WorldMapTransform { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Transform); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        [UnityEngine.ContextMenu("Add objective")]
        public void AddObjective() { }
        public void Complete() { }
        [UnityEngine.ContextMenu("Complete objective")]
        public void CompleteObjective() { }
        public void Hide() { }
        public void Show() { }
        public void SpawnAppearEffect() { }
        public void Update() { }
    }
    public partial class ObjectTracker<T> where T : class
    {
        private System.Collections.Generic.Queue<int> m_freePositions;
        private T[] m_objects;
        public ObjectTracker() { }
        public int Add(T obj) { return default(int); }
        public void Remove(int id) { }
    }
    public partial class ObsoleteDoneUse : UnityEngine.MonoBehaviour
    {
        public string Message;
        public ObsoleteDoneUse() { }
        private void Awake() { }
    }
    public partial class OffsetSpriteWhenGrabbingBlock : UnityEngine.MonoBehaviour
    {
        public SeinGrabBlock CharacterGrabBlock;
        public float Distance;
        private bool m_isPushing;
        public OffsetSpriteWhenGrabbingBlock() { }
        private void FixedUpdate() { }
    }
    public partial class OnCollisionTrigger : UnityEngine.MonoBehaviour
    {
        public ActionMethod OnCollisionEnterAction;
        public ActionMethod OnCollisionExitAction;
        public ActionMethod OnTriggerEnterAction;
        public ActionMethod OnTriggerExitAction;
        public ActionMethod OnTriggerStayAction;
        public OnCollisionTrigger() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionExit(UnityEngine.Collision collision) { }
        public void OnTriggerEnter(UnityEngine.Collider other) { }
        public void OnTriggerExit(UnityEngine.Collider other) { }
        public void OnTriggerStay(UnityEngine.Collider other) { }
    }
    public delegate void OnDelegate();
    public partial class OneShotEmitter : Suspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private UnityEngine.ParticleEmitter m_emitter;
        private float m_timeRemaining;
        public OneShotEmitter() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private new void Awake() { }
        private void FixedUpdate() { }
        private void OnPoolSpawned() { }
    }
    [UnityEngine.AddComponentMenu("Event Framework/Trigger/On Object Start Run Action")]
    public partial class OnObjectStartRunAction : UnityEngine.MonoBehaviour
    {
        public ActionMethod ActionToRun;
        public Condition Condition;
        public OnObjectStartRunAction() { }
        public void Start() { }
    }
    public partial class OnProjectStartup : System.Attribute
    {
        public OnProjectStartup() { }
    }
    [UnityEngine.AddComponentMenu("Event Framework/Trigger/On Scene Start Run Action")]
    public partial class OnSceneStartRunAction : SaveSerialize
    {
        public ActionMethod ActionToRun;
        public Condition Condition;
        private bool m_isTriggered;
        public bool TriggerOnce;
        public OnSceneStartRunAction() { }
        public override void Awake() { }
        public override void OnDestroy() { }
        public void OnSceneStartLateAfterSerialize(SceneRoot root) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class OnScreenPositions : MonoSingleton<OnScreenPositions>
    {
        public UnityEngine.Transform BottomCenterTransform;
        public UnityEngine.Transform BottomLeftTransform;
        public UnityEngine.Transform BottomRightTransform;
        private UnityEngine.Vector3 m_bottomCenter;
        private UnityEngine.Vector3 m_bottomLeft;
        private UnityEngine.Vector3 m_bottomRight;
        private UnityEngine.Vector3 m_middleCenter;
        private UnityEngine.Vector3 m_middleLeft;
        private UnityEngine.Vector3 m_middleRight;
        private UnityEngine.Vector3 m_topCenter;
        private UnityEngine.Vector3 m_topLeft;
        private UnityEngine.Vector3 m_topRight;
        public UnityEngine.Transform MiddleCenterTransform;
        public UnityEngine.Transform MiddleLeftTransform;
        public UnityEngine.Transform MiddleRightTransform;
        public UnityEngine.Transform TopCenterTransform;
        public UnityEngine.Transform TopLeftTransform;
        public UnityEngine.Transform TopRightTransform;
        public OnScreenPositions() { }
        public static UnityEngine.Vector3 BottomCenter { get { return default(UnityEngine.Vector3); } }
        public static UnityEngine.Vector3 BottomLeft { get { return default(UnityEngine.Vector3); } }
        public static UnityEngine.Vector3 BottomRight { get { return default(UnityEngine.Vector3); } }
        public static UnityEngine.Vector3 MiddleCenter { get { return default(UnityEngine.Vector3); } }
        public static UnityEngine.Vector3 MiddleLeft { get { return default(UnityEngine.Vector3); } }
        public static UnityEngine.Vector3 MiddleRight { get { return default(UnityEngine.Vector3); } }
        public static UnityEngine.Vector3 TopCenter { get { return default(UnityEngine.Vector3); } }
        public static UnityEngine.Vector3 TopLeft { get { return default(UnityEngine.Vector3); } }
        public static UnityEngine.Vector3 TopRight { get { return default(UnityEngine.Vector3); } }
        private void Start() { }
    }
    public partial class OnTimerPerformAction : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public ActionMethod Action;
        public Condition Condition;
        public float Interval;
        private float m_time;
        public float Offset;
        public OnTimerPerformAction() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public new void Awake() { }
        private void FixedUpdate() { }
        public new void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class OptionsScreen : MenuScreen, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SoundProvider CloseSound;
        public static OptionsScreen Instance;
        public CleverMenuItemSelectionManager Navigation;
        public SoundProvider OpenSound;
        public OptionsScreen() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public override void Hide() { }
        public override void HideImmediate() { }
        public void OnBackPressed() { }
        public void OnDestroy() { }
        public override void Show() { }
        public override void ShowImmediate() { }
    }
    public partial class OptionsScreenLegendController : UnityEngine.MonoBehaviour
    {
        public TransparencyAnimator GeneralLegend;
        public OptionsScreenLegendController() { }
        private void Update() { }
    }
    public partial class OptionsScreenTextsManager : UnityEngine.MonoBehaviour
    {
        public TranslatedMessageProvider ChineseMessageProvider;
        public TranslatedMessageProvider ControlStyleControllerMessageProvider;
        public TranslatedMessageProvider ControlStyleKeyboardAndMouseMessageProvider;
        public TranslatedMessageProvider ControlStyleKeyboardMessageProvider;
        public MessageBox ControlStyleMessageBox;
        public MessageBox DamageTextsMessageBox;
        public TranslatedMessageProvider EnglishMessageProvider;
        public TranslatedMessageProvider FrenchMessageProvider;
        public MessageBox FullScreenMessageBox;
        public TranslatedMessageProvider GermanMessageProvider;
        public TranslatedMessageProvider ItalianMessageProvider;
        public TranslatedMessageProvider JapaneseMessageProvider;
        public TranslatedMessageProvider KeyboardLayoutAzertyMessageProvider;
        public MessageBox KeyboardLayoutMessageBox;
        public TranslatedMessageProvider KeyboardLayoutQwertyMessageProvider;
        public MessageBox LanguageMessageBox;
        public MessageBox MotionBlurMessageBox;
        public MessageBox MusicVolumeMessageBox;
        public TranslatedMessageProvider MusicVolumeMessageProvider;
        public TranslatedMessageProvider OffMessageProvider;
        public TranslatedMessageProvider OnMessageProvider;
        public TranslatedMessageProvider PortugueseMessageProvider;
        public MessageBox ResolutionMessageBox;
        public TranslatedMessageProvider RussianMessageProvider;
        public MessageBox SoundVolumeMessageBox;
        public TranslatedMessageProvider SoundVolumeMessageProvider;
        public TranslatedMessageProvider SpanishMessageProvider;
        public MessageBox VibrationMessageBox;
        public MessageBox VSyncMessageBox;
        public OptionsScreenTextsManager() { }
        public void FixedUpdate() { }
        public TranslatedMessageProvider GetLanguageMessageProvider(Language lang) { return default(TranslatedMessageProvider); }
        public void Start() { }
        public void UpdateItems() { }
    }
    public partial class OrbSpawner : UnityEngine.MonoBehaviour
    {
        public DropPickup.State DropPickupState;
        public UnityEngine.AnimationCurve HorizontalSpeed;
        public bool LootOnHard;
        public DropLootSettings LootSettings;
        private UnityEngine.Transform m_transform;
        public int NumberOfBlueOrbs;
        public int NumberOfExpOrbs;
        public int NumberOfGreenOrbs;
        public int NumberOfRedOrbs;
        public int NumberOfYellowOrbs;
        public UnityEngine.AnimationCurve VerticalSpeed;
        public OrbSpawner() { }
        private float DamageDirectionSpeed { get { return default(float); } }
        public void Awake() { }
        public void CopySettings(OrbSpawner other) { }
        public void LimitNumberOfOrbs(int i) { }
        public void SetNumberOfExpOrbs(int amount) { }
        private bool SpawnLoot() { return default(bool); }
        public void SpawnOrbs(IContext context) { }
        private void SpawnPickup(OrbSpawnerManager.ItemType item, UnityEngine.Vector2 force, int i) { }
    }
    public partial class OrbSpawnerManager : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject BlueExpOrb;
        public UnityEngine.GameObject EnergyPickup;
        public UnityEngine.GameObject GreenExpOrb;
        public UnityEngine.GameObject HealthPickup;
        public static OrbSpawnerManager Instance;
        public System.Collections.Generic.Queue<OrbSpawnerManager.ItemToSpawn> Items;
        public UnityEngine.GameObject RedExpOrb;
        public UnityEngine.GameObject YellowExpOrb;
        public OrbSpawnerManager() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void OnGameSerializeLoad() { }
        public void Spawn(OrbSpawnerManager.ItemType itemType, UnityEngine.Vector2 position, UnityEngine.Vector2 velocity, DropPickup.State initialState) { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct ItemToSpawn
        {
            public DropPickup.State InitialState;
            public OrbSpawnerManager.ItemType ItemType;
            public UnityEngine.Vector2 Position;
            public UnityEngine.Vector2 Velocity;
            public ItemToSpawn(OrbSpawnerManager.ItemType itemType, UnityEngine.Vector2 position, UnityEngine.Vector2 velocity, DropPickup.State initialState) { throw new System.NotImplementedException(); }
        }
        public enum ItemType
        {
            BlueExpOrb = 1,
            Energy = 4,
            GreenExpOrb = 0,
            Health = 5,
            RedExpOrb = 2,
            YellowExpOrb = 3,
        }
    }
    public partial class Ori : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public Ori.State CurrentState;
        public UnityEngine.AnimationCurve DistanceToSpeedCurve;
        public bool InsideDoor;
        public bool InsideMapstone;
        public UnityEngine.Vector2 ListenOffset;
        private UnityEngine.Collider m_collider;
        private bool m_enableHoverWobbling;
        private bool m_isListening;
        private bool m_isTwinkling;
        private float m_listenTime;
        private float m_moveToPositionDuration;
        private UnityEngine.Vector3 m_moveToPositionEndPosition;
        private UnityEngine.Vector3 m_moveToPositionStartPosition;
        private UnityEngine.Vector3 m_moveToPositionStartVelocity;
        private float m_moveToPositionTime;
        private UnityEngine.AnimationCurve m_positionXCurve;
        private UnityEngine.AnimationCurve m_positionYCurve;
        private UnityEngine.AnimationCurve m_positionZCurve;
        private UnityEngine.Transform m_spriteTransform;
        private float m_stateCurrentTime;
        private UnityEngine.Transform m_transform;
        private float m_twinkleTime;
        public UnityEngine.AnimationCurve MoveToPositionCurve;
        public SoundProvider MoveToPositionSound;
        public SoundProvider OnHighlightInterestZoneSound;
        public SoundProvider OnUnhighlightInterestZoneSound;
        public LegacyAnimator ShootAnimation;
        public UnityEngine.Renderer SpriteRenderer;
        public UnityEngine.Vector3 TargetOffset;
        public UnityEngine.Vector3 TargetOffsetAttack;
        public ScaleAnimator TwinkleAnimator;
        public bool UseZPosition;
        public Ori() { }
        public bool EnableHoverWobbling { get { return default(bool); } set { } }
        public UnityEngine.Vector3 HoverOffset { get { return default(UnityEngine.Vector3); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private UnityEngine.Transform m_target { get { return default(UnityEngine.Transform); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector3 TargetPosition { get { return default(UnityEngine.Vector3); } }
        public override void Awake() { }
        public void BackToPlayerController() { }
        public void ChangeState(Ori.State state) { }
        private void FixedUpdate() { }
        public void MoveOriAlongCurve(UnityEngine.AnimationCurve positionX, UnityEngine.AnimationCurve positionY, UnityEngine.AnimationCurve positionZ, UnityEngine.Vector3 position, float duration) { }
        public void MoveOriBackToPlayer() { }
        public void MoveOriToPlayer() { }
        public void MoveOriToPosition(UnityEngine.Vector3 position, float duration) { }
        public override void OnDestroy() { }
        public void OnEnable() { }
        private void OnRestoreCheckpoint() { }
        public override void Serialize(Archive ar) { }
        public UnityEngine.Color SetRGB(UnityEngine.Color old, UnityEngine.Color newColor) { return default(UnityEngine.Color); }
        public void StartListening() { }
        public void StartTwinkle() { }
        public void StopListening() { }
        public void StopTwinkle() { }
        private void UpdateHoveringState() { }
        private void UpdateMoveAlongCurveState() { }
        private void UpdateMoveToPositionState() { }
        public void UpdateState() { }
        public enum State
        {
            HoverForGrenade = 3,
            Hovering = 0,
            MoveAlongCurve = 2,
            MoveToPosition = 1,
        }
    }
    [CategoryAttribute("Ori")]
    public partial class OriFlyAlongCurveAction : ActionWithDuration
    {
        public float DurationOfMovement;
        private float m_remainingTime;
        public UnityEngine.AnimationCurve PositionX;
        public UnityEngine.AnimationCurve PositionY;
        public UnityEngine.AnimationCurve PositionZ;
        public UnityEngine.Transform Target;
        public OriFlyAlongCurveAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public void FixedUpdate() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CategoryAttribute("Ori")]
    public partial class OriFlyBackToPlayerAction : ActionWithDuration
    {
        public OriFlyBackToPlayerAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CategoryAttribute("Ori")]
    public partial class OriFlyToPositionAction : ActionWithDuration
    {
        public float DurationOfMovement;
        public bool LookAtIt;
        public SoundProvider MovingSoundProvider;
        [NotNull]
        public UnityEngine.Transform Target;
        public OriFlyToPositionAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class OriHintZone : OriInterestTriggerB
    {
        public OriHintZone() { }
    }
    public partial class OriInterestTriggerB : SaveSerialize
    {
        public ActionMethod ActivateAction;
        public ActionMethod AlreadyActivatedAction;
        public Condition Condition;
        public OriInterestTriggerB.State CurrentState;
        public ActionMethod HighlightAction;
        public MessageProvider HintMessage;
        public bool IsSlot;
        private bool m_activated;
        private MessageBox m_hint;
        private bool m_isHighlighted;
        private UnityEngine.Transform m_transform;
        public float OriDuration;
        public UnityEngine.Transform OriTarget;
        public bool RunOnce;
        public ActionMethod UnhighlightAction;
        public OriInterestTriggerB() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public bool OnButtonPressed { get { return default(bool); } }
        public bool OriHasTargets { get { return default(bool); } }
        public bool SeinInRange { get { return default(bool); } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void Highlight() { }
        public void OnDisable() { }
        public override void Serialize(Archive ar) { }
        public void Unhighlight() { }
        public enum State
        {
            Activated = 2,
            Highlighted = 1,
            Normal = 0,
        }
    }
    [CategoryAttribute("Ori")]
    public partial class OriReturnControlsToSeinAction : ActionMethod
    {
        public OriReturnControlsToSeinAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class OriSpeechSounds : UnityEngine.MonoBehaviour
    {
        public SoundSource ExtraSoundSource;
        public OriSpeechSounds.EmotionSounds HappySoundSet;
        private OriSpeechSounds.EmotionSounds m_emotionSounds;
        public int MaxTextLengthMedSpeech;
        public int MaxTextLengthShortSpeech;
        public MessageBox MessageBox;
        public OriSpeechSounds.EmotionSounds NeutralSoundSet;
        public OriSpeechSounds.EmotionSounds SadSoundSet;
        public OriSpeechSounds.EmotionSounds ScaredSoundSet;
        public OriSpeechSounds.EmotionSounds UrgentSoundSet;
        public OriSpeechSounds() { }
        public void Awake() { }
        private OriSpeechSounds.EmotionSounds GetSoundSetForEmotion(EmotionType emotion) { return default(OriSpeechSounds.EmotionSounds); }
        public void OnNextMessage() { }
        public void PlayOriSpeech() { }
        public void Start() { }
        private void StopOriSpeech() { }
        public partial class EmotionSounds
        {
            public SoundSource OriSpeechLongSound;
            public SoundSource OriSpeechMedSound;
            public SoundSource OriSpeechShortSound;
            public EmotionSounds() { }
        }
    }
    internal partial class OriUpgradeMenuItem : FloatDebugMenuItem
    {
        public OriUpgradeMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    [CustomShaderModifier("Outline")]
    [UberShaderCategoryAttribute((UberShaderCategory)(7))]
    [UberShaderOrderAttribute((UberShaderOrder)(47))]
    public partial class OutlineModifier : UberShaderModifier
    {
        public UberShaderColor OutlineColor;
        public UberShaderFloat Size;
        public OutlineModifier() { }
        public override float GetQuadExpandSize() { return default(float); }
        public override bool NeedsMipMap() { return default(bool); }
        public override void SetProperties() { }
    }
    public static partial class OutputFolder
    {
        public static string EditorOriFolderName;
        private static string m_appData;
        private static string m_path;
        private static string m_playerDataFolderPath;
        private static string m_playerTrialDataFolderPath;
        public static string OriFolderName;
        public static string OriTrialFolderName;
        public static string AppData { get { return default(string); } }
        public static string BuildOutputPath { get { return default(string); } }
        public static string PlayerDataFolderPath { get { return default(string); } }
        public static string PlayerTrialDataFolderPath { get { return default(string); } }
        private static void .cctor() { }
    }
    public partial class OverlapPlatform : SaveSerialize
    {
        public BaseAnimator[] BaseAnimators;
        private bool m_activated;
        private readonly AnimatingFloat m_animatingFloat;
        private UnityEngine.Collider m_collider;
        private FlipPlantLogic[] m_flipPlants;
        private bool m_overlap;
        public OverlapPlatform() { }
        public bool Activated { get { return default(bool); } set { } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class OverlapPlatformActivator : UnityEngine.MonoBehaviour
    {
        public OverlapPlatformActivator() { }
    }
    public partial class OverridableColorProperty
    {
        public UnityEngine.Color Color;
        public string Name;
        public bool Override;
        public OverridableColorProperty() { }
        public OverridableColorProperty(OverridableColorProperty colorProperty) { }
        public void Apply(OverridableColorProperty colorProperty) { }
    }
    public partial class OverridableFloatProperty
    {
        public string Name;
        public bool Override;
        public float Value;
        public OverridableFloatProperty() { }
        public OverridableFloatProperty(OverridableFloatProperty floatProperty) { }
        public void Apply(OverridableFloatProperty floatProperty) { }
    }
    public partial class OverridableShaderProperty
    {
        public bool Override;
        public UnityEngine.Shader Shader;
        public OverridableShaderProperty() { }
        public OverridableShaderProperty(OverridableShaderProperty shaderProperty) { }
        public void Apply(OverridableShaderProperty shaderProperty) { }
    }
    public partial class OverridableTextureProperty
    {
        public string Name;
        public UnityEngine.Vector2 Offset;
        public bool Override;
        public UnityEngine.Vector2 Scale;
        public UnityEngine.Texture Texture;
        public OverridableTextureProperty() { }
        public OverridableTextureProperty(OverridableTextureProperty textureProperty) { }
        public void Apply(OverridableTextureProperty textureProperty) { }
    }
    public partial class OverworldZone : UnityEngine.MonoBehaviour
    {
        public CageStructureTool Cage;
        public UnityEngine.Vector2 Position;
        public OverworldZone() { }
    }
    public partial class OwlEnemy : Enemy
    {
        public FlyMovement FlyMovement;
        public SpriteRotationController SpriteRotation;
        public OwlEnemy() { }
        public void StopSpeed() { }
    }
    public partial class Panel : UnityEngine.MonoBehaviour
    {
        public Panel() { }
        public void Hide() { }
        public void Show() { }
    }
    public partial class ParticleAutodestruct : UnityEngine.MonoBehaviour
    {
        private UnityEngine.ParticleEmitter m_particleSystem;
        private float m_startTime;
        public ParticleAutodestruct() { }
        private void Start() { }
        private void Update() { }
    }
    public partial class ParticlesSerialize : SaveSerialize
    {
        public ParticlesSerialize() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class ParticlesSuspendable : Suspendable
    {
        private bool m_isSuspended;
        private UnityEngine.ParticleSystem m_particleSystem;
        public ParticlesSuspendable() { }
        public override bool IsSuspended { get { return default(bool); } set { } }
        public new void Awake() { }
        public void Resume() { }
        public void Suspend() { }
    }
    public partial class ParticleSuspender : Suspendable, IPooled
    {
        private bool m_isSuspended;
        private UnityEngine.ParticleEmitter m_legacyParticleEmitter;
        private UnityEngine.ParticleSystem m_shurikenParticleSystem;
        private bool m_wereParticlesPlaying;
        public ParticleSuspender() { }
        public override bool IsSuspended { get { return default(bool); } set { } }
        public new void Awake() { }
        public void OnPoolSpawned() { }
        public void Resume() { }
        public void Suspend() { }
    }
    public partial class ParticleSystemEmissionRateOverDistance : UnityEngine.MonoBehaviour, IPooled
    {
        public UnityEngine.AnimationCurve EmissionMultiplierOverDistance;
        private float m_emissionRate;
        private UnityEngine.Vector3 m_lastPosition;
        private UnityEngine.ParticleSystem m_particleSystem;
        public ParticleSystemEmissionRateOverDistance() { }
        public void Awake() { }
        public void OnPoolSpawned() { }
        private void Start() { }
        private void Update() { }
    }
    public partial class Path2d : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<PathNode> Nodes;
        public Path2d() { }
    }
    internal partial class PathFollower
    {
        public float Distance;
        private float m_angle;
        private UnityEngine.Vector3 m_position;
        public int Node;
        public LinearPath Path;
        public float Speed;
        public PathFollower() { }
        public float WorldAngle { get { return default(float); } }
        public UnityEngine.Vector3 WorldPosition { get { return default(UnityEngine.Vector3); } }
        public void UpdateFollower(float dt) { }
    }
    public static partial class PathHelper
    {
        public static UnityEngine.Vector3 CalculateBeizer(UnityEngine.Vector3 a, UnityEngine.Vector3 b, UnityEngine.Vector3 c, UnityEngine.Vector3 d, float r) { return default(UnityEngine.Vector3); }
    }
    public partial class PathNode
    {
        public UnityEngine.Vector2 Position;
        public UnityEngine.Vector2 TangentIn;
        public UnityEngine.Vector2 TangentOut;
        public PathNode() { }
        public bool TangentsAreLinked { get { return default(bool); } }
    }
    internal partial class PathPositionFollower : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.Bounds ActiveBounds;
        public bool ChangeAngle;
        public LinearPath LinearPath;
        public PathFollower m_follower;
        private bool m_hasLoaded;
        private bool m_startCalled;
        public float Speed;
        public PathPositionFollower() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private void ApplySettings() { }
        private new void Awake() { }
        private void FixedUpdate() { }
        private new void OnDestroy() { }
        public void OnDrawGizmosSelected() { }
        private void OnValidate() { }
        public override void Serialize(Archive ar) { }
        private void Start() { }
    }
    [CategoryAttribute("System")]
    public partial class PauseGameAction : ActionWithDuration
    {
        public UnityEngine.GameObject[] Exclude;
        private System.Collections.Generic.HashSet<ISuspendable> m_exclude;
        private bool m_isPaused;
        private float m_pausedTime;
        public float PauseDuration;
        public bool ShowLetterbox;
        public bool SuspendCamera;
        public bool SuspendOri;
        public bool SuspendPlayer;
        public PauseGameAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public void FixedUpdate() { }
        public void OnDisable() { }
        public void PauseGame() { }
        public override void Perform(IContext context) { }
        public void ResumeGame() { }
        public override void Serialize(Archive ar) { }
        public override void Stop() { }
    }
    public partial class PauseScreen : MenuScreen
    {
        public UnityEngine.GameObject Fader;
        public static PauseScreen Instance;
        public CleverMenuItemSelectionManager NavigationManager;
        public MessageProvider SkipCutsceneMessage;
        public MessageProvider SkipPrologueMessage;
        public MessageBox SkipText;
        public PauseScreen() { }
        public void Awake() { }
        public override void Hide() { }
        public override void HideImmediate() { }
        public void OnBackPressed() { }
        public void OnDestroy() { }
        public void OnShow() { }
        public override void Show() { }
        public override void ShowImmediate() { }
    }
    [CategoryAttribute("Sequence")]
    public partial class PerformActionAction : ActionWithDuration
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Duration>k__BackingField;
        [NotNull]
        public ActionWithDuration SequenceToRun;
        public PerformActionAction() { }
        public override float Duration { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [UnityEngine.RequireComponent(typeof(FPSCounter))]
    public partial class PerformanceDataCollector : UnityEngine.MonoBehaviour
    {
        private FPSCounter m_fpsCounter;
        private string m_fpsLogPath;
        private string m_mainPath;
        private string m_serverName;
        public PerformanceDataCollector() { }
        private void OnApplicationQuit() { }
        private void Start() { }
        private void WriteData() { }
    }
    public partial class PerformanceMonitor : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheB;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheC;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<SceneManagerScene, bool> <>f__am$cacheD;
        public static bool DebugMode;
        public static bool Enabled;
        private FPSMonitor FPSMonitor;
        public static PerformanceMonitor Instance;
        private FPSSampleData m_fpsSampleData;
        private FPTTestResult m_fpsTestResult;
        private float m_performanceDipTimeout;
        private System.DateTime m_testTime;
        public static System.Action OnGoodPerformance;
        public static System.Action OnNotMonitoringPerformance;
        public System.Collections.Generic.List<FPTTestResult> TestResults;
        public PerformanceMonitor() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <GetFPSTestResult>m__126(SceneManagerScene sceneManagerScene) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnGoodPerformance>m__124() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnNotMonitoringPerformance>m__125() { }
        private void Awake() { }
        private void DebugLog(string message) { }
        private void FixedUpdate() { }
        private FPTTestResult GetFPSTestResult(SceneManagerScene scene=null) { return default(FPTTestResult); }
        private void OnSceneRootLoadEarlyStart(SceneRoot sceneRoot) { }
        private void SetSampleData(ref FPSSampleData fpsSampleData) { }
        private void Start() { }
        private void Update() { }
    }
    public partial class PerformanceTestManager : UnityEngine.MonoBehaviour
    {
        public PerformanceTestManager.State CurrentState;
        public static bool DebugMode;
        public static PerformanceTestManager Instance;
        private FPSTestOutput m_fpsTestOutput;
        private float m_stateCurrentTime;
        public PerformanceTestManager() { }
        private static void .cctor() { }
        private void Awake() { }
        public void ChangeState(PerformanceTestManager.State state) { }
        private void DebugLog(string message) { }
        private void FixedUpdate() { }
        private void FlushAllPerformanceResults() { }
        public void OnApplicationQuit() { }
        public void OnFinishedReplay() { }
        public void OnGoodPerformance() { }
        public void OnNotMonitoringPerformance() { }
        public bool ShouldRunReplayAgain() { return default(bool); }
        private void Start() { }
        private void Update() { }
        private void WriteSomePerformanceResults() { }
        public enum State
        {
            Done = 5,
            FinishedTest = 4,
            NoCamera = 3,
            QuadScale = 2,
            RegularTest = 1,
            Start = 0,
        }
    }
    public abstract partial class PerformingAction : ActionMethod
    {
        protected PerformingAction() { }
        public abstract bool IsPerforming { get; }
        public abstract void Stop();
    }
    public partial class PerformSkipAction : ActionMethod
    {
        public PerformSkipAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class PersistentEditorOnlySceneComponent : UnityEngine.MonoBehaviour
    {
        public int TypeChecksum;
        public PersistentEditorOnlySceneComponent() { }
    }
    public partial class PetrifiedPlant : Entity
    {
        public SoundProvider Deflected;
        public PetrifiedPlant() { }
        public override void Awake() { }
        public override void OnDestroy() { }
        public void OnPreProcessDamage(Damage damage) { }
    }
    public partial class PhotoshopWorldMapGenerator : UnityEngine.MonoBehaviour
    {
        public float PixelsPerUnit;
        public PhotoshopWorldMapGenerator() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        [UnityEngine.ContextMenu("Generate world map")]
        public void GenerateCode() { }
    }
    public partial class PhysicalSystemManager : SaveSerialize, IFrustumOptimizable, ISceneRootPreEnableObserver, ISuspendable
    {
        public UnityEngine.Rect LocalBoundingBox;
        [UnityEngine.SerializeField]
        private ApplyTurbulentForce[] m_applyTurbulentForces;
        private bool m_awakeCalled;
        private UnityEngine.Bounds m_cachedBoundingBox;
        [UnityEngine.SerializeField]
        private UnityEngine.ConfigurableJoint[] m_cachedJoints;
        [UnityEngine.SerializeField]
        private RigidbodyState[] m_cachedRigidbodyStates;
        private System.Collections.Generic.List<RigidbodyState> m_dynamicRigidBodyStates;
        private bool m_isInsideFrustum;
        private bool m_isSuspended;
        private bool m_loadedBeforeStart;
        private bool m_startCalled;
        public bool UseLocalCoordinates;
        public PhysicalSystemManager() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFrustum { get { return default(bool); } }
        public bool IsSuspended { get { return default(bool); } set { } }
        public UnityEngine.Bounds WorldSpaceBoundingBox { get { return default(UnityEngine.Bounds); } set { } }
        public new void Awake() { }
        private void ContinueSleeping() { }
        public new void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnFrustumEnter() { }
        public void OnFrustumExit() { }
        public void OnSceneRootPreEnable() { }
        private void PutRigidBodyToSleepNoCaching(RigidbodyState rigidbodyState) { }
        public void RegisterInstanciatedRigidbody(UnityEngine.Rigidbody dynamicRigidbody) { }
        private void ResetPhysicalSystemToTheLastState() { }
        public void ResetPhysicalSystemToTheOriginalState() { }
        private void ResetRigidbodyToInitialState(RigidbodyState state) { }
        private void ResetRigidbodyToLastState(RigidbodyState state) { }
        private void Resume() { }
        private void ResumeRigidbody(RigidbodyState rigidbodyState) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        private void Suspend() { }
        private void SuspendRigidbody(RigidbodyState rigidbodyState) { }
        private void UpdateCachedBoundingBox() { }
    }
    public static partial class PhysicsHelper
    {
        public static void AddForceSafe(this UnityEngine.Rigidbody rigidbody, UnityEngine.Vector2 force) { }
        public static void AddForceSafe(this UnityEngine.Rigidbody rigidbody, UnityEngine.Vector2 force, UnityEngine.ForceMode forceMode) { }
        public static bool ArcSphereCast(float gravity, float radius, UnityEngine.Vector3 origin, UnityEngine.Vector3 speed, float duration, UnityEngine.LayerMask layerMask, UnityEngine.GameObject target, out UnityEngine.RaycastHit finalHitInfo) { finalHitInfo = default(UnityEngine.RaycastHit); return default(bool); }
        public static void CalculateArcTrajectory(float gravity, UnityEngine.Vector3 delta, out float time, out UnityEngine.Vector2 speed, float height=2) { time = default(float); speed = default(UnityEngine.Vector2); }
        public static UnityEngine.Vector3 CalculateAverageGroundNormalFromContactPoints(UnityEngine.ContactPoint[] contacts) { return default(UnityEngine.Vector3); }
        public static UnityEngine.Vector3 CalculateAverageNormalFromContactPoints(UnityEngine.ContactPoint[] contacts) { return default(UnityEngine.Vector3); }
        public static float CalculateSpeedFromHeight(float height, float gravity) { return default(float); }
    }
    internal partial class PhysicsKeepAwake : UnityEngine.MonoBehaviour
    {
        public PhysicsKeepAwake() { }
        private void FixedUpdate() { }
        private void Start() { }
    }
    public partial class PhysicsLimitTest : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        public static PhysicsLimitTest Instance;
        private int m_currentOption;
        private int m_fixedUpdates;
        private int m_frames;
        private float m_lastRealTime;
        private bool m_synced;
        private float m_time;
        private int m_timeSampleIndex;
        private readonly float[] m_timeSamples;
        private int m_totalFrames;
        private const int TIME_SAMPLE_SIZE = 500;
        public PhysicsLimitTest() { }
        public bool Active { get { return default(bool); } set { } }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public static bool IsSynced { get { return default(bool); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
        private void AddTimeSample(float dt) { }
        public void Awake() { }
        public void FixedUpdate() { }
        private int GetFrameCount(float duration) { return default(int); }
        public void OnDestroy() { }
        public void OnEnable() { }
        public void ResetValues() { }
        public void Update() { }
        public void UpdateMethod(float timeSpan, int minFrames) { }
        public void UpdateMethodOld() { }
    }
    public partial class PhysicsMaterialManager : UnityEngine.MonoBehaviour
    {
        public UnityEngine.PhysicMaterial Grass;
        public UnityEngine.PhysicMaterial Ice;
        public static PhysicsMaterialManager Instance;
        public UnityEngine.PhysicMaterial LightDarkPlatform;
        private readonly System.Collections.Generic.Dictionary<UnityEngine.PhysicMaterial, SurfaceMaterialType> m_materials;
        public UnityEngine.PhysicMaterial MovingLightDarkPlatform;
        public UnityEngine.PhysicMaterial Mushroom;
        public UnityEngine.PhysicMaterial PushableBlockMoving;
        public UnityEngine.PhysicMaterial Rock;
        public UnityEngine.PhysicMaterial RollingRock;
        public UnityEngine.PhysicMaterial Sand;
        public UnityEngine.PhysicMaterial Water;
        public UnityEngine.PhysicMaterial Wood;
        public PhysicsMaterialManager() { }
        public void Awake() { }
        public SurfaceMaterialType ColliderMaterialToSurfaceMaterialType(UnityEngine.PhysicMaterial material) { return default(SurfaceMaterialType); }
    }
    public abstract partial class PickupBase : SaveSerialize, IDynamicGraphicHierarchy, IFrustumOptimizable, IPooled
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache10;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheF;
        public UnityEngine.GameObject CollectedEffect;
        public SoundProvider CollectedSoundProvider;
        public float DelayBeforeCollectable;
        public bool DestroyOnCollect;
        public UnityEngine.GameObject DestroyTarget;
        public bool FrustrumOptimized;
        public bool IsCollected;
        private UnityEngine.Bounds m_bounds;
        private float m_currentTime;
        private bool m_insideFrustum;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Component[] m_onKillRecievers;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Transform m_transform;
        public ActionMethod OnCollectedAction;
        public System.Action OnCollectedEvent;
        public float Radius;
        protected PickupBase() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFrustum { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollectedEvent>m__161() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnPoolSpawned>m__162() { }
        public override void Awake() { }
        public virtual void Collected() { }
        public void FixedUpdate() { }
        public abstract void OnCollectorCandidateTouch(UnityEngine.GameObject collector);
        public void OnFrustumEnter() { }
        public void OnFrustumExit() { }
        public void OnPoolSpawned() { }
        public void OnValidate() { }
        public override void Serialize(Archive ar) { }
        public void SpawnCollectedEffect() { }
    }
    public partial class PickupCollectedCondition : Condition
    {
        public bool IsCollected;
        public PickupBase Pickup;
        public CollectablePlaceholder Placeholder;
        public PickupCollectedCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    [CategoryAttribute("General")]
    public partial class PlaceOnGroundAction : ActionMethod
    {
        public PlaceOnGroundAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class PlatformBehaviour : UnityEngine.MonoBehaviour
    {
        public CharacterAirNoDeceleration AirNoDeceleration;
        public CharacterApplyFrictionToSpeed ApplyFrictionToSpeed;
        public CharacterCapsuleController CapsuleController;
        public PlatformMovementForce Force;
        public CharacterGravity Gravity;
        public CharacterGravityToGround GravityToGround;
        public CharacterInstantStop InstantStop;
        public CharacterJumpSustain JumpSustain;
        public CharacterLeftRightMovement LeftRightMovement;
        private SurfaceMaterialType m_ceilingSurfaceMaterialType;
        private SurfaceMaterialType m_groundSurfaceMaterialType;
        private SurfaceMaterialType m_wallSurfaceMaterialType;
        public PlatformMovement PlatformMovement;
        public PlatformMovementListOfColliders PlatformMovementListOfColliders;
        public CharacterUpwardsDeceleration UpwardsDeceleration;
        public CharacterVisuals Visuals;
        public PlatformBehaviour() { }
        public SurfaceMaterialType CeilingSurfaceMaterialType { get { return default(SurfaceMaterialType); } }
        public SurfaceMaterialType GroundSurfaceMaterialType { get { return default(SurfaceMaterialType); } }
        public SurfaceMaterialType WallSurfaceMaterialType { get { return default(SurfaceMaterialType); } }
    }
    public partial class PlatformingMovement : PlatformMovement
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private UnityEngine.Vector2 m_groundContactNormal;
        private UnityEngine.Rigidbody m_rigidbody;
        public PlatformingMovement() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public new void Awake() { }
        public void FixedUpdate() { }
        public void OnCollision(UnityEngine.Collision collision) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public override void PlaceOnGround(float lift=0.5f, float distance=0) { }
    }
    public abstract partial class PlatformMovement : SaveSerialize, IGoThroughPlatformTester, IPlatformMovement, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, UnityEngine.Collider> <>f__am$cache21;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, UnityEngine.Collider> <>f__am$cache22;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, UnityEngine.Collider> <>f__am$cache23;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, UnityEngine.Collider> <>f__am$cache24;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, UnityEngine.Collider> <>f__am$cache25;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, UnityEngine.Collider> <>f__am$cache26;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, UnityEngine.Collider> <>f__am$cache27;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, UnityEngine.Collider> <>f__am$cache28;
        public float AdditionalXSpeed;
        public IsOnCollisionState Ceiling;
        public UnityEngine.Vector3 CeilingNormal;
        public bool CeilingRayHit;
        public bool FeetAgainstWall;
        public bool ForceKeepInAir;
        public IsOnCollisionState Ground;
        public UnityEngine.Vector3 GroundNormal;
        public bool GroundRayHit;
        public UnityEngine.Vector3 GroundRayNormal;
        public bool HeadAgainstWall;
        public UnityEngine.Vector3 KeepOnSurfaceDirection;
        public bool KinematicMode;
        private UnityEngine.CapsuleCollider m_capsuleCollider;
        private UnityEngine.Vector2 m_ceilingCenterRayNormal;
        private float m_gravityAngle;
        private UnityEngine.Vector3 m_localSpeed;
        protected MovingPlatformsController m_movingPlatform;
        private System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnCollisionCeilingEvent;
        private System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnCollisionGroundEvent;
        private System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnCollisionWallLeftEvent;
        private System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnCollisionWallRightEvent;
        private System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnLandOnCeilingEvent;
        private System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnLandOnGroundEvent;
        private System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnLandOnWallLeftEvent;
        private System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnLandOnWallRightEvent;
        public bool UseCenterRayForGroundAngle;
        public IsOnCollisionState WallLeft;
        public UnityEngine.Vector3 WallLeftNormal;
        public bool WallLeftRayHit;
        public IsOnCollisionState WallRight;
        public UnityEngine.Vector3 WallRightNormal;
        public bool WallRightRayHit;
        protected PlatformMovement() { }
        public float CapsuleAngle { get { return default(float); } set { } }
        public UnityEngine.CapsuleCollider CapsuleCollider { get { return default(UnityEngine.CapsuleCollider); } }
        public float CeilingAngle { get { return default(float); } }
        public UnityEngine.Vector3 CeilingBinormal { get { return default(UnityEngine.Vector3); } }
        public bool Falling { get { return default(bool); } }
        public UnityEngine.Vector3 FeetPosition { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Collider GoThroughPlatformTesterCollider { get { return default(UnityEngine.Collider); } }
        public UnityEngine.Ray GoThroughPlatformTestingRayLeft { get { return default(UnityEngine.Ray); } }
        public float GoThroughPlatformTestingRayRadius { get { return default(float); } }
        public UnityEngine.Ray GoThroughPlatformTestingRayRight { get { return default(UnityEngine.Ray); } }
        public float GravityAngle { get { return default(float); } set { } }
        public UnityEngine.Vector3 GravityBinormal { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector3 GravityDirection { get { return default(UnityEngine.Vector3); } }
        public float GroundAngle { get { return default(float); } }
        public UnityEngine.Vector3 GroundBinormal { get { return default(UnityEngine.Vector3); } }
        public bool HasWallLeft { get { return default(bool); } }
        public bool HasWallRight { get { return default(bool); } }
        public bool HeadAndFeetAgainstWall { get { return default(bool); } }
        public bool HeadOrFeetAgainstWall { get { return default(bool); } }
        public UnityEngine.Vector3 HeadPosition { get { return default(UnityEngine.Vector3); } set { } }
        public bool IsInAir { get { return default(bool); } }
        public bool IsOnCeiling { get { return default(bool); } }
        public bool IsOnGround { get { return default(bool); } }
        public bool IsOnGroundOrCeiling { get { return default(bool); } }
        public bool IsOnWall { get { return default(bool); } }
        public abstract bool IsSuspended { get; set; }
        public bool Jumping { get { return default(bool); } }
        public UnityEngine.Vector3 LocalOffsetToBottomSphereOfCapsuleCollider { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector3 LocalOffsetToTopSphereOfCapsuleCollider { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector2 LocalSpeed { get { return default(UnityEngine.Vector2); } set { } }
        public float LocalSpeedX { get { return default(float); } set { } }
        public float LocalSpeedY { get { return default(float); } set { } }
        public bool MovingHorizontally { get { return default(bool); } }
        public MovingPlatformsController MovingPlatforms { get { return default(MovingPlatformsController); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector2 Position2D { get { return default(UnityEngine.Vector2); } set { } }
        public float PositionX { get { return default(float); } set { } }
        public float PositionY { get { return default(float); } set { } }
        private UnityEngine.Vector3 RaySidewaysOffset { get { return default(UnityEngine.Vector3); } }
        public float WallLeftAngle { get { return default(float); } }
        public UnityEngine.Vector3 WallLeftBinormal { get { return default(UnityEngine.Vector3); } }
        public float WallRightAngle { get { return default(float); } }
        public UnityEngine.Vector3 WallRightBinormal { get { return default(UnityEngine.Vector3); } }
        public bool WasOnWall { get { return default(bool); } }
        public UnityEngine.Vector3 WorldOffsetToBottomSphereOfCapsuleCollider { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector3 WorldOffsetToTopSphereOfCapsuleCollider { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector2 WorldSpeed { get { return default(UnityEngine.Vector2); } set { } }
        public event System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnCollisionCeilingEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnCollisionGroundEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnCollisionWallLeftEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnCollisionWallRightEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnLandOnCeilingEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnLandOnGroundEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnLandOnWallLeftEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, UnityEngine.Collider> OnLandOnWallRightEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollisionCeilingEvent>m__AD(UnityEngine.Vector3 , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollisionGroundEvent>m__AC(UnityEngine.Vector3 , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollisionWallLeftEvent>m__AE(UnityEngine.Vector3 , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollisionWallRightEvent>m__AF(UnityEngine.Vector3 , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnLandOnCeilingEvent>m__B3(UnityEngine.Vector3 , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnLandOnGroundEvent>m__B0(UnityEngine.Vector3 , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnLandOnWallLeftEvent>m__B1(UnityEngine.Vector3 , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnLandOnWallRightEvent>m__B2(UnityEngine.Vector3 , UnityEngine.Collider ) { }
        public override void Awake() { }
        public static bool IsCeiling(UnityEngine.Vector3 normal, UnityEngine.Collider collidedWith, float maxCeilingAngle) { return default(bool); }
        public static bool IsGround(UnityEngine.Vector3 normal, UnityEngine.Collider collidedWith, float maxSlopeAngle) { return default(bool); }
        public static bool IsWallLeft(UnityEngine.Vector3 normal, UnityEngine.Collider collidedWith, float maxWallAngle) { return default(bool); }
        public static bool IsWallRight(UnityEngine.Vector3 normal, UnityEngine.Collider collidedWith, float maxWallAngle) { return default(bool); }
        public UnityEngine.Vector2 LocalToWorld(UnityEngine.Vector2 local) { return default(UnityEngine.Vector2); }
        public void OnCollisionCeiling(UnityEngine.Vector2 localNormal, UnityEngine.Collider collidedWith) { }
        public void OnCollisionGround(UnityEngine.Vector2 localNormal, UnityEngine.Collider collidedWith) { }
        public void OnCollisionWallLeft(UnityEngine.Vector2 localNormal, UnityEngine.Collider collidedWith) { }
        public void OnCollisionWallRight(UnityEngine.Vector2 localNormal, UnityEngine.Collider collidedWith) { }
        public override void OnDestroy() { }
        public virtual void PlaceOnGround(float lift=0.5f, float distance=0) { }
        public void PostFixedUpdate() { }
        public void PreFixedUpdate() { }
        public override void Serialize(Archive ar) { }
        public void UpdateRays() { }
        public UnityEngine.Vector2 WorldToLocal(UnityEngine.Vector2 world) { return default(UnityEngine.Vector2); }
    }
    public partial class PlatformMovementEnvironmentForceController : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public PlatformMovement PlatformMovement;
        public PlatformMovementListOfColliders PlatformMovementListOfColliders;
        public float WeightOfPlayerForce;
        public PlatformMovementEnvironmentForceController() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public bool ShouldApplyForces(UnityEngine.Rigidbody rigidbody) { return default(bool); }
    }
    public partial class PlatformMovementForce : UnityEngine.MonoBehaviour, ISeinReceiver
    {
        public SeinCharacter Sein;
        public PlatformMovementForce() { }
        public PlatformMovementListOfColliders ListOfColliders { get { return default(PlatformMovementListOfColliders); } }
        public PlatformBehaviour PlatformBehaviour { get { return default(PlatformBehaviour); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void ApplyCeilingForce(UnityEngine.Vector3 force, UnityEngine.ForceMode forceMode) { }
        public void ApplyGroundForce(UnityEngine.Vector3 force, UnityEngine.ForceMode forceMode) { }
        public void ApplyWallLeftForce(UnityEngine.Vector3 force, UnityEngine.ForceMode forceMode) { }
        public void ApplyWallRightForce(UnityEngine.Vector3 force) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldApplyForces(UnityEngine.Rigidbody rigidbody) { return default(bool); }
    }
    public partial class PlatformMovementListOfColliders : SaveSerialize
    {
        public System.Collections.Generic.List<UnityEngine.Collider> CeilingColliders;
        public System.Collections.Generic.List<UnityEngine.Collider> GroundColliders;
        public PlatformMovement PlatformMovement;
        public System.Collections.Generic.List<UnityEngine.Collider> WallLeftColliders;
        public System.Collections.Generic.List<UnityEngine.Collider> WallRightColliders;
        public PlatformMovementListOfColliders() { }
        public UnityEngine.Collider CeilingCollider { get { return default(UnityEngine.Collider); } }
        public UnityEngine.Collider GroundCollider { get { return default(UnityEngine.Collider); } }
        public UnityEngine.Collider WallLeftCollider { get { return default(UnityEngine.Collider); } }
        public UnityEngine.Collider WallRightCollider { get { return default(UnityEngine.Collider); } }
        public void FixedUpdate() { }
        private void OnCollisionCeilingEvent(UnityEngine.Vector3 normal, UnityEngine.Collider collider) { }
        private void OnCollisionGroundEvent(UnityEngine.Vector3 normal, UnityEngine.Collider collider) { }
        private void OnCollisionWallLeftEvent(UnityEngine.Vector3 normal, UnityEngine.Collider collider) { }
        private void OnCollisionWallRightEvent(UnityEngine.Vector3 normal, UnityEngine.Collider collider) { }
        public new void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class PlatformMovementPortalVisitor : UnityEngine.MonoBehaviour, IPortalVisitor
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache3;
        private PlatformMovement m_platformingMovement;
        public float MaxFallSpeed;
        public System.Action OnGoThroughPortalAction;
        public PlatformMovementPortalVisitor() { }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector3 Speed { get { return default(UnityEngine.Vector3); } set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnGoThroughPortalAction>m__10F() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnGoThroughPortal() { }
        public void OnPortalOverlapEnter() { }
        public void OnPortalOverlapExit() { }
    }
    public partial class PlatformMovementRigidbodyMoonCharacterControllerPenetrate : PlatformMovement
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <GroundNormalIsValid>k__BackingField;
        private UnityEngine.Vector2 m_ceilingContactNormal;
        private MoonCharacterController m_characterController;
        private UnityEngine.Vector2 m_groundContactNormal;
        private bool m_isSuspended;
        private UnityEngine.Rigidbody m_rigidbody;
        private UnityEngine.Vector2 m_wallLeftContactNormal;
        private UnityEngine.Vector2 m_wallRightContactNormal;
        public PlatformMovementRigidbodyMoonCharacterControllerPenetrate() { }
        public bool GroundNormalIsValid { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override bool IsSuspended { get { return default(bool); } set { } }
        private float MaxCeilingAngle { get { return default(float); } }
        private float MaxGroundAngle { get { return default(float); } }
        public new void Awake() { }
        public void ExpandCapsule() { }
        public void FixedUpdate() { }
        public void Move(UnityEngine.Vector3 move) { }
        public void OnCollision(UnityEngine.Collision collision) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public new void OnDestroy() { }
        public void OnMoonControllerColliderHit(ref MoonControllerColliderHit hitInfo) { }
        public override void PlaceOnGround(float lift=0.5f, float distance=0) { }
        public override void Serialize(Archive ar) { }
        public void ShrinkCapsule() { }
        public bool Test(UnityEngine.Vector3 move) { return default(bool); }
        public bool Test(UnityEngine.Vector3 move, ref MoonControllerColliderHit moonControllerColliderHit) { return default(bool); }
        public void TestAgainstWall() { }
        public void Unity5PhysicsBugWorkAround() { }
        public void UpdateHeadAndFeetAgainstTheWall() { }
        private void UpdateNormals() { }
    }
    [CategoryAttribute("Unity")]
    public partial class PlayAnimationAction : ActionMethod
    {
        [NotNull]
        public UnityEngine.GameObject Target;
        public PlayAnimationAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class PlayAnimationCutsceneState : CutsceneState
    {
        public TextureAnimationWithTransitions AnimationToPlay;
        public PlayAnimationCutsceneState.FacingMode Facing;
        public bool IgnoreCollisions;
        public bool Loop;
        public CutsceneState StateWhenAnimationFinished;
        public PlayAnimationCutsceneState() { }
        public SeinCharacter Sein { get { return default(SeinCharacter); } }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void OnUpdate() { }
        public enum FacingMode
        {
            DontChange = 0,
            FaceLeft = 2,
            FaceRight = 1,
        }
    }
    [CategoryAttribute("Deprecated")]
    public partial class PlayAnimatorAction : ActionWithDuration
    {
        public float AnimationDuration;
        public bool Continue;
        public bool ContinueBackward;
        public bool ContinueForward;
        private LegacyAnimator[] m_animators;
        private bool m_isPerformingAction;
        public bool PauseAnimatorsOnStart;
        public bool PlayReverse;
        public bool Reverse;
        public bool ReverseIfAnimating;
        public bool StopAtTimeout;
        [NotNull]
        public UnityEngine.GameObject Target;
        public bool UseAnimatorsDuration;
        public PlayAnimatorAction() { }
        private LegacyAnimator[] Animators { get { return default(LegacyAnimator[]); } }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator PerformActionCoroutine() { return default(System.Collections.IEnumerator); }
        public override void Stop() { }
        public void Update() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <PerformActionCoroutine>c__IteratorD : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal LegacyAnimator[] <$s_122>__1;
            internal int <$s_123>__2;
            internal PlayAnimatorAction <>f__this;
            internal LegacyAnimator <animator>__3;
            internal LegacyAnimator <animator>__6;
            internal int <i>__5;
            internal float <sample>__7;
            internal float <sample>__8;
            internal System.Collections.Generic.Dictionary<LegacyAnimator, float> <startTimeValues>__0;
            internal float <t>__4;
            public <PerformActionCoroutine>c__IteratorD() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class PlayAnimatorBasedOnNightberry : UnityEngine.MonoBehaviour
    {
        private LegacyAnimator[] m_animators;
        private bool m_wasActivated;
        public PlayAnimatorBasedOnNightberry() { }
        private void FixedUpdate() { }
        private void Start() { }
    }
    [CategoryAttribute("Sein")]
    internal partial class PlayCharacterAnimation : PerformingAction
    {
        [NotNull]
        public TextureAnimationWithTransitions Animation;
        public Condition Condition;
        public PlayCharacterAnimation() { }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class PlayerAbilities : SaveSerialize, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private CharacterAbility[] <Abilities>k__BackingField;
        public CharacterAbility AbilityMarkers;
        public CharacterAbility AirDash;
        public CharacterAbility Bash;
        public CharacterAbility BashBuff;
        public CharacterAbility ChargeDash;
        public CharacterAbility ChargeFlame;
        public CharacterAbility ChargeFlameBlast;
        public CharacterAbility ChargeFlameBurn;
        public CharacterAbility ChargeFlameEfficiency;
        public CharacterAbility ChargeJump;
        public CharacterAbility CinderFlame;
        public CharacterAbility Climb;
        public CharacterAbility Dash;
        public CharacterAbility DoubleJump;
        public CharacterAbility DoubleJumpUpgrade;
        public CharacterAbility EnergyEfficiency;
        public CharacterAbility EnergyMarkers;
        public ActionMethod GainAbilityAction;
        public CharacterAbility Glide;
        public CharacterAbility Grenade;
        public CharacterAbility GrenadeEfficiency;
        public CharacterAbility GrenadeUpgrade;
        public CharacterAbility HealthEfficiency;
        public CharacterAbility HealthMarkers;
        private SeinCharacter m_sein;
        public CharacterAbility Magnet;
        public CharacterAbility MapMarkers;
        public CharacterAbility QuickFlame;
        public CharacterAbility RapidFire;
        public CharacterAbility Regroup;
        public CharacterAbility Rekindle;
        public CharacterAbility Sense;
        public CharacterAbility SoulEfficiency;
        public CharacterAbility SoulFlameEfficiency;
        public CharacterAbility SparkFlame;
        public CharacterAbility SpiritFlame;
        public CharacterAbility SplitFlameUpgrade;
        public CharacterAbility Stomp;
        public CharacterAbility StompUpgrade;
        public CharacterAbility UltraDefense;
        public CharacterAbility UltraMagnet;
        public CharacterAbility UltraSoulFlame;
        public CharacterAbility UltraSplitFlame;
        public CharacterAbility WallJump;
        public CharacterAbility WaterBreath;
        public PlayerAbilities() { }
        public CharacterAbility[] Abilities { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(CharacterAbility[]); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public float AttractionDistance { get { return default(float); } }
        public int OriStrength { get { return default(int); } }
        public int SplitFlameTargets { get { return default(int); } }
        public new void Awake() { }
        public bool HasAbility(AbilityType ability) { return default(bool); }
        public override void Serialize(Archive ar) { }
        public void SetAbility(AbilityType ability, bool value) { }
        public void SetAllAbilitys(bool abilityEnabled) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
    }
    internal partial class PlayerCameraAnimationController : UnityEngine.MonoBehaviour
    {
        public PlayerCameraAnimationController() { }
        private void OnStompLand() { }
    }
    public partial class PlayerCollisionStayTrigger : Trigger
    {
        private UnityEngine.Rect m_bounds;
        public PlayerCollisionStayTrigger() { }
        public new void Awake() { }
        public void FixedUpdate() { }
    }
    public partial class PlayerCollisionTrigger : Trigger
    {
        private UnityEngine.Rect m_bounds;
        private bool m_hasCollided;
        private UnityEngine.Vector3 m_position;
        public bool UseTrigger;
        public PlayerCollisionTrigger() { }
        public new void Awake() { }
        public void FixedUpdate() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
    }
    public partial class PlayerDistanceCondition : Condition
    {
        public float Distance;
        public PlayerDistanceCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    [CategoryAttribute("Sein")]
    public partial class PlayerFaceDirectionAction : ActionMethod
    {
        public bool FaceLeft;
        public UnityEngine.Transform Target;
        public PlayerFaceDirectionAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class PlayerGrabPushPullHintSystem : UnityEngine.MonoBehaviour, ISeinReceiver
    {
        private MessageBox m_pressToGrab;
        private MessageBox m_pressToPushOrPull;
        private float m_timeOfLastPressToGrabMessage;
        private float m_timeOfLastPressToPushOrPullMessage;
        public MessageProvider PressToGrabMessage;
        public MessageProvider PressToGrabOrBashMessage;
        public MessageProvider PressToPushOrPullMessage;
        public SeinCharacter Sein;
        public const float TIME_BETWEEN_HINTS = 30f;
        public PlayerGrabPushPullHintSystem() { }
        public void FixedUpdate() { }
        public void HidePressToGrab() { }
        public void HidePressToPushOrPull() { }
        public void OnEnterRange(bool bash) { }
        public void OnGrabBlock() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
    }
    public partial class PlayerInput : UnityEngine.MonoBehaviour
    {
        public SmartInput.CompoundButtonInput ActionButtonA;
        public bool Active;
        public SmartInput.CompoundButtonInput Bash;
        public SmartInput.CompoundButtonInput Cancel;
        public SmartInput.CompoundButtonInput ChargeJump;
        public SmartInput.CompoundButtonInput Copy;
        public SmartInput.CompoundButtonInput Delete;
        public SmartInput.CompoundButtonInput Filter;
        public SmartInput.CompoundButtonInput Focus;
        public SmartInput.CompoundButtonInput Glide;
        public SmartInput.CompoundButtonInput Grab;
        public SmartInput.CompoundAxisInput HorizontalAnalogLeft;
        public SmartInput.CompoundAxisInput HorizontalAnalogRight;
        public SmartInput.CompoundAxisInput HorizontalDigiPad;
        public static PlayerInput Instance;
        public SmartInput.CompoundButtonInput Jump;
        public SmartInput.IButtonInput LeftClick;
        public SmartInput.CompoundButtonInput LeftShoulder;
        public SmartInput.CompoundButtonInput LeftStick;
        public SmartInput.CompoundButtonInput Legend;
        public System.Collections.Generic.List<SmartInput.IAxisInput> m_allAxisInput;
        public System.Collections.Generic.List<SmartInput.IButtonInput> m_allButtonInput;
        public System.Collections.Generic.List<Core.Input.InputButtonProcessor> m_allButtonProcessor;
        private int m_lastPressedAxisInput;
        private int m_lastPressedButtonInput;
        public SmartInput.CompoundButtonInput MenuDown;
        public SmartInput.CompoundButtonInput MenuLeft;
        public SmartInput.CompoundButtonInput MenuPageLeft;
        public SmartInput.CompoundButtonInput MenuPageRight;
        public SmartInput.CompoundButtonInput MenuRight;
        public SmartInput.CompoundButtonInput MenuUp;
        public SmartInput.IButtonInput RightClick;
        public SmartInput.CompoundButtonInput RightShoulder;
        public SmartInput.CompoundButtonInput RightStick;
        public SmartInput.CompoundButtonInput Select;
        public SmartInput.CompoundButtonInput SoulFlame;
        public SmartInput.CompoundButtonInput SpiritFlame;
        public SmartInput.CompoundButtonInput Start;
        public SmartInput.CompoundAxisInput VerticalAnalogLeft;
        public SmartInput.CompoundAxisInput VerticalAnalogRight;
        public SmartInput.CompoundAxisInput VerticalDigiPad;
        public SmartInput.CompoundButtonInput ZoomIn;
        public SmartInput.CompoundButtonInput ZoomOut;
        public PlayerInput() { }
        public bool WasKeyboardUsedLast { get { return default(bool); } }
        public void AddControllerControls() { }
        public void AddKeyboardControls() { }
        private void AddKeyCodesToButtonInput(UnityEngine.KeyCode[] keyCodes, SmartInput.CompoundButtonInput buttonInput) { }
        public void AddXboxOneControls() { }
        public void ApplyDeadzone(ref float x, ref float y) { }
        public void Awake() { }
        public void ClearControls() { }
        public void FixedUpdate() { }
        private bool IsAnyStartPressed() { return default(bool); }
        private bool KeyboardUsedLast(SmartInput.IAxisInput iAxisInput) { return default(bool); }
        private bool KeyboardUsedLast(SmartInput.IButtonInput iButtonInput) { return default(bool); }
        public void RefreshControls() { }
        public void RefreshControlScheme() { }
        private void RefreshLastPressedButton() { }
        public float SimplifyAxis(float x) { return default(float); }
    }
    public partial class PlayerInputRebinding
    {
        private static string controllerRebindingFileName;
        private static SmartInput.XboxControllerInput.Button[] intToButton;
        private static string keyRebindingFileName;
        private static int[] m_controllerButtonRemappings;
        private static bool m_controllerIsRemappingButtons;
        private static bool m_hasReadControllerRemappingsFile;
        private static PlayerInputRebinding.KeyBindingSettings m_keyRebindings;
        public PlayerInputRebinding() { }
        private static string ControllerRemappingFile { get { return default(string); } }
        private static string KeyRebindingFile { get { return default(string); } }
        public static PlayerInputRebinding.KeyBindingSettings KeyRebindings { get { return default(PlayerInputRebinding.KeyBindingSettings); } }
        private static void .cctor() { }
        private static int ButtonToInt(SmartInput.XboxControllerInput.Button button) { return default(int); }
        private static PlayerInputRebinding.KeyBindingSettings DefaultKeyBindingSettings() { return default(PlayerInputRebinding.KeyBindingSettings); }
        public static void GetControllerButtonRemappingsFromFile() { }
        public static void GetKeyRebindSettingsFromFile() { }
        public static SmartInput.XboxControllerInput.Button GetRemappedJoystickButton(SmartInput.XboxControllerInput.Button joystickButtonIndex) { return default(SmartInput.XboxControllerInput.Button); }
        private static string KeyBindingToString(UnityEngine.KeyCode[] codes) { return default(string); }
        public static void RefreshControllerButtonRemappings() { }
        public static void SetDefaultControllerButtonRemappings() { }
        public static void SetDefaultKeyBindingSettings() { }
        private static UnityEngine.KeyCode[] StringToKeyBinding(string s) { return default(UnityEngine.KeyCode[]); }
        public static void WriteControllerButtonRemappings() { }
        public static void WriteKeyRebindSettings() { }
        public partial class KeyBindingSettings
        {
            public UnityEngine.KeyCode[] ActionButtonA;
            public UnityEngine.KeyCode[] Bash;
            public UnityEngine.KeyCode[] Cancel;
            public UnityEngine.KeyCode[] ChargeJump;
            public UnityEngine.KeyCode[] Copy;
            public UnityEngine.KeyCode[] Delete;
            public UnityEngine.KeyCode[] Filter;
            public UnityEngine.KeyCode[] Focus;
            public UnityEngine.KeyCode[] Glide;
            public UnityEngine.KeyCode[] Grab;
            public UnityEngine.KeyCode[] HorizontalDigiPadLeft;
            public UnityEngine.KeyCode[] HorizontalDigiPadRight;
            public bool IsRebinding;
            public UnityEngine.KeyCode[] Jump;
            public UnityEngine.KeyCode[] LeftShoulder;
            public UnityEngine.KeyCode[] LeftStick;
            public UnityEngine.KeyCode[] Legend;
            public UnityEngine.KeyCode[] MenuDown;
            public UnityEngine.KeyCode[] MenuLeft;
            public UnityEngine.KeyCode[] MenuPageLeft;
            public UnityEngine.KeyCode[] MenuPageRight;
            public UnityEngine.KeyCode[] MenuRight;
            public UnityEngine.KeyCode[] MenuUp;
            public UnityEngine.KeyCode[] RightShoulder;
            public UnityEngine.KeyCode[] RightStick;
            public UnityEngine.KeyCode[] Select;
            public UnityEngine.KeyCode[] SoulFlame;
            public UnityEngine.KeyCode[] SpiritFlame;
            public UnityEngine.KeyCode[] Start;
            public UnityEngine.KeyCode[] VerticalDigiPadDown;
            public UnityEngine.KeyCode[] VerticalDigiPadUp;
            public UnityEngine.KeyCode[] ZoomIn;
            public UnityEngine.KeyCode[] ZoomOut;
            public KeyBindingSettings() { }
        }
    }
    public partial class PlayerParticlesController : UnityEngine.MonoBehaviour
    {
        public PlayerParticlesController() { }
        private void Update() { }
    }
    public partial class PlayerRespawnTrigger : Trigger
    {
        public PlayerRespawnTrigger() { }
        public new void Awake() { }
        public new void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
    }
    public partial class PlayerState
    {
        public bool IsUserSignedInLocal;
        public bool IsUserSignedInOnline;
        public string Name;
        public PlayerState(int userIndex) { }
        public bool IsSignedIn(bool onlineOnly) { return default(bool); }
    }
    public partial class PlayerStayInsideZoneTrigger : UnityEngine.MonoBehaviour
    {
        public ActionMethod Action;
        private UnityEngine.Rect m_bounds;
        private bool m_hasPlayed;
        private float m_time;
        private bool m_wasInside;
        public float TimeToTake;
        public PlayerStayInsideZoneTrigger() { }
        public bool IsInside { get { return default(bool); } }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    [CategoryAttribute("Sein")]
    internal partial class PlayFallAnimation : ActionMethod
    {
        [NotNull]
        public TextureAnimationWithTransitions Animation;
        public PlayFallAnimation() { }
        public override void Perform(IContext context) { }
        public bool ShouldFallAnimationKeepPlaying() { return default(bool); }
    }
    public partial class PlayMovieTextureActionC : PerformingAction
    {
        public bool CanBePaused;
        public bool CanBeSkipped;
        private MovieTextureControllerB m_movieTextureController;
        public UnityEngine.GameObject MovieTextureController;
        public ActionMethod OnFinishedAction;
        public bool SkippedWithButtonPress;
        public VideoDescriptor VideoDescriptor;
        public PlayMovieTextureActionC() { }
        public override bool IsPerforming { get { return default(bool); } }
        public override void OnDestroy() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class PlayRandomSound : UnityEngine.MonoBehaviour
    {
        public bool PlayOnlyIfVisibleToCamera;
        public float SoundObjectSize;
        public UnityEngine.AudioClip[] Sounds;
        public float VolumeScale;
        public PlayRandomSound() { }
        private void DoIt() { }
        private void Start() { }
    }
    [CategoryAttribute("Sound")]
    public partial class PlaySoundAction : ActionMethod
    {
        public AudioProperties Audio;
        private SoundPlayer m_soundPlayer;
        public bool PauseOnSuspend;
        public bool ShouldFadeIn;
        public bool ShouldPlayLooping;
        public SoundProvider SoundProvider;
        public UnityEngine.Transform Target;
        public PlaySoundAction() { }
        private string AudioClipName { get { return default(string); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Perform>m__25() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Perform>m__26() { }
        public override string GetNiceName() { return default(string); }
        public override void OnDestroy() { }
        public override void Perform(IContext context) { }
    }
    public partial class PlaySoundPhaseAction : PerformingAction
    {
        private SoundPlayer m_soundPlayer;
        public UnityEngine.AudioClip Sound;
        public SoundProvider SoundProvider;
        public SoundCompositionTransition Transition;
        public PlaySoundPhaseAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Perform>m__10A() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Perform>m__10B() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class PointlessListOfShaders : UnityEngine.MonoBehaviour
    {
        public int Count;
        public System.Collections.Generic.List<UnityEngine.Shader> Shaders;
        public PointlessListOfShaders() { }
        [UnityEngine.ContextMenu("Fill list")]
        public void FillList() { }
        public void Start() { }
    }
    [UnityEngine.AddComponentMenu("Mesh/Polygon")]
    [UnityEngine.ExecuteInEditMode]
    public partial class Polygon : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache12;
        public UnityEngine.Vector2 BackUVOffset;
        public UnityEngine.Vector2 BackUVScale;
        public bool ClosedShape;
        public UnityEngine.Vector2 FrontUVOffset;
        public UnityEngine.Vector2 FrontUVScale;
        public UnityEngine.Mesh GeneratedColliderMesh;
        public UnityEngine.Mesh GeneratedRendererMesh;
        public int InsertBefore;
        public bool Invert;
        public static bool ModifyMode;
        private System.Action OnPolygonUpdateComponents;
        public System.Collections.Generic.List<UnityEngine.Vector2> Points;
        public Polygon.ShapeData PolygonCollider;
        public Polygon.ShapeData PolygonMesh;
        public System.Collections.Generic.HashSet<int> Selected;
        public UnityEngine.Vector2 SideUVOffset;
        public UnityEngine.Vector2 SideUVScale;
        public float SmoothAngle;
        public Polygon() { }
        public event System.Action OnPolygonUpdateComponents { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnPolygonUpdateComponents>m__8F() { }
        public void Awake() { }
        private void GenerateMesh(bool front, bool back, bool sides, float extrude, float elevate, bool useNormals, bool useUVS, UnityEngine.Vector2 frontUVScale, UnityEngine.Vector2 backUVScale, UnityEngine.Vector2 sideUVScale, bool closed, UnityEngine.Mesh mesh) { }
        public void Start() { }
        public void UpdateComponents() { }
        public partial class ShapeData
        {
            public float Elevation;
            public bool Enabled;
            public float Extrude;
            public bool GenerateBack;
            public bool GenerateFront;
            public bool GenerateSides;
            public ShapeData(bool collider) { }
        }
        public enum State
        {
            Add = 1,
            Dragging = 3,
            Modify = 2,
            Normal = 0,
            SelectionBox = 4,
        }
    }
    public partial class PondController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject BabySein;
        public UnityEngine.GameObject BabySeinDeathEffect;
        public float DeathEffectDuration;
        public TextureAnimation EscapePondAnimation;
        public SpriteAnimator EscapePondSpriteAnimator;
        private UnityEngine.GameObject m_deathEffect;
        private float m_deathEffectTimer;
        private bool m_wasDeathEffect;
        public PondController() { }
        private void FixedUpdate() { }
        private void OnAnimationEnd() { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
    }
    public partial class PoolAnalyzeToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private bool m_doAnalyze;
        public PoolAnalyzeToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
    }
    public partial class PooledSafeAttribute : System.Attribute
    {
        public PooledSafeAttribute() { }
    }
    public partial class PoolToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private bool m_doPool;
        public PoolToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct PoolTransformPosition
    {
        public UnityEngine.Vector3 Position;
        public UnityEngine.Quaternion Rotation;
        public UnityEngine.Vector3 StartScale;
    }
    public partial class Portal : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject AnticipationEnterEffect;
        public UnityEngine.GameObject AnticipationExitEffect;
        public float AnticipationRadius;
        public SoundSource AnticipationSound;
        public bool CenterEffects;
        public Condition Condition;
        public float DelayToPortal;
        public SoundSource EnterAnticipationSound;
        public UnityEngine.GameObject EnterEffect;
        public SoundSource ExitAnticipationSound;
        public UnityEngine.GameObject ExitEffect;
        public bool HasAnticipationEffects;
        public bool IsLeftPortal;
        public SoundProvider LoopSoundProvider;
        private UnityEngine.GameObject m_anticipationEnterEffect;
        private BaseAnimator m_anticipationEnterEffectAnimator;
        private UnityEngine.GameObject m_anticipationExitEffect;
        private BaseAnimator m_anticipationExitEffectAnimator;
        private UnityEngine.Rect m_bounds;
        private SoundPlayer m_lastLoopSound;
        private readonly System.Collections.Generic.List<IPortalVisitor> m_portalVisitors;
        private bool m_wasOriInsideAnticipationZone;
        public Portal Other;
        public string OtherPortalName;
        public SoundProvider TeleportSound;
        public Portal() { }
        public UnityEngine.Vector3 CenterPosition { get { return default(UnityEngine.Vector3); } }
        public bool OriInsideAnticipationZone { get { return default(bool); } }
        public SceneRoot SceneRoot { get { return default(SceneRoot); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <FixedUpdate>m__152() { }
        public void Awake() { }
        public UnityEngine.Vector3 CalculateEndPosition(Portal other, UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public UnityEngine.Vector3 CalculateEndSpeed(Portal other, UnityEngine.Vector3 speed) { return default(UnityEngine.Vector3); }
        private UnityEngine.Vector3 ClampPosition(UnityEngine.Vector3 position, Portal portal) { return default(UnityEngine.Vector3); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator DisableOriForABit(Portal other) { return default(System.Collections.IEnumerator); }
        public void FixedUpdate() { }
        public bool IsInPortal(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDestroy() { }
        private void PerformPortalTeleportation(IPortalVisitor portalVisitor) { }
        public void UpdateAnticipationEffects() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <DisableOriForABit>c__Iterator38 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal Portal <$>other;
            internal Portal <>f__this;
            internal UnityEngine.Vector3 <position>__0;
            internal Portal other;
            public <DisableOriForABit>c__Iterator38() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class PortalB : Portal
    {
        public PortalB() { }
    }
    public static partial class PortalVistor
    {
        public static AllContainer<IPortalVisitor> All;
        private static void .cctor() { }
    }
    public partial class PositionAtEndOfTextBox : UnityEngine.MonoBehaviour
    {
        public CatlikeCoding.TextBox.TextBox TextBox;
        public PositionAtEndOfTextBox() { }
        public void FixedUpdate() { }
    }
    public partial class PositionCheckerPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        private const int AutoFixMaxTime = 900;
        private int m_autoFixFrameCount;
        public PositionCheckerPlugin() { }
        public void Awake() { }
        public void Exit() { }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
    }
    public partial class PositionCondition : Condition
    {
        public PositionCondition.AxisType Axis;
        public LogicUtility.ComparisonType Comparison;
        public UnityEngine.Transform Position;
        public UnityEngine.Transform Target;
        public PositionCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
        public enum AxisType
        {
            X = 0,
            Y = 1,
        }
    }
    public partial class PositionOnWorldMap : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Vector3 Position;
        public PositionOnWorldMap() { }
        private void FixedUpdate() { }
    }
    public partial class PrefabAreaData
    {
        public bool Orthographic;
        public float Zoom;
        public PrefabAreaData() { }
    }
    public partial class PrefabPlaceholder : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject Prefab;
        public PrefabPlaceholder() { }
        public void Awake() { }
    }
    public abstract partial class PrefabProvider : UnityEngine.MonoBehaviour
    {
        protected PrefabProvider() { }
        public abstract UnityEngine.GameObject Prefab(IContext context);
    }
    [UnityEngine.AddComponentMenu("Generic/Prefab reference")]
    [UnityEngine.ExecuteInEditMode]
    public partial class PrefabReference : UnityEngine.MonoBehaviour
    {
        private UnityEngine.GameObject m_prefab;
        public UnityEngine.GameObject referencedPrefab;
        public PrefabReference() { }
        private void Awake() { }
        private void EditorAwake() { }
        private void HideRecursively(UnityEngine.GameObject o) { }
        private void RuntimeAwake() { }
        private void Update() { }
    }
    public partial class PrefabSpawner : UnityEngine.MonoBehaviour
    {
        private UnityEngine.GameObject m_prefab;
        public float OnScreenPadding;
        public UnityEngine.Transform Parent;
        public PrefabProvider Prefab;
        public bool SpawnAtStart;
        public bool SpawnOffscreen;
        public bool UseParentOfParent;
        public bool UseRotation;
        public PrefabSpawner() { }
        public void DestroyInstance() { }
        public UnityEngine.GameObject Spawn(IContext context) { return default(UnityEngine.GameObject); }
        public void Start() { }
    }
    public partial class PreloadSceneAction : ActionMethod
    {
        [NotNull]
        public SceneMetaData Scene;
        public PreloadSceneAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class PreloadShaderAction : ActionMethod
    {
        public PreloadShaderAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class PressACutsceneState : NormalBackwardsCutsceneState
    {
        public System.Collections.Generic.List<Core.Input.Button> OnPressButtonList;
        public PressACutsceneState() { }
        public CharacterAnimationSystem Animation { get { return default(CharacterAnimationSystem); } }
        public SeinCutsceneBlocked CutsceneBlocked { get { return default(SeinCutsceneBlocked); } }
        public override void OnEnter() { }
        public override void OnUpdate() { }
    }
    public partial class PressAOrRightCutsceneState : NormalBackwardsCutsceneState
    {
        public System.Collections.Generic.List<Core.Input.Button> OnPressButtonList;
        public PressAOrRightCutsceneState() { }
        public CharacterAnimationSystem Animation { get { return default(CharacterAnimationSystem); } }
        public SeinCutsceneBlocked CutsceneBlocked { get { return default(SeinCutsceneBlocked); } }
        public override void OnEnter() { }
        public override void OnUpdate() { }
    }
    public partial class PressurePlate : UnityEngine.MonoBehaviour
    {
        public ActionMethod OnPressed;
        public ActionMethod OnReleased;
        private bool pressed;
        public PressurePlate() { }
        public void OnCollision(UnityEngine.Collision collision) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionExit(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
    }
    public partial class PrewarmParticles : UnityEngine.MonoBehaviour
    {
        [UnityEngine.SerializeField]
        private PrewarmParticles.PrewarmLegacyParticle[] m_legacyParticles;
        [UnityEngine.SerializeField]
        private PrewarmParticles.PrewarmParticleSystemParticle[] m_particleSystemParticles;
        public PrewarmParticles() { }
        public void Awake() { }
        private void CacheParticleSystem() { }
        [UnityEngine.ContextMenu("Save particles")]
        public void Save() { }
        public partial class PrewarmLegacyParticle
        {
            public float AngularVelocity;
            public UnityEngine.Color Color;
            public float Energy;
            public UnityEngine.Vector3 Position;
            public float Rotation;
            public float Size;
            public float StartEnergy;
            public UnityEngine.Vector3 Velocity;
            public PrewarmLegacyParticle(UnityEngine.Particle particle) { }
            public UnityEngine.Particle ToParticle() { return default(UnityEngine.Particle); }
        }
        public partial class PrewarmParticleSystemParticle
        {
            public float AngularVelocity;
            public UnityEngine.Vector3 AxisOfRotation;
            public UnityEngine.Color Color;
            public float Lifetime;
            public UnityEngine.Vector3 Position;
            public uint RandomSeed;
            public float Rotation;
            public float Size;
            public float StartLifetime;
            public UnityEngine.Vector3 Velocity;
            public PrewarmParticleSystemParticle(UnityEngine.ParticleSystem.Particle particle) { }
            public UnityEngine.ParticleSystem.Particle ToParticle() { return default(UnityEngine.ParticleSystem.Particle); }
        }
    }
    public partial class PrewarmSkipAction : ActionMethod
    {
        public PrewarmSkipAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ProcessUtility
    {
        public ProcessUtility() { }
        public static string ExcecuteCommandLine(string application, string arguments) { return default(string); }
    }
    public partial class Projectile : UnityEngine.MonoBehaviour, IAttackable, IBashAttackable, IChargeFlameAttackable, IDamageReciever, IPooled, IPortalVisitor, IReflectable, IStompAttackable, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <Direction>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <Displacement>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.GameObject <LastReflector>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Speed>k__BackingField;
        public float BashSpeed;
        public bool CancelGravityOnBash;
        public bool CanProjectileBeBashed;
        public float CollisionGracePeriod;
        protected float CurrentTime;
        public bool EnableCollisionGracePeriod;
        public float Gravity;
        public bool HasBeenBashedByOri;
        private UnityEngine.Collider m_collider;
        private bool m_explode;
        private bool m_explodeLater;
        private SoundPlayer m_lastLoop;
        private System.Action m_nullify;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Component[] m_onKillRecievers;
        private float m_originalGravity;
        public float MaximumLiveTime;
        public UnityEngine.GameObject Owner;
        public SoundProvider ProjectileLoop;
        protected UnityEngine.Rigidbody Rigidbody;
        public bool RotateSpriteToDirection;
        public float SpriteTurnSpeed;
        public bool UseBashSpeed;
        public Projectile() { }
        public int BashPriority { get { return default(int); } }
        public UnityEngine.Vector3 Direction { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Displacement { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        UnityEngine.Vector3 IPortalVisitor.Speed { get { return default(UnityEngine.Vector3); } set { } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.GameObject LastReflector { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.GameObject); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public float Speed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 SpeedVector { get { return default(UnityEngine.Vector3); } set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__E0() { }
        public void Awake() { }
        public virtual bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeReflected(float maximumReflectableDamage) { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        public bool CountsTowardsPowerOfLightAchievement() { return default(bool); }
        public bool CountsTowardsSuperJumpAchievement() { return default(bool); }
        public void ExplodeProjectile() { }
        public virtual void FixedUpdate() { }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public void OnBashDehighlight() { }
        public void OnBashHighlight() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnDamageDealt(UnityEngine.GameObject go, Damage damage) { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnEnterBash() { }
        public void OnGoThroughPortal() { }
        public void OnGrabbed() { }
        public void OnPoolSpawned() { }
        public void OnPortalOverlapEnter() { }
        public void OnPortalOverlapExit() { }
        public void OnRecieveDamage(Damage damage) { }
        public void OnReleased(float speed, UnityEngine.Vector3 direction) { }
        public void OnValidate() { }
        public void Start() { }
        public void UpdateSpeedAndDirection() { }
        public void UpdateVelocity() { }
    }
    public partial class ProjectileDamageDealer : DamageDealer
    {
        public float EnemyMultiplier;
        private Projectile m_projectile;
        public ProjectileDamageDealer() { }
        public override float AmountOfDamage(UnityEngine.GameObject target) { return default(float); }
        public void Awake() { }
        public override void DealDamage(UnityEngine.GameObject target) { }
    }
    public partial class ProjectileExplodeWall : Entity
    {
        public SoundProvider Deflected;
        public ProjectileExplodeWall() { }
        public override void Awake() { }
        public override void OnDestroy() { }
        public void OnPreProcessDamage(Damage damage) { }
    }
    public partial class ProjectileSpawner : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <TimeSinceLastShot>k__BackingField;
        public System.Collections.Generic.List<UnityEngine.Collider> CollidersToIgnore;
        public UnityEngine.Vector3 Direction;
        public float Gravity;
        private UnityEngine.GameObject m_lastProjectile;
        protected TimedTrigger m_timedTrigger;
        private UnityEngine.Transform m_transform;
        public UnityEngine.GameObject Owner;
        public UnityEngine.GameObject Projectile;
        public UnityEngine.AudioClip SpawnSound;
        public float SpawnSoundVolume;
        public float Speed;
        public bool WaitForProjectileToBeDestroyed;
        public ProjectileSpawner() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        private bool TimerPaused { get { return default(bool); } set { } }
        public float TimeSinceLastShot { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void AimAt(UnityEngine.Transform target) { }
        public override void Awake() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        public void OnDisable() { }
        public void OnTimedTrigger() { }
        public override void Serialize(Archive ar) { }
        public Projectile SpawnProjectile() { return default(Projectile); }
        public void Start() { }
    }
    public partial class PushPullBlock : UnityEngine.MonoBehaviour, IAttackable, IBashAttackable, IChargeFlameAttackable, IDamageReciever, IPushable, IStompAttackable, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache16;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public static AllContainer<PushPullBlock> All;
        public BaseAnimator BashHighlight;
        public SoundSource DehighlightSound;
        public LegacyAnimator[] HighlightAnimators;
        public SoundSource HighlightSound;
        public bool IsBashable;
        public bool KeepAwake;
        private int m_angleFixHack;
        private UnityEngine.Collider[] m_colliders;
        private float m_ignoreCollisionRemainingTime;
        private bool m_isGrabbed;
        private UnityEngine.Vector3 m_originalPosition;
        private UnityEngine.Rigidbody m_rigidbody;
        private UnityEngine.Transform m_transform;
        public float MoveSpeedMultiplier;
        public ActionMethod OnBashAction;
        private System.Action OnBashEvent;
        public UnityEngine.PhysicMaterial PushPullMaterial;
        public UnityEngine.PhysicMaterial PushPullMaterialMoving;
        public bool StrongFrictionWhenReleased;
        public bool TakesDamage;
        public PushPullBlock() { }
        public int BashPriority { get { return default(int); } }
        public bool IsGrabbed { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float OriDistanceFromAttackable { get { return default(float); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public int SpiritFlamePriority { get { return default(int); } }
        public float SpiritFlameRange { get { return default(float); } }
        public event System.Action OnBashEvent { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnBashEvent>m__167() { }
        public void Awake() { }
        public bool CanActivateSwitch(UnityEngine.GameObject theSwitch) { return default(bool); }
        public bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        private void ConstrainRotationFix() { }
        public bool CountsTowardsPowerOfLightAchievement() { return default(bool); }
        public bool CountsTowardsSuperJumpAchievement() { return default(bool); }
        public void FixedUpdate() { }
        public void IgnoreCollisionWithPlayer(PlatformMovement platformMovement, bool ignore) { }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public void OnBashDehighlight() { }
        public void OnBashHighlight() { }
        public void OnDehighlight() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnEnterBash() { }
        public void OnGrabbed(PlatformMovement platformMovement) { }
        public void OnHighlight() { }
        public void OnPushOrPull(PlatformMovement platformMovement) { }
        public void OnRecieveDamage(Damage damage) { }
        public void OnReleased(PlatformMovement platformMovement) { }
        public void OnSpiritFlameDehighlight() { }
        public void OnSpiritFlameHighlight() { }
        public float PushableSpeedRatio() { return default(float); }
        public void Start() { }
    }
    public partial class PushPullBlockJuggleAchievement : UnityEngine.MonoBehaviour
    {
        private int m_bashedInAirCount;
        private PushPullBlock m_pushPullBlock;
        public PushPullBlockJuggleAchievement() { }
        public void Awake() { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnPushPullBlockBashed() { }
    }
    public partial class QuitApplicationAction : ActionMethod
    {
        public QuitApplicationAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class RammingAlertState : RammingEnemyState
    {
        public RammingAlertState(RammingEnemy groundEnemy) : base (default(RammingEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RammingBrakingState : RammingEnemyState
    {
        public RammingBrakingState(RammingEnemy rammingEnemy) : base (default(RammingEnemy)) { }
        public bool HitWallIsAppropriate() { return default(bool); }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RammingEnemy : GroundEnemy
    {
        public RammingEnemyAnimations Animations;
        public PrefabSpawner HitWallEffect;
        public float IdleWaitTime;
        public RammingEnemySettings Settings;
        public RammingEnemySounds Sounds;
        public RammingEnemy.States State;
        public UnityEngine.Transform[] Zones;
        public RammingEnemy() { }
        public bool CanBeFrozen { get { return default(bool); } }
        public float CurrentStateTime { get { return default(float); } }
        public bool EnemyInsideZone { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C0() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C1() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C2() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C3() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C4() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C5() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C6() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C7() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C8() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__C9() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__CA() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__CB() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__CC() { return default(bool); }
        public override void Awake() { }
        public override bool CanBeOptimized() { return default(bool); }
        public bool CanSeePlayer() { return default(bool); }
        public bool CantSeePlayer() { return default(bool); }
        public bool CantSeePlayerAndTooClose() { return default(bool); }
        public new void FixedUpdate() { }
        public bool HasHitWall() { return default(bool); }
        public bool HasLanded() { return default(bool); }
        public bool IsCornered() { return default(bool); }
        public bool IsOnGround() { return default(bool); }
        public void OnDamageDealt(UnityEngine.GameObject go, Damage damage) { }
        public void OnDash() { }
        public override void OnDestroy() { }
        public virtual void OnModifyDamage(Damage damage) { }
        public bool PlayerInsideZone() { return default(bool); }
        public bool ShouldStopRetreating() { return default(bool); }
        public new void Start() { }
        public void UpdateRotation() { }
        public bool ZoneRectanglesContain(UnityEngine.Vector2 position) { return default(bool); }
        public partial class States
        {
            public RammingAlertState Alert;
            public RammingBrakingState Braking;
            public RammingHitWallState HitWall;
            public RammingIdleState Idle;
            public RammingKnockBackState KnockBack;
            public RammingRetreatState Retreat;
            public RammingBrakingState RetreatBraking;
            public RammingRunningState Running;
            public RammingStunnedState Stunned;
            public States() { }
        }
    }
    public partial class RammingEnemyAnimations
    {
        public TextureAnimationWithTransitions Alert;
        public TextureAnimationWithTransitions Braking;
        public TextureAnimationWithTransitions HitWall;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions KnockBack;
        public TextureAnimationWithTransitions Retreat;
        public TextureAnimationWithTransitions Running;
        public TextureAnimationWithTransitions Stunned;
        public TextureAnimationWithTransitions Thrown;
        public RammingEnemyAnimations() { }
    }
    public partial class RammingEnemyPlaceholder : RespawningPlaceholder
    {
        public UnityEngine.GameObject RammingEnemy;
        public RammingEnemyPlaceholder.RammingEnemyPlaceholderSettings Settings;
        public UnityEngine.Transform[] Zones;
        public RammingEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public void OnRammingEnemyReplaced(Entity entity) { }
        public partial class RammingEnemyPlaceholderSettings
        {
            public float AlertRange;
            public bool CanDieToLevelUpBlast;
            public float DamageOnTouch;
            public float Health;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public RammingEnemyPlaceholderSettings() { }
        }
    }
    public partial class RammingEnemyRammedWallCondition : Condition
    {
        public float MinMagnitudeToBreak;
        public RammingEnemyRammedWallCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class RammingEnemySettings
    {
        public float AccelerationDuration;
        public float AlertDuration;
        public float AlertRange;
        public float BashSpeed;
        public float BouncingDuration;
        public UnityEngine.AnimationCurve BouncingSpeedMultiplierOverTime;
        public float BrakingDuration;
        public UnityEngine.AnimationCurve BrakingSpeedMultiplierOverTime;
        public bool CanDieToLevelUpBlast;
        public float Gravity;
        public float HitWallStunSpeed;
        public float KnockBackDuration;
        public float KnockBackSpeed;
        public float RecoverTime;
        public float RetreatDistance;
        public float RetreatSpeed;
        public UnityEngine.AnimationCurve RunningSpeedMultipliedOverTime;
        public float RunSpeed;
        public float StunnedDuration;
        public RammingEnemySettings() { }
    }
    public partial class RammingEnemySounds
    {
        public SoundProvider Alert;
        public SoundProvider Brake;
        public SoundProvider Dash;
        public SoundProvider Deflected;
        public SoundProvider HitSein;
        public SoundProvider Hurt;
        public SoundSource Idle;
        public SoundProvider OnHitWall;
        public SoundSource Run;
        public RammingEnemySounds() { }
    }
    public abstract partial class RammingEnemyState : GroundEnemyState
    {
        public RammingEnemy RammingEnemy;
        public RammingEnemyState(RammingEnemy rammingEnemy) : base (default(GroundEnemy)) { }
    }
    public partial class RammingHitWallState : RammingEnemyState
    {
        public RammingHitWallState(RammingEnemy rammingEnemy) : base (default(RammingEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RammingIdleState : RammingEnemyState
    {
        public RammingIdleState(RammingEnemy groundEnemy) : base (default(RammingEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RammingKnockBackState : RammingEnemyState
    {
        public RammingKnockBackState(RammingEnemy rammingEnemy) : base (default(RammingEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RammingRetreatState : RammingEnemyState
    {
        public RammingRetreatState(RammingEnemy rammingEnemy) : base (default(RammingEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RammingRunningState : RammingEnemyState
    {
        public RammingRunningState(RammingEnemy rammingEnemy) : base (default(RammingEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RammingStunnedState : RammingEnemyState
    {
        public RammingStunnedState(RammingEnemy rammingEnemy) : base (default(RammingEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RammingThrownState : RammingEnemyState
    {
        public RammingThrownState(RammingEnemy rammingEnemy) : base (default(RammingEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class RandomAnimationPlayer : UnityEngine.MonoBehaviour
    {
        public RandomAnimationPlayer.WeightedAnimation[] Animations;
        private SpriteAnimator m_spriteAnimator;
        private float m_time;
        private float m_totalWeight;
        public RandomAnimationPlayer() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnAnimationLooped() { }
        public partial class WeightedAnimation
        {
            public TextureAnimation Animation;
            public float Weight;
            public WeightedAnimation() { }
        }
    }
    public partial class RandomObjectGenerator : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Vector3 InitialVelocity;
        private UnityEngine.GameObject m_groupParent;
        private float m_lastSpawnTime;
        public float MaxSize;
        public float MinSize;
        public float ObjectGenerationFrequency;
        public UnityEngine.GameObject ObjectPrefab;
        public RandomObjectGenerator() { }
        private void FixedUpdate() { }
        private UnityEngine.GameObject GetGroupParent() { return default(UnityEngine.GameObject); }
        private void Start() { }
    }
    public partial class Recorder : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheD;
        public bool Active;
        public bool CorrectWrongPositions;
        public int CurrentFrameIndex;
        public string CurrentReplayPath;
        public const string FavoriteReplayFolderPath = "favoriteReplays";
        public bool ForceReloadScene;
        public static Recorder Instance;
        private readonly System.Collections.Generic.List<IRecorderPlugin> m_plugins;
        public System.Action OnFinishedReplay;
        public RecorderData RecorderData;
        public System.IO.BinaryWriter RecorderStream;
        private static System.Collections.Generic.List<string> ReplaysQueue;
        public const string SpecialReplayFolderPath = "specialReplays";
        public Recorder.RecorderState State;
        public const string StatisticsReplayFolderPath = "statisticsReplays";
        public bool Strict;
        public const string TemporaryReplayFolderPath = "temporaryReplays";
        public Recorder() { }
        public RecorderFrame CurrentFrame { get { return default(RecorderFrame); } }
        public static bool IsPlaying { get { return default(bool); } }
        public static bool IsRecordering { get { return default(bool); } }
        public float PositionTolerance { get { return default(float); } }
        public float RotationTolerance { get { return default(float); } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnFinishedReplay>m__1E() { }
        private void AddPlaybackComponents() { }
        private void AddRecordingComponents() { }
        public static void AddReplayToQueue(string replayPath, int index=-1) { }
        public static void AssertFoldersExist() { }
        public void Awake() { }
        public void DeregisterPlugin(IRecorderPlugin plugin) { }
        public void DestoryPlaybackComponents() { }
        private void DestroyComponent(UnityEngine.Component component) { }
        public void Exit() { }
        public void FinishFrame() { }
        public void FixedUpdate() { }
        public static string GetReplayFromQueue() { return default(string); }
        private void HandleLog(string logString, string stackTrace, UnityEngine.LogType logType) { }
        public void InitRecording() { }
        public static bool IsReplayQueueEmpty() { return default(bool); }
        private void OnApplicationQuit() { }
        private void OnDestroy() { }
        public void OnGameReset() { }
        public bool OnPerformLoad() { return default(bool); }
        public void OnPerformSave() { }
        public void OnRestoreCheckpoint() { }
        public void OnSceneRootActivatedScene(SceneRoot sceneRoot) { }
        public void RegisterPlugin(IRecorderPlugin plugin) { }
        public void Reset(string fileName="") { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator ResetRecorderAndComponents() { return default(System.Collections.IEnumerator); }
        public void SetupRecorderAccordingToState() { }
        public void Start() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <ResetRecorderAndComponents>c__Iterator3 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal Recorder <>f__this;
            public <ResetRecorderAndComponents>c__Iterator3() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public enum RecorderState
        {
            Idle = 2,
            Playing = 1,
            Recording = 0,
        }
    }
    public partial class RecorderData
    {
        public string CurrentFormatIdentifier;
        public string CurrentReplayPath;
        public int CurrentVersion;
        public const int DATA_VERSION = 2;
        public string FILE_FORMAT_IDENTIFIER;
        public System.Collections.Generic.List<RecorderFrame> Frames;
        private int m_flushedFramesCount;
        public RecorderData() { }
        public int FlushedFramesCount { get { return default(int); } }
        public RecorderFrame LastFrame { get { return default(RecorderFrame); } }
        public RecorderFrame GetFrame(int index) { return default(RecorderFrame); }
        public void LoadFromFile(string filePath) { }
        public void WriteSplitReplay(string folderPath) { }
    }
    public partial class RecorderFrame
    {
        public System.Collections.Generic.List<IFrameData> FrameData;
        public RecorderFrame() { }
        public System.Collections.Generic.List<T> GetFrameData<T>() where T : class { return default(System.Collections.Generic.List<T>); }
        public T GetFrameDataOfType<T>() where T : class { return default(T); }
        public void LoadFromFile(System.IO.BinaryReader binaryReader) { }
        public void SaveToFile(System.IO.BinaryWriter binaryWriter) { }
        public enum FrameDataTypes
        {
            AnalogInputData = 11,
            BuildData = 6,
            CameraData = 2,
            CharacterData = 3,
            CheckpointData = 7,
            CursorInputData = 12,
            DeathsData = 9,
            FPSData = 10,
            InputData = 1,
            LogCallbackData = 4,
            None = 0,
            RecorderMessageData = 5,
            TransformRecorderData = 8,
        }
    }
    public partial class RecorderInput
    {
        public static string ReplayPath;
        public RecorderInput() { }
        private static void .cctor() { }
        public static string GetReplayCommandFilePath() { return default(string); }
        public static void Init() { }
        public static bool IsReplayProvided() { return default(bool); }
        public static void Save() { }
    }
    public partial class RecorderJumpToFrameAction : ActionMethod
    {
        public int FrameIndex;
        public RecorderJumpToFrameAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class RecorderMessageData : IFrameData
    {
        public string Text;
        public RecorderMessageData() { }
        public RecorderMessageData(System.IO.BinaryReader binaryReader) { }
        public RecorderMessageData(string text) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public static void Record(System.IO.BinaryWriter binaryWriter, string text) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
    }
    public partial class RecorderMessageInputUI : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache8;
        public RecorderMessageInputUI.ExitType ExitReason;
        private bool m_exitStarted;
        private bool m_shouldFocusOnInputText;
        private readonly System.Collections.Generic.HashSet<ISuspendable> m_suspendables;
        public ActionMethod OnEnterAction;
        public System.Action OnExit;
        public ActionMethod OnExitAction;
        public string Text;
        public RecorderMessageInputUI() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnExit>m__1F() { }
        private void Enter() { }
        private void Exit(RecorderMessageInputUI.ExitType exitType) { }
        private void HandleExitEvents() { }
        private void OnDestroy() { }
        public void Start() { }
        public enum ExitType
        {
            Cancel = 1,
            OK = 0,
        }
    }
    public partial class RecorderMessagePlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        private string m_lastMessageText;
        private float m_offset;
        private System.Collections.Generic.Dictionary<RecorderMessageData, int> m_recorderMessageData;
        private RecorderMessageInputUI m_recorderMessageInputUI;
        private UnityEngine.GameObject m_recorderMessageInuptUIPrefab;
        private UnityEngine.Vector2 m_scrollPosition;
        private bool m_shouldOpenMessageInputUI;
        private bool m_showMessages;
        private UnityEngine.Vector2 m_tooltipScrollPosition;
        public RecorderMessagePlugin() { }
        public bool ShowMessages { get { return default(bool); } set { } }
        public void Awake() { }
        public void Exit() { }
        public static System.Collections.Generic.Dictionary<RecorderMessageData, int> ExtractRecorderMessagesData(RecorderData recorderData) { return default(System.Collections.Generic.Dictionary<RecorderMessageData, int>); }
        public void OnExit() { }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
        public void ToggleShowMessages() { }
        public void Update() { }
    }
    public partial class RecorderPlaybackUI : UnityEngine.MonoBehaviour
    {
        private Core.Input.InputButtonProcessor BlastButton;
        public float BlastTimeScale;
        private Core.Input.InputButtonProcessor BreakButton;
        public int FrameToStopAt;
        public UnityEngine.GameObject HelpTexture;
        public static RecorderPlaybackUI Instance;
        public bool IsJumpingToFrame;
        public static Core.Input.InputButtonProcessor LeftTrigger;
        private SmartInput.IButtonInput m_blastButtonInput;
        private SmartInput.IButtonInput m_breakButtonInput;
        private bool m_hideTimeline;
        private bool m_isBlast;
        private bool m_isStopped;
        private SmartInput.IButtonInput m_leftTrigger;
        private SmartInput.IButtonInput m_rightTrigger;
        private bool m_shouldExit;
        private int m_speed;
        private SmartInput.IButtonInput m_togglePlayPauseButtonInput;
        private SmartInput.IButtonInput m_toggleVisibilityButtonInput;
        private Core.Input.InputButtonProcessor PlayPauseButton;
        public static Core.Input.InputButtonProcessor RightTrigger;
        public bool ShouldStopAfterFrameToStopAt;
        public RecorderPlaybackUITimeline Timeline;
        private Core.Input.InputButtonProcessor VisibilityButton;
        public RecorderPlaybackUI() { }
        public bool DoBlast { get { return default(bool); } set { } }
        public Recorder Recorder { get { return default(Recorder); } }
        private static void .cctor() { }
        public void Awake() { }
        private void DecreaseSpeed() { }
        public void DoExit() { }
        private void FixedUpdate() { }
        public int GetSpeed() { return default(int); }
        private void GoToKeyframe(int keyframe) { }
        private void IncreaseSpeed() { }
        public bool IsUIVisible() { return default(bool); }
        public void JumpToFrame(int frameIndex) { }
        public void NextKeyframe() { }
        public void Play() { }
        public void PreviousKeyframe() { }
        public void SetSpeed(int speed) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator Start() { return default(System.Collections.IEnumerator); }
        public void Stop() { }
        public void TogglePlaying() { }
        private void ToggleTimeline() { }
        private void Update() { }
        public void UpdateTimeScale() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Start>c__Iterator4 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal RecorderPlaybackUI <>f__this;
            public <Start>c__Iterator4() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class RecorderPlaybackUITimeline : UnityEngine.MonoBehaviour
    {
        public static RecorderPlaybackUITimeline Instance;
        public System.Collections.Generic.List<int> Keyframes;
        private UnityEngine.GUIStyle m_background;
        private UnityEngine.GUIStyle m_bar;
        private UnityEngine.GUIStyle m_handle;
        private UnityEngine.GUIStyle m_keyframe;
        public Recorder Recorder;
        public UnityEngine.GUISkin TimelineSkin;
        public RecorderPlaybackUITimeline() { }
        public int CurrentFrame { get { return default(int); } }
        public int TotalFrames { get { return default(int); } }
        public int GetKeyframe(int keyframe) { return default(int); }
        public int KeyframeBack() { return default(int); }
        public int KeyframeForward() { return default(int); }
        public void OnDestory() { }
        public void Start() { }
    }
    public partial class RecordTransformPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        public RecordTransformPlugin() { }
        public void Awake() { }
        public void Exit() { }
        public void OnDestroy() { }
        public void PlayCycle(int frame) { }
        public UnityEngine.Vector4 QuaternionToVector(UnityEngine.Quaternion q) { return default(UnityEngine.Vector4); }
        public void RecordCycle(int frame) { }
    }
    public partial class RecordXboxDVRAction : ActionMethod
    {
        public RecordXboxDVRAction.XboxOneDVRID ClipID;
        public float ClipLength;
        public float DelayRecording;
        public RecordXboxDVRAction() { }
        private string GetXboxOneDRVID(RecordXboxDVRAction.XboxOneDVRID id) { return default(string); }
        public override void Perform(IContext context) { }
        public enum XboxOneDVRID
        {
            EscapeBoulder = 0,
        }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct RECT
    {
        public int Bottom;
        public int Left;
        public int Right;
        public int Top;
        public RECT(int left, int top, int right, int bottom) { throw new System.NotImplementedException(); }
        public int Height { get { return default(int); } set { } }
        public int Width { get { return default(int); } set { } }
        public int X { get { return default(int); } set { } }
        public int Y { get { return default(int); } set { } }
        public bool Equals(RECT r) { return default(bool); }
        public override bool Equals(object obj) { return default(bool); }
        public static bool operator ==(RECT r1, RECT r2) { return default(bool); }
        public static bool operator !=(RECT r1, RECT r2) { return default(bool); }
        public override string ToString() { return default(string); }
    }
    public partial class RedirectionPortal : UnityEngine.MonoBehaviour
    {
        public Varying2DSoundProvider RedirectSoundProvider;
        public LegacyScaleAnimator ShakeAnimator;
        public UnityEngine.GameObject Target;
        public RedirectionPortal() { }
        private void OnCollisionEnter(UnityEngine.Collision collision) { }
        private void OnTrigger(UnityEngine.GameObject gameObject) { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
    }
    public partial class ReEngageUI : UnityEngine.MonoBehaviour
    {
        private static ReEngageUI s_instance;
        public ReEngageUI() { }
        public static bool Active { get { return default(bool); } set { } }
        private static ReEngageUI Instance { get { return default(ReEngageUI); } }
        public static bool Ready { get { return default(bool); } }
    }
    public static partial class ReflectionHelper
    {
        public static object DoInvoke(System.Type type, string methodName, object[] parameters) { return default(object); }
        public static object DoInvoke2(System.Type type, System.Reflection.MethodInfo method, object[] parameters) { return default(object); }
    }
    public partial class Reflector : UnityEngine.MonoBehaviour
    {
        public float MaximumReflectableDamage;
        public float ScaleFactor;
        public bool ShouldIncreaceSpeed;
        public bool ShouldScale;
        public float SpeedFactor;
        public Reflector() { }
        public void OnCollision(UnityEngine.GameObject collidingGameObject) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnStick(SpiritFlameProjectile spiritFlameProjectile) { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
    }
    public partial class RegisterSkipCutsceneAction : ActionMethod
    {
        public MasterTimelineSequence MasterTimelineSequence;
        public RegisterSkipCutsceneAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class RegisterStringTriggerAction : ActionMethod
    {
        public string String;
        public RegisterStringTriggerAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("System")]
    public partial class RegisterToSaveSceneManagerAction : ActionMethod
    {
        public SaveSceneManager SaveSceneManager;
        public SaveSerialize Target;
        public RegisterToSaveSceneManagerAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class RemoveWorldMapIconAction : ActionMethod
    {
        public VisibleOnWorldMap Target;
        public RemoveWorldMapIconAction() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Perform>m__14B(RuntimeWorldMapIcon a) { return default(bool); }
        public override void Perform(IContext context) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class RenameBasedOnText : UnityEngine.MonoBehaviour
    {
        private string m_lastText;
        private UnityEngine.TextMesh m_textMesh;
        public RenameBasedOnText() { }
        private void Update() { }
    }
    public partial class RepeatInvoker
    {
        private readonly float m_duration;
        private readonly System.Action m_method;
        private float m_time;
        public RepeatInvoker(float duration, System.Action method=null) { }
        public bool Update(float dt) { return default(bool); }
    }
    public partial class ReportLocationAction : ActionMethod
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache6;
        public ReportLocationAction.GameLocations Location;
        public static System.Action OnAct1End;
        public static System.Action OnAct2End;
        public static System.Action OnAct3End;
        public ReportLocationAction() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAct1End>m__27() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAct2End>m__28() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAct3End>m__29() { }
        public override void Perform(IContext context) { }
        public enum GameLocations
        {
            Act1End = 0,
            Act2End = 1,
            Act3End = 2,
        }
    }
    public partial class ResampleCameraDrawing : UnityEngine.MonoBehaviour
    {
        public float DownScaleFactor;
        private UnityEngine.RenderTexture m_downsampledRenderBuffer;
        public static UnityEngine.Vector2 SCREEN_RESOLUTION;
        public ResampleCameraDrawing() { }
        private static void .cctor() { }
        private void Start() { }
    }
    public partial class ResetDamageRecieversAction : ActionMethod
    {
        public DamageReciever[] DamageRecievers;
        public ResetDamageRecieversAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ResetSettingsToDefaultAction : ActionMethod
    {
        public ResetSettingsToDefaultAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ResetTriggerOnCheckpoint : UnityEngine.MonoBehaviour
    {
        private Trigger m_trigger;
        public ResetTriggerOnCheckpoint() { }
        public void Awake() { }
        public void OnDestroy() { }
        private void OnRestoreCheckpoint() { }
        public void Start() { }
    }
    public partial class ResolutionOptions : CleverMenuOptionsList
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<UnityEngine.Resolution> <>f__am$cache3;
        private static UnityEngine.Vector4[] m_allowedAspectRatios;
        private static int[][] m_extraResolutions;
        private System.Collections.Generic.List<UnityEngine.Resolution> m_resolutions;
        public ResolutionOptions() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <SortResolutions>m__1C(UnityEngine.Resolution x, UnityEngine.Resolution y) { return default(int); }
        public new void Awake() { }
        public static string GetAspectRatio(UnityEngine.Vector2 res, float precision) { return default(string); }
        private static bool IsAspectRatio(UnityEngine.Vector2 res, int horizontal, int vertical, float precision) { return default(bool); }
        public new void OnEnable() { }
        public void SetResolution(UnityEngine.Resolution resolution) { }
        private static void SortResolutions(System.Collections.Generic.List<UnityEngine.Resolution> resolutions) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <OnEnable>c__AnonStorey4C
        {
            internal ResolutionOptions <>f__this;
            internal UnityEngine.Resolution r;
            public <OnEnable>c__AnonStorey4C() { }
            internal void <>m__1B() { }
        }
    }
    public partial class Respawner : SaveSerialize, IDynamicGraphicHierarchy, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public static System.Collections.Generic.List<Respawner> All;
        private bool m_needsToRespawn;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private IRespawnReciever m_respawnReciever;
        private float m_respawnTime;
        private readonly SaveObjectList m_saveList;
        private SceneRoot m_sceneRoot;
        public float MinDistanceFromPlayer;
        public bool RespawnOnRestoreCheckpoint;
        public bool RespawnOnScreen;
        public bool RespawnOnScrollLock;
        public bool RespawnOnTimeout;
        public float RespawnTime;
        public LegacyScaleAnimator ScaleAnimator;
        public UnityEngine.GameObject Target;
        public LegacyAnimator[] TimedRespawnAnimators;
        public SoundSource TimedRespawnSoundSource;
        public Respawner() { }
        public bool IsOnScreen { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        public override void Awake() { }
        public new void OnDestroy() { }
        public void OnSceneStartLateBeforeSerialize(SceneRoot sceneRoot) { }
        public void OnTargetDestroyed() { }
        public void OnTargetDestroyed(Damage damage) { }
        public void PerformRespawn() { }
        public void PerformTimedRespawn() { }
        public void Prepare() { }
        [UberBuildMethod]
        private void ProvideComponents() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void UpdateRespawner() { }
        public static void UpdateRespawners() { }
    }
    public abstract partial class RespawningPlaceholder : SaveSerialize, IDynamicGraphic, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<Damage> <>f__am$cacheF;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public static System.Collections.Generic.List<RespawningPlaceholder> All;
        private Entity m_currentEntity;
        private float m_enableTime;
        private bool m_isKilled;
        private bool m_needsToRespawn;
        private float m_respawnTime;
        private MoonGuid m_sceneRootGUID;
        private UnityEngine.Transform m_transform;
        public float MinDistanceFromPlayer;
        public System.Action<Damage> OnCurrentInstanceDeath;
        public bool RespawnOnScreen;
        public bool RespawnOnTimeout;
        public float RespawnTime;
        protected bool WasTimedRespawn;
        protected RespawningPlaceholder() { }
        public virtual bool CheckForOverlap { get { return default(bool); } }
        public Entity CurrentEntity { get { return default(Entity); } }
        public bool EntityIsDead { get { return default(bool); } }
        public bool IsOnScreen { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public virtual bool NeedsToRespawn { get { return default(bool); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCurrentInstanceDeath>m__92(Damage ) { }
        public override void Awake() { }
        public void DestroyCurrentInstance() { }
        public void FixedUpdate() { }
        public abstract Entity Instantiate();
        public void OnDeath(Damage damage) { }
        public override void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnGameSerializeLoad() { }
        public void OnSceneRootDisabled(SceneRoot sceneRoot) { }
        public void PerformRespawn() { }
        public void PerformTimedRespawn() { }
        public override void Serialize(Archive ar) { }
        protected void SetCurrentEntity(Entity entity) { }
        public void Spawn() { }
        public void UpdateSpawnState() { }
    }
    public partial class RespawningPlaceholderSpawnAction : ActionMethod
    {
        public RespawningPlaceholder Placeholder;
        public RespawningPlaceholderSpawnAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class RespawnPlaceholdersInHierarchyAction : ActionMethod
    {
        public UnityEngine.GameObject RespawnHierarchy;
        public RespawnPlaceholdersInHierarchyAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class RestartOneLifeMode : ActionMethod
    {
        public RestartOneLifeMode() { }
        public override void Perform(IContext context) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator RestartingCleanupNextFrame() { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RestartingCleanupNextFrame>c__Iterator1 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal RuntimeSceneMetaData <sceneMetaData>__0;
            public <RestartingCleanupNextFrame>c__Iterator1() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class RestoreCheckpointController
    {
        public RestoreCheckpointController() { }
        private void FinishLoading() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator MoveCameraInstantlyAgain() { return default(System.Collections.IEnumerator); }
        public void RestoreCheckpoint() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <MoveCameraInstantlyAgain>c__Iterator48 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            public <MoveCameraInstantlyAgain>c__Iterator48() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class RestoreHealthAction : ActionMethod
    {
        public float FillDurationPerUnit;
        private float m_energyDuration;
        private float m_energyTime;
        private SoundPlayer m_fillSound;
        private float m_healthDuration;
        private float m_healthTime;
        private float m_soundDuration;
        private float m_startEnergy;
        private float m_startHealth;
        private float m_time;
        public RestoreHealthAction() { }
        public override void Perform(IContext context) { }
        public override void Serialize(Archive ar) { }
    }
    public partial class RestoreHealthPickup : PickupBase
    {
        public int Amount;
        public RestoreHealthPickup() { }
        public override void OnCollectorCandidateTouch(UnityEngine.GameObject collector) { }
    }
    public partial class RestoreRecorderToLastCheckpointAction : ActionMethod
    {
        public RestoreRecorderToLastCheckpointAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class RestrictJumpingZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<RestrictJumpingZone> All;
        private UnityEngine.Rect m_bounds;
        public RestrictJumpingZone() { }
        private static void .cctor() { }
        public void Awake() { }
        public bool Contains(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class ResumeGameController : UnityEngine.MonoBehaviour
    {
        public static bool IsGameSuspended;
        public UnityEngine.GameObject VisibleGroup;
        public ResumeGameController() { }
        private static void .cctor() { }
        private void FixedUpdate() { }
        public void Hide() { }
        public void PCFixedUpdate() { }
    }
    public partial class ReturnToTitleScreenAction : ActionMethod
    {
        public ReturnToTitleScreenAction() { }
        public override void Perform(IContext context) { }
    }
    public static partial class ReusableFunctions
    {
        public static System.Collections.Generic.List<int> GenerateTriangleLineStrip(int pointCount) { return default(System.Collections.Generic.List<int>); }
        public static System.Collections.Generic.List<UnityEngine.Vector3> GenerateVerticesFromPointList(System.Collections.Generic.List<UnityEngine.Vector3> points, float thickness) { return default(System.Collections.Generic.List<UnityEngine.Vector3>); }
        public static UnityEngine.Vector3 NormalFromThreePoints(UnityEngine.Vector3 pointA, UnityEngine.Vector3 pointB, UnityEngine.Vector3 pointC) { return default(UnityEngine.Vector3); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ReverseSceneLoadingZone : UnityEngine.MonoBehaviour
    {
        public SceneMetaData SceneToLoad;
        public ReverseSceneLoadingZone() { }
        public UnityEngine.Rect Rectangle { get { return default(UnityEngine.Rect); } }
        public SceneRoot SceneRoot { get { return default(SceneRoot); } }
    }
    public partial class RigidbodyInteractionController : UnityEngine.MonoBehaviour
    {
        public RigidbodyInteractionController.InstanciationInteractionSettings[] CollisionEnterInstanciation;
        public RigidbodyInteractionController.SoundInteractionSettings[] CollisionEnterSound;
        public RigidbodyInteractionController.InstanciationInteractionSettings[] CollisionExitInstanciation;
        public RigidbodyInteractionController.SoundInteractionSettings[] CollisionExitSound;
        private float m_lastCollisionTime;
        private RigidbodyInteractionController.InteractionInformation m_lastInteraction;
        private const float MIN_TIME_BETWEEN_INTERACTIONS = 0.3f;
        private static System.Collections.Generic.List<UnityEngine.ParticleSystem> s_particleSystemList;
        private static System.Collections.Generic.List<UnityEngine.ParticleSystem> s_particleSystemListB;
        public RigidbodyInteractionController() { }
        private static void .cctor() { }
        private float GetRemappedModulationValue(UnityEngine.Rect rangeRemapping, float inputParameter) { return default(float); }
        private void HandleCollision(RigidbodyInteractionController.InteractionInformation interactionInformation, RigidbodyInteractionController.InstanciationInteractionSettings[] collisionInstanciationSettings, RigidbodyInteractionController.SoundInteractionSettings[] collisionSoundSettings) { }
        private void OnApplyForce(UnityEngine.Vector3 force) { }
        private void OnCollisionEnter(UnityEngine.Collision collision) { }
        private void OnCollisionExit(UnityEngine.Collision collision) { }
        private void OnCollisionStay(UnityEngine.Collision collision) { }
        public partial class InstanciationInteractionSettings
        {
            public UnityEngine.GameObject CollisionPrefab;
            public RigidbodyInteractionController.InstanciationPositionModes InstanciationPosition;
            public LocalSpacePointSet InteractionPoints;
            public float MinCollisionMagnitude;
            public UnityEngine.Rect ParticleEmissionRemapping;
            public InstanciationInteractionSettings() { }
        }
        public enum InstanciationPositionModes
        {
            AllInteractionPoints = 20,
            ClosestInteractionPoint = 30,
            FirstCollisionContactPoint = 1,
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct InteractionInformation
        {
            public bool IsPlayer;
            public UnityEngine.Vector3 Normal;
            public UnityEngine.Vector3 Point;
            public UnityEngine.Vector3 RelativeVelocity;
            public InteractionInformation(UnityEngine.Collision collision) { throw new System.NotImplementedException(); }
            public InteractionInformation(UnityEngine.Vector3 point, UnityEngine.Vector3 normal, UnityEngine.Vector3 relativeVelocity, bool isPlayer) { throw new System.NotImplementedException(); }
        }
        public partial class SoundInteractionSettings
        {
            public float MinCollisionMagnitude;
            public SoundProvider SoundProvider;
            public UnityEngine.Rect SoundVolumeRemapping;
            public SoundInteractionSettings() { }
        }
    }
    public partial class RigidbodyMovement : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Rigidbody m_rigidbody;
        public RigidbodyMovement() { }
        public UnityEngine.Vector3 Velocity { get { return default(UnityEngine.Vector3); } set { } }
        public void ApplyDrag(float drag) { }
        public void ApplyForce(UnityEngine.Vector3 force) { }
        public void ApplyImpulseForce(UnityEngine.Vector3 force) { }
        public void ApplySpringForce(float forcePerUnit, UnityEngine.Vector3 position) { }
        public void Awake() { }
        public void MultiplySpeedOverTime(float multiplier) { }
    }
    public partial class RigidBodyPortalVistor : UnityEngine.MonoBehaviour, IPortalVisitor
    {
        private UnityEngine.Rigidbody m_rigidbody;
        public RigidBodyPortalVistor() { }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector3 Speed { get { return default(UnityEngine.Vector3); } set { } }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnGoThroughPortal() { }
        public void OnPortalOverlapEnter() { }
        public void OnPortalOverlapExit() { }
    }
    public partial class RigidbodyReactToDamage : UnityEngine.MonoBehaviour, IDamageReciever
    {
        public System.Collections.Generic.List<DamageReactionSettings> DamageReactionSettings;
        public RigidbodyReactToDamage() { }
        public void OnRecieveDamage(Damage damage) { }
        public void Start() { }
    }
    public partial class RigidbodySerialize : SaveSerialize, IPooled, ISuspendable
    {
        private UnityEngine.Vector3 m_angularVelocity;
        private bool m_isSuspended;
        private UnityEngine.Rigidbody m_rigidbody;
        private UnityEngine.Vector3 m_velocity;
        public bool SeriailzeIsKinematic;
        public bool SerializeAngularVelocity;
        public bool SerializePosition;
        public bool SerializeRotation;
        public bool SerializeVelocity;
        public RigidbodySerialize() { }
        public bool IsSuspended { get { return default(bool); } set { } }
        public new void Awake() { }
        public override void OnDestroy() { }
        public void OnPoolSpawned() { }
        public void Resume() { }
        public override void Serialize(Archive ar) { }
        public void Suspend() { }
    }
    public partial class RigidbodyState
    {
        public UnityEngine.Vector3 AngularVelocity;
        public UnityEngine.Vector3 LastPosition;
        public UnityEngine.Quaternion LastRotation;
        public UnityEngine.Vector3 OriginalPosition;
        public UnityEngine.Quaternion OriginalRotation;
        public UnityEngine.Rigidbody Rigidbody;
        public UnityEngine.Vector3 Velocity;
        public bool WasDisabled;
        public RigidbodyState() { }
    }
    public partial class RigidbodySuspendable : Suspendable, IPooled
    {
        private UnityEngine.Vector3 m_angularVelocity;
        private bool m_isSuspended;
        private UnityEngine.Rigidbody m_rigidbody;
        private UnityEngine.Vector3 m_velocity;
        private bool m_wasKinematic;
        public RigidbodySuspendable() { }
        public override bool IsSuspended { get { return default(bool); } set { } }
        public new void Awake() { }
        public void OnPoolSpawned() { }
        public void Resume() { }
        public void Suspend() { }
    }
    public partial class RigidbodyVelocityCondition : Condition
    {
        public float MinVelocityMagnitude;
        public UnityEngine.Rigidbody Rigidbody;
        public RigidbodyVelocityCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class RiseSinkPlatform : SaveSerialize, IDynamicGraphicHierarchy, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private UnityEngine.Vector3 m_startPosition;
        private RiseSinkPlatform.State m_state;
        public float RiseSpeed;
        public float SinkSpeed;
        public UnityEngine.Transform TransformToAffect;
        public RiseSinkPlatform() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private new void Awake() { }
        private void FixedUpdate() { }
        private void OnCollisionStay(UnityEngine.Collision collision) { }
        private new void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        private void Start() { }
        private enum State
        {
            Rest = 2,
            Rise = 0,
            Sink = 1,
        }
    }
    [UnityEngine.RequireComponent(typeof(ListOfCollidedObjects))]
    public partial class RiseSinkSwitch : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private bool m_active;
        private ListOfCollidedObjects m_listOfCollidedObjects;
        private UnityEngine.Vector3 m_startPosition;
        private bool m_wasTriggered;
        public float MinMassToAffect;
        public ActionMethod OnPressedAction;
        public float RiseSpeed;
        public float SinkDistance;
        public float SinkSpeed;
        public RiseSinkSwitch.RiseSinkState State;
        public UnityEngine.Transform TransformToAffect;
        public bool TriggerOnce;
        public RiseSinkSwitch() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public void ChangeState(RiseSinkSwitch.RiseSinkState state) { }
        private void FixedUpdate() { }
        private float GetCurrentlyAppliedMass() { return default(float); }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        private void Start() { }
        public enum RiseSinkState
        {
            Down = 3,
            Rise = 0,
            Sink = 1,
            Up = 2,
        }
    }
    public partial class RisingStompPost : SaveSerialize, IAttackable, IDamageReciever, IStompAttackable, ISuspendable
    {
        private bool _beingStomped;
        private float _distanceStompedIntoGround;
        private UnityEngine.Vector3 _startLocalPosition;
        private UnityEngine.Transform _transform;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public ActionMethod ConstantAction;
        public int MaxNumberOfStomps;
        public float RiseSpeed;
        public float SpeedIntoGround;
        public ActionMethod StompedAction;
        public float StompIntoGroundAmount;
        public SoundProvider StompSound;
        public RisingStompPost TwinPost;
        public RisingStompPost() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public new void Awake() { }
        public bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        public bool CountsTowardsSuperJumpAchievement() { return default(bool); }
        public void FixedUpdate() { }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public override void OnDestroy() { }
        public void OnRecieveDamage(Damage damage) { }
        public void OnTwinRecievedDamage(Damage damage) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class RisingWater : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float AcceleratedSpeed;
        public float Acceleration;
        public float Deceleration;
        public UnityEngine.AnimationCurve EasySpeedOverDistance;
        private float m_currentSpeed;
        private static RisingWater m_instance;
        public float MinDistanceToAccelerate;
        public float Speed;
        public UnityEngine.AnimationCurve SpeedOverDistance;
        public RisingWater() { }
        public static bool Available { get { return default(bool); } }
        private static RisingWater Instance { get { return default(RisingWater); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static UnityEngine.Vector2 Position { get { return default(UnityEngine.Vector2); } }
        private static void .cctor() { }
        public override void Awake() { }
        private void FixedUpdate() { }
        public new void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public static void SetProperties(float speed) { }
        public void Start() { }
    }
    public partial class RisingWaterTrigger : SaveSerialize
    {
        [NotNull]
        public ActionMethod Action;
        private bool m_active;
        public RisingWaterTrigger() { }
        private void FixedUpdate() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class Rock : UnityEngine.MonoBehaviour, IAttackable, IBashAttackable, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public bool Bashable;
        public bool ExplodeOnContact;
        public float Lifetime;
        private bool m_forceExplodeOnContact;
        private float m_lifeRemaining;
        private UnityEngine.Transform m_transform;
        public ActionSequence OnBashHighlightAction;
        public ActionMethod OnHitGround;
        public Rock() { }
        public int BashPriority { get { return default(int); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public void Awake() { }
        public bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        public void FixedUpdate() { }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public void OnBashDehighlight() { }
        public void OnBashHighlight() { }
        private void OnCollision() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnDestroy() { }
        public void OnEnterBash() { }
        public void Start() { }
    }
    public partial class RockExplodeZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<RockExplodeZone> All;
        private UnityEngine.Rect m_bounds;
        public RockExplodeZone() { }
        private static void .cctor() { }
        public void Awake() { }
        public bool IsInside(UnityEngine.Vector3 position) { return default(bool); }
        public static bool IsInsideAZone(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDestroy() { }
    }
    public partial class RocksGenerator : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public RocksGenerator.FloatMinMax GenerateFrequence;
        public RocksGenerator.Vector3MinMax InitialRotation;
        public float InitialTimeOffset;
        public RocksGenerator.Vector3MinMax LocalPosition;
        private float m_distanceToPlayer;
        private float m_nextGenerateTime;
        private float m_time;
        public float MinDistanceToPlayer;
        public System.Collections.Generic.List<UnityEngine.GameObject> ObjectsToGenerate;
        public UnityEngine.GameObject ObjectToGenerate;
        public SoundProvider OnSpawnSound;
        public RocksGenerator.Vector3MinMax Scale;
        public RocksGenerator.Vector3MinMax Velocity;
        public RocksGenerator() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        private void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnDrawGizmos() { }
        private void UpdateMaterial(UnityEngine.GameObject generateObject) { }
        public partial class FloatMinMax
        {
            public float Max;
            public float Min;
            public FloatMinMax() { }
        }
        public partial class Vector3MinMax
        {
            public UnityEngine.Vector3 Max;
            public UnityEngine.Vector3 Min;
            public Vector3MinMax() { }
        }
    }
    public partial class RockTreeSetup : SaveSerialize
    {
        public ActionMethod Action;
        public UnityEngine.Animation Animation;
        private bool m_hasTriggered;
        public UnityEngine.Vector3 m_rockHelperOffset;
        private float m_time;
        public PushPullBlock PushPullBlock;
        public float ReleaseRockTime;
        public UnityEngine.Transform RockHelper;
        public float TriggerSequenceTime;
        public RockTreeSetup() { }
        public void FixedUpdate() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class RollingMovement : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> <>f__am$cacheC;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> <>f__am$cacheD;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> <>f__am$cacheE;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public IsOnCollisionState Ground;
        public UnityEngine.Vector3 GroundNormal;
        public bool IsOnGround;
        private UnityEngine.Vector3 m_groundNormal;
        private UnityEngine.Rigidbody m_rigidbody;
        private System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> OnCollisionGroundEvent;
        private System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> OnCollisionWallLeftEvent;
        private System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> OnCollisionWallRightEvent;
        public UnityEngine.Vector3 Speed;
        public IsOnCollisionState WallLeft;
        public IsOnCollisionState WallRight;
        public RollingMovement() { }
        public float GroundAngle { get { return default(float); } }
        public UnityEngine.Vector3 GroundBinormal { get { return default(UnityEngine.Vector3); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float SpeedX { get { return default(float); } set { } }
        public float SpeedY { get { return default(float); } set { } }
        public event System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> OnCollisionGroundEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> OnCollisionWallLeftEvent { add { } remove { } }
        public event System.Action<UnityEngine.Vector3, float, UnityEngine.Collider> OnCollisionWallRightEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollisionGroundEvent>m__110(UnityEngine.Vector3 , float , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollisionWallLeftEvent>m__111(UnityEngine.Vector3 , float , UnityEngine.Collider ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollisionWallRightEvent>m__112(UnityEngine.Vector3 , float , UnityEngine.Collider ) { }
        public new void Awake() { }
        public void FixedUpdate() { }
        public UnityEngine.Vector2 GroundToWorld(UnityEngine.Vector2 local) { return default(UnityEngine.Vector2); }
        public void OnCollision(UnityEngine.Collision collision) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public UnityEngine.Vector2 WorldToGround(UnityEngine.Vector2 world) { return default(UnityEngine.Vector2); }
    }
    public partial class RollingRockParticlesController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.ParticleEmitter Emitter;
        private float m_emitterMax;
        private float m_emitterMin;
        private float m_emitterRate;
        private UnityEngine.Rigidbody m_rigidbody;
        private float m_startTime;
        public float MaxVelocity;
        public float MinVelocity;
        public UnityEngine.ParticleSystem ParticleSystem;
        public RollingRockParticlesController() { }
        public void FixedUpdate() { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void Start() { }
    }
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.LineRenderer))]
    public partial class Rope : SaveSerialize, ISuspendable
    {
        public bool FreeRotationAtTheStart;
        public bool IsManagedByPhysicsSystemManager;
        public float LinkDensity;
        public System.Collections.Generic.List<UnityEngine.Transform> Links;
        private bool m_isSuspended;
        private UnityEngine.LineRenderer m_lineRenderer;
        private Rope.LinkData[] m_linkData;
        public RopePhysicsSettings PhysicsSettings;
        public static UnityEngine.Color ROPE_END_LINK_COLOR;
        public static UnityEngine.Color ROPE_INTERMEDIATE_LINK_COLOR;
        public float RopeWidth;
        public Rope() { }
        public bool IsSuspended { get { return default(bool); } set { } }
        private static void .cctor() { }
        public override void Awake() { }
        public override void OnDestroy() { }
        public void ResetRopeToOriginalPosition() { }
        public void Resume() { }
        public override void Serialize(Archive ar) { }
        public void SetPhysicsSettingsForAllLinks() { }
        public void Start() { }
        public void Suspend() { }
        private void Update() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct LinkData
        {
            public UnityEngine.Vector3 AngularVelocity;
            public UnityEngine.Vector3 OriginalPosition;
            public UnityEngine.Vector3 Position;
            public UnityEngine.Rigidbody Rigidbody;
            public UnityEngine.Quaternion Rotation;
            public UnityEngine.Transform Transform;
            public UnityEngine.Vector3 Velocity;
        }
    }
    public partial class RopePhysicsSettings
    {
        public float AngularSpringDamping;
        public float AngularSpringStiffness;
        public float LengthSpringDamping;
        public float LengthSpringStiffness;
        public float LinkDrag;
        public float LinkMass;
        public int PhysicsIterationCount;
        public RopePhysicsSettings() { }
    }
    public partial class RopeVisualLogic : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Transform LeftAttachment;
        private float m_ropeOriginalScale;
        public UnityEngine.Transform RightAttachment;
        public UnityEngine.GameObject RopeGraphic;
        public RopeVisualLogic() { }
        private void Awake() { }
        private void FixedUpdate() { }
    }
    public partial class RotateToPlayerInput : UnityEngine.MonoBehaviour
    {
        public PlayerInput PlayerInput;
        public RotateToPlayerInput() { }
        public void Update() { }
    }
    [CategoryAttribute("Obsolete")]
    public partial class RotatingAction : ActionWithDuration
    {
        public float DurationOfRotation;
        private bool m_isPerforming;
        public UnityEngine.Transform[] transformsToRotate;
        public float xAxisRotationAngle;
        public float yAxisRotationAngle;
        public float zAxisRotationAngle;
        public RotatingAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        private void OniTweenComplete() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CustomShaderModifier("Rotation Animator")]
    [UberShaderCategoryAttribute((UberShaderCategory)(0))]
    [UberShaderOrderAttribute((UberShaderOrder)(9))]
    public partial class RotationAnimationModifier : UberShaderModifier, IAnimatedGraphic, IAnimationVertex
    {
        public UberShaderTexture Mask;
        [UberShaderVectorDisplay("Offset", "Unused")]
        public UberShaderVector Offset;
        public UberShaderCurve RotationCurve;
        public RotationAnimationModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetBaseVertexTextureNames() { return default(System.Collections.Generic.IEnumerable<string>); }
        public override void Randomize() { }
        public override void SetProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetBaseVertexTextureNames>c__Iterator24 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            public <GetBaseVertexTextureNames>c__Iterator24() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class RotationAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        private UnityEngine.Vector3 m_originalRotation;
        private UnityEngine.Transform m_transform;
        public RotationAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public UnityEngine.Vector3 OriginalRotation { get { return default(UnityEngine.Vector3); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class RunActionAndWait : ActionMethod, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [NotNull]
        public ActionMethod Action;
        private float m_remaingWaitTime;
        public float WaitingDuration;
        public RunActionAndWait() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        public override void Perform(IContext context) { }
    }
    public partial class RunActionCondition : ActionMethod
    {
        public ActionMethod Action;
        public Condition Condition;
        public ActionMethod ElseAction;
        private bool m_actionTriggered;
        private bool m_elseActionTriggered;
        public bool TriggerActionOnce;
        public bool TriggerElseActionOnce;
        public RunActionCondition() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Serialize(Archive ar) { }
    }
    public partial class RunActionOnce : ActionMethod
    {
        [NotNull]
        public ActionMethod Action;
        private bool m_hasRun;
        public RunActionOnce() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public override void Serialize(Archive ar) { }
    }
    public partial class RunLastSkillEarntAction : ActionMethod
    {
        public RunLastSkillEarntAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class RuntimeGameWorldArea
    {
        public GameWorldArea Area;
        public System.Collections.Generic.List<RuntimeWorldMapIcon> Icons;
        private float m_completionAmount;
        private bool m_dirtyCompletionAmount;
        private readonly System.Collections.Generic.Dictionary<int, WorldMapAreaState> m_worldAreaStates;
        public RuntimeGameWorldArea(GameWorldArea area) { }
        public bool AreaDiscovered { get { return default(bool); } }
        public float CompletionAmount { get { return default(float); } }
        public int CompletionPercentage { get { return default(int); } }
        private bool HasSenseAbility { get { return default(bool); } }
        public void DirtyCompletionAmount() { }
        public void DiscoverAllAreas() { }
        public bool FaceIsDiscoveredOrVisited(int id) { return default(bool); }
        public UnityEngine.Vector2 FindCenterPositionOnDiscoveredAreas() { return default(UnityEngine.Vector2); }
        public UnityEngine.Vector2 FindCenterPositionOnUndiscoveredAreas() { return default(UnityEngine.Vector2); }
        public WorldMapAreaState GetFaceState(int id) { return default(WorldMapAreaState); }
        private bool IconIsCompletionType(WorldMapIconType type) { return default(bool); }
        public void Initialize() { }
        public bool IsDiscovered(CageStructureTool.Face face) { return default(bool); }
        public bool IsDiscovered(UnityEngine.Vector3 worldPosition) { return default(bool); }
        public bool IsHidden(CageStructureTool.Face face) { return default(bool); }
        public bool IsHidden(UnityEngine.Vector3 worldPosition) { return default(bool); }
        public void Serialize(Archive ar) { }
        public void UpdateCompletionAmount() { }
        public void VisitAllAreas() { }
        public void VisitMapAreaAtPosition(UnityEngine.Vector3 worldPosition) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Serialize>c__AnonStorey6B
        {
            internal MoonGuid guid;
            public <Serialize>c__AnonStorey6B() { }
            internal bool <>m__14C(RuntimeWorldMapIcon a) { return default(bool); }
        }
    }
    public partial class RuntimeSceneMetaData
    {
        public bool DependantScene;
        public System.Collections.Generic.List<UnityEngine.Vector3> FPSTestPosition;
        public System.Collections.Generic.List<MoonGuid> IncludedScenes;
        public Condition LoadingCondition;
        private bool m_doneTotal;
        private UnityEngine.Rect m_totalRect;
        public const float MAX_PADDING_WIDTH_EXTENSION = 20f;
        public UnityEngine.Vector2 PlaceholderPosition;
        public string Scene;
        public System.Collections.Generic.List<UnityEngine.Rect> SceneBoundaries;
        public System.Collections.Generic.List<UnityEngine.Rect> SceneLoadingBoundaries;
        public MoonGuid SceneMoonGuid;
        public System.Collections.Generic.List<UnityEngine.Rect> ScenePaddingBoundaries;
        public System.Collections.Generic.List<float> ScenePaddingWideScreenExpansion;
        public RuntimeSceneMetaData(SceneMetaData sceneMetaData) { }
        public bool CanBeLoaded { get { return default(bool); } }
        public static float PaddingWidthExtension { get { return default(float); } }
        public UnityEngine.Rect SceneBounds { get { return default(UnityEngine.Rect); } }
        public UnityEngine.Rect ApplyWidthExtension(UnityEngine.Rect rect, float r=1) { return default(UnityEngine.Rect); }
        private void DoTotal() { }
        private UnityEngine.Rect Encapsulate(UnityEngine.Rect original, UnityEngine.Rect add) { return default(UnityEngine.Rect); }
        public bool IsInsideSceneBounds(UnityEngine.Rect rect) { return default(bool); }
        public bool IsInsideSceneBounds(UnityEngine.Vector3 position) { return default(bool); }
        public bool IsInsideSceneLoadingZone(UnityEngine.Rect rect) { return default(bool); }
        public bool IsInsideSceneLoadingZone(UnityEngine.Vector2 position) { return default(bool); }
        public bool IsInsideScenePaddingBounds(UnityEngine.Rect rect) { return default(bool); }
        public bool IsInsideScenePaddingBounds(UnityEngine.Rect rect, UnityEngine.Rect currentSceneBounds) { return default(bool); }
        public bool IsInsideScenePaddingBounds(UnityEngine.Vector3 position) { return default(bool); }
        public bool IsInsideScenePaddingBounds(UnityEngine.Vector3 position, UnityEngine.Rect currentSceneBounds) { return default(bool); }
        public bool IsInsideScenePaddingBoundsExpanded(UnityEngine.Rect rect) { return default(bool); }
        public bool IsInTotal(UnityEngine.Rect rect) { return default(bool); }
        public bool IsInTotal(UnityEngine.Vector3 position) { return default(bool); }
        public UnityEngine.Rect PositionToRect(UnityEngine.Vector2 position) { return default(UnityEngine.Rect); }
    }
    public partial class RuntimeWorldMapIcon
    {
        private RuntimeGameWorldArea Area;
        public MoonGuid Guid;
        public WorldMapIconType Icon;
        public bool IsSecret;
        private UnityEngine.GameObject m_iconGameObject;
        public UnityEngine.Vector2 Position;
        public RuntimeWorldMapIcon(GameWorldArea.WorldMapIcon icon, RuntimeGameWorldArea area) { }
        public void Hide() { }
        public bool IsVisible(AreaMapUI areaMap) { return default(bool); }
        public void SetIcon(WorldMapIconType icon) { }
        public void Show() { }
    }
    public partial class SafeToShowWispTextCondition : Condition
    {
        private int m_keepFalse;
        public SafeToShowWispTextCondition() { }
        public void FixedUpdate() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class SanityResult
    {
        private string m_details;
        private System.Func<UnityEngine.GameObject[], bool> m_fixFunction;
        private UnityEngine.GameObject m_gameObject;
        private bool m_passed;
        private string m_summary;
        public SanityResult(string summary, string details, bool passed, UnityEngine.GameObject gameObject, System.Func<UnityEngine.GameObject[], bool> fixFunction) { }
        public string Details { get { return default(string); } }
        public System.Func<UnityEngine.GameObject[], bool> FixFunction { get { return default(System.Func<UnityEngine.GameObject[], bool>); } }
        public UnityEngine.GameObject GameObject { get { return default(UnityEngine.GameObject); } }
        public bool Passed { get { return default(bool); } }
        public string Summary { get { return default(string); } }
    }
    public partial class SaveFileExistsCondition : Condition
    {
        public SaveFileExistsCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class SaveGameAction : ActionMethod
    {
        public SaveGameAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SaveGameController
    {
        private float m_startTime;
        public const int MAX_SAVES = 10;
        public SaveGameController() { }
        public int CurrentBackupIndex { get { return default(int); } }
        public string CurrentSaveFilePath { get { return default(string); } }
        public int CurrentSlotIndex { get { return default(int); } }
        public bool SaveFileExists { get { return default(bool); } }
        public bool SaveGameQueried { get { return default(bool); } }
        private bool SaveWasOneLifeAndKilled { get { return default(bool); } }
        public bool CanPerformLoad() { return default(bool); }
        public bool CanPerformSave() { return default(bool); }
        public string GetSaveFilePath(int slotIndex, int backupIndex=-1) { return default(string); }
        public bool LoadFromBytes(byte[] binary) { return default(bool); }
        public bool LoadFromFile(string filename) { return default(bool); }
        public bool LoadFromReader(System.IO.BinaryReader reader) { return default(bool); }
        public void OnFinishedLoading() { }
        public bool OnLoadComplete(byte[] buffer) { return default(bool); }
        public void OnSaveComplete() { }
        public bool PerformLoad() { return default(bool); }
        public bool PerformLoadWithoutCheckpointRestore() { return default(bool); }
        public void PerformSave() { }
        public void Refresh() { }
        public void RestoreCheckpoint() { }
        public void RestoreCheckpointPart1() { }
        public bool SaveExists(int slotIndex) { return default(bool); }
        public byte[] SaveToBytes() { return default(byte[]); }
        public void SaveToFile(string filename) { }
        public void SaveToWriter(System.IO.BinaryWriter writer) { }
    }
    public partial class SaveGameData
    {
        public static int CurrentSaveFileVersion;
        public const int DATA_VERSION = 1;
        private const string FILE_FORMAT_STRING = "SaveGameData";
        public readonly System.Collections.Generic.Dictionary<MoonGuid, SaveScene> PendingScenes;
        public readonly System.Collections.Generic.Dictionary<MoonGuid, SaveScene> Scenes;
        public SaveGameData() { }
        public SaveScene Master { get { return default(SaveScene); } }
        private static void .cctor() { }
        public void ApplyPendingScenes() { }
        public void ClearAllData() { }
        public void ClearPendingScenes() { }
        public SaveScene GetScene(MoonGuid sceneGuid) { return default(SaveScene); }
        public SaveScene InsertPendingScene(MoonGuid sceneGUID) { return default(SaveScene); }
        public SaveScene InsertScene(MoonGuid sceneGuid) { return default(SaveScene); }
        public bool LoadFromReader(System.IO.BinaryReader reader) { return default(bool); }
        public void SaveToWriter(System.IO.BinaryWriter writer) { }
        public bool SceneExists(MoonGuid sceneGUID) { return default(bool); }
    }
    public partial class SaveInTheDarkZone : UnityEngine.MonoBehaviour
    {
        public CageStructureTool CageStructureTool;
        public static SaveInTheDarkZone Instance;
        public SaveInTheDarkZone() { }
        public void Awake() { }
        public static bool IsInside(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDestroy() { }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct SaveObject
    {
        public Archive Data;
        public MoonGuid Id;
        public SaveObject(MoonGuid id) { throw new System.NotImplementedException(); }
    }
    public partial class SaveObjectList
    {
        private SaveSceneManager m_saveSceneManager;
        public System.Collections.Generic.List<SaveObject> SaveObjects;
        public SaveObjectList() { }
        public void Convert(SaveSerialize[] saveSerializes, SaveSceneManager saveSceneManager) { }
        public void Load() { }
        public void Save() { }
    }
    public partial class SavePedestal : SaveSerialize
    {
        public static System.Collections.Generic.List<SavePedestal> All;
        public MessageProvider CantTeleportMessage;
        public SavePedestal.State CurrentState;
        private bool m_hasBeenUsedBefore;
        private MessageBox m_hint;
        private SceneTeleporter m_sceneTeleporter;
        private UnityEngine.Transform m_transform;
        private bool m_used;
        public ActionMethod OnOpenedAction;
        public SoundProvider OnOriEnter;
        public SoundProvider OnOriExit;
        public SoundProvider OnSaveSecondTime;
        public float OriDuration;
        public ActionMethod OriEnterAction;
        public ActionMethod OriExitAction;
        public UnityEngine.Transform OriTarget;
        public float Radius;
        public MessageProvider SaveAndTeleportHintMessage;
        public TimelineSequence TeleportEffect;
        public SavePedestal() { }
        private bool CanTeleport { get { return default(bool); } }
        public float DistanceToSein { get { return default(float); } }
        public bool IsInside { get { return default(bool); } }
        public bool OriHasTargets { get { return default(bool); } }
        private static void .cctor() { }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void Highlight() { }
        public void MarkAsUsed() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator MoveSeinToCenterSmoothly() { return default(System.Collections.IEnumerator); }
        public void OnBeginTeleporting() { }
        public override void OnDestroy() { }
        public void OnFinishedTeleporting() { }
        private void SaveOnPedestal() { }
        public override void Serialize(Archive ar) { }
        private void TeleportOnPedestal() { }
        public void Unhighlight() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <MoveSeinToCenterSmoothly>c__Iterator3D : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal SavePedestal <>f__this;
            internal int <i>__1;
            internal PlatformMovement <seinPlatformMovement>__0;
            public <MoveSeinToCenterSmoothly>c__Iterator3D() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public enum State
        {
            Highlighted = 1,
            Normal = 0,
        }
    }
    public partial class SaveScene
    {
        public System.Collections.Generic.List<SaveObject> SaveObjects;
        public MoonGuid SceneGUID;
        public SaveScene() { }
    }
    public partial class SaveSceneManager : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<SaveSceneManager.SaveId> <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<SaveObject> <>f__am$cache6;
        private System.Collections.Generic.Dictionary<MoonGuid, Archive> m_saveCache;
        public static SaveSceneManager Master;
        private static readonly System.Collections.Generic.HashSet<ISerializable> s_saveSerializableHashSet;
        private static readonly System.Collections.Generic.List<SaveSerialize> s_saveSerializeList;
        public System.Collections.Generic.List<SaveSceneManager.SaveId> SaveData;
        public SaveSceneManager() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <ClearSaveSlotForOneLife>m__119(SaveObject a) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <UnregisterGameObject>m__116(SaveSceneManager.SaveId a) { return default(bool); }
        public void AddChildSaveSerializables() { }
        public void AddSaveObject(ISerializable saveSerialize, MoonGuid guid) { }
        public static void ClearSaveSlotForOneLife(SaveGameData data) { }
        public static SaveSceneManager FromTransform(UnityEngine.Transform transform) { return default(SaveSceneManager); }
        public ISerializable IdToSaveSerialize(MoonGuid id) { return default(ISerializable); }
        public void Load(SaveScene saveScene) { }
        public void Load(SaveScene saveScene, System.Collections.Generic.HashSet<SaveSerialize> objects) { }
        [UnityEngine.ContextMenu("Print info")]
        public void PrintInfo() { }
        public void RegisterGameObject(UnityEngine.GameObject go) { }
        public void ReleaseNullReferences() { }
        public static void RemoveSaveDataFromMaster(UnityEngine.GameObject go) { }
        public void Save(SaveScene saveScene) { }
        public void Save(SaveScene saveScene, ISerializable serializable) { }
        public bool SaveSerializeIsRegistered(ISerializable serializable) { return default(bool); }
        public MoonGuid SaveSerializeToId(ISerializable saveSerialize) { return default(MoonGuid); }
        public void SaveWithoutClearing(SaveScene saveScene) { }
        public void UnregisterGameObject(UnityEngine.GameObject go) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <AddSaveObject>c__AnonStorey5C
        {
            internal MoonGuid guid;
            public <AddSaveObject>c__AnonStorey5C() { }
            internal bool <>m__117(SaveSceneManager.SaveId a) { return default(bool); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RemoveSaveDataFromMaster>c__AnonStorey5D
        {
            internal MoonGuid moonGUID;
            public <RemoveSaveDataFromMaster>c__AnonStorey5D() { }
            internal bool <>m__118(SaveObject a) { return default(bool); }
        }
        public partial class SaveId
        {
            public MoonGuid Id;
            public UnityEngine.Object SaveObject;
            public SaveId() { }
            public ISerializable Save { get { return default(ISerializable); } set { } }
        }
    }
    public abstract partial class SaveSerialize : GuidOwner, ISceneManagerRegisterReciever, ISerializable
    {
        protected SaveSerialize() { }
        public virtual void Awake() { }
        public virtual void OnDestroy() { }
        public void RegisterToSaveSceneManager(SaveSceneManager saveSceneManager) { }
        public abstract void Serialize(Archive ar);
    }
    public partial class SaveSlotBackup
    {
        public int Count;
        public int Index;
        public bool IsLoaded;
        public const int MAX_BACKUPS = 5;
        public SaveSlotBackupInfo[] SaveSlotInfos;
        public SaveSlotBackup(int index) { }
        public int GetLargestOrderValue() { return default(int); }
        public int IndexOfOldestSaveSlotInfo() { return default(int); }
    }
    public partial class SaveSlotBackupInfo
    {
        public int Index;
        public SaveSlotInfo SaveSlotInfo;
        public SaveSlotBackupInfo(int slotIndex, SaveSlotInfo saveSlot) { }
        public int TotalSeconds { get { return default(int); } }
    }
    public partial class SaveSlotBackupsManager : UnityEngine.MonoBehaviour
    {
        private byte[] m_backupBytes;
        private string m_backupName;
        private readonly System.Collections.Generic.Stack<int[]> m_buffersToDelete;
        private bool m_createBackupPending;
        private int m_currentReadingSlot;
        private static SaveSlotBackupsManager m_instance;
        private float m_lastSaveTime;
        private System.Action m_onFinishedReaded;
        private readonly System.Collections.Generic.List<SaveSlotBackup> m_saveSlotBackups;
        public const float TIME_BETWEEN_SAVES = 60f;
        public SaveSlotBackupsManager() { }
        public void Awake() { }
        private string BackupName(int slot, int index) { return default(string); }
        private void ClearCache() { }
        private void CreateBackup(int slotIndex) { }
        public static void CreateCurrentBackup() { }
        public static void DeleteAllBackups(int slotIndex) { }
        private SaveSlotBackup FindByIndex(int index) { return default(SaveSlotBackup); }
        private bool IsBusyLoading() { return default(bool); }
        private void LookForBackup(int slotIndex, int backupIndex) { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void OnSaveGameCacheCleared() { }
        public static void RequestReadBackups(int slotIndex, System.Action onFinishedReading) { }
        public static void ResetBackupDelay() { }
        public void RestoreBackup(int slotIndex, int backupIndex) { }
        public static SaveSlotBackup SaveSlotBackupAtIndex(int index) { return default(SaveSlotBackup); }
        public void Update() { }
    }
    public partial class SaveSlotInfo
    {
        public string AreaName;
        private const int BACKWARDS_COMPATIBLE_VERSION = 10;
        public bool Completed;
        public bool CompletedWithEverything;
        public int Completion;
        public static int CurrentInfoVersion;
        public bool DebugOn;
        public DifficultyMode Difficulty;
        public int Energy;
        private const string FILE_FORMAT_STRING = "OriSave";
        public int Health;
        public int Hours;
        public MoonGuid Identifier;
        public bool IsTrialSave;
        public DifficultyMode LowestDifficulty;
        public int MaxEnergy;
        public int MaxHealth;
        public int Minutes;
        public int Order;
        public WorldProgression Progression;
        public int Seconds;
        public const int VERSION = 13;
        public bool WasKilled;
        public SaveSlotInfo() { }
        public SaveSlotInfo(SaveSlotInfo clone) { }
        public int TotalSeconds { get { return default(int); } }
        private static void .cctor() { }
        public void FillData() { }
        public bool LoadFromReader(System.IO.BinaryReader reader) { return default(bool); }
        public void SaveToWriter(System.IO.BinaryWriter writer) { }
    }
    public partial class SaveSlotsItemsUI : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<SaveSlotUI> Items;
        private float m_scroll;
        private float m_targetScroll;
        public SaveSlotUI SaveSlotCompletedUI;
        public SaveSlotUI SaveSlotUI;
        public UnityEngine.Transform Scroll;
        public float Spacing;
        public SaveSlotsItemsUI() { }
        public float TargetScroll { get { return default(float); } set { } }
        public void Awake() { }
        public void OnEnable() { }
        public void Refresh() { }
        public void RefreshItem(int index) { }
        public void SetScrollFromIndex(int index) { }
        public void UpdateScroll() { }
    }
    public partial class SaveSlotsManager : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<SaveSlotInfo, bool> <>f__am$cache4;
        public static SaveSlotsManager Instance;
        private int m_backupIndex;
        private int m_currentSlotIndex;
        public System.Collections.Generic.List<SaveSlotInfo> SaveSlots;
        public SaveSlotsManager() { }
        public bool AnySaveSlotsExist { get { return default(bool); } }
        public static int BackupIndex { get { return default(int); } set { } }
        public static SaveSlotInfo CurrentSaveSlot { get { return default(SaveSlotInfo); } }
        public static int CurrentSlotIndex { get { return default(int); } set { } }
        public static int SaveSlotCount { get { return default(int); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <get_AnySaveSlotsExist>m__11C(SaveSlotInfo slot) { return default(bool); }
        public void Awake() { }
        public static void CopySlot(int from, int to) { }
        public static void DeleteSlot(int index) { }
        public static SaveSlotInfo FindOrCreateSaveSlot(int slotIndex) { return default(SaveSlotInfo); }
        public static void PrepareSlots() { }
        public bool SaveSlotCompleted(int i) { return default(bool); }
        public static SaveSlotInfo SlotByIndex(int index) { return default(SaveSlotInfo); }
        public static bool SlotExists(int slotIndex) { return default(bool); }
    }
    public partial class SaveSlotsScreenshotManager : UnityEngine.MonoBehaviour
    {
        public static SaveSlotsScreenshotManager Instance;
        public System.Collections.Generic.List<SaveSlotsScreenshotManager.ScreenshotPair> Screenshots;
        public SaveSlotsScreenshotManager() { }
        public void Awake() { }
        public string FindAreaName(string areaName) { return default(string); }
        public UnityEngine.Texture FindScreenshot(string areaName) { return default(UnityEngine.Texture); }
        public void OnDestroy() { }
        public partial class ScreenshotPair
        {
            public GameWorldArea Area;
            public UnityEngine.Texture Texture;
            public ScreenshotPair() { }
        }
    }
    public partial class SaveSlotsUI : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public bool Active;
        public SoundProvider BeginCopySound;
        public SoundProvider BeginDeleteSound;
        public SoundProvider CancelCopySound;
        public SoundProvider CancelDeleteSound;
        public SoundProvider CancelDifficultyMenuSound;
        public MessageProvider CompletedGameMessageProvider;
        public SaveSlotUI CopyingFrom;
        public MessageBox CopyLegend;
        public MessageProvider CopyLegendMessageProvider;
        public SoundProvider CopySound;
        public int CurrentSlotIndex;
        public ConfirmOrCancel DeleteQuestion;
        public SoundProvider DeleteSound;
        public ActionMethod EmptySaveSlotPressedAction;
        public TransparencyAnimator FadeAnimator;
        public static SaveSlotsUI Instance;
        public SaveSlotsItemsUI ItemsUI;
        private UnityEngine.GameObject m_difficultyScreen;
        private bool m_isVisible;
        private ConfirmOrCancel m_prompt;
        public ActionMethod OnBackPressedAction;
        public SoundProvider OpenDifficultyMenuSound;
        public ConfirmOrCancel OverrideQuestion;
        public MessageProvider PasteLegendMessageProvider;
        public ActionMethod PressedNotReadyAction;
        public SoundProvider SelectSound;
        public ActionMethod UsedSaveSlotPressedAction;
        public SaveSlotsUI() { }
        public bool ClickedCurrentItem { get { return default(bool); } }
        public SaveSlotUI CurrentSaveSlot { get { return default(SaveSlotUI); } }
        public bool IsCopying { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsVisible { get { return default(bool); } }
        public System.Collections.Generic.List<SaveSlotUI> Items { get { return default(System.Collections.Generic.List<SaveSlotUI>); } }
        public bool PromptIsOpen { get { return default(bool); } }
        public SaveSlotUI SaveSlotUnderCursor { get { return default(SaveSlotUI); } }
        public bool SelectingDifficulty { get { return default(bool); } }
        public void AskPrompt(ConfirmOrCancel question, System.Action confirm, System.Action cancel) { }
        public void Awake() { }
        public void CancelCopying() { }
        public void CancelDifficultyScreen() { }
        private bool CanCopyOrDelete() { return default(bool); }
        public void ClampCurrentItemIndex() { }
        public void CopySaveSlots() { }
        public void CopySaveSlotsNoQuestion() { }
        public void DeleteSlot() { }
        public void EmptySaveSlotSelected() { }
        private void ExitCopyingState() { }
        public void FixedUpdate() { }
        public void HandleNavigation() { }
        public void OnDeleteSaveCancelled() { }
        public void OnDeleteSaveConfirmed() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnOverrideCopyCancelled() { }
        public void OnOverrideCopyConfirmed() { }
        public void OnOverrideNewGame() { }
        public void PressedSaveSlotNotReady() { }
        public void RefreshSlots() { }
        public void SetCurrentItem(SaveSlotUI saveSlot) { }
        public void SetCurrentItem(int index) { }
        public void SetCurrentItemAndScroll(int index) { }
        public void SetDifficulty(DifficultyMode difficulty) { }
        public void SetVisible(bool visible) { }
        public void SetVisibleImmediate(bool visible) { }
        public void UsedSaveSlotSelected() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <SetCurrentItem>c__AnonStorey5E
        {
            internal SaveSlotUI saveSlot;
            public <SetCurrentItem>c__AnonStorey5E() { }
            internal bool <>m__11D(SaveSlotUI a) { return default(bool); }
        }
    }
    public partial class SaveSlotUI : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<SaveSlotBackupInfo> <>f__am$cache2B;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<SaveSlotBackupInfo> <>f__am$cache2C;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public MessageBox AreaName;
        public BaseAnimator BackupsAnimator;
        public UnityEngine.GameObject BackupSaveSlotPrefab;
        public SoundProvider BackupsOpenSound;
        public SoundProvider BackupsSelectSound;
        public UnityEngine.Vector2 Center;
        public BaseAnimator CopyingAnimator;
        public UnityEngine.GameObject DeathGroup;
        public BaseAnimator DeletingAnimator;
        public MessageBox Difficulty;
        public UnityEngine.GameObject DifficultyEasy;
        public UnityEngine.GameObject DifficultyHard;
        public UnityEngine.GameObject DifficultyNormal;
        public UnityEngine.GameObject DifficultyOneLife;
        public UnityEngine.GameObject DifficultyScreen;
        public MessageProvider DifficultyTextMessageProvider;
        public MessageProvider EasyTextMessageProvider;
        public UnityEngine.GameObject EmptyGroup;
        public MessageBox EmptySlot;
        public TranslatedMessageProvider EmptySlotTextMessageProvider;
        public UnityEngine.Texture EmptyTexture;
        public MessageBox Energy;
        public UnityEngine.GameObject FullyCompletedGroup;
        public MessageProvider HardTextMessageProvider;
        public MessageBox Health;
        public BaseAnimator HighlightAnimator;
        public BaseAnimator HighlightAnimatorB;
        private int m_backupIndex;
        private readonly System.Collections.Generic.List<BackupSaveSlotUI> m_backupSaveSlots;
        private bool m_backupsNeedUpdating;
        private UnityEngine.Rect m_bounds;
        private bool m_hasPlayedBackupsOpenSound;
        private bool m_highlighted;
        public MessageProvider NormalTextMessageProvider;
        public MessageProvider OneLifeTestMessageProvider;
        public UnityEngine.Transform PromptPosition;
        public UnityEngine.GameObject SaveGroup;
        public int SaveSlotIndex;
        public UnityEngine.Renderer Screenshot;
        public UnityEngine.Renderer ScreenshotB;
        public UnityEngine.Vector2 Size;
        public MessageBox Time;
        public SaveSlotUI() { }
        public int BackupIndex { get { return default(int); } }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public bool CanBeCopied { get { return default(bool); } }
        public bool HasSave { get { return default(bool); } }
        public bool IsCompleted { get { return default(bool); } }
        public bool IsReady { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public SaveSlotInfo SaveSlot { get { return default(SaveSlotInfo); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <OnFinishedReadingBackups>m__11A(SaveSlotBackupInfo a) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <OnFinishedReadingBackups>m__11B(SaveSlotBackupInfo a, SaveSlotBackupInfo b) { return default(int); }
        public void Apply() { }
        public void Awake() { }
        public void ChangeSelectionIndex(int index) { }
        public void ClearBackupSaveSlots() { }
        private MessageDescriptor DifficultyModeToMessage(DifficultyMode difficulty) { return default(MessageDescriptor); }
        public void FixedUpdate() { }
        public void Highlight(bool turnOn) { }
        public void OnDestroy() { }
        public void OnDrawGizmos() { }
        public void OnEnable() { }
        public void OnFinishedReadingBackups() { }
        public void RefreshBackups() { }
        private void RefreshBackupsIfTheyNeedIt() { }
        public void SetCopying(bool turnOn) { }
        public void SetDeleting(bool turnOn) { }
        public void Start() { }
    }
    [CategoryAttribute("Obsolete")]
    public partial class ScaleAction : ActionWithDuration
    {
        public float DurationOfScaling;
        public float MoveValue;
        public UnityEngine.Transform[] transformsToRotate;
        public bool x;
        public bool y;
        public bool z;
        public ScaleAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Serialize(Archive ar) { }
        public new void Start() { }
        public override void Stop() { }
    }
    [CustomShaderModifier("Scale Animator")]
    [UberShaderCategoryAttribute((UberShaderCategory)(0))]
    [UberShaderOrderAttribute((UberShaderOrder)(10))]
    public partial class ScaleAnimationModifier : UberShaderModifier, IAnimatedGraphic
    {
        public UberShaderTexture Mask;
        public UberShaderCurve ScaleCurve;
        [UberShaderVectorDisplay("Pivot", "Scale")]
        public UberShaderVector ScalePivot;
        public ScaleAnimationModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void Randomize() { }
        public override void SetProperties() { }
    }
    public partial class ScaleAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        private UnityEngine.Vector3 m_originalScale;
        private UnityEngine.Renderer m_renderer;
        private UnityEngine.Transform m_transform;
        public ScaleAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public UnityEngine.Vector3 OriginalScale { get { return default(UnityEngine.Vector3); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class ScaleAxisAnimator : BaseAnimator
    {
        private UnityEngine.Vector3 m_originalScale;
        private UnityEngine.Transform m_transform;
        public bool UseX;
        public bool UseY;
        public UnityEngine.AnimationCurve X;
        public UnityEngine.AnimationCurve Y;
        public ScaleAxisAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public UnityEngine.Vector3 OriginalScale { get { return default(UnityEngine.Vector3); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class ScaleBasedOnFloatProvider : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Transform m_transform;
        public float ScalePerUnitX;
        public float ScalePerUnitY;
        public FloatValueProvider ScaleX;
        public FloatValueProvider ScaleY;
        public ScaleBasedOnFloatProvider() { }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    public partial class ScalePositionForAspectRatio : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Vector3 m_initialPosition;
        public ScalePositionForAspectRatio() { }
        private void ApplyAspect() { }
        public void OnAspectRatioChanged() { }
        public void OnDestroy() { }
        public void Start() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ScaleToTextBox : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Transform Background;
        public UnityEngine.Vector2 BottomRightPadding;
        public float MinHeight;
        public float MinWidth;
        public CatlikeCoding.TextBox.TextBox TextBox;
        public UnityEngine.Vector2 TopLeftPadding;
        public ScaleToTextBox() { }
        public void FixedUpdate() { }
        public void UpdateSize() { }
    }
    public partial class ScaleWidthForAspectRatio : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Vector3 m_initialScale;
        private bool m_registered;
        public ScaleWidthForAspectRatio() { }
        private void ApplyAspect() { }
        public void OnAspectRatioChanged() { }
        public void OnDestroy() { }
        public void Start() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SceneBoundary : TemporyBoundaryGizmo<SceneBoundary>
    {
        public SceneBoundary() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SceneBox : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Vector3 m_lastPosition;
        private UnityEngine.Vector3 m_lastScale;
        public System.Collections.Generic.List<UnityEngine.Transform> MatchSizes;
        public UnityEngine.Transform ScrollLockBottom;
        public UnityEngine.Transform ScrollLockLeft;
        public UnityEngine.Transform ScrollLockRight;
        public UnityEngine.Transform ScrollLockTop;
        public SceneBox() { }
    }
    public partial class SceneCollection : UnityEngine.ScriptableObject
    {
        public System.Collections.Generic.List<SceneMetaData> SceneMetaDatas;
        public SceneCollection() { }
        [UnityEngine.ContextMenu("Cleanup")]
        public void Cleanup() { }
        public SceneMetaData FindMetaData(string name) { return default(SceneMetaData); }
    }
    public partial class SceneDefaultSettingsHelper
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <TweenTime>k__BackingField;
        private SceneSettings m_fromSettings;
        private SceneSettings m_toSettings;
        private float m_tweenDuration;
        public SceneDefaultSettingsHelper(float duration) { }
        public SceneSettings FromSettings { get { return default(SceneSettings); } set { } }
        public bool HasFromSettings { get { return default(bool); } }
        public bool HasToSettings { get { return default(bool); } }
        public SceneSettings ToSettings { get { return default(SceneSettings); } set { } }
        public float TweenTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public void Advance(UnityEngine.Vector3 position, float timeDelta) { }
        private bool CalculateTweenValueBasedOnPaddingZone(UnityEngine.Vector3 position, out float value, out SceneRoot otherScene) { value = default(float); otherScene = default(SceneRoot); return default(bool); }
        private SceneRoot GetScene(UnityEngine.Vector3 position) { return default(SceneRoot); }
        private SceneRoot SceneRootFromPosition(UnityEngine.Vector3 position) { return default(SceneRoot); }
    }
    public partial class SceneFPSTest : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<SceneManagerScene, bool> <>f__am$cache27;
        private float CPUBSampleDuration;
        private float CPUSampleDuration;
        private int CurrentSampleIndex;
        public static int CurrentSceneMetaDataIndex;
        private SceneFPSTest.State CurrentState;
        private System.DateTime DateTime;
        public static bool DRAW_DEBUG_UI;
        private string EmptyTestSceneName;
        public const string FPS_TEST_INPUT_FILE_NAME = "CheckScenesFPS.txt";
        private FPSMonitor fpsMonitor;
        private FPSSampleData FPSSampleData;
        private FPSTestOutput FPSTestOutput;
        private FPTTestResult FPSTestResult;
        public static bool HACK_REVERSE_ISCUTSCENE;
        public static SceneFPSTest Instance;
        private UnityEngine.Texture2D m_backgroundTexture;
        private float m_currentStateTime;
        private JUnitReporter.Failure m_failure;
        private LogCallbackHandler m_logCallbackHandler;
        private WorldEvents m_mistyWoodsWorldEvents;
        private float m_sceneLoadingStartTime;
        private System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<UnityEngine.Vector3>> m_sceneSamplesCache;
        private float m_sceneUnladingStartTime;
        private JUnitReporter.TestSuite m_testSuite;
        private string m_workspace;
        public string OutputFilePath;
        public static bool OVERRIDE_MISTYWOODS_CONDITION;
        private float SampleDuration;
        private float SampleSwitchingGraceTime;
        private float SceneLoadingGraceTime;
        public static bool SHOULD_CREATE_MEMORY_REPORT;
        public static bool SHOULD_CREATE_SCREENSHOT;
        public static bool SHOULD_RUN_CPU_B_SAMPLE;
        public static bool SHOULD_RUN_CPU_SAMPLE;
        public static bool SHOULD_RUN_SAMPLE;
        public bool ShouldCreateMemoryReport;
        public bool ShouldCreateScreenshot;
        public bool ShouldRunCPUBSample;
        public bool ShouldRunCPUSample;
        public bool ShouldRunSample;
        public SceneFPSTest() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <HandleLastTestFinished>m__129(SceneManagerScene sceneManagerScene) { return default(bool); }
        private void AdvanceMetaDataIndexToNextGoodScene() { }
        private void ChangeState(SceneFPSTest.State state) { }
        private void FixedUpdate() { }
        private float GetAudioMBytes() { return default(float); }
        private UnityEngine.Texture2D GetBackgroundTexture() { return default(UnityEngine.Texture2D); }
        public static string GetInputFilePath() { return default(string); }
        private RuntimeSceneMetaData GetMetaData(int metaDataIndex) { return default(RuntimeSceneMetaData); }
        public static string GetSampleID(int metaDataIndex, int sampleIndex, string sceneName) { return default(string); }
        public static string GetSampleID(float xPosition, float yPosition, string sceneName) { return default(string); }
        private UnityEngine.Vector3 GetSamplePosition(int metaDataIndex, int sampleIndex) { return default(UnityEngine.Vector3); }
        private System.Collections.Generic.List<UnityEngine.Vector3> GetSceneSamples(int metaDataIndex) { return default(System.Collections.Generic.List<UnityEngine.Vector3>); }
        private float GetTexturesMBytes() { return default(float); }
        private void HandleLastTestFinished() { }
        private bool IsCutscene(string scene) { return default(bool); }
        private bool IsLastLevel(int metaDataIndex) { return default(bool); }
        private bool isLastSample(int sampleIndex) { return default(bool); }
        public static bool IsRunning() { return default(bool); }
        private void LoadEmptyLevel() { }
        private void LoadLevel(int metaDataIndex) { }
        private void MoveToSamplePosition(int metaDataIndex, int sampleIndex) { }
        public void OnSceneRootLoadEarlyStart(SceneRoot sceneRoot) { }
        private void OnWindowUi(int windowId) { }
        public static void ReadSettingsAndStartTest() { }
        private bool SceneHasSamples(int metaDataIndex) { return default(bool); }
        public static void SetupTheTest() { }
        private void Start() { }
        public enum State
        {
            Done = 16,
            EndCPUBSample = 12,
            EndCPUSample = 9,
            EndLoadScene = 3,
            EndTakeSample = 6,
            EndUnloadScene = 15,
            Idle = 0,
            SceneLoading = 2,
            StartCPUBSample = 10,
            StartCPUSample = 7,
            StartLoadScene = 1,
            StartTakeSample = 4,
            StartUnloadScene = 13,
            TakingCPUBSample = 11,
            TakingCPUSample = 8,
            TakingSample = 5,
            UnloadingScene = 14,
        }
    }
    public partial class SceneFrameworkPerformanceMonitor : UnityEngine.MonoBehaviour
    {
        private static SceneFrameworkPerformanceMonitor m_instance;
        private System.Collections.Generic.List<string> m_lines;
        private System.IO.StreamWriter m_streamWriter;
        public SceneFrameworkPerformanceMonitor() { }
        public static bool Enabled { get { return default(bool); } set { } }
        public static bool Ready { get { return default(bool); } }
        public static void AddSceneLoadItem(SceneManagerScene scene) { }
        public void Awake() { }
        public void CloseWriter() { }
        public static void DisableScene(SceneRoot scene) { }
        public static void EnableScene(SceneRoot scene) { }
        public void OnDestroy() { }
        public void PrintSoundEntry() { }
        public static void UnloadScene(SceneRoot scene) { }
        public void Update() { }
        public void Write(string message) { }
    }
    public partial class SceneLayers : UnityEngine.MonoBehaviour
    {
        public SceneLayers.Layer Background;
        public SceneLayers.Layer Center;
        public SceneLayers.Layer Foreground;
        public System.Collections.Generic.List<UnityEngine.Renderer> HiddenRenders;
        public SceneLayers.Layer[] Layers;
        private static SceneLayers m_current;
        public SceneLayers() { }
        public static SceneLayers Current { get { return default(SceneLayers); } }
        public static bool IsLocked(UnityEngine.GameObject go) { return default(bool); }
        public partial class Layer
        {
            public bool Locked;
            public string Name;
            public bool Visible;
            public Layer(string name) { }
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SceneLoadingZone : TemporyBoundaryGizmo<SceneLoadingZone>, IStrippable
    {
        public SceneLoadingZone() { }
        public bool DoStrip() { return default(bool); }
    }
    public partial class SceneManagerScene
    {
        public SceneManagerScene.State CurrentState;
        public bool HasStartBeenCalled;
        public bool KeepLoadedForCheckpoint;
        public float LoadingTime;
        public RuntimeSceneMetaData MetaData;
        public bool PreventUnloading;
        public SceneRoot SceneRoot;
        public float TimeOfLoad;
        public float UnloadTime;
        public SceneManagerScene(RuntimeSceneMetaData metaData) { }
        public SceneManagerScene(SceneRoot sceneRoot, RuntimeSceneMetaData sceneMetaData) { }
        public bool IsLoadingComplete { get { return default(bool); } }
        public bool IsTitleScreen { get { return default(bool); } }
        public bool IsVisible { get { return default(bool); } }
        public bool UnityIsLoading { get { return default(bool); } }
        public void ChangeState(SceneManagerScene.State state) { }
        public enum State
        {
            Disabled = 1,
            Disabling = 0,
            Loaded = 4,
            Loading = 2,
            LoadingCancelled = 3,
        }
    }
    public partial class SceneMetaData : UnityEngine.ScriptableObject
    {
        public System.Collections.Generic.List<SceneMetaData> ConnectedScenes;
        public bool DependantScene;
        public float EstimatedPlayDuration;
        public bool Exclude;
        public bool ExcludeIcons;
        public System.Collections.Generic.List<UnityEngine.Vector3> FPSTestPosition;
        public System.Collections.Generic.List<SceneMetaData.WorldMapIcon> Icons;
        public System.Collections.Generic.List<SceneMetaData> IncludedScenes;
        public SceneMetaData.SeinInitialValues InitialValues;
        public Condition LoadingCondition;
        public const string MetaDataFolderName = "metaData";
        public string Notes;
        public System.Collections.Generic.List<SceneMetaData.ReverseSceneLoadingZoneInfo> ReverseLoadingBoundaries;
        public UnityEngine.Vector3 RootPosition;
        public System.Collections.Generic.List<UnityEngine.Rect> SceneBoundaries;
        public System.Collections.Generic.List<UnityEngine.Rect> SceneLoadingBoundaries;
        public MoonGuid SceneMoonGuid;
        public System.Collections.Generic.List<UnityEngine.Rect> ScenePaddingBoundaries;
        public System.Collections.Generic.List<float> ScenePaddingWideScreenExpansion;
        public const string ScenesFolderName = "scenes";
        public SceneType SceneType;
        public System.Collections.Generic.List<ScreenshotIcon> ScreenshotIcons;
        public const string ScreenshotsFolderName = "screenshots";
        public UnityEngine.Vector3 SeinPlaceholderPosition;
        public bool ShouldRegenerateAllGUIDs;
        public System.Collections.Generic.List<SceneMetaData.Teleporter> Teleporters;
        public SceneMetaData() { }
        public bool CanBeLoaded { get { return default(bool); } }
        public UnityEngine.Rect SceneBounds { get { return default(UnityEngine.Rect); } }
        public string SceneGuid { get { return default(string); } set { } }
        public string SceneName { get { return default(string); } }
        public UnityEngine.Texture SceneTexture { get { return default(UnityEngine.Texture); } }
        public string SceneTexturePath { get { return default(string); } }
        public bool AnyPaddingBoundaryOverlaps(UnityEngine.Rect rect) { return default(bool); }
        public static void CopySceneMetaData(SceneMetaData from, SceneMetaData to) { }
        public bool IsInsideSceneBounds(UnityEngine.Rect rect) { return default(bool); }
        public bool IsInsideSceneBounds(UnityEngine.Vector3 position) { return default(bool); }
        public bool IsInsideSceneLoadingZone(UnityEngine.Rect rect) { return default(bool); }
        public bool IsInsideSceneLoadingZone(UnityEngine.Vector2 position) { return default(bool); }
        public bool IsInsideScenePaddingBounds(UnityEngine.Rect rect) { return default(bool); }
        public bool IsInsideScenePaddingBounds(UnityEngine.Vector3 position) { return default(bool); }
        public partial class ReverseSceneLoadingZoneInfo
        {
            public UnityEngine.Rect Rectangle;
            public SceneMetaData SceneToLoad;
            public ReverseSceneLoadingZoneInfo(ReverseSceneLoadingZone reverseSceneLoadingZone) { }
        }
        public partial class SeinAbilities
        {
            public bool AbilityMarkers;
            public bool Bash;
            public bool BashBuff;
            public bool ChargeFlame;
            public bool ChargeFlameBlast;
            public bool ChargeFlameBurn;
            public bool ChargeFlameEfficiency;
            public bool ChargeJump;
            public bool CinderFlame;
            public bool Climb;
            public bool Dash;
            public bool DoubleJump;
            public bool DoubleJumpUpgrade;
            public bool EnergyEfficiency;
            public bool EnergyMarkers;
            public bool Glide;
            public bool Grenade;
            public bool HealthEfficiency;
            public bool HealthMarkers;
            public bool Magnet;
            public bool MapMarkers;
            public bool QuickFlame;
            public bool RapidFlame;
            public bool Regroup;
            public bool Rekindle;
            public bool Sense;
            public bool SoulEfficiency;
            public bool SoulFlameEfficiency;
            public bool SparkFlame;
            public bool SpiritFlame;
            public bool SplitFlame;
            public bool Stomp;
            public bool StompUpgrade;
            public bool UltraDefense;
            public bool UltraMagnet;
            public bool UltraSoulFlame;
            public bool UltraSplitFlame;
            public bool UnlimitedAir;
            public bool WallJump;
            public SeinAbilities() { }
        }
        public partial class SeinInitialValues
        {
            public SceneMetaData.SeinAbilities Abilities;
            public int Energy;
            public int Hearts;
            public int Level;
            public SceneMetaData.SeinWorldState World;
            public SeinInitialValues() { }
            public void ApplyInitialValues() { }
        }
        public partial class SeinWorldState
        {
            public bool WaterCleansed;
            public bool WindReleased;
            public SeinWorldState() { }
        }
        public partial class Teleporter
        {
            public string Identifier;
            public UnityEngine.Vector3 SceneLocalPosition;
            public Teleporter(SceneTeleporter teleporter) { }
        }
        public partial class WorldMapIcon
        {
            public MoonGuid Guid;
            public WorldMapIconType Icon;
            public bool IsSecret;
            public UnityEngine.Vector2 Position;
            public WorldMapIcon(VisibleOnWorldMap visibleOnWorldMap) { }
        }
    }
    public partial class SceneNameDisplay : UnityEngine.MonoBehaviour
    {
        private UnityEngine.GUIText m_guiText;
        public SceneNameDisplay() { }
        public void FixedUpdate() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ScenePaddingBoundary : TemporyBoundaryGizmo<ScenePaddingBoundary>
    {
        public ScenePaddingBoundary() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SceneRoot : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<UnityEngine.Component> <>f__am$cache8;
        private UnityEngine.Vector3 m_previousPosition;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        public UnityEngine.Component[] m_sceneRootPreEnabledObservers;
        private SceneSettingsComponent m_sceneSettings;
        public SceneMetaData MetaData;
        public SaveSceneManager SaveSceneManager;
        public System.Collections.Generic.List<UnityEngine.Object> SceneResources;
        public SceneRootData SceneRootData;
        public static bool ShouldDrawWorldMapGizmos;
        public SceneRoot() { }
        public SceneSettingsComponent SceneSettings { get { return default(SceneSettingsComponent); } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <OnValidate>m__11E(UnityEngine.Component a) { return default(bool); }
        public void Awake() { }
        public void DisableScene() { }
        public void EarlyStart() { }
        public void EditorAwake() { }
        public void EnableScene() { }
        public static SceneRoot FindFromPosition(UnityEngine.Vector3 position) { return default(SceneRoot); }
        public static SceneRoot FindFromTransform(UnityEngine.Transform transform) { return default(SceneRoot); }
        public void LateStart() { }
        public void OnValidate() { }
        public void RegisterSceneRootEnabledAfterSerialize() { }
        public void Save() { }
        public void SaveAndUnload() { }
        public void Unload() { }
    }
    public partial class SceneRootData
    {
        public System.Collections.Generic.List<Door> Doors;
        public System.Collections.Generic.List<Portal> Portals;
        public SceneRootData() { }
    }
    public partial class SceneRootRecruiter : UnityEngine.MonoBehaviour
    {
        public SceneRoot SceneRoot;
        public SceneRootRecruiter() { }
        public void Awake() { }
    }
    public partial class SceneSanity : UnityEngine.Object
    {
        public SceneSanity() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SceneScreenshotManager : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.Dictionary<string, bool> Areas;
        public static System.Collections.Generic.List<string> AreaSceneFilter;
        public static bool FilterBuildSettingsScenes;
        public static bool FilterScenes;
        public static SceneScreenshotManager Instance;
        public static bool ShouldDesaturateScreenshots;
        private const string ShowScreenshotsString = "Screenshot.ShowScreenshots";
        public SceneScreenshotManager() { }
        private static void .cctor() { }
    }
    public partial class SceneSettings
    {
        public float BlurredBackgroundDepth;
        public CameraSettings CameraSettings;
        public SoundProvider DefaultAmbience;
        public UnityEngine.Vector3 DefaultCameraZoom;
        public SoundProvider DefaultMusic;
        public DepthOfFieldController DepthOfFieldController;
        public TurbulenceOverride TurbulenceSettings;
        public SceneSettings(SceneSettingsComponent sceneSettings) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SceneSettingsComponent : UnityEngine.MonoBehaviour
    {
        public float BlurredBackgroundDepth;
        public System.Collections.Generic.List<CameraSettingOverrides> CameraSettingOverrides;
        public CameraSettingsAsset CameraSettings;
        public SoundProvider DefaultAmbience;
        public UnityEngine.Vector3 DefaultCameraZoom;
        public MixerSnapshot DefaultMixerSnapshot;
        public SoundProvider DefaultMusic;
        public DepthOfFieldController DepthOfFieldController;
        private CameraSettings m_cameraSetting;
        [UnityEngine.SerializeField]
        private FogGradientController m_sceneFogSettings;
        private SceneSettings m_sceneSettings;
        private TurbulenceSettings m_turbulenceSettngs;
        public TurbulenceOverride TurbulenceSettings;
        public SceneSettingsComponent() { }
        public SceneSettings GetSettings { get { return default(SceneSettings); } }
        public bool HasFogSettings { get { return default(bool); } }
        public FogGradientController SceneFogSettings { get { return default(FogGradientController); } set { } }
        public void FixedUpdate() { }
        public CameraSettings GetCameraSettings() { return default(CameraSettings); }
        public void ResetSettings() { }
        public void UpdateSceneSettings() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SceneSettingsTransitionZone : UnityEngine.MonoBehaviour
    {
        public static AllContainer<SceneSettingsTransitionZone> All;
        private UnityEngine.Rect m_boundingRect;
        private SceneSettingsTransitionZone.Direction m_direction;
        private SceneSettings m_fromSettings;
        private SceneSettings m_toSettings;
        public SceneSettingsTransitionZone() { }
        public SceneSettings FromSettings { get { return default(SceneSettings); } }
        public bool IsReady { get { return default(bool); } }
        public SceneSettings ToSettings { get { return default(SceneSettings); } }
        private static void .cctor() { }
        public float CalculateTweenValue(UnityEngine.Vector2 postion) { return default(float); }
        public bool IsInside(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
        public void UpdateSettings() { }
        public enum Direction
        {
            TransitionDown = 3,
            TransitionLeft = 0,
            TransitionRight = 1,
            TransitionUp = 2,
        }
    }
    public partial class ScenesManager : SaveSerialize
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector2 <CurrentCameraTargetPosition>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector2 <CurrentCameraTargetPositionExtrapolated>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <HasReportedScenesLoading>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <PaddingWidthExtension>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <ScenesNotLoadedOnTime>k__BackingField;
        public System.Collections.Generic.List<SceneManagerScene> ActiveScenes;
        public bool AllowDestroying;
        public System.Collections.Generic.List<RuntimeSceneMetaData> AllScenes;
        public bool AutoLoadingUnloading;
        public bool CanLoadScenes;
        public DestroyManager DestroyManager;
        public MessageProvider FellOutOfWorldMessage;
        private System.Collections.Generic.List<string> m_backgroundsToLoad;
        private readonly System.Collections.Generic.List<UnityEngine.Vector3> m_cameraPositions;
        private readonly System.Collections.Generic.Dictionary<string, bool> m_canBeStreamed;
        private UnityEngine.AsyncOperation m_currentLoad;
        private readonly System.Collections.Generic.Dictionary<MoonGuid, RuntimeSceneMetaData> m_guidToRuntimeSceneMetaDatas;
        private int m_resourcesNeedUnloading;
        private System.Collections.Generic.HashSet<MoonGuid> m_scenes;
        private readonly System.Collections.Generic.HashSet<RuntimeSceneMetaData> m_scenesToDisable;
        private readonly System.Collections.Generic.HashSet<RuntimeSceneMetaData> m_scenesToEnable;
        private readonly System.Collections.Generic.HashSet<RuntimeSceneMetaData> m_scenesToInclude;
        private System.Collections.Generic.List<string> m_scenesToLoad;
        private float m_testDelayTime;
        public UnityEngine.LayerMask RaycastMask;
        public float UnloadDelay;
        public ScenesManager() { }
        public UnityEngine.Vector2 CurrentCameraTargetPosition { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector2); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public UnityEngine.Vector2 CurrentCameraTargetPositionExtrapolated { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector2); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public RuntimeSceneMetaData CurrentScene { get { return default(RuntimeSceneMetaData); } }
        public SceneManagerScene CurrentSceneManagerScene { get { return default(SceneManagerScene); } }
        public bool HasReportedScenesLoading { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsLoadingScenes { get { return default(bool); } }
        public float PaddingWidthExtension { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool ResourcesNeedUnloading { get { return default(bool); } }
        public bool ScenesNotLoadedOnTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        private string SceneToLoad { get { return default(string); } }
        private void AdditivelyLoadScene(RuntimeSceneMetaData sceneMetaData, bool async, bool keepPreloaded=false) { }
        public void AdditivelyLoadScenesAtPosition(UnityEngine.Vector3 position, bool async, bool loadingZones=true, bool keepPreloaded=false) { }
        public void AdditivelyLoadScenesInsideRect(UnityEngine.Rect rect, bool async, bool loadingZones=true, bool keepPreloaded=false) { }
        public void AllowUnloadingOnAllScenes() { }
        public void AllowUnloadingOnScenes(UnityEngine.Vector3 position) { }
        public bool AnyMissingScenesAtCurrentPosition() { return default(bool); }
        public override void Awake() { }
        private bool CancelScene(SceneManagerScene scene) { return default(bool); }
        private bool CanLevelBeLoaded(string sceneName) { return default(bool); }
        public void CheckForScenesFinishedLoading() { }
        public void ClearCameraPuppetPositions() { }
        public void ClearKeepLoadedForCheckpoint() { }
        private void DetectScenesNotLoadedInTime() { }
        public void DrawScenesManagerDebugData() { }
        private void EnableDisabledScene(SceneManagerScene scene) { }
        public void EnableDisabledScenesAtPosition(bool limitOnce=false) { }
        public SceneRoot FindLoadedSceneRootFromPosition(UnityEngine.Vector3 position) { return default(SceneRoot); }
        public RuntimeSceneMetaData FindRuntimeSceneMetaData(MoonGuid sceneGuid) { return default(RuntimeSceneMetaData); }
        public void FixedUpdate() { }
        public void ForceTestForOutOfWorld() { }
        private void GenerateGuidToRuntimeSceneMetaDataDictionary() { }
        public UnityEngine.Rect GetClampedRect(UnityEngine.Vector3 position) { return default(UnityEngine.Rect); }
        public SceneManagerScene GetFromCurrentScenes(RuntimeSceneMetaData sceneMetaData) { return default(SceneManagerScene); }
        public bool GetSceneBoundaryAtPosition(UnityEngine.Vector3 position, out UnityEngine.Rect bound) { bound = default(UnityEngine.Rect); return default(bool); }
        public RuntimeSceneMetaData GetSceneInformation(string sceneName) { return default(RuntimeSceneMetaData); }
        public SceneManagerScene GetSceneManagerScene(string sceneName) { return default(SceneManagerScene); }
        public bool IsInsideActiveSceneBoundary(UnityEngine.Vector3 position) { return default(bool); }
        public bool IsInsideASceneBoundary(UnityEngine.Vector3 position) { return default(bool); }
        public bool IsInsideAScenePaddingBoundary(UnityEngine.Vector3 position) { return default(bool); }
        public bool IsLoadingScene(UnityEngine.Vector3 position) { return default(bool); }
        private void LoadDependantScenes(RuntimeSceneMetaData sceneMetaData, bool async) { }
        public void MarkActiveScenesAsKeepLoaded() { }
        public void MarkLoadingScenesAsCancel() { }
        public void OnAspectRatioChanged() { }
        public void OnCreateCheckpoint() { }
        public override void OnDestroy() { }
        public void OnDisableSceneRoot(SceneRoot sceneRoot) { }
        public void OnFinishedStreamingInstall() { }
        public void OnGameReset() { }
        public void OnPassThroughScrollLock() { }
        public void OnSceneStartCompleted(SceneRoot sceneRoot) { }
        private string PopSceneToLoad() { return default(string); }
        public bool PositionInsideSceneStillLoading(UnityEngine.Vector3 position) { return default(bool); }
        public void PreloadScene(RuntimeSceneMetaData sceneMetaData) { }
        public void PreloadScene(SceneMetaData sceneMetaData) { }
        public void Register(SceneRoot sceneRoot) { }
        public void ReleaseUnusedResources() { }
        private void RemoveScene(SceneManagerScene scene) { }
        public void ReportScenesThatAreStillLoading() { }
        public bool SceneIsEnabled(MoonGuid sceneMoonGuid) { return default(bool); }
        public bool SceneIsEnabled(SceneMetaData sceneMetaData) { return default(bool); }
        public bool SceneIsLoaded(MoonGuid sceneGuid) { return default(bool); }
        public bool SceneVisibleAtPosition(UnityEngine.Vector3 position) { return default(bool); }
        public override void Serialize(Archive ar) { }
        public void SetTargetPositions(UnityEngine.Vector3 target) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator ShowFellOutOfWorldMessage() { return default(System.Collections.IEnumerator); }
        public void TestForFallOutOfWorld() { }
        public void UnloadAllScenes() { }
        public void UnloadDependantScenes() { }
        public bool UnloadScene(SceneManagerScene scene, bool keepInMemory, bool instant) { return default(bool); }
        public void UnloadScenesAtPosition(bool instant) { }
        public void Update() { }
        public void UpdateExtrapolatedPosition() { }
        private void UpdateLoadingScenes() { }
        private void UpdatePaddingWidthExtension() { }
        public void UpdatePosition() { }
        public void UpdateScenes() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <ShowFellOutOfWorldMessage>c__Iterator20 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal MessageBox <message>__0;
            public <ShowFellOutOfWorldMessage>c__Iterator20() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class ScenesToSkip
    {
        public static ScenesToSkip Instance;
        public System.Collections.Generic.List<string> Scenes;
        public ScenesToSkip() { }
        public ScenesToSkip(string inputFilePath) { }
        private static void .cctor() { }
        public void ParseInuptFile(string inputFilePath) { }
        public bool ShouldSkipScene(string scene) { return default(bool); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SceneTeleporter : UnityEngine.MonoBehaviour
    {
        public string Identifier;
        private string m_previousName;
        private UnityEngine.Vector3 m_previousPosition;
        public SceneTeleporter() { }
        public static void OnSceneSave() { }
        public void Update() { }
    }
    public enum SceneType
    {
        Challenge = 2,
        Mood = 3,
        Puzzle = 1,
        Unspecified = 0,
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ScreenPixelsPlacer : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Camera m_camera;
        private bool m_wasRefresh;
        public UnityEngine.Rect PixelSize;
        public bool Refresh;
        public ScreenPixelsPlacer() { }
        public UnityEngine.Camera Camera { get { return default(UnityEngine.Camera); } }
        [UnityEngine.ContextMenu("Set size to texture size")]
        public void ContextMenu() { }
        public void Update() { }
    }
    public partial class ScreenshotFor3dsmax : UnityEngine.MonoBehaviour
    {
        public bool ClearAlpha;
        public bool ForcePowerOfTwo;
        public float PixelsPerUnit;
        public string TexturePath;
        public ScreenshotFor3dsmax() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public void OnDrawGizmos() { }
    }
    public partial class ScreenshotIcon
    {
        public ScreenshotIcon.IconType Icon;
        public UnityEngine.Vector2 Position;
        public ScreenshotIcon(ScreenshotIcon.IconType icon, UnityEngine.Vector2 position) { }
        public enum IconType
        {
            AbilityPoint = 2,
            AbilityTree = 20,
            ChargeFlameWall = 14,
            EnergyGateFour = 16,
            EnergyGateTwo = 15,
            EnergyPlantLarge = 5,
            EnergyPlantMedium = 4,
            EnergyPlantSmall = 3,
            EnergyVessel = 1,
            ExpOrbLarge = 10,
            ExpOrbMedium = 9,
            ExpOrbSmall = 8,
            HealthVessel = 0,
            Keystone = 11,
            KeystoneDoorFour = 19,
            KeystoneDoorTwo = 18,
            LootPlant = 6,
            Mapstone = 12,
            MapstonePickup = 13,
            PetrifiedPlant = 7,
            SavePedestal = 21,
            StompableFloor = 17,
        }
    }
    public partial class ScrollFader : Fader
    {
        public ScrollFader() { }
    }
    public partial class SeekerSlugShootingState : SlugState
    {
        private readonly SlugDirectionalAnimationPicker m_animation;
        private float m_delayBetweenShots;
        private float m_numberOfShots;
        private readonly SoundSource m_shootingSound;
        private int m_shotCount;
        private readonly UnityEngine.GameObject m_spikePrefab;
        private float m_timeSinceLastShot;
        public SeekerSlugShootingState(SlugEnemy slug, SlugDirectionalAnimation animation, UnityEngine.GameObject spikePrefab, SoundSource shootingSound) : base (default(SlugEnemy)) { }
        public override void OnEnter() { }
        public void SetSettings(float projectileSpeed, float numberOfShots, float delayBetweenShots) { }
        public void Shoot() { }
        public override void UpdateState() { }
    }
    public partial class SeeSeinHorizontalyTrigger : UnityEngine.MonoBehaviour
    {
        public float DelayUntilNextTrigger;
        public float DistanceSmoothFactor;
        public string EndTriggerName;
        private bool m_eventTriggered;
        private UnityEngine.Transform m_playerTransform;
        private float m_time;
        public string OnStayName;
        private float timer;
        public float TriggerDistance;
        public string TriggerName;
        public bool TriggerOnEventEnd;
        public SeeSeinHorizontalyTrigger() { }
        private void FixedUpdate() { }
        private void Start() { }
    }
    public partial class SeeSeinTrigger : UnityEngine.MonoBehaviour
    {
        public float DelayUntilNextTrigger;
        public float DistanceSmoothFactor;
        public UnityEngine.LayerMask LayerMask;
        private bool m_canSeeSein;
        private bool m_eventTriggered;
        private int m_frame;
        private UnityEngine.Ray m_lastRay;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Component[] m_recievers;
        private float m_time;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Vector2 RayStartOffset;
        public float TriggerDistance;
        public SeeSeinTrigger() { }
        public void Awake() { }
        public void FixedUpdate() { }
        [UberBuildMethod]
        private void ProvideComponents() { }
        public bool Raycast(UnityEngine.Vector3 origin, UnityEngine.Vector3 target, int index=0) { return default(bool); }
        public void Start() { }
    }
    public partial class SeinAbilities
    {
        public SeinBashAttack Bash;
        public SeinCarry Carry;
        public SeinChargeFlameAbility ChargeFlame;
        public SeinChargeJump ChargeJump;
        public SeinChargeJumpCharging ChargeJumpCharging;
        public SeinCrouch Crouch;
        public SeinDashAttack Dash;
        public SeinDoubleJump DoubleJump;
        public SeinEdgeClamber EdgeClamber;
        public SeinFall Fall;
        public SeinFootsteps Footsteps;
        public SeinGlide Glide;
        public SeinGrabBlock GrabBlock;
        public SeinGrabWall GrabWall;
        public SeinGrenadeAttack Grenade;
        public SeinIceSpiritFlame IceSpiritFlame;
        public SeinIdle Idle;
        public SeinInvincibility Invincibility;
        public SeinJump Jump;
        public SeinLever Lever;
        public SeinLookUp LookUp;
        public SeinPushAgainstWall PushAgainstWall;
        public SeinRun Run;
        public SeinSpiritFlameAbility SpiritFlame;
        public SeinSpiritFlameTargetting SpiritFlameTargetting;
        public SeinStandardSpiritFlameAbility StandardSpiritFlame;
        public SeinStandingOnEdge StandingOnEdge;
        public SeinStomp Stomp;
        public SeinSwimming Swimming;
        public SeinWallChargeJump WallChargeJump;
        public SeinWallJump WallJump;
        public SeinWallSlide WallSlide;
        public SeinAbilities() { }
    }
    public partial class SeinAbilityCondition : Condition
    {
        public AbilityType Ability;
        public SeinAbilityCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class SeinAbilityRestrictZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<SeinAbilityRestrictZone> All;
        private UnityEngine.Rect m_bounds;
        private bool m_inside;
        public SeinAbilityRestrictZoneMode RestrictMode;
        public SeinAbilityRestrictZone() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        private static void .cctor() { }
        public void Awake() { }
        public static bool IsInside(SeinAbilityRestrictZoneMode restrictMode=(SeinAbilityRestrictZoneMode)(0)) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public enum SeinAbilityRestrictZoneMode
    {
        AllAbilities = 0,
        Dash = 1,
    }
    public static partial class SeinAnimationLayers
    {
        public const int BashAnimationLayer = 10;
        public const int CarryFallAnimationLayer = 151;
        public const int CarryJumpAnimationLayer = 153;
        public const int CarryRunAnimationLayer = 152;
        public const int CharacterCrouchAnimationLayer = 40;
        public const int ChargeJumpAnimationLayer = 10;
        public const int CutsceneAnimationLayer = 210;
        public const int DoubleJumpAnimationLayer = 10;
        public const int EdgeClimbAnimationLayer = 26;
        public const int FallAnimationLayer = 0;
        public const int FallSwimAnimationLayer = 9;
        public const int GlideAnimationLayer = 110;
        public const int GrabBlockAnimationLayer = 120;
        public const int GrabCeilingAnimationLayer = 120;
        public const int GrabCeilingCrouchAnimationLayer = 130;
        public const int GrabWallAnimationLayer = 25;
        public const int HurtingAnimationLayer = 140;
        public const int JogAnimationLayer = 8;
        public const int JumpAnimationLayer = 10;
        public const int JumpSwimAnimationLayer = 10;
        public const int LookAnimationLayer = 9;
        public const int PushAgainstWallAnimationLayer = 27;
        public const int RollAnimationLayer = 45;
        public const int RunAnimationLayer = 8;
        public const int StandingOnEdgeAnimationLayer = 9;
        public const int StompAnimationLayer = 111;
        public const int TriggeredAnimationLayer = 200;
        public const int WallJumpAnimationLayer = 10;
        public const int WallSlideAnimationLayer = 23;
        public const int WallSlideJumpAnimationLayer = 24;
        public const int WindAnimationLayer = 154;
    }
    public partial class SeinAnimationSpeedSettings
    {
        public UnityEngine.AnimationCurve JogAnimationSpeed;
        public UnityEngine.AnimationCurve RunAnimationSpeed;
        public UnityEngine.AnimationCurve WalkAnimationSpeed;
        public SeinAnimationSpeedSettings() { }
    }
    public partial class SeinAttack
    {
        public SeinBashAttack Bash;
        public SeinSpiritFlameAbility SpiritFlame;
        public SeinAttack() { }
    }
    public partial class SeinBashAttack : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector2> <>f__am$cache2F;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache30;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<EntityTargetting> <>f__am$cache31;
        public TextureAnimationWithTransitions BackFlipAnimation;
        public float BackFlipSpeed;
        public UnityEngine.GameObject BashAttackGamePrefab;
        public SeinBashAttack.DirectionalAnimationSet BashChargeAnimationSet;
        public SoundProvider BashEndSound;
        public UnityEngine.GameObject BashFromFx;
        public SeinBashAttack.DirectionalAnimationSet BashJumpAnimationSet;
        public SoundProvider BashLoopSound;
        public UnityEngine.GameObject BashOffFx;
        public UnityEngine.GameObject BashReleaseEffect;
        public SoundProvider BashStartSound;
        public float BashVelocity;
        public float Damage;
        public float DelayTillNextBash;
        public UnityEngine.AnimationCurve FrictionCurve;
        public float FrictionDuration;
        public bool IsBashing;
        private float m_bashAngle;
        private BashAttackGame m_bashAttackGame;
        private readonly System.Collections.Generic.HashSet<ISuspendable> m_bashSuspendables;
        private float m_bashThroughEnemiesRemainingTime;
        private UnityEngine.Vector3 m_directionToTarget;
        private System.Collections.Generic.HashSet<IAttackable> m_enemiesBashedThrough;
        private float m_frictionTimeRemaining;
        private bool m_hasStarted;
        private IBashAttackable m_lastTarget;
        private UnityEngine.Vector3 m_playerTargetPosition;
        private UnityEngine.Transform m_seinTransform;
        private bool m_spriteMirrorLock;
        private float m_timeRemainingOfBashButtonPress;
        private float m_timeRemainingTillNextBash;
        public float NoAirDecelerationDuration;
        public UnityEngine.GameObject NoBashTargetEffect;
        private static System.Action<UnityEngine.Vector2> OnBashAttackEvent;
        private static System.Action OnBashBegin;
        private static System.Action<EntityTargetting> OnBashEnemy;
        public float Range;
        public SeinCharacter Sein;
        public SoundProvider StationaryBashSound;
        public SeinBashAttack.DirectionalAnimationSet SwimBashChargeAnimationSet;
        public SeinBashAttack.DirectionalAnimationSet SwimBashJumpAnimationSet;
        public IBashAttackable Target;
        public SoundProvider UpgradedBashEndSound;
        public SoundProvider UpgradedBashLoopSound;
        public SoundProvider UpgradedBashStartSound;
        public float UpgradedDamage;
        public SoundProvider UpgradedStationaryBashSound;
        public SeinBashAttack() { }
        public CharacterAirNoDeceleration AirNoDeceleration { get { return default(CharacterAirNoDeceleration); } }
        public CharacterApplyFrictionToSpeed ApplyFrictionToSpeed { get { return default(CharacterApplyFrictionToSpeed); } }
        public TextureAnimationWithTransitions BashChargeAnimation { get { return default(TextureAnimationWithTransitions); } }
        public TextureAnimationWithTransitions BashJumpAnimation { get { return default(TextureAnimationWithTransitions); } }
        public bool CanBash { get { return default(bool); } }
        public CharacterLeftRightMovement CharacterLeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public SeinDoubleJump DoubleJump { get { return default(SeinDoubleJump); } }
        public CharacterGravity Gravity { get { return default(CharacterGravity); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public PlayerAbilities PlayerAbilities { get { return default(PlayerAbilities); } }
        public SeinController SeinController { get { return default(SeinController); } }
        public bool SpriteMirrorLock { get { return default(bool); } set { } }
        public UnityEngine.Component TargetAsComponent { get { return default(UnityEngine.Component); } }
        public static event System.Action<UnityEngine.Vector2> OnBashAttackEvent { add { } remove { } }
        public static event System.Action OnBashBegin { add { } remove { } }
        public static event System.Action<EntityTargetting> OnBashEnemy { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnBashAttackEvent>m__3A(UnityEngine.Vector2 ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnBashBegin>m__3B() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnBashEnemy>m__3C(EntityTargetting ) { }
        public void AttackTarget() { }
        public void BashFailed() { }
        public void BashGameComplete(float angle) { }
        public void BeginBash() { }
        private void BeginBashThroughEnemies() { }
        public void ExitBash() { }
        private IBashAttackable FindClosestAttackHandler() { return default(IBashAttackable); }
        private void FinishBashThroughEnemies() { }
        private void HandleBashAngle() { }
        private void HandleFindingTarget() { }
        public void HandleMovingTowardsBashTarget() { }
        public void JumpOffTarget(float angle) { }
        public void ModifyGravityPlatformMovementSettings(GravityPlatformMovementSettings settings) { }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public void MovePlayerToTargetAndCreateEffect() { }
        private void OnAnimationEnd() { }
        public void OnAnimationStart() { }
        public new void OnDestroy() { }
        public void OnDisable() { }
        public void OnRestoreCheckpoint() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        private bool ShouldBashChargeAnimationKeepPlaying() { return default(bool); }
        private bool ShouldBashJumpAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public void UpdateBashingState() { }
        public void UpdateBashThroughEnemies() { }
        public override void UpdateCharacterState() { }
        public void UpdateNormalState() { }
        private void UpdateTargetHighlight(IBashAttackable target) { }
        public partial class DirectionalAnimationSet
        {
            public TextureAnimationWithTransitions Down;
            public TextureAnimationWithTransitions DownDiagonal;
            public TextureAnimationWithTransitions Horizontal;
            public TextureAnimationWithTransitions Up;
            public TextureAnimationWithTransitions UpDiagonal;
            public DirectionalAnimationSet() { }
        }
    }
    public partial class SeinBreathRemainingValueProvider : FloatValueProvider
    {
        public SeinBreathRemainingValueProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinCarry : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <LockDroppingObject>k__BackingField;
        public HorizontalPlatformMovementSettings.SpeedMultiplierSet AirMultiplier;
        public SeinCarry.CarryAnimations Animations;
        public float CarryRange;
        public SurfaceToSoundProviderMap FootstepsSoundProvider;
        public HorizontalPlatformMovementSettings.SpeedMultiplierSet GroundMultiplier;
        public fsm.StateMachine Logic;
        private UnityEngine.Transform m_crossHair;
        private ICarryable m_currentCarryable;
        private bool m_lockPlayer;
        private float m_nextWalkTime;
        private float m_pressedXTime;
        public Varying2DSoundProvider OnPickupSoundProvider;
        public SeinCharacter Sein;
        public SeinCarry.States State;
        public float WalkSoundsPerSecond;
        public SeinCarry() { }
        public ICarryable CurrentCarryable { get { return default(ICarryable); } }
        public bool IsCarrying { get { return default(bool); } }
        public bool IsPickingUp { get { return default(bool); } }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public bool LockDroppingObject { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        private bool ShouldFallIdleAnimationPlay { get { return default(bool); } }
        private bool ShouldFallMovingAnimationPlay { get { return default(bool); } }
        private bool ShouldRunIdleAnimationPlay { get { return default(bool); } }
        private bool ShouldRunMovingAnimationPlay { get { return default(bool); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public override void Awake() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator DelayedPickupSound() { return default(System.Collections.IEnumerator); }
        private void EnterInactiveState() { }
        private void HandleFootsteps() { }
        public override void OnDestroy() { }
        public void OnDrop() { }
        private void OnDropAnimationFinished() { }
        private void OnJump(float strength) { }
        private void OnModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public void OnPickup(ICarryable carryable) { }
        private void OnPickupAnimationFinished() { }
        public void OnRestoreCheckpoint() { }
        public void OnSetToCarryMode(ICarryable carryable) { }
        public void OnSetToDropMode() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        private bool ShouldFallIdleAnimationKeepPlaying() { return default(bool); }
        private bool ShouldFallMovingAnimationKeepPlaying() { return default(bool); }
        private bool ShouldJumpIdleAnimationKeepPlaying() { return default(bool); }
        private bool ShouldJumpMovingAnimationKeepPlaying() { return default(bool); }
        private bool ShouldRunIdleAnimationKeepPlaying() { return default(bool); }
        private bool ShouldRunMovingAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        private void UpdateAnimations() { }
        private void UpdateCarryState() { }
        public override void UpdateCharacterState() { }
        private void UpdateInactiveState() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <DelayedPickupSound>c__Iterator11 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal SeinCarry <>f__this;
            public <DelayedPickupSound>c__Iterator11() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public partial class CarryAnimations
        {
            public TextureAnimationWithTransitions DropAnimation;
            public TextureAnimationWithTransitions FallIdleAnimation;
            public TextureAnimationWithTransitions FallMovingAnimation;
            public TextureAnimationWithTransitions JumpIdleAnimation;
            public TextureAnimationWithTransitions JumpMovingAnimation;
            public TextureAnimationWithTransitions PickupAnimation;
            public TextureAnimationWithTransitions RunIdleAnimation;
            public TextureAnimationWithTransitions RunMovingAnimation;
            public CarryAnimations() { }
        }
        public partial class States
        {
            public fsm.IState Carry;
            public fsm.IState Dropping;
            public fsm.IState Inactive;
            public fsm.IState Pickup;
            public States() { }
        }
    }
    public partial class SeinCharacter : UnityEngine.MonoBehaviour, ICharacter
    {
        public SeinAbilities Abilities;
        public CloneOfSeinForPortals CloneOfSeinForPortals;
        public SeinController Controller;
        public SeinCutsceneBlocked CutsceneBlocked;
        public SeinCutsceneMovement CutsceneMovement;
        public SeinDoorHandler DoorHandler;
        public SeinEnergy Energy;
        public SeinEnvironmentForceController ForceController;
        public SeinInput Input;
        public SeinInventory Inventory;
        public SeinLevel Level;
        public SeinMortality Mortality;
        public SeinPickupProcessor PickupHandler;
        public PlatformBehaviour PlatformBehaviour;
        public PlayerAbilities PlayerAbilities;
        public SeinPrefabFactory Prefabs;
        public SeinSoulFlame SoulFlame;
        public SeinCharacter() { }
        public bool Active { get { return default(bool); } set { } }
        public CharacterAnimationSystem Animation { get { return default(CharacterAnimationSystem); } }
        public bool FaceLeft { get { return default(bool); } set { } }
        public UnityEngine.GameObject GameObject { get { return default(UnityEngine.GameObject); } }
        public bool IsOnGround { get { return default(bool); } }
        public bool IsSuspended { get { return default(bool); } }
        public UnityEngine.Vector2 PhysicsSpeed { get { return default(UnityEngine.Vector2); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Vector3 Speed { get { return default(UnityEngine.Vector3); } set { } }
        public UnityEngine.Transform Transform { get { return default(UnityEngine.Transform); } }
        public void Activate(bool active) { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void MakeBelongToSein(UnityEngine.GameObject go) { }
        public void OnDestroy() { }
        public void PlaceOnGround() { }
        public void ResetAirLimits() { }
    }
    public partial class SeinChargeFlameAbility : CharacterState, ISeinReceiver
    {
        public SeinChargeFlameAbility.ChargeFlameDefinitions ChargeFlameSettings;
        public SoundSource ChargingSoundLevelA;
        public SoundSource ChargingSoundLevelB;
        public SoundSource ChargingSoundLevelC;
        public float EnergyCost;
        public AchievementAsset KillEnemiesSimultaneouslyAchievement;
        private fsm.StateMachine Logic;
        private UnityEngine.GameObject m_chargeFlameChargeEffect;
        private SeinCharacter m_sein;
        public SoundProvider NotEnoughEnergySound;
        private static readonly System.Collections.Generic.List<LegacyAnimator> s_legacyAnimatorList;
        public SeinChargeFlameAbility.States State;
        public SeinChargeFlameAbility() { }
        public float ChargeDuration { get { return default(float); } }
        public Core.Input.InputButtonProcessor ChargeFlameButton { get { return default(Core.Input.InputButtonProcessor); } }
        public bool HasEnoughEnergy { get { return default(bool); } }
        public bool IsCharging { get { return default(bool); } }
        private static void .cctor() { }
        public override void Awake() { }
        private SoundSource CurrentChargingSound() { return default(SoundSource); }
        public void OnEnterStartState() { }
        public override void OnExit() { }
        public void OnRestoreCheckpoint() { }
        public void ReleaseChargeBurst() { }
        public void RestoreEnergy() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void SpendEnergy() { }
        public override void UpdateCharacterState() { }
        public void UpdateChargedState() { }
        public void UpdateChargingState() { }
        public void UpdatePrechargingState() { }
        public void UpdateStartState() { }
        public partial class ChargeFlameDefinitions
        {
            public float ChargeDuration;
            public UnityEngine.GameObject ChargeFlameBurstA;
            public UnityEngine.GameObject ChargeFlameBurstB;
            public UnityEngine.GameObject ChargeFlameBurstC;
            public UnityEngine.GameObject ChargeFlameChargeEffectPrefab;
            public ChargeFlameDefinitions() { }
        }
        public partial class States
        {
            public fsm.State Charged;
            public fsm.State Charging;
            public fsm.State Precharging;
            public fsm.State Start;
            public States() { }
        }
    }
    public partial class SeinChargeJump : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<float> <>f__am$cacheE;
        public float ChargedJumpStrength;
        public float ChargingTime;
        public SeinChargeJump.State CurrentState;
        public int Damage;
        public float Deceleration;
        public UnityEngine.GameObject ExplosionEffect;
        public TextureAnimationWithTransitions JumpAnimation;
        public float JumpDuration;
        public SoundProvider JumpSound;
        private System.Collections.Generic.HashSet<IAttackable> m_attackablesIgnore;
        private float m_stateCurrentTime;
        private int m_superJumpedEnemies;
        private System.Action<float> OnJumpEvent;
        public SeinCharacter Sein;
        public SeinChargeJump() { }
        public bool CanChargeJump { get { return default(bool); } }
        public SeinChargeJump ChargeJump { get { return default(SeinChargeJump); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public PlayerAbilities PlayerAbilities { get { return default(PlayerAbilities); } }
        public CharacterUpwardsDeceleration UpwardsDeceleration { get { return default(CharacterUpwardsDeceleration); } }
        public event System.Action<float> OnJumpEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnJumpEvent>m__3D(float ) { }
        public void ChangeState(SeinChargeJump.State state) { }
        public void OnDoubleJump() { }
        public void PerformChargeJump() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldChargeJumpAnimationKeepPlaying() { return default(bool); }
        public override void UpdateCharacterState() { }
        public void UpdateState() { }
        public enum State
        {
            Jumping = 1,
            Normal = 0,
        }
    }
    public partial class SeinChargeJumpCharging : CharacterState, ISeinReceiver
    {
        public UnityEngine.GameObject ChargedEffectToSpawn;
        public SoundSource ChargedSound;
        public UnityEngine.GameObject ChargeJumpCompleteEffectToSpawn;
        public SoundProvider ChargeSound;
        public UnityEngine.GameObject ChargingEffectToSpawn;
        public float ChargingTime;
        public SeinChargeJumpCharging.State CurrentState;
        private UnityEngine.GameObject m_chargedEffect;
        private UnityEngine.GameObject m_chargingEffect;
        private SoundPlayer m_lastChargingSound;
        private float m_stateCurrentTime;
        private UnityEngine.GameObject m_unchargingEffect;
        private float m_wallChargeHeldTime;
        public SeinCharacter Sein;
        public SoundProvider UnChargeSound;
        public UnityEngine.GameObject UnchargingEffectToSpawn;
        public float UnchargingTime;
        public SeinChargeJumpCharging() { }
        public SeinChargeJump ChargeJump { get { return default(SeinChargeJump); } }
        public float ChargingValue { get { return default(float); } }
        public bool IsCharged { get { return default(bool); } }
        public bool IsCharging { get { return default(bool); } }
        private bool IsGroundCharging { get { return default(bool); } }
        private bool IsWallCharging { get { return default(bool); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public PlayerAbilities PlayerAbilities { get { return default(PlayerAbilities); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <ChangeState>m__3E() { }
        public void ChangeState(SeinChargeJumpCharging.State state) { }
        public void EndCharge() { }
        public override void OnExit() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public override void UpdateCharacterState() { }
        public void UpdateState() { }
        public enum State
        {
            Charged = 2,
            Charging = 1,
            Normal = 0,
        }
    }
    public partial class SeinController : SaveSerialize, ICanActivateStompers, IDamageReciever, ISeinReceiver, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache10;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cacheF;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SeinAnimationSpeedSettings AnimationSpeedSettings;
        public UnityEngine.Transform GetItemTransform;
        public bool IgnoreControllerInput;
        public UnityEngine.AnimationCurve InputCurve;
        public SeinInputSettings InputSettings;
        public bool IsPlayingAnimation;
        public bool LockMovementInput;
        private float m_horizontalInputDelay;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Component[] m_suspendables;
        private UnityEngine.Transform m_transform;
        public System.Action OnHorizontalInputPostCalculate;
        private System.Action OnTriggeredAnimationFinished;
        public UnityEngine.LayerMask RayTestLayerMask;
        public SeinCharacter Sein;
        public SeinController() { }
        public bool AnimationHasMetaData { get { return default(bool); } }
        public bool CanMove { get { return default(bool); } }
        public bool FaceLeft { get { return default(bool); } set { } }
        public bool InputLocked { get { return default(bool); } }
        public bool IsAimingGrenade { get { return default(bool); } }
        public bool IsBashing { get { return default(bool); } }
        public bool IsCarrying { get { return default(bool); } }
        public bool IsCharging { get { return default(bool); } }
        public bool IsChargingJump { get { return default(bool); } }
        public bool IsCrouching { get { return default(bool); } }
        public bool IsDashing { get { return default(bool); } }
        public bool IsGliding { get { return default(bool); } }
        private bool IsGrabbingBlock { get { return default(bool); } }
        public bool IsGrabbingLever { get { return default(bool); } }
        public bool IsGrabbingWall { get { return default(bool); } }
        public bool IsInsideSoulFlame { get { return default(bool); } }
        public bool IsPushPulling { get { return default(bool); } }
        public bool IsStandingOnEdge { get { return default(bool); } }
        public bool IsStomping { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsSwimming { get { return default(bool); } }
        public UnityEngine.Component[] Suspendables { get { return default(UnityEngine.Component[]); } }
        public UnityEngine.Transform Transform { get { return default(UnityEngine.Transform); } }
        public event System.Action OnTriggeredAnimationFinished { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnHorizontalInputPostCalculate>m__36() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnTriggeredAnimationFinished>m__37() { }
        public override void Awake() { }
        public bool CanActivateSwitch(UnityEngine.GameObject theSwitch) { return default(bool); }
        public void EnterPlayingAnimation() { }
        public void FixedUpdate() { }
        public void HandleControllerInput() { }
        public void HandleJumping() { }
        public void HandleOffscreenIssue() { }
        private void OnAnimationEndEvent(TextureAnimation textureAnimation) { }
        public override void OnDestroy() { }
        public void OnGoThroughPortal() { }
        public void OnRecieveDamage(Damage damage) { }
        public void PerformJump() { }
        public void PlayAnimation(TextureAnimationWithTransitions animation) { }
        [UberBuildMethod]
        private void ProvideComponents() { }
        public bool RayTest(UnityEngine.GameObject target) { return default(bool); }
        public bool RayTest(UnityEngine.GameObject target, UnityEngine.Vector2 startOffset, UnityEngine.Vector2 endOffset) { return default(bool); }
        public bool RayTest(UnityEngine.Vector3 position, UnityEngine.Vector3 delta, out UnityEngine.RaycastHit hitInfo) { hitInfo = default(UnityEngine.RaycastHit); return default(bool); }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public void StopAnimation() { }
        public void UpdateMovementStuff() { }
        public void UpdateOriActiveState() { }
    }
    public partial class SeinCrouch : CharacterState, ISeinReceiver
    {
        public TextureAnimationWithTransitions IdleAnimation;
        private bool m_isCrouching;
        public SeinCharacter Sein;
        public SeinCrouch() { }
        public CharacterCapsuleController CapsuleController { get { return default(CharacterCapsuleController); } }
        public CharacterLeftRightMovement CharacterLeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public bool IsCrouching { get { return default(bool); } set { } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool ShouldCrouchIdleAnimationPlay { get { return default(bool); } }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public new void OnDestroy() { }
        public override void OnExit() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldCrouchIdleAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinCutsceneBlocked : CharacterState, ISeinReceiver
    {
        public SeinCutsceneBlocked.State CurrentState;
        public SeinCharacter Sein;
        public SeinCutsceneBlocked() { }
        public bool IsBackwards { get { return default(bool); } }
        public bool IsNormal { get { return default(bool); } }
        public bool IsTransitionPlaying { get { return default(bool); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void Backwards() { }
        public void ChangeState(SeinCutsceneBlocked.State state) { }
        public void FixedUpdate() { }
        public void Normal() { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public enum State
        {
            Backwards = 1,
            Normal = 0,
        }
    }
    public partial class SeinCutsceneMovement : CharacterState, ISeinReceiver
    {
        public SeinCharacter Sein;
        public SeinCutsceneMovement() { }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void FixedUpdate() { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
    }
    public partial class SeinDamageReciever : CharacterState, IDamageReciever, IProjectileDetonatable, ISeinReceiver
    {
        public float BadlyHurtAmount;
        public float DeathDuration;
        public DamageBasedPrefabProvider DeathEffectProvider;
        public float DeathFadeInDuration;
        public float DeathFadeOutDuration;
        public UnityEngine.GameObject GameOverScreen;
        public float GravityMultiplier;
        public TextureAnimationWithTransitions HurtAnimation;
        public UnityEngine.GameObject HurtDropPickup;
        public float HurtDropPickupSpeed;
        public float HurtDuration;
        public UnityEngine.GameObject HurtEffect;
        public UnityEngine.Vector2 HurtSpeed;
        public bool IsImmortal;
        public UnityEngine.GameObject KillFader;
        private bool m_died;
        private float m_hurtTimeRemaining;
        private float m_invincibleTimeRemaining;
        private float m_invincibleToEnemiesTimeRemaining;
        private int m_serializationFiller;
        public HorizontalPlatformMovementSettings.SpeedMultiplierSet MoveSpeed;
        public float OneLifeDeathDuration;
        public SeinCharacter Sein;
        public DamageBasedSoundProvider SeinBadlyHurtSound;
        public DamageBasedSoundProvider SeinDeathSound;
        public DamageBasedSoundProvider SeinHurtSound;
        public float SpawnDuration;
        public SeinDamageReciever() { }
        public CharacterGravity CharacterGravity { get { return default(CharacterGravity); } }
        public CharacterInstantStop CharacterInstantStop { get { return default(CharacterInstantStop); } }
        public CharacterLeftRightMovement CharacterLeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public SeinHealthController HealthController { get { return default(SeinHealthController); } }
        public bool IsInvinsible { get { return default(bool); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public UnityEngine.Renderer Sprite { get { return default(UnityEngine.Renderer); } }
        public bool CanDetonateProjectiles() { return default(bool); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator FlashSprite() { return default(System.Collections.IEnumerator); }
        private void InstantiateDeathEffect(Damage damage) { }
        public void MakeInvincible(float duration) { }
        public void MakeInvincibleToEnemies(float duration) { }
        public void ModifyGravityPlatformMovementSettings(GravityPlatformMovementSettings settings) { }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public new void OnDestroy() { }
        public void OnEnable() { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public void OnKill(Damage damage) { }
        public void OnKillFadeInComplete() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator OnKillRoutine() { return default(System.Collections.IEnumerator); }
        public void OnRecieveDamage(Damage damage) { }
        public void OnRestoreCheckpoint() { }
        public void ResetInviciblity() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldHurtAnimationKeepPlaying() { return default(bool); }
        public void SpriteMaterialTintColor(UnityEngine.Color color) { }
        public void Start() { }
        public override void UpdateCharacterState() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FlashSprite>c__Iterator12 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal SeinDamageReciever <>f__this;
            internal int <i>__0;
            public <FlashSprite>c__Iterator12() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <OnKillRoutine>c__Iterator13 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal SeinDamageReciever <>f__this;
            internal float <deathDuration>__0;
            internal float <t>__1;
            public <OnKillRoutine>c__Iterator13() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class SeinDashAttack : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache33;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache34;
        public TextureAnimationWithTransitions ChargeDashAnimation;
        public SoundProvider ChargeDashSound;
        public UnityEngine.AnimationCurve ChargeDashSpeedOverTime;
        public float ChargeDashTargetMaxDistance;
        public float ChargeDashTime;
        public SoundSource ChargedSound;
        public SoundProvider ChargeSound;
        public float ChargeTime;
        public SeinDashAttack.State CurrentState;
        public int Damage;
        public TextureAnimationWithTransitions DashAnimation;
        public float DashDownwardSpeed;
        public UnityEngine.GameObject DashFollowEffect;
        public UnityEngine.GameObject DashFollowRainbowEffect;
        public TextureAnimationWithTransitions DashIntoWallAnimation;
        public SoundProvider DashIntoWallSound;
        public SoundProvider DashSound;
        public UnityEngine.AnimationCurve DashSpeedOverTime;
        public UnityEngine.GameObject DashStartEffect;
        public float DashTime;
        public SoundProvider DoneChargingSound;
        public float EnergyCost;
        public UnityEngine.GameObject ExplosionEffect;
        public TextureAnimationWithTransitions GlideDashAnimation;
        private bool m_allowNoDecelerationForThisDash;
        private System.Collections.Generic.HashSet<IAttackable> m_attackablesIgnore;
        private IAttackable m_chargeDashAttackTarget;
        private bool m_chargeDashAtTarget;
        private UnityEngine.Vector3 m_chargeDashAtTargetPosition;
        private UnityEngine.Vector3 m_chargeDashDirection;
        private bool m_chargeJumpWasReleased;
        private bool m_faceLeft;
        private bool m_hasDashed;
        private bool m_hasHitAttackable;
        private bool m_isOnGround;
        private float m_lastDashTime;
        private float m_lastPressTime;
        private IChargeDashAttackable m_lastTarget;
        private SeinCharacter m_sein;
        private float m_stateCurrentTime;
        private bool m_stopAnimation;
        private float m_timeOfLastExplosionEffect;
        private float m_timeWhenDashJumpHappened;
        public SoundProvider NotEnoughEnergySound;
        public float OffGroundSpeed;
        private static System.Action OnDashEvent;
        private static System.Action OnWallDashEvent;
        public static bool RainbowDashActivated;
        public SoundProvider RainbowDashSound;
        public float SpriteRotation;
        public SoundProvider UnChargeSound;
        public SeinDashAttack() { }
        private bool DashHasCooledDown { get { return default(bool); } }
        public IChargeDashAttackable FindClosestAttackable { get { return default(IChargeDashAttackable); } }
        public bool HasEnoughEnergy { get { return default(bool); } }
        public bool IsDashingOrChangeDashing { get { return default(bool); } }
        public static event System.Action OnDashEvent { add { } remove { } }
        public static event System.Action OnWallDashEvent { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnDashEvent>m__3F() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnWallDashEvent>m__40() { }
        public bool AgainstWall() { return default(bool); }
        public void AttackNearbyEnemies() { }
        private bool CanChargeDash() { return default(bool); }
        public bool CanPerformDashIntoWall() { return default(bool); }
        public bool CanPerformNormalDash() { return default(bool); }
        public bool CanWallDash() { return default(bool); }
        public void ChangeState(SeinDashAttack.State state) { }
        public void CompleteChargeEffect() { }
        private bool HasAirDashSkill() { return default(bool); }
        private bool HasChargeDashSkill() { return default(bool); }
        public bool KeepChargeDashAnimationPlaying() { return default(bool); }
        public bool KeepDashAnimationPlaying() { return default(bool); }
        public bool KeepDashIntoWallAnimationPlaying() { return default(bool); }
        public void OnDisable() { }
        public override void OnExit() { }
        public void PerformChargeDash() { }
        public void PerformDash() { }
        private void PerformDash(TextureAnimationWithTransitions dashAnimation, SoundProvider dashSound) { }
        public void PerformDashIntoWall() { }
        public void PerformWallDash() { }
        private bool RaycastTest() { return default(bool); }
        public void ResetDashLimit() { }
        public void RestoreEnergy() { }
        public void ReturnToNormal() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        private void ShowNotEnoughEnergy() { }
        public void SpendEnergy() { }
        private void StickOntoGround() { }
        public void StopDashing() { }
        public override void UpdateCharacterState() { }
        public void UpdateChargeDashing() { }
        public void UpdateDashing() { }
        public void UpdateNormal() { }
        public void UpdateState() { }
        private void UpdateTargetHighlight(IChargeDashAttackable target) { }
        public enum State
        {
            ChargeDashing = 2,
            Dashing = 1,
            Normal = 0,
        }
    }
    public partial class SeinDeathCounter : SaveSerialize
    {
        public static SeinDeathCounter Instance;
        private int m_deathCounter;
        public SeinDeathCounter() { }
        public static int Count { get { return default(int); } set { } }
        private static void .cctor() { }
        public new void Awake() { }
        public static void SendTelemetryData() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class SeinDeathsManager : SaveSerialize
    {
        public System.Collections.Generic.List<DeathInformation> Deaths;
        public static SeinDeathsManager Instance;
        public SeinDeathsManager() { }
        public override void Awake() { }
        [UnityEngine.ContextMenu("Fake a death here")]
        public void FakeADeathHere() { }
        public static void OnDeath() { }
        public override void OnDestroy() { }
        public void OnGameReset() { }
        public void RecordDeath() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class SeinDoorHandler : SaveSerialize, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsOverlappingDoor>k__BackingField;
        public UnityEngine.GameObject EnterDoorAnimationPrefab;
        public MessageProvider EnterDoorMessage;
        private bool m_createCheckpoint;
        private MessageBox m_enterDoorHint;
        private bool m_isOverlappingDoor;
        private Door m_targetDoor;
        public SeinCharacter Sein;
        public SeinDoorHandler() { }
        public bool IsOverlappingDoor { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public void EnterIntoDoor(Door door) { }
        public void FixedUpdate() { }
        public void OnDoorOverlap(Door door) { }
        public void OnFadedToBlack() { }
        public void OnGoneThroughDoor() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
    }
    public partial class SeinDoubleJump : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<float> <>f__am$cacheB;
        public UnityEngine.GameObject DoubleJumpAfterShock;
        public TextureAnimationWithTransitions[] DoubleJumpAnimation;
        public SoundProvider DoubleJumpSound;
        public float JumpStrength;
        private SoundPlayer m_doubleJumpSound;
        private float m_doubleJumpTime;
        private int m_numberOfJumpsAvailable;
        private float m_remainingLockTime;
        private static System.Action<float> OnDoubleJumpEvent;
        public SeinCharacter Sein;
        public UnityEngine.GameObject TrippleJumpAfterShock;
        public SeinDoubleJump() { }
        public bool CanDoubleJump { get { return default(bool); } }
        public int ExtraJumpsAvailable { get { return default(int); } }
        public SeinJump Jump { get { return default(SeinJump); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public static event System.Action<float> OnDoubleJumpEvent { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnDoubleJumpEvent>m__41(float ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <PerformDoubleJump>m__42() { }
        public void LockForDuration(float duration) { }
        public void PerformDoubleJump() { }
        public void ResetDoubleJump() { }
        public void ResetLock() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldDoubleJumpAnimationKeepPlaying() { return default(bool); }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinEdgeClamber : CharacterState, ISeinReceiver
    {
        public TextureAnimationWithTransitions EdgeClamberAnimation;
        public SoundProvider EdgeClamberSound;
        private bool m_isEdgeClambering;
        public SeinCharacter Sein;
        public SeinEdgeClamber() { }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public void PerformEdgeClamber() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldAnimationKeepPlaying() { return default(bool); }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinEnergy : SaveSerialize
    {
        public float Current;
        public float Max;
        public float MaxVisual;
        public float MinVisual;
        public SoundProvider OutOfEnergySound;
        public SeinEnergy() { }
        public bool EnergyActive { get { return default(bool); } }
        public object EnergyUpgradesCollected { get { return default(object); } }
        public float VisualMax { get { return default(float); } }
        public float VisualMaxNormalized { get { return default(float); } }
        public float VisualMin { get { return default(float); } }
        public float VisualMinNormalized { get { return default(float); } }
        public bool CanAfford(float amount) { return default(bool); }
        public void Gain(float amount) { }
        public void NotifyOutOfEnergy() { }
        public void RestoreAllEnergy() { }
        public override void Serialize(Archive ar) { }
        public void SetCurrent(float current) { }
        public void Spend(float amount) { }
        public void Update() { }
    }
    public partial class SeinEnergyMaxVisualNormalizedProvider : FloatValueProvider
    {
        public SeinEnergyMaxVisualNormalizedProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinEnergyMaxVisualProvider : FloatValueProvider
    {
        public float DivideBy;
        public SeinEnergyMaxVisualProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinEnergyMinVisualNormalizedProvider : FloatValueProvider
    {
        public SeinEnergyMinVisualNormalizedProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinEnergyMinVisualProvider : FloatValueProvider
    {
        public float DivideBy;
        public SeinEnergyMinVisualProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinEnterExitTrigger : UnityEngine.MonoBehaviour
    {
        public ActionMethod OnEnterAction;
        public ActionMethod OnExitAction;
        public SeinEnterExitTrigger() { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
        private void OnTriggerExit(UnityEngine.Collider collider) { }
    }
    public partial class SeinEnvironmentForceController : CharacterState, ISeinReceiver
    {
        public float LandOnCeilingImpulsePerUnitOfSpeed;
        public float LandOnCeilingMaxImpulse;
        public float LandOnWallImpulsePerUnitOfSpeed;
        public float LandOnWallMaxImpluse;
        public SeinCharacter Sein;
        public float WeightOfPlayerForce;
        public SeinEnvironmentForceController() { }
        public SeinGrabWall GrabWall { get { return default(SeinGrabWall); } }
        public bool IsGrabbingWall { get { return default(bool); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public PlatformMovementListOfColliders PlatformMovementListOfColliders { get { return default(PlatformMovementListOfColliders); } }
        public UnityEngine.Vector3 SeinSpeed { get { return default(UnityEngine.Vector3); } }
        public override void OnDestroy() { }
        public void OnLandOnCeilingEvent(UnityEngine.Vector3 normal, UnityEngine.Collider target) { }
        public void OnLandOnWallEvent(UnityEngine.Vector3 normal, UnityEngine.Collider target) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldApplyForces(UnityEngine.Rigidbody rigidbody) { return default(bool); }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinExperienceForNextLevelValueProvider : FloatValueProvider
    {
        public SeinExperienceForNextLevelValueProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinExperienceValueNormalizedProvider : FloatValueProvider
    {
        public SeinExperienceValueNormalizedProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinExperienceValueProvider : FloatValueProvider
    {
        public SeinExperienceValueProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinExperienceVisualMaxNormalizedProvider : FloatValueProvider
    {
        public SeinExperienceVisualMaxNormalizedProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinExperienceVisualMinNormalizedProvider : FloatValueProvider
    {
        public SeinExperienceVisualMinNormalizedProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinFall : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SoundProvider FallingSound;
        public float FallingSpeedForSound;
        public float GroundLandImpulsePerUnitsOfSpeed;
        public float GroundLandMaxImpulse;
        public TextureAnimationWithTransitions IdleAnimation;
        public UnityEngine.GameObject LandingParticleEffect;
        public SurfaceToSoundProviderMap LandingSound;
        private bool m_hasPlayedFallSound;
        private float m_ignoreLandTime;
        public TextureAnimationWithTransitions MovingAnimation;
        private System.Func<bool> s_shouldFallIdleKeepPlaying;
        private System.Func<bool> s_shouldFallKeepPlaying;
        public SeinCharacter Sein;
        public SeinFall() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool ShouldFallIdleAnimationPlay { get { return default(bool); } }
        public bool ShouldFallMovingAnimationPlay { get { return default(bool); } }
        public void HandleFalling() { }
        public void HandleLandOnGround(UnityEngine.Vector3 normal, UnityEngine.Collider target) { }
        public override void OnDestroy() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldFallIdleAnimationKeepPlaying() { return default(bool); }
        public bool ShouldFallMovingAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinFootsteps : CharacterState, ISeinReceiver
    {
        public UnityEngine.GameObject DustParticlesPrefab;
        public SurfaceToSoundProviderMap FootstepsSounds;
        public UnityEngine.AnimationCurve FootstepVolumeOverSpeed;
        private float m_nextStepTime;
        public float MinSpeedForFootsteps;
        public SeinCharacter Sein;
        public bool ShouldPlayFootstepSounds;
        public UnityEngine.AnimationCurve SoundsPerSecondOverSpeed;
        public SeinFootsteps() { }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public void HandleFootstepEvents() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinGlide : CharacterState, ISeinReceiver
    {
        public SoundProvider CloseParachuteSound;
        public float GlideSpeed;
        public float GravityMultiplier;
        public TextureAnimationWithTransitions IdleAnimation;
        public int Level;
        private bool m_isGliding;
        private int m_isMoveAnimation;
        private float m_lockGlidingRemainingTime;
        private SoundPlayer m_parachuteLoopLastSound;
        private bool m_playedOpenSound;
        private bool m_pressedMoveHorizontally;
        private bool m_wasMovingHorizantally;
        public float MinHeightToGlide;
        public HorizontalPlatformMovementSettings.SpeedMultiplierSet MoveSpeed;
        public TextureAnimationWithTransitions MovingAnimation;
        public bool NeedsRightTriggerReleased;
        public SoundProvider OpenParachuteSound;
        public SoundProvider ParachuteLoopSound;
        public float RunningTime;
        public SeinCharacter Sein;
        public SoundProvider TurnLeftRightSound;
        public SeinGlide() { }
        public bool CanEnter { get { return default(bool); } }
        public bool CanGlide { get { return default(bool); } }
        public CharacterGravity CharacterGravity { get { return default(CharacterGravity); } }
        public CharacterLeftRightMovement CharacterLeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public float GlideOpeningTime { get { return default(float); } }
        public bool IsGliding { get { return default(bool); } set { } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool ShouldGlideIdleAnimationPlay { get { return default(bool); } }
        public bool ShouldGlideMovingAnimationPlay { get { return default(bool); } }
        public bool WantsToGlide { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <UpdateGliding>m__43() { }
        public void HandleFloatZones() { }
        public void LockGliding(float time) { }
        public void ModifyGravityPlatformMovementSettings(GravityPlatformMovementSettings settings) { }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public new void OnDestroy() { }
        public void OnEnterGlide() { }
        public override void OnExit() { }
        public void OnExitGlide() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldGlideIdleAnimationKeepPlaying() { return default(bool); }
        public bool ShouldGlideMovingAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        private void UpdateAnimations() { }
        public override void UpdateCharacterState() { }
        public void UpdateGliding() { }
    }
    public partial class SeinGrabBlock : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <InRange>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsGrabbing>k__BackingField;
        public TextureAnimationWithTransitions CantPullAnimation;
        public TextureAnimationWithTransitions CantPushAnimation;
        public SeinGrabBlock.State CurrentState;
        public float FootstepsSoundsPerSecond;
        public PlayerGrabPushPullHintSystem Hints;
        public TextureAnimationWithTransitions IdleAnimation;
        private float m_currentTime;
        private float m_distanceToBlock;
        private SoundPlayer m_lastPullSoundPlayer;
        private SoundPlayer m_lastPushSoundPlayer;
        private float m_nextPullTime;
        private float m_nextPushTime;
        private IPushable m_pushable;
        private bool m_spriteMirrorLock;
        public HorizontalPlatformMovementSettings.SpeedMultiplierSet Pull;
        public TextureAnimationWithTransitions PullAnimation;
        public SurfaceToSoundProviderMap PullBlockSound;
        public float PullRayDistance;
        public HorizontalPlatformMovementSettings.SpeedMultiplierSet Push;
        public TextureAnimationWithTransitions PushAnimation;
        public SurfaceToSoundProviderMap PushBlockSound;
        public SeinCharacter Sein;
        public SeinGrabBlock() { }
        public bool CanPushCurrentBlock { get { return default(bool); } }
        public CharacterLeftRightMovement CharacterLeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public bool FaceLeft { get { return default(bool); } }
        public float GrabDistance { get { return default(float); } }
        public float HorizontalInput { get { return default(float); } }
        public bool InRange { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool IsGrabbing { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public bool IsPulling { get { return default(bool); } }
        public bool IsPushing { get { return default(bool); } }
        public CharacterSpriteMirror Mirror { get { return default(CharacterSpriteMirror); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public float ReachDistance { get { return default(float); } }
        public bool SpriteMirrorLock { get { return default(bool); } set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <UpdateSounds>m__44() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <UpdateSounds>m__45() { }
        public new void Awake() { }
        private IPushable DetectPushPullBlock() { return default(IPushable); }
        private void EnterGrabIdleState() { }
        private void EnterGrabPullState() { }
        private void EnterGrabPushState() { }
        private void EnterRange() { }
        private void ExitRange() { }
        private IPushable FindPushableNearby() { return default(IPushable); }
        private void FinishPullSound() { }
        private void FinishPushSound() { }
        private void GrabBlock() { }
        public void HandleMovingBlock() { }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public new void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        private void ReleaseBlock() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        private bool ShouldGrabBlockCantPullAnimationKeepPlaying() { return default(bool); }
        private bool ShouldGrabBlockCantPushAnimationKeepPlaying() { return default(bool); }
        private bool ShouldGrabBlockIdleAnimationKeepPlaying() { return default(bool); }
        private bool ShouldGrabBlockPullAnimationKeepPlaying() { return default(bool); }
        private bool ShouldGrabBlockPushAnimationKeepPlaying() { return default(bool); }
        private bool ShouldLetGo() { return default(bool); }
        public void Start() { }
        private bool StillCloseToPushable() { return default(bool); }
        public override void UpdateCharacterState() { }
        private void UpdateGrabIdleState() { }
        private void UpdateGrabPullState() { }
        private void UpdateGrabPushState() { }
        private void UpdateSounds() { }
        private bool WantsToPull() { return default(bool); }
        private bool WantsToPush() { return default(bool); }
        private bool WantsToStopPushOrPull() { return default(bool); }
        public enum State
        {
            Idle = 2,
            Pull = 1,
            Push = 0,
        }
    }
    public partial class SeinGrabWall : CharacterState, ISeinReceiver
    {
        public float Acceleration;
        public float ClimbSpeedDown;
        public float ClimbSpeedUp;
        public TextureAnimationWithTransitions EdgeClimbAnimation;
        public SeinGrabWall.GrabWallAnimationSet GrabWallAnimation;
        public bool LockVerticalMovement;
        private SoundPlayer m_climbDownSoundPlayer;
        private float m_currentTime;
        private bool m_isGrabbing;
        private float m_lastWallGrabEnterSoundTime;
        private float m_lastWallGrabExitSoundTime;
        private float m_lastWallGrabStepDownSoundTime;
        private float m_minimumSoundDelay;
        private float m_nextWallClimbUpTime;
        private bool m_requiresRelease;
        public SeinCharacter Sein;
        public float WallClimbDownStepsPerSecond;
        public float WallClimbUpStepsPerSecond;
        public SurfaceToSoundProviderMap WallGrabEnterSound;
        public SurfaceToSoundProviderMap WallGrabExitSound;
        public SurfaceToSoundProviderMap WallGrabStepDownSound;
        public SurfaceToSoundProviderMap WallGrabStepUpSound;
        public SeinGrabWall() { }
        public bool CanGrab { get { return default(bool); } }
        public CharacterGravity CharacterGravity { get { return default(CharacterGravity); } }
        public CharacterLeftRightMovement CharacterLeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public bool IsGrabbing { get { return default(bool); } set { } }
        public bool IsGrabbingAway { get { return default(bool); } }
        public bool IsNotMoving { get { return default(bool); } }
        public PlatformMovementListOfColliders ListOfCollidedObjects { get { return default(PlatformMovementListOfColliders); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool ShouldGrabWallAwayAnimationPlay { get { return default(bool); } }
        public bool ShouldGrabWallDownAnimationPlay { get { return default(bool); } }
        public bool ShouldGrabWallIdleAnimationPlay { get { return default(bool); } }
        public bool ShouldGrabWallUpAnimationPlay { get { return default(bool); } }
        public bool WantToGrab { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <HandleWallClimbDownSteps>m__46() { }
        public void HandleWallClimbDownSteps() { }
        public void HandleWallClimbUpSteps() { }
        public void ModifyGravityPlatformMovementSettings(GravityPlatformMovementSettings settings) { }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public new void OnDestroy() { }
        public override void OnExit() { }
        public void OnGrabWall() { }
        public void OnReleaseWall() { }
        public TextureAnimationWithTransitions PickAwayAnimation() { return default(TextureAnimationWithTransitions); }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldGrabWallAwayAnimationKeepPlaying() { return default(bool); }
        public bool ShouldGrabWallDownAnimationKeepPlaying() { return default(bool); }
        public bool ShouldGrabWallIdleAnimationKeepPlaying() { return default(bool); }
        public bool ShouldGrabWallUpAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public override void UpdateCharacterState() { }
        public void UpdateGrabbing() { }
        public partial class GrabWallAnimationSet
        {
            public TextureAnimationWithTransitions[] Away;
            public TextureAnimationWithTransitions ClimbDown;
            public TextureAnimationWithTransitions ClimbUp;
            public TextureAnimationWithTransitions GrabAway;
            public TextureAnimationWithTransitions Idle;
            public GrabWallAnimationSet() { }
        }
    }
    public partial class SeinGrenadeAttack : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<SpiritGrenade> <>f__am$cache36;
        public float AimAnimationAngleOffset;
        public TextureAnimationWithTransitions[] AimingAnimations;
        public AnimationMetaData AimingMetaData;
        public SoundSource AimingSound;
        public UnityEngine.AnimationCurve AimSpeed;
        public SeinGrenadeAttack.AutoAimSettings AutoAim;
        public float CursorSpeedMultiplier;
        public float CursorSpeedYOffset;
        public float EnergyCost;
        public System.Collections.Generic.List<SeinGrenadeAttack.FastThrowAnimationRule> FastThrowAnimations;
        public UnityEngine.GameObject Grenade;
        public UnityEngine.GameObject GrenadeAiming;
        public UnityEngine.GameObject GrenadeFailEffect;
        public UnityEngine.GameObject GrenadeUpgraded;
        private UnityEngine.Vector2 m_aimOffset;
        private float m_animationAimAngle;
        private bool m_autoAim;
        private IAttackable m_autoTarget;
        private bool m_faceLeft;
        private UnityEngine.GameObject m_grenadeAiming;
        private bool m_inputPressed;
        private bool m_isAiming;
        private bool m_lastAimWasOnWall;
        private float m_lockAimAnimationRemainingTime;
        private float m_lockPressingInputTime;
        private UnityEngine.Vector2 m_rawAimOffset;
        private SeinCharacter m_sein;
        private System.Collections.Generic.List<SpiritGrenade> m_spiritGrenades;
        public float MaxAimDistance;
        public float MaxAimGroundAnimationAngle;
        public float MaxAimVertical;
        public float MaxAimWallAnimationAngle;
        public int MaxSpamGrenades;
        public float MinAimDistanceDown;
        public float MinAimDistanceHorizontal;
        public float MinAimDistanceUp;
        public float MinAimGroundAnimationAngle;
        public float MinAimVertical;
        public float MinAimVerticalWall;
        public float MinAimWallAnimationAngle;
        public SoundProvider NotEnoughEnergySound;
        public TextureAnimationWithTransitions[] NotEnoughEnergyThrowAnimations;
        public TextureAnimationWithTransitions[] NotEnoughEnergyWallThrowAnimations;
        public SeinGrenadeAttack.QuickThrowAnimations QuickThrow;
        public UnityEngine.Vector2 QuickThrowSpeed;
        public SoundProvider StartAimingSound;
        public SoundProvider StopAimingSound;
        public TextureAnimationWithTransitions[] ThrowAnimations;
        public SoundProvider ThrowGrenadeSound;
        public SeinGrenadeTrajectory Trajectory;
        public SoundProvider TurnAroundAimingSound;
        public TextureAnimationWithTransitions[] WallAimingAnimations;
        public AnimationMetaData WallAimingMetaData;
        public TextureAnimationWithTransitions[] WallThrowAnimations;
        public SeinGrenadeAttack() { }
        public bool CanAim { get { return default(bool); } }
        public CharacterGravity CharacterGravity { get { return default(CharacterGravity); } }
        public CharacterLeftRightMovement CharacterLeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        private float EnergyCostFinal { get { return default(float); } }
        public IAttackable FindAutoAttackable { get { return default(IAttackable); } }
        public float GrenadeGravity { get { return default(float); } }
        private UnityEngine.Vector3 GrenadeSpawnPosition { get { return default(UnityEngine.Vector3); } }
        private bool HasEnoughEnergy { get { return default(bool); } }
        public bool IsAiming { get { return default(bool); } }
        private bool IsGrabbingWall { get { return default(bool); } }
        private bool IsInAir { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <RefreshListOfQuickSpiritGrenades>m__47(SpiritGrenade a) { return default(bool); }
        public System.Func<bool> AnimationRule(SeinGrenadeAttack.FastThrowAnimationRule.AnimationRule rule) { return default(System.Func<bool>); }
        public void AutoTarget() { }
        public void BeginAiming() { }
        public void CancelAiming() { }
        private void ClampAim() { }
        public bool CompareAnimations(TextureAnimationWithTransitions current, TextureAnimationWithTransitions[] array) { return default(bool); }
        public void EndAiming() { }
        private bool HasGrenadeEfficiencySkill() { return default(bool); }
        private bool HasGrenadeUpgrade() { return default(bool); }
        private float IndexToAnimationAngle(int index, int length) { return default(float); }
        public bool KeepPlayingAimAnimation() { return default(bool); }
        public bool KeepPlayingAirThrowAnimation() { return default(bool); }
        public bool KeepPlayingGroundThrowAnimation() { return default(bool); }
        public bool KeepPlayingNotEnoughEnergyAnimation() { return default(bool); }
        public bool KeepPlayingThrowAnimation() { return default(bool); }
        private void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public override void OnDestroy() { }
        public override void OnExit() { }
        public void OnRestoreCheckpoint() { }
        private TextureAnimationWithTransitions PickAnimation(TextureAnimationWithTransitions[] animations) { return default(TextureAnimationWithTransitions); }
        private int PickAnimationIndex(int length) { return default(int); }
        public void PlayAimAnimation() { }
        public void PlayFastThrowAnimation() { }
        public void PlayThrowAnimation() { }
        public void PlayThrowSound() { }
        private void PositionGrenadeAiming(AnimationMetaData metaData, int frame) { }
        private void RefreshListOfQuickSpiritGrenades() { }
        private void ResetAimToDefault() { }
        private void RestoreEnergy() { }
        private void SetAimVelocity(UnityEngine.Vector2 aim) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        private SpiritGrenade SpawnGrenade(UnityEngine.Vector2 velocity) { return default(SpiritGrenade); }
        private void SpendEnergy() { }
        public void Start() { }
        public float TimeToTarget(UnityEngine.Vector2 velocity, IAttackable target) { return default(float); }
        public void UpdateAiming() { }
        public override void UpdateCharacterState() { }
        public void UpdateNormal() { }
        public void UpdateTrajectory() { }
        public UnityEngine.Vector2 VelocityToAimAtTarget(IAttackable attackable) { return default(UnityEngine.Vector2); }
        public bool WillRayHitEnemy(UnityEngine.Vector2 initialVelocity, IAttackable target) { return default(bool); }
        public partial class AutoAimSettings
        {
            public float InAirSpeed;
            public float MaxDistance;
            public float MinDistance;
            public float Speed;
            public float SpeedPerXDistance;
            public float SpeedPerYDistance;
            public AutoAimSettings() { }
        }
        public partial class FastThrowAnimationRule
        {
            public System.Collections.Generic.List<TextureAnimation> Animations;
            public System.Collections.Generic.List<TextureAnimationWithTransitions> AnimationsWithTransitions;
            public SeinGrenadeAttack.FastThrowAnimationRule.AnimationRule PlayRule;
            public TextureAnimationWithTransitions ThrowAnimation;
            public FastThrowAnimationRule() { }
            public enum AnimationRule
            {
                InAir = 0,
                OnGround = 1,
            }
        }
        public partial class QuickThrowAnimations
        {
            public TextureAnimationWithTransitions FallIdleThrowAnimation;
            public TextureAnimationWithTransitions FallThrowAnimation;
            public TextureAnimationWithTransitions IdleThrowAnimation;
            public TextureAnimationWithTransitions JogThrowAnimation;
            public TextureAnimationWithTransitions JumpIdleThrowAnimation;
            public TextureAnimationWithTransitions JumpThrowAnimation;
            public TextureAnimationWithTransitions RunThrowAnimation;
            public TextureAnimationWithTransitions WalkThrowAnimation;
            public TextureAnimationWithTransitions WallThrowAnimation;
            public QuickThrowAnimations() { }
        }
    }
    public partial class SeinGrenadeTrajectory : UnityEngine.MonoBehaviour
    {
        public TransparencyAnimator FadeIn;
        public float Gravity;
        [UnityEngine.HideInInspector]
        public UnityEngine.Vector2 InitialVelocity;
        public UnityEngine.LayerMask LayerMask;
        public int LinePoints;
        public UnityEngine.LineRenderer LineRenderer;
        private System.Collections.Generic.List<UnityEngine.Vector3> m_trajectoryPoints;
        [UnityEngine.HideInInspector]
        public UnityEngine.Vector2 StartPosition;
        public SeinGrenadeTrajectory() { }
        public void Awake() { }
        private void CalculateTrajectory() { }
        public void HideTrajectory() { }
        public void ShowTrajectory() { }
        public void Start() { }
        public void Update() { }
        private void UpdateLineRendererPoints() { }
    }
    public partial class SeinHeadBumpTrigger : UnityEngine.MonoBehaviour
    {
        public ActionMethod Action;
        public SeinHeadBumpTrigger() { }
        public void OnCollisionEnter(UnityEngine.Collision other) { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
    }
    public partial class SeinHealthController : SaveSerialize, ISeinReceiver
    {
        public float Amount;
        private SeinCharacter m_sein;
        public int MaxHealth;
        public UnityEngine.GameObject RespawnEffect;
        public float VisualMaxAmount;
        public float VisualMinAmount;
        public SeinHealthController() { }
        public int HealthUpgradesCollected { get { return default(int); } }
        public bool IsFull { get { return default(bool); } }
        public float VisualMaxAmountNormalized { get { return default(float); } }
        public float VisualMinAmountNormalized { get { return default(float); } }
        public void FixedUpdate() { }
        public void GainHealth(int amount) { }
        public void GainMaxHeartContainer() { }
        public void LoseHealth(int amount) { }
        public void OnRespawn() { }
        public void RestoreAllHealth() { }
        public override void Serialize(Archive ar) { }
        public void SetAmount(float amount) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void TakeDamage(int amount) { }
    }
    public partial class SeinHealthVisualMaxNormalizedProvider : FloatValueProvider
    {
        public SeinHealthVisualMaxNormalizedProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinHealthVisualMaxProvider : FloatValueProvider
    {
        public float DivideBy;
        public SeinHealthVisualMaxProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinHealthVisualMinNormalizedProvider : FloatValueProvider
    {
        public SeinHealthVisualMinNormalizedProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinHealthVisualMinProvider : FloatValueProvider
    {
        public float DivideBy;
        public SeinHealthVisualMinProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinIceSpiritFlame : CharacterState, ISeinReceiver
    {
        public SpiritFlame IceSpiritFlame;
        private SeinCharacter m_sein;
        public float SpiritFlameRange;
        public SeinIceSpiritFlame() { }
        public bool HasEnoughEnergy { get { return default(bool); } }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void SpendEnergy() { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinIdle : CharacterState, ISeinReceiver
    {
        public TextureAnimationWithTransitions IdleAnimation;
        public TextureAnimationWithTransitions IdleSlopeDownAnimation;
        public TextureAnimationWithTransitions IdleSlopeUpAnimation;
        public TextureAnimationWithTransitions IdleYawnAnimation;
        private float m_idleTime;
        private System.Func<bool> m_shouldRunIdle;
        public SeinCharacter Sein;
        private bool wasIdling;
        public float YawnAnimationDelay;
        public SoundProvider YawnSound;
        public SeinIdle() { }
        public int CurrentAnimationLayer { get { return default(int); } }
        public TextureAnimationWithTransitions CurrentIdleAnimation { get { return default(TextureAnimationWithTransitions); } }
        private bool IsFacingLeft { get { return default(bool); } }
        public bool IsOnSlope { get { return default(bool); } }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool ShouldRunIdleAnimationPlay { get { return default(bool); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldRunIdleAnimationKeepPlaying() { return default(bool); }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinInput
    {
        public Core.Input.InputButtonProcessor Down;
        public Core.Input.InputButtonProcessor Left;
        public SeinCharacter m_sein;
        public Core.Input.InputButtonProcessor Right;
        public Core.Input.InputButtonProcessor Up;
        public SeinInput(SeinCharacter sein) { }
        public UnityEngine.Vector2 Axis { get { return default(UnityEngine.Vector2); } }
        public float Horizontal { get { return default(float); } }
        public int NormalizedHorizontal { get { return default(int); } }
        public int NormalizedVertical { get { return default(int); } }
        public float Vertical { get { return default(float); } }
        public void Update() { }
        public UnityEngine.Vector2 WorldToLocal(UnityEngine.Vector2 speed) { return default(UnityEngine.Vector2); }
    }
    public partial class SeinInputSettings
    {
        public float JogThreshold;
        public float WalkThreshold;
        public SeinInputSettings() { }
    }
    public partial class SeinInsideZoneCondition : Condition
    {
        public UnityEngine.Transform[] Zones;
        public SeinInsideZoneCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class SeinInventory : SaveSerialize
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache6;
        public int Keystones;
        public int MapStones;
        private System.Action OnCollectKeystones;
        private System.Action OnCollectMapstone;
        public int SkillPointsCollected;
        public SeinInventory() { }
        public bool HasKeystones { get { return default(bool); } }
        public bool HasMapstones { get { return default(bool); } }
        public event System.Action OnCollectKeystones { add { } remove { } }
        public event System.Action OnCollectMapstone { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollectKeystones>m__48() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollectMapstone>m__49() { }
        public bool CanAfford(int cost) { return default(bool); }
        public void CollectKeystones(int amount) { }
        public void CollectMapstone(int amount) { }
        public void RestoreKeystones(int amount) { }
        public override void Serialize(Archive ar) { }
        public void SpendKeystones(int cost) { }
        public void SpendMapstone(int cost) { }
    }
    public partial class SeinInvincibility : CharacterState, ISeinReceiver
    {
        public float GainLevelInvincibilityDuration;
        public LegacyAnimator LowHealthAnimator;
        public SeinCharacter Sein;
        public SeinInvincibility() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinJump : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<float> <>f__am$cache1D;
        public TextureAnimationWithTransitions BackflipAnimation;
        public float BackflipJumpHeight;
        public TextureAnimationWithTransitions CrouchJumpAnimation;
        public float CrouchJumpHeight;
        public float DurationSinceLastOnGroundThatWeCanStillJump;
        public float FirstJumpHeight;
        public SurfaceToSoundProviderMap FlipJumpSoundProvider;
        public TextureAnimationWithTransitions[] JumpAnimation;
        public TextureAnimationWithTransitions[] JumpIdleAnimation;
        public float JumpIdleHeight;
        public float JumpImpulse;
        public UnityEngine.GameObject JumpParticleEffect;
        public SurfaceToSoundProviderMap JumpSoundProvider;
        private float m_bunnyHopTimeRemaining;
        private SurfaceMaterialType m_currentJumpingMaterial;
        private int m_jumpIdleNumber;
        private int m_runningJumpNumber;
        private System.Func<bool> m_shouldJumpMoving;
        private bool m_spriteMirrorLock;
        private float m_timeSinceMovingLeft;
        private float m_timeSinceMovingRight;
        private float m_timeWeCanJumpRemaining;
        private System.Action onAnimationEnd;
        private System.Action<float> OnJumpEvent;
        public float SecondJumpHeight;
        public SeinCharacter Sein;
        public SurfaceToSoundProviderMap SpinJumpSoundProvider;
        public float ThirdJumpHeight;
        public TextureAnimationWithTransitions WallSlideJumpAnimation;
        public SeinJump() { }
        public bool CanJump { get { return default(bool); } }
        public CharacterSpriteMirror CharacterSpriteMirror { get { return default(CharacterSpriteMirror); } }
        public bool HasSharplyTurnedAround { get { return default(bool); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool SpriteMirrorLock { get { return default(bool); } set { } }
        public event System.Action<float> OnJumpEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnJumpEvent>m__4A(float ) { }
        public override void Awake() { }
        private void CacheDelegates() { }
        public float CalculateSpeedFromHeight(float height) { return default(float); }
        public void OnAnimationEnd() { }
        public void OnAnimationStart() { }
        public override void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        private void PerformCrouchJump() { }
        public void PerformFirstIdleJump() { }
        public void PerformFirstRunningJump() { }
        private void PerformIdleJump() { }
        public void PerformJump() { }
        public void PerformRunningJump() { }
        public void PerformSecondIdleJump() { }
        public void PerformSecondRunningJump() { }
        private void PerformThirdIldleJump() { }
        public void PerformThirdRunningJump() { }
        public void PerformTurnAroundBackFlipJump() { }
        private void PerformWallSlideJump() { }
        public void ResetJumpIdleCount() { }
        public void ResetRunningJumpCount() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldBackflipAnimationKeepPlaying() { return default(bool); }
        public bool ShouldJumpIdleAnimationKeepPlaying() { return default(bool); }
        public bool ShouldJumpMovingAnimationKeepPlaying() { return default(bool); }
        public bool ShouldThirdJumpMovingAnimationKeepPlaying() { return default(bool); }
        public bool ShouldWallSlideJumpAnimationKeepPlaying() { return default(bool); }
        public override void UpdateCharacterState() { }
        public void UpdateTimeSinceFacing() { }
    }
    public partial class SeinKeystonesFloatProvider : FloatValueProvider
    {
        public SeinKeystonesFloatProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinLandOnTrigger : UnityEngine.MonoBehaviour
    {
        public ActionMethod OnLand;
        public SeinLandOnTrigger() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
    }
    public partial class SeinLeafParticles : UnityEngine.MonoBehaviour
    {
        private float m_particleRate;
        public UnityEngine.AnimationCurve ParticleRateOverSpeed;
        public UnityEngine.ParticleSystem Particles;
        public SeinLeafParticles() { }
        public void Awake() { }
        public void Update() { }
    }
    public partial class SeinLevel : SaveSerialize, ISeinReceiver
    {
        private static readonly System.Collections.Generic.HashSet<string> CollectablesToSerialize;
        public int Current;
        public UnityEngine.AnimationCurve DamageMultiplierPerOriStrength;
        public int Experience;
        public float ExperienceGainPerSecond;
        public UnityEngine.AnimationCurve ExperienceRequiredPerLevel;
        public float ExperienceVisualMax;
        public float ExperienceVisualMin;
        public static bool HasSpentSkillPoint;
        private SeinCharacter m_sein;
        public UnityEngine.GameObject OnLevelUpGameObject;
        public int SkillPoints;
        private static System.Collections.Generic.HashSet<System.Type> TypesToSerialize;
        public SeinLevel() { }
        public int ConsumedExperience { get { return default(int); } }
        public int ExperienceForNextLevel { get { return default(int); } }
        public int ExperienceNeedForNextLevel { get { return default(int); } }
        public float ExperienceVisualMaxNormalized { get { return default(float); } }
        public float ExperienceVisualMinNormalized { get { return default(float); } }
        public int TotalExperience { get { return default(int); } }
        public int TotalExperienceForNextLevel { get { return default(int); } }
        private static void .cctor() { }
        public float ApplyLevelingToDamage(float damage) { return default(float); }
        public float CalculateLevelBasedMaxHealth(int level, float health) { return default(float); }
        public void FixedUpdate() { }
        public void GainExperience(int amount) { }
        public void GainSkillPoint() { }
        public void LevelUp() { }
        public void LoseExperience(int amount) { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void Update() { }
    }
    internal partial class SeinLevelUpDownDebugMenuItem : FloatDebugMenuItem
    {
        public SeinLevelUpDownDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class SeinLevelValueProvider : FloatValueProvider
    {
        public SeinLevelValueProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinLever : CharacterState, ISeinReceiver
    {
        public SeinLever.LeverAnimations Animations;
        private Lever m_lever;
        private bool m_moveSeinPosition;
        private MessageBox m_pressLeftRightHint;
        private MessageBox m_pressToGrabHint;
        private SeinCharacter m_sein;
        private float m_seinTargetPositionX;
        public MessageProvider PressLeftRightMessage;
        public MessageProvider PressToGrabMessage;
        public SeinLever() { }
        public bool FaceLeft { get { return default(bool); } set { } }
        public bool InputLocked { get { return default(bool); } }
        public bool IsUsingLever { get { return default(bool); } }
        public override void Awake() { }
        public void EnterLever(Lever lever) { }
        public void ExitLever() { }
        public void GrabLever() { }
        private void HideGrabHint() { }
        private void HideLeftRightHint() { }
        public override void OnDestroy() { }
        public override void OnExit() { }
        public void PlayLeftAnimation() { }
        public void PlayMiddleAnimation() { }
        public void PlayRightAnimation() { }
        public void PushLeverLeft() { }
        public void PushLeverMiddle() { }
        public void PushLeverRight() { }
        public void ReleaseLever() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        private void ShowGrabHint() { }
        private void ShowLeftRightHint() { }
        public override void UpdateCharacterState() { }
        private void UpdateLeft() { }
        private void UpdateLeverDirection() { }
        private void UpdateMiddle() { }
        private void UpdateRight() { }
        public partial class LeverAnimations
        {
            public TextureAnimationWithTransitions LeverLeft;
            public TextureAnimationWithTransitions LeverMiddle;
            public TextureAnimationWithTransitions LeverRight;
            public LeverAnimations() { }
        }
    }
    [CategoryAttribute("Sein")]
    public partial class SeinLocalSpeedAction : ActionMethod
    {
        public UnityEngine.Vector2 Speed;
        public SeinLocalSpeedAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SeinLogicCycle : UnityEngine.MonoBehaviour
    {
        public SeinCharacter Sein;
        public SeinLogicCycle() { }
        public SeinAbilities Abilities { get { return default(SeinAbilities); } }
        public bool AllowAirNoDeceleration { get { return default(bool); } }
        public bool AllowBash { get { return default(bool); } }
        public bool AllowCarry { get { return default(bool); } }
        public bool AllowChargeFlame { get { return default(bool); } }
        public bool AllowChargeJump { get { return default(bool); } }
        public bool AllowChargeJumpCharging { get { return default(bool); } }
        public bool AllowCrouching { get { return default(bool); } }
        public bool AllowCrushDetector { get { return default(bool); } }
        public bool AllowDamageReciever { get { return default(bool); } }
        public bool AllowDash { get { return default(bool); } }
        public bool AllowDoubleJump { get { return default(bool); } }
        public bool AllowEdgeClamber { get { return default(bool); } }
        public bool AllowFall { get { return default(bool); } }
        public bool AllowFootsteps { get { return default(bool); } }
        public bool AllowForceController { get { return default(bool); } }
        public bool AllowGliding { get { return default(bool); } }
        public bool AllowGrabBlock { get { return default(bool); } }
        public bool AllowGravity { get { return default(bool); } }
        public bool AllowGravityToGround { get { return default(bool); } }
        public bool AllowGrenade { get { return default(bool); } }
        public bool AllowIdle { get { return default(bool); } }
        public bool AllowInstantStop { get { return default(bool); } }
        public bool AllowInvincibility { get { return default(bool); } }
        public bool AllowJumping { get { return default(bool); } }
        public bool AllowJumpSustain { get { return default(bool); } }
        public bool AllowLeftRightMovement { get { return default(bool); } }
        public bool AllowLever { get { return default(bool); } }
        public bool AllowLooking { get { return default(bool); } }
        public bool AllowPushAgainstWall { get { return default(bool); } }
        public bool AllowRun { get { return default(bool); } }
        public bool AllowSpiritFlameTargetting { get { return default(bool); } }
        public bool AllowSpriteRotater { get { return default(bool); } }
        public bool AllowStandardSpiritFlame { get { return default(bool); } }
        public bool AllowStandingOnEdge { get { return default(bool); } }
        public bool AllowStomp { get { return default(bool); } }
        public bool AllowSwimming { get { return default(bool); } }
        public bool AllowUpwardsDeceleration { get { return default(bool); } }
        public bool AllowWallChargeJump { get { return default(bool); } }
        public bool AllowWallGrabbing { get { return default(bool); } }
        public bool AllowWallJump { get { return default(bool); } }
        public bool AllowWallSlide { get { return default(bool); } }
        public bool ApplyFrictionToSpeed { get { return default(bool); } }
        public SeinMortality Mortality { get { return default(SeinMortality); } }
        public PlatformBehaviour PlatformBehaviour { get { return default(PlatformBehaviour); } }
        public void FixedUpdate() { }
        public void Start() { }
    }
    public partial class SeinLookUp : CharacterState, ISeinReceiver
    {
        public float Drag;
        public float LookDelay;
        public TextureAnimationWithTransitions LookUpAnimation;
        public float LookUpDuration;
        public float LookUpHeight;
        private float m_height;
        private bool m_isLookingDown;
        private bool m_isLookingUp;
        private float m_lookDelay;
        public SeinCharacter Sein;
        public SeinLookUp() { }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldLookUpAnimationKeepPlaying() { return default(bool); }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinMapstonesFloatProvider : FloatValueProvider
    {
        public SeinMapstonesFloatProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinMaxEnergyValueProvider : FloatValueProvider
    {
        public float DivideBy;
        public SeinMaxEnergyValueProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinMaxHealthValueProvider : FloatValueProvider
    {
        public float DivideBy;
        public SeinMaxHealthValueProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinMaxSpeedAction : ActionWithDuration
    {
        public float ChangeDuration;
        private float m_currentTime;
        private bool m_isPerforming;
        public UnityEngine.AnimationCurve SpeedOverTime;
        public SeinMaxSpeedAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public void FixedUpdate() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnHorizontalInputCalculate() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class SeinMaxSpeedBasedOnDistance : UnityEngine.MonoBehaviour
    {
        public float Distance;
        private bool m_registered;
        public UnityEngine.AnimationCurve SpeedOverDistance;
        public UnityEngine.Transform Target;
        public SeinMaxSpeedBasedOnDistance() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnHorizontalInputCalculate() { }
    }
    public partial class SeinMortality
    {
        public CapsuleCrushDetector CrushDetector;
        public SeinDamageReciever DamageReciever;
        public SeinHealthController Health;
        public SeinMortality() { }
    }
    public partial class SeinNaruComboAnimator : UnityEngine.MonoBehaviour, IUberAtlasExternal
    {
        public Atlas[] Atlases;
        public bool CorrectUvs;
        private AtlasSpriteTextureBinder m_binder;
        private UnityEngine.Mesh m_mesh;
        private UnityEngine.MeshFilter m_meshFilter;
        private readonly System.Collections.Generic.Dictionary<string, SeinNaruComboAnimator.AtlasAndSpriteTexture> m_nameToFrames;
        private UnityEngine.Renderer m_renderer;
        public Naru Naru;
        public SeinNaruComboAnimator() { }
        private AtlasSpriteTexture NaruCurrentTexture { get { return default(AtlasSpriteTexture); } }
        private Atlas SettingsAtlas { get { return default(Atlas); } }
        public void Awake() { }
        public bool DoesProvideAtlas() { return default(bool); }
        public void FixedUpdate() { }
        public UberScreenMode GetExternalUberScreenMode() { return default(UberScreenMode); }
        public float GetUberTweakValue() { return default(float); }
        public void OnDestroy() { }
        public void Start() { }
        public void Update() { }
        public void UpdateSpriteFrame() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct AtlasAndSpriteTexture
        {
            public Atlas Atlas;
            public AtlasSpriteTexture AtlasSpriteTexture;
        }
    }
    public partial class SeinNestedPrefab
    {
        private UnityEngine.GameObject m_gameObject;
        private UnityEngine.GameObject m_prefab;
        public SeinCharacter Sein;
        public SeinNestedPrefab(SeinCharacter sein, UnityEngine.GameObject prefab) { }
        public bool IsInstantiated { get { return default(bool); } set { } }
        private void Destroy() { }
        private void Instantiate() { }
    }
    public partial class SeinObjectFilter : GameObjectFilter
    {
        public SeinObjectFilter() { }
        public override bool Valid(UnityEngine.GameObject gameObject) { return default(bool); }
    }
    public partial class SeinOnGroundCondition : Condition
    {
        public SeinOnGroundCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class SeinPickupProcessor : SaveSerialize, ICheckpointZoneReciever, IPickupCollector, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache15;
        public AchievementAsset AllEnergyCellsCollected;
        public AchievementAsset AllHealthCellsCollected;
        public AchievementAsset Collect200EnergyCrystalsAchievementAsset;
        public ActionMethod EnergyContainerSequence;
        public SeinPickupProcessor.CollectableInformation EnergyOrbInfo;
        public SeinPickupProcessor.CollectableInformation ExpOrbInfo;
        public SeinPickupProcessor.CollectableInformation HealthOrbInfo;
        public ActionMethod HeartContainerSequence;
        public SeinPickupProcessor.CollectableInformation KeystoneInfo;
        public SeinPickupProcessor.CollectableInformation LargeExpOrbInfo;
        private int m_collectedHealthSlotsCount;
        private int m_collectedMaxEnergySlotsCount;
        private bool m_energySlotsAchievementAwarded;
        private ExpText m_expText;
        private bool m_healthSlotsAchievementAwarded;
        public ActionMethod MapStoneSequence;
        public SeinPickupProcessor.CollectableInformation MediumExpOrbInfo;
        public static System.Action OnCollectMaxEnergyContainer;
        public SeinCharacter Sein;
        public ActionMethod SkillPointSequence;
        public SeinPickupProcessor.CollectableInformation SmallExpOrbInfo;
        public SeinPickupProcessor() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCollectMaxEnergyContainer>m__16C() { }
        public void OnCollectEnergyOrbPickup(EnergyOrbPickup energyOrbPickup) { }
        public void OnCollectExpOrbPickup(ExpOrbPickup expOrbPickup) { }
        public void OnCollectKeystonePickup(KeystonePickup keystonePickup) { }
        public void OnCollectMapStonePickup(MapStonePickup mapStonePickup) { }
        public void OnCollectMaxEnergyContainerPickup(MaxEnergyContainerPickup energyContainerPickup) { }
        public void OnCollectMaxHealthContainerPickup(MaxHealthContainerPickup maxHealthContainerPickup) { }
        public void OnCollectRestoreHealthPickup(RestoreHealthPickup restoreHealthPickup) { }
        public void OnCollectSkillPointPickup(SkillPointPickup skillPointPickup) { }
        public void OnEnterCheckpoint(InvisibleCheckpoint checkpoint) { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public partial class CollectableInformation
        {
            public ActionMethod FirstTimeCollectedSequence;
            public bool HasBeenCollectedBefore;
            public CollectableInformation() { }
            public void RunActionIfFirstTime() { }
        }
    }
    public partial class SeinPlaceholder : UnityEngine.MonoBehaviour, IDynamicGraphic
    {
        public CharacterFactory.Characters Character;
        public UnityEngine.GameObject CharacterPrefab;
        public UnityEngine.GameObject GameplaySystems;
        [UnityEngine.HideInInspector]
        public SceneRoot SceneRoot;
        public SeinPlaceholder() { }
        private void AfterLoadingFromMasterFinishedAfterInstantiation() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnSceneRootPreEnabled(SceneRoot sceneRoot) { }
        private void Spawn() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SeinPositionAndDirectionTracker : UnityEngine.MonoBehaviour
    {
        private float m_currentDirection;
        private float m_currentSeinSpeed;
        private UnityEngine.Vector3 m_smoothSpeed;
        public float SeinColorHighlightFactor;
        public float SpeedLimit;
        public float SpeedSmoothingFactor;
        public SeinPositionAndDirectionTracker() { }
        public UnityEngine.Vector3 Speed { get { return default(UnityEngine.Vector3); } }
        private void FixedUpdate() { }
        private void Update() { }
    }
    public partial class SeinPrefabFactory : SaveSerialize, ISeinReceiver
    {
        public SeinNestedPrefab Bash;
        public SeinNestedPrefab Carry;
        public SeinNestedPrefab ChargeJump;
        public SeinNestedPrefab Crouch;
        public SeinNestedPrefab Dash;
        public SeinNestedPrefab DoubleJump;
        public SeinNestedPrefab Fall;
        public SeinNestedPrefab Glide;
        public SeinNestedPrefab GrabPushPull;
        public SeinNestedPrefab GrabWall;
        public SeinNestedPrefab Grenade;
        public SeinNestedPrefab Idle;
        public SeinNestedPrefab Jump;
        private SeinNestedPrefab[] m_prefabs;
        public SeinNestedPrefab PickupProcessor;
        public SeinNestedPrefab PushAgainstWall;
        public SeinNestedPrefab Run;
        public SeinCharacter Sein;
        public SeinPrefabSet SeinPrefabSet;
        public SeinNestedPrefab SoulFlame;
        public SeinNestedPrefab SpiritFlame;
        public SeinNestedPrefab StandingOnEdge;
        public SeinNestedPrefab Stomp;
        public SeinNestedPrefab Swimming;
        public SeinNestedPrefab WallJump;
        public SeinNestedPrefab WallSlide;
        public SeinPrefabFactory() { }
        public new void Awake() { }
        public void EnsureRightPrefabsAreThereForAbilities() { }
        public void PopState() { }
        public void PushState() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void Start() { }
    }
    public partial class SeinPrefabSet : UnityEngine.ScriptableObject
    {
        public UnityEngine.GameObject Bash;
        public UnityEngine.GameObject Carry;
        public UnityEngine.GameObject ChargeJump;
        public UnityEngine.GameObject Crouch;
        public UnityEngine.GameObject CutsceneBlock;
        public UnityEngine.GameObject CutsceneMovement;
        public UnityEngine.GameObject Dash;
        public UnityEngine.GameObject DoubleJump;
        public UnityEngine.GameObject Fall;
        public UnityEngine.GameObject Glide;
        public UnityEngine.GameObject GrabPushPull;
        public UnityEngine.GameObject GrabWall;
        public UnityEngine.GameObject Grenade;
        public UnityEngine.GameObject Idle;
        public UnityEngine.GameObject Jump;
        public UnityEngine.GameObject PickupProcessor;
        public UnityEngine.GameObject PushAgainstWall;
        public UnityEngine.GameObject Run;
        public UnityEngine.GameObject SoulFlame;
        public UnityEngine.GameObject SpiritFlame;
        public UnityEngine.GameObject StandingOnEdge;
        public UnityEngine.GameObject Stomp;
        public UnityEngine.GameObject Swimming;
        public UnityEngine.GameObject WallJump;
        public UnityEngine.GameObject WallSlide;
        public SeinPrefabSet() { }
    }
    public partial class SeinPushAgainstWall : CharacterState, ISeinReceiver
    {
        private System.Func<bool> m_shouldPushKeepPlaying;
        public TextureAnimationWithTransitions PushAgainstWallAnimation;
        public SeinCharacter Sein;
        public SeinPushAgainstWall() { }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool ShouldPushAgainstWallAnimationPlay { get { return default(bool); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldPushAgainstWallAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinRun : CharacterState, ISeinReceiver
    {
        public SeinRun.State CurrentState;
        public TextureAnimationWithTransitions JogAnimation;
        private float m_horizontalInputDelay;
        private System.Func<bool> m_shouldJogPlay;
        private System.Func<bool> m_shouldRunPlay;
        private System.Func<bool> m_shouldWalkPlay;
        public TextureAnimationWithTransitions RunAnimation;
        public SeinCharacter Sein;
        public TextureAnimationWithTransitions WalkAnimation;
        public SeinRun() { }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public TextureAnimator TextureAnimator { get { return default(TextureAnimator); } }
        public override void OnExit() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldJogAnimationPlay() { return default(bool); }
        public bool ShouldRunAnimationPlaying() { return default(bool); }
        public bool ShouldWalkAnimationPlay() { return default(bool); }
        public override void UpdateCharacterState() { }
        public enum State
        {
            Jog = 1,
            Run = 0,
            Walk = 2,
        }
    }
    [CategoryAttribute("Sein")]
    public partial class SeinRunToTargetAction : PerformingAction
    {
        public TextureAnimationWithTransitions CustomJogMovingAnimation;
        public TextureAnimationWithTransitions CustomRunMovingAnimation;
        public TextureAnimationWithTransitions CustomWalkMovingAnimation;
        private bool m_isPerforming;
        private TextureAnimationWithTransitions m_originalJogMovingAnimation;
        private TextureAnimationWithTransitions m_originalRunMovingAnimation;
        private TextureAnimationWithTransitions m_originalWalkMovingAnimation;
        public float MaxDuration;
        public UnityEngine.AnimationCurve SpeedCurve;
        [NotNull]
        public UnityEngine.Transform TargetPosition;
        public SeinRunToTargetAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        private void Exit() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator Perform() { return default(System.Collections.IEnumerator); }
        public override void Perform(IContext context) { }
        public override void Stop() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Perform>c__IteratorE : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal SeinRunToTargetAction <>f__this;
            internal float <distance>__0;
            internal float <time>__1;
            public <Perform>c__IteratorE() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class SeinSkillPointsProvider : FloatValueProvider
    {
        public SeinSkillPointsProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    internal partial class SeinSkillUpDownDebugMenuItem : FloatDebugMenuItem
    {
        public SeinSkillUpDownDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class SeinSoulFlame : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache2A;
        public SoundSource AbortChargingSound;
        public BaseAnimator ChargeEffectAnimator;
        public SoundSource ChargingSound;
        public UnityEngine.GameObject CheckpointMarker;
        public ActionMethod CheckpointSequence;
        public float CooldownDuration;
        public AchievementAsset CreateManySoulLinkAchievement;
        public SoundProvider FullyAbortedSound;
        public float HoldDownDuration;
        public bool LockSoulFlame;
        private UnityEngine.GameObject m_checkpointMarkerGameObject;
        private float m_cooldownRemaining;
        private float m_delayOnGround;
        private float m_holdDownTime;
        private bool m_isCasting;
        private float m_nagTimer;
        private MessageBox m_notReadyHint;
        private MessageBox m_notSafeHint;
        private int m_numberOfSoulFlamesCast;
        private bool m_readyForReadySequence;
        private MoonGuid m_sceneCheckpoint;
        private SeinCharacter m_sein;
        private MessageBox m_skillTreeHint;
        private SoulFlame m_soulFlame;
        private float m_tapRemainingTime;
        public float NagDuration;
        public MessageProvider NotReadyMessage;
        public SoundProvider NotReadySound;
        public MessageProvider NotSafeEnemiesMessage;
        public MessageProvider NotSafeGroundMessage;
        public SoundProvider NotSafeSound;
        public MessageProvider NotSafeZoneMessage;
        private static System.Action OnSoulFlameCast;
        public UnityEngine.AnimationCurve ParticleRateOverSpeed;
        public float RekindleCooldownDuration;
        public MessageProvider SavePedestalZoneMessage;
        public MessageProvider SkillTreeMessage;
        public MessageProvider SkillTreeRekindleMessage;
        public UnityEngine.GameObject SoulFlameReadyEffect;
        public SoundProvider SoulFlameReadySoundProvider;
        public UnityEngine.GameObject SoulFlameReadyText;
        public UnityEngine.LayerMask UnsafeMask;
        public SeinSoulFlame() { }
        public bool AllowedToAccessSkillTree { get { return default(bool); } }
        public float BarValue { get { return default(float); } }
        public bool CanAffordSoulFlame { get { return default(bool); } }
        public float CooldownRemaining { get { return default(float); } }
        public bool InsideCheckpointMarker { get { return default(bool); } }
        public SeinSoulFlame.SoulFlamePlacementSafety IsSafeToCastSoulFlame { get { return default(SeinSoulFlame.SoulFlamePlacementSafety); } }
        public bool PlayerCouldSoulFlame { get { return default(bool); } }
        public bool ShowFlameOnUI { get { return default(bool); } }
        public float SoulFlameCost { get { return default(float); } }
        public bool SoulFlameExists { get { return default(bool); } }
        public UnityEngine.Vector3 SoulFlamePosition { get { return default(UnityEngine.Vector3); } }
        public static event System.Action OnSoulFlameCast { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnSoulFlameCast>m__51() { }
        public new void Awake() { }
        private void CastSoulFlame() { }
        public void DestroySoulFlame() { }
        public void FillSoulFlameBar() { }
        private void HandleCharging() { }
        private void HandleCheckpointMarkerVisibility() { }
        private void HandleCooldown() { }
        private void HandleDelayOnGround() { }
        public void HandleNagging() { }
        private void HandleSkillTreeHint() { }
        public void HideOtherMessages() { }
        public override void OnDestroy() { }
        public void OnGameReset() { }
        public void OnRestoreCheckpoint() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void SpawnSoulFlame(UnityEngine.Vector3 position) { }
        public override void UpdateCharacterState() { }
        public enum SoulFlamePlacementSafety
        {
            Safe = 0,
            SavePedestal = 4,
            UnsafeEnemies = 1,
            UnsafeGround = 2,
            UnsafeZone = 3,
        }
    }
    public partial class SeinSoulFlameCooldownValueProvider : FloatValueProvider
    {
        public SeinSoulFlameCooldownValueProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SeinSpiritFlameAbility : CharacterState, ISeinReceiver
    {
        private readonly System.Collections.Generic.HashSet<string> m_lockShootingSpiritFlameLocks;
        private SeinCharacter m_sein;
        public bool ShootWhenNoTarget;
        public UnityEngine.GameObject TempTarget;
        public SeinSpiritFlameAbility() { }
        public System.Collections.Generic.List<ISpiritFlameAttackable> ClosestAttackables { get { return default(System.Collections.Generic.List<ISpiritFlameAttackable>); } }
        public bool LockShootingSpiritFlame { get { return default(bool); } }
        public void AddLock(string lockName) { }
        public void RemoveLock(string lockName) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void Start() { }
        public void ThrowSpiritFlames(SpiritFlame spiritFlame) { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinSpiritFlameTargetting : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <MaxNumberOfTargets>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Range>k__BackingField;
        public System.Collections.Generic.List<ISpiritFlameAttackable> ClosestAttackables;
        public const float DefaultOriDistanceFromAttackable = 5f;
        private readonly System.Collections.Generic.List<ISpiritFlameAttackable> m_lastClosestAttackables;
        private readonly System.Collections.Generic.List<ISpiritFlameAttackable> m_remainingSpiritFlameAttackables;
        private SeinCharacter m_sein;
        public SeinSpiritFlameTargetting() { }
        public float MaxNumberOfTargets { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float Range { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsShootableTarget(IAttackable attackable) { return default(bool); }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public void Start() { }
        public override void UpdateCharacterState() { }
        public void UpdateClosestAttackables() { }
        public void UpdateTargetHighlight() { }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct SeinSplashInfo
    {
        public float Power;
        public UnityEngine.Vector3 Velocity;
    }
    public partial class SeinSpriteRotationController : CharacterState, ISeinReceiver
    {
        public float CenterAngle;
        public UnityEngine.Transform CenterTransform;
        public bool CinematicRotation;
        public float FeetAngle;
        public UnityEngine.Transform FeetTransform;
        public float HeadAngle;
        public UnityEngine.Transform HeadTransform;
        private float m_ceilingAngle;
        private float m_groundAngle;
        private UnityEngine.Vector2 m_localPosition;
        private float m_tiltLeftRightTimer;
        private float m_tiltUpDownTimer;
        private float m_wallLeftAngle;
        private float m_wallRightAngle;
        public SeinCharacter Sein;
        public SeinSpriteRotationController() { }
        public SeinBashAttack BashAttack { get { return default(SeinBashAttack); } }
        public SeinCrouch Crouch { get { return default(SeinCrouch); } }
        public bool IsStomping { get { return default(bool); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public SeinStomp Stomp { get { return default(SeinStomp); } }
        public void BeginTiltLeftRightInAir(float duration) { }
        public void BeginTiltUpDownInAir(float duration) { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public override void UpdateCharacterState() { }
        private void UpdateCinematicRotation() { }
        public void UpdateDashingRotation() { }
        private void UpdateRegularRotation() { }
        public void UpdateRotation() { }
        private void UpdateUnderwaterRotation() { }
    }
    public partial class SeinStandardSpiritFlameAbility : CharacterState, ISeinReceiver
    {
        public bool CanDamageOverTime;
        private bool m_isSpamming;
        private SeinCharacter m_sein;
        private float m_timeOfBeforeLastShot;
        private float m_timeOfLastShot;
        private float m_timeOfLastSpam;
        public SeinStandardSpiritFlameAbility.PoisonSettings Poison;
        public float SpamShotSpeed;
        public float SpiritFlameRange;
        public SpiritFlame[] StandardSpiritFlames;
        public ShotCombo StandardSpiritFlameShotCombo;
        public SeinStandardSpiritFlameAbility() { }
        public System.Collections.Generic.List<ISpiritFlameAttackable> ClosestAttackables { get { return default(System.Collections.Generic.List<ISpiritFlameAttackable>); } }
        public SpiritFlame CurrentSpiritFlame { get { return default(SpiritFlame); } }
        public bool LockShootingSpiritFlame { get { return default(bool); } }
        public int MaxTargets { get { return default(int); } }
        public int OriLevel { get { return default(int); } }
        public SpiritFlame GetStandardSpiritFlame(int index) { return default(SpiritFlame); }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public override void UpdateCharacterState() { }
        public void UpdateTargetting() { }
        public partial class PoisonSettings
        {
            public float DamageAmount;
            public int DamageDuration;
            public UnityEngine.GameObject PoisonEffect;
            public PoisonSettings() { }
        }
    }
    public partial class SeinStandingOnEdge : CharacterState, ISeinReceiver
    {
        public float Distance;
        public TextureAnimationWithTransitions FacingEdgeAnimation;
        public TextureAnimationWithTransitions FacingEdgeBackwardsAnimation;
        public SeinCharacter Sein;
        public bool StandingOnEdgeBackwards;
        public bool StandingOnEdgeForwards;
        public SeinStandingOnEdge() { }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool ShouldStandingOnEdgeFacingBackwardsAnimationPlay { get { return default(bool); } }
        public bool ShouldStandingOnEdgeFacingForwardsAnimationPlay { get { return default(bool); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public bool StandingOnEdge { get { return default(bool); } }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldStandingOnEdgeFacingBackwardsAnimationKeepPlaying() { return default(bool); }
        public bool ShouldStandingOnEdgeFacingForwardsAnimationKeepPlaying() { return default(bool); }
        public bool StandingOnEdgeRayHit(float offset) { return default(bool); }
        public void Start() { }
        public override void UpdateCharacterState() { }
    }
    public partial class SeinStomp : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1C;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1D;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache1E;
        public float Damage;
        public float IdleDuration;
        public fsm.StateMachine Logic;
        private System.Collections.Generic.List<IAttackable> m_stompBlastAttackables;
        private static System.Action OnStompDownEvent;
        private static System.Action OnStompIdleEvent;
        private static System.Action OnStompLandEvent;
        public SeinCharacter Sein;
        public SeinStomp.States State;
        public float StompBlashRadius;
        public UnityEngine.AnimationCurve StompBlastFalloutCurve;
        public TextureAnimationWithTransitions StompBounceAnimation;
        public TextureAnimationWithTransitions StompDownAnimation;
        public float StompDownDuration;
        public SoundSource StompFallSound;
        public SoundSource StompFallSoundUpgraded;
        public TextureAnimationWithTransitions StompIdleAnimation;
        public TextureAnimationWithTransitions StompLandAnimation;
        public float StompLandDuration;
        public UnityEngine.GameObject StompLandEffect;
        public UnityEngine.GameObject StompLandEffectUpgraded;
        public SoundSource StompLandSound;
        public SoundSource StompLandSoundUpgraded;
        public float StompSpeed;
        public SoundSource StompStartSound;
        public SoundSource StompStartSoundUpgraded;
        public float UpgradedDamage;
        public float UpwardDeceleration;
        public SeinStomp() { }
        public SeinDoubleJump DoubleJump { get { return default(SeinDoubleJump); } }
        public bool Finished { get { return default(bool); } }
        public bool IsStomping { get { return default(bool); } }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public float StompDamage { get { return default(float); } }
        public CharacterUpwardsDeceleration UpwardsDeceleration { get { return default(CharacterUpwardsDeceleration); } }
        public static event System.Action OnStompDownEvent { add { } remove { } }
        public static event System.Action OnStompIdleEvent { add { } remove { } }
        public static event System.Action OnStompLandEvent { add { } remove { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnStompDownEvent>m__4D() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnStompIdleEvent>m__4B() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnStompLandEvent>m__4C() { }
        public override void Awake() { }
        public bool CanStomp() { return default(bool); }
        public void DoBlastRadius(IAttackable landedStompAttackable) { }
        public void DoStompBlastEffect() { }
        public void EndStomp() { }
        public void LandStomp() { }
        public void ModifyVerticalPlatformMovementSettings(GravityPlatformMovementSettings settings) { }
        public void OnCollisionGround(UnityEngine.Vector3 normal, UnityEngine.Collider collider) { }
        public override void OnDestroy() { }
        public void OnEnterInactive() { }
        public void OnEnterStompDownState() { }
        public void OnEnterStompIdleState() { }
        public override void OnExit() { }
        public void OnRestoreCheckpoint() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldStompAnimationKeepPlaying() { return default(bool); }
        public bool ShouldStompLandAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public override void UpdateCharacterState() { }
        public void UpdateStompDownState() { }
        public void UpdateStompFinishedState() { }
        public void UpdateStompIdleState() { }
        public void UpdateStompInactiveState() { }
        public partial class States
        {
            public fsm.IState Inactive;
            public fsm.IState StompDown;
            public fsm.IState StompFinished;
            public fsm.IState StompIdle;
            public States() { }
        }
    }
    public partial class SeinSwimming : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <RemainingBreath>k__BackingField;
        public UnityEngine.AnimationCurve AccelerationOverTime;
        public SeinSwimming.SwimmingAnimations Animations;
        public SoundProvider BashIntoWaterSoundProvider;
        public float BashTime;
        public float BoostDuration;
        public float BoostPeakTime;
        public SoundProvider BoostSwimsoundProvider;
        public float Breath;
        public UnityEngine.GameObject BreathingUI;
        public bool CanHorizontalSwimJump;
        public bool CanJumpUnderwater;
        public SeinSwimming.State CurrentState;
        public float Deceleration;
        public float DiveUnderwaterSpeed;
        public float DrownDamage;
        public float DurationBetweenDrowningDamage;
        public SoundProvider EmergeHighBreathSoundProvider;
        public SoundProvider EmergeLowBreathSoundProvider;
        public SoundProvider EmergeMedBreathSoundProvider;
        public bool HoldAToSwimLoop;
        public SoundProvider InWaterSoundProvider;
        public float JumpOutOfWaterSpeed;
        private Core.Ambience.Layer m_ambienceLayer;
        private float m_boostAnimationRemainingTime;
        private float m_boostTime;
        private LegacyAnimator[] m_breathingUIAnimators;
        private WaterZone m_currentWater;
        private float m_drowningDelay;
        private bool m_isBoosting;
        private SeinCharacter m_sein;
        private float m_swimAccelerationTime;
        private float m_swimIdleTime;
        private float m_swimMovingTime;
        public float MaxFallSpeed;
        public SoundProvider OutOfWaterSoundProvider;
        public float SkipSurfaceSpeedIn;
        public float SkipSurfaceSpeedOut;
        public float SmoothAngleDelta;
        public SoundProvider StompIntoWaterSoundProvider;
        public SoundSource SurfaceSwimmingSoundProvider;
        public float SwimAngle;
        public float SwimAngleDeltaLimit;
        public float SwimGravity;
        public float SwimJumpSpeedDelta;
        public HorizontalPlatformMovementSettings.SpeedMultiplierSet SwimmingOnSurfaceHorizontalSpeed;
        public SoundProvider SwimmingUnderwaterAmbience;
        public float SwimSpeed;
        public UnityEngine.AnimationCurve SwimSpeedBoostCurve;
        public float SwimUpwardsGravity;
        public MixerSnapshot UnderwaterMixerSnapshot;
        public SoundSource UnderwaterSwimmingSoundProvider;
        public UnityEngine.GameObject WaterSplashPrefab;
        public SeinSwimming() { }
        public CharacterGravity Gravity { get { return default(CharacterGravity); } }
        public bool HasUnlimitedBreathingUnderwater { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsSwimming { get { return default(bool); } }
        public bool IsUnderwater { get { return default(bool); } }
        public bool IsUpsideDown { get { return default(bool); } }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public float RemainingBreath { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Rect WaterSurfaceBound { get { return default(UnityEngine.Rect); } }
        private float WaterSurfacePositionY { get { return default(float); } }
        public void ApplySwimmingUnderwaterStuff() { }
        public override void Awake() { }
        public bool CanJump() { return default(bool); }
        public void ChangeState(SeinSwimming.State state) { }
        public void GetOutOfWater() { }
        public void HandleLeavingWater() { }
        public void HideBreathingUI() { }
        public void HorizontalFlip() { }
        public void HorizontalVerticalFlip() { }
        public void ModifyGravityPlatformMovementSettings(GravityPlatformMovementSettings settings) { }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public void OnBash(float angle) { }
        public override void OnDestroy() { }
        public void OnDisable() { }
        public void OnRestoreCheckpoint() { }
        public void RemoveUnderwaterSounds() { }
        public void RestoreBreath() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldIdleUnderwaterAnimationPlay() { return default(bool); }
        public bool ShouldJumpOutOfWaterAnimationIdleKeepPlaying() { return default(bool); }
        public bool ShouldJumpOutOfWaterAnimationMovingKeepPlaying() { return default(bool); }
        public bool ShouldSwimSurfaceAnimationPlay() { return default(bool); }
        public bool ShouldSwimUnderwaterAnimationPlay() { return default(bool); }
        public void ShowBreathingUI() { }
        public void Start() { }
        public void SurfaceSwimJump() { }
        public void SwimOnSurface() { }
        public void SwimUnderwater() { }
        public override void UpdateCharacterState() { }
        public void UpdateDrowning() { }
        public void UpdateOutOfWaterState() { }
        public void UpdateSwimIdleUnderwaterState() { }
        public void UpdateSwimmingOnSurfaceState() { }
        public void UpdateSwimMovingUnderwaterState() { }
        public void VerticalFlip() { }
        public partial class MovingAndIdleAnimationPair
        {
            public TextureAnimationWithTransitions Idle;
            public TextureAnimationWithTransitions Moving;
            public MovingAndIdleAnimationPair() { }
        }
        public enum State
        {
            OutOfWater = 0,
            SwimIdleUnderwater = 3,
            SwimmingOnSurface = 1,
            SwimMovingUnderwater = 2,
        }
        public partial class SwimmingAnimations
        {
            public UnityEngine.AnimationCurve AnimationFromBend;
            public SeinSwimming.MovingAndIdleAnimationPair JumpOutOfWater;
            public TextureAnimationWithTransitions SwimFlipHorizontalAnimation;
            public TextureAnimationWithTransitions SwimFlipHorizontalVerticalAnimation;
            public TextureAnimationWithTransitions SwimFlipVerticalAnimation;
            public TextureAnimationWithTransitions[] SwimHorizontal;
            public TextureAnimationWithTransitions SwimIdle;
            public TextureAnimationWithTransitions SwimIdleToSwimMiddle;
            public TextureAnimationWithTransitions[] SwimJumpLeft;
            public TextureAnimationWithTransitions SwimMiddleToIdleAntiClockwise;
            public TextureAnimationWithTransitions SwimMiddleToIdleClockwise;
            public SeinSwimming.MovingAndIdleAnimationPair SwimSurface;
            public SwimmingAnimations() { }
        }
    }
    public partial class SeinTrajectory : UnityEngine.MonoBehaviour
    {
        private const float AirAcceleration = 26f;
        private const float AirDecceleration = 26f;
        private const float CapsuleHeight = 1.2f;
        private const float CapsuleRadius = 0.35f;
        public bool DoubleJump;
        private const float DoubleJumpStrength = 10f;
        public float DoubleJumpTime;
        private const float Gravity = 26f;
        private const float GroundAcceleration = 60f;
        public SeinTrajectory.JumpType Jump;
        private const float JumpHeight = 3f;
        public float JumpingDuration;
        public float JumpingTime;
        private const float JumpSustainDeceleration = 60f;
        public bool Left;
        private const float MaxFallSpeed = 32f;
        private const float MaxSpeed = 12.6666f;
        public float RunningBackwardDuration;
        public float RunningBackwardTime;
        public float RunningForwardDuration;
        public float RunningForwardTime;
        public float StartSpeed;
        public float TotalTime;
        private readonly UnityEngine.Vector2 WallJump;
        public bool WallSlide;
        public float WallSlideDuration;
        public float WallSlideTime;
        public SeinTrajectory() { }
        public void OnDrawGizmos() { }
        public enum JumpType
        {
            Jump = 0,
            None = 2,
            WallJump = 1,
        }
    }
    public partial class SeinTransparentWallHandler : UnityEngine.MonoBehaviour
    {
        public SoundProvider EnterTransparentWallFirstTimeSoundProvider;
        public SoundProvider EnterTransparentWallSoundProvider;
        public static SeinTransparentWallHandler Instance;
        public SoundProvider LeaveTransparentWallSoundProvider;
        public SeinTransparentWallHandler() { }
        public void Awake() { }
    }
    public partial class SeinUI : UnityEngine.MonoBehaviour
    {
        public static bool DebugHideUI;
        public UnityEngine.GameObject EnergyBar;
        public BaseAnimator EnergyBarPulse;
        public LegacyAnimator EnergyOrbShake;
        public LegacyAnimator ExperienceOrbShake;
        public float FaderTransparency;
        public float FadeTime;
        public BaseAnimator HealthPulse;
        public LegacyAnimator HealthShake;
        public LegacyAnimator KeystonesShake;
        public UnityEngine.GameObject KeystoneUI;
        private float m_lastOpacity;
        private float m_opacity;
        public LegacyAnimator MapStonesShake;
        public UnityEngine.GameObject MapStoneUI;
        public bool ShowUI;
        public UnityEngine.GameObject SoulFlameFull;
        public LegacyAnimator SoulFlameNotReadyShake;
        public MessageProvider SoulFlameReadyMessage;
        public float SoulFlameReadyMessageDuration;
        public UnityEngine.GameObject SoulFlameUI;
        public UnityEngine.GameObject SoulFlameUIFlame;
        public TransparencyAnimator TransparencyAnimator;
        public UnityEngine.GameObject UI;
        public SeinUI() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void OnRestoreCheckpoint() { }
        public void OnSoulFlameReady() { }
        public void SetActive(UnityEngine.GameObject go, bool activate) { }
        public void SetTransparency(float amount) { }
        public void ShakeEnergyOrbBar() { }
        public void ShakeExperienceBar() { }
        public void ShakeHealthbar() { }
        public void ShakeKeystones() { }
        public void ShakeMapstones() { }
        public void ShakeSoulFlame() { }
        public void Start() { }
    }
    public partial class SeinWallChargeJump : CharacterState, ISeinReceiver
    {
        public float AntiGravityDuration;
        public BaseAnimator Arrow;
        public TextureAnimationWithTransitions ChargeAnimation;
        public float ChargedJumpStrength;
        public int Damage;
        public UnityEngine.GameObject ExplosionEffect;
        public float HorizontalDrag;
        public TextureAnimationWithTransitions JumpAnimation;
        public SoundProvider JumpSound;
        private float m_angleDirection;
        private float m_angularElevation;
        private float m_angularElevationSpeed;
        private System.Collections.Generic.HashSet<IAttackable> m_attackablesIgnore;
        private SeinWallChargeJump.State m_currentState;
        private SeinCharacter m_sein;
        private bool m_spriteMirrorLock;
        private float m_stateCurrentTime;
        public SeinWallChargeJump() { }
        public float AngularElevation { get { return default(float); } }
        public bool CanChargeJump { get { return default(bool); } }
        public CharacterSpriteMirror CharacterSpriteMirror { get { return default(CharacterSpriteMirror); } }
        public bool IsCharged { get { return default(bool); } }
        public bool IsCharging { get { return default(bool); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public PlayerAbilities PlayerAbilities { get { return default(PlayerAbilities); } }
        public bool SpriteMirrorLock { get { return default(bool); } set { } }
        public override void Awake() { }
        public void ChangeState(SeinWallChargeJump.State state) { }
        public void ModifyGravityPlatformMovementSettings(GravityPlatformMovementSettings settings) { }
        public void OnAnimationEnd() { }
        public void OnAnimationStart() { }
        public override void OnDestroy() { }
        public void OnDoubleJump() { }
        public override void OnExit() { }
        public void OnRestoreCheckpoint() { }
        public void PerformChargeJump() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldChargeJumpAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public void UpdateAimElevation() { }
        private void UpdateAimingState() { }
        public override void UpdateCharacterState() { }
        private void UpdateJumpingState() { }
        private void UpdateNormalState() { }
        public void UpdateState() { }
        public enum State
        {
            Aiming = 1,
            Jumping = 2,
            Normal = 0,
        }
    }
    public partial class SeinWallDangle : CharacterState, ISeinReceiver
    {
        public SeinCharacter Sein;
        public SeinWallDangle() { }
        public void SetReferenceToSein(SeinCharacter sein) { }
    }
    public partial class SeinWallJump : CharacterState, ISeinReceiver
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<UnityEngine.Vector2> <>f__am$cache11;
        public TextureAnimationWithTransitions[] AwayAnimation;
        public bool DontAllowJumpingTowardsWall;
        public TextureAnimationWithTransitions[] EdgeJumpAnimation;
        public UnityEngine.Vector2 JumpStrength;
        public bool LimitWallJumping;
        public float LockDoubleJumpTowardsDuration;
        private bool m_hasWallJumpedLeft;
        private bool m_hasWallJumpedRight;
        private float m_lockInputTimeRemaining;
        private bool m_spriteMirrorLock;
        public HorizontalPlatformMovementSettings.SpeedMultiplierSet MoveSpeed;
        private System.Action<UnityEngine.Vector2> OnWallJumpEvent;
        public TextureAnimationWithTransitions[] RegularAnimation;
        public SeinCharacter Sein;
        public TextureAnimationWithTransitions[] TowardsAnimation;
        public float WallJumpImpulse;
        public SurfaceToSoundProviderMap WallJumpSound;
        public SeinWallJump() { }
        public bool CanPerformWallJump { get { return default(bool); } }
        public CharacterSpriteMirror CharacterSpriteMirror { get { return default(CharacterSpriteMirror); } }
        public SeinDoubleJump DoubleJump { get { return default(SeinDoubleJump); } }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool SpriteMirrorLock { get { return default(bool); } set { } }
        public event System.Action<UnityEngine.Vector2> OnWallJumpEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnWallJumpEvent>m__4E(UnityEngine.Vector2 ) { }
        public void ApplyImpulseToWall(UnityEngine.Vector2 speed) { }
        public override void Awake() { }
        public void OnAnimationEnd() { }
        public void OnAnimationStart() { }
        public override void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public void PerformWallJump() { }
        public void PerformWallJumpLeft() { }
        public void PerformWallJumpRight() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator RoutineForMegWhoPlaysMarioAndSucksAtWallJumping() { return default(System.Collections.IEnumerator); }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldKeepPlayingWallJumpLeftAwayAnimation() { return default(bool); }
        public bool ShouldKeepPlayingWallJumpLeftRegularAnimation() { return default(bool); }
        public bool ShouldKeepPlayingWallJumpLeftTowardsAnimation() { return default(bool); }
        public bool ShouldKeepPlayingWallJumpRightAwayAnimation() { return default(bool); }
        public bool ShouldKeepPlayingWallJumpRightRegularAnimation() { return default(bool); }
        public bool ShouldKeepPlayingWallJumpRightTowardsAnimation() { return default(bool); }
        public override void UpdateCharacterState() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RoutineForMegWhoPlaysMarioAndSucksAtWallJumping>c__Iterator14 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal SeinWallJump <>f__this;
            internal float <i>__0;
            internal bool <left>__1;
            internal CharacterAnimationSystem.CharacterAnimationState <state>__3;
            internal float <t>__2;
            public <RoutineForMegWhoPlaysMarioAndSucksAtWallJumping>c__Iterator14() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class SeinWallSlide : CharacterState, ISeinReceiver
    {
        public SeinWallSlide.State CurrentState;
        public float GravityMultiplier;
        public float InputLockDuration;
        private float m_inputLockTimeRemaining;
        private float m_lastWallSlideDownSoundTime;
        private float m_minimumSoundDelay;
        private SoundPlayer m_wallSlideDownSound;
        private SoundPlayer m_wallSlideUpSound;
        public float MaxFallSpeed;
        public SeinCharacter Sein;
        public TextureAnimationWithTransitions SlideDownAnimation;
        public TextureAnimationWithTransitions SlideUpAnimation;
        public SurfaceToSoundProviderMap WallEnterSounds;
        public SurfaceToSoundProviderMap WallExitSounds;
        public SurfaceToSoundProviderMap WallSlideDownSound;
        public float WallSlideUpAnimationMinimiumSpeed;
        public SurfaceToSoundProviderMap WallSlideUpSound;
        public SeinWallSlide() { }
        public bool CanWallSlide { get { return default(bool); } }
        public SeinDoubleJump DoubleJump { get { return default(SeinDoubleJump); } }
        public CharacterGravity Gravity { get { return default(CharacterGravity); } }
        public bool IsOnWall { get { return default(bool); } }
        public bool IsWallSliding { get { return default(bool); } }
        public SeinJump Jump { get { return default(SeinJump); } }
        public CharacterLeftRightMovement LeftRightMovement { get { return default(CharacterLeftRightMovement); } }
        public PlatformMovement PlatformMovement { get { return default(PlatformMovement); } }
        public bool ShouldWallSlideDownAnimationPlay { get { return default(bool); } }
        public bool ShouldWallSlideUpAnimationPlay { get { return default(bool); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public SurfaceMaterialType WallSurfaceMaterialType { get { return default(SurfaceMaterialType); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <HandleSounds>m__4F() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <HandleSounds>m__50() { }
        public void ChangeState(SeinWallSlide.State state) { }
        public void HandleSounds() { }
        public void ModifyGravityPlatformMovementSettings(GravityPlatformMovementSettings settings) { }
        public void ModifyHorizontalPlatformMovementSettings(HorizontalPlatformMovementSettings settings) { }
        public new void OnDestroy() { }
        public override void OnExit() { }
        public void ResetMovingOffWallLockTimer() { }
        public override void Serialize(Archive ar) { }
        public void SetReferenceToSein(SeinCharacter sein) { }
        public bool ShouldWallSlideDownAnimationKeepPlaying() { return default(bool); }
        public bool ShouldWallSlideUpAnimationKeepPlaying() { return default(bool); }
        public void Start() { }
        public override void UpdateCharacterState() { }
        public void UpdateState() { }
        public enum State
        {
            Normal = 0,
            SlidingLeft = 1,
            SlidingRight = 2,
        }
    }
    public partial class SeinWorldState : SaveSerialize
    {
        public static SeinWorldState Instance;
        public SeinWorldState() { }
        public override void Awake() { }
        public override void OnDestroy() { }
        public void OnGameReset() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class SeinWorldStateCondition : Condition
    {
        public bool IsTrue;
        public WorldState State;
        public SeinWorldStateCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class SelectionGizmo : UnityEngine.MonoBehaviour
    {
        public SelectionGizmo() { }
        private void OnDrawGizmos() { }
    }
    public partial class SelfDestruct : Suspendable, IPooled
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public Entity Entity;
        public bool HalfTimeOnEasy;
        private float m_timeRemaining;
        public float WaitTime;
        public SelfDestruct() { }
        public override bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void FixedUpdate() { }
        public void OnPoolSpawned() { }
        public void Start() { }
    }
    [CategoryAttribute("Messaging")]
    public partial class SendMessageAction : ActionMethod
    {
        public string Message;
        [NotNull]
        public UnityEngine.GameObject Target;
        public SendMessageAction.MessageType TargetMessageType;
        public SendMessageAction() { }
        public override void Perform(IContext context) { }
        public enum MessageType
        {
            Broadcast = 1,
            Send = 0,
            SendUpwards = 2,
        }
    }
    [CategoryAttribute("Messaging")]
    public partial class SendMessageCurveAction : ActionWithDuration
    {
        public UnityEngine.AnimationCurve Delay;
        public string Message;
        public SendMessageCurveAction.MessageType TargetMessageType;
        public UnityEngine.GameObject[] Targets;
        public SendMessageCurveAction() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator Perform(int index) { return default(System.Collections.IEnumerator); }
        public override void Stop() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Perform>c__IteratorF : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal int <$>index;
            internal SendMessageCurveAction <>f__this;
            internal float <delay>__1;
            internal float <t>__2;
            internal UnityEngine.GameObject <target>__0;
            internal int index;
            public <Perform>c__IteratorF() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public enum MessageType
        {
            Broadcast = 1,
            Send = 0,
            SendUpwards = 2,
        }
    }
    [CustomShaderModifier("Separation Map Modifier")]
    [UberShaderCategoryAttribute((UberShaderCategory)(7))]
    [UberShaderOrderAttribute((UberShaderOrder)(49))]
    public partial class SeparationMapModifier : UberShaderModifier
    {
        public UberShaderTexture SepartationMapTexture;
        public SeparationMapModifier() { }
        public override void SetProperties() { }
    }
    public partial class SequencePlatform : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float DelayToNextPlatformAppear;
        public float DelayToVanish;
        private bool m_activated;
        private bool m_hasBeenTouched;
        public UnityEngine.Vector3 m_originalScale;
        private float m_vanishAmount;
        public SequencePlatform NextPlatform;
        public bool NextPlatformOnTouch;
        public bool Vanish;
        public bool VanishOnTouch;
        public bool VisibleAtStart;
        public SequencePlatform() { }
        public bool Activated { get { return default(bool); } set { } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private new void Awake() { }
        private void FixedUpdate() { }
        private void HideThePlatforms(System.Collections.Generic.HashSet<SequencePlatform> platformsToIgnore) { }
        private void OnCollisionEnter(UnityEngine.Collision collision) { }
        private new void OnDestroy() { }
        public void OnEnable() { }
        public void OnSequenceAppear() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator PerformNextPlatform() { return default(System.Collections.IEnumerator); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator PerformVanish() { return default(System.Collections.IEnumerator); }
        public override void Serialize(Archive ar) { }
        private void Start() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <PerformNextPlatform>c__Iterator3B : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal SequencePlatform <>f__this;
            internal float <t>__0;
            public <PerformNextPlatform>c__Iterator3B() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <PerformVanish>c__Iterator3C : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal SequencePlatform <>f__this;
            public <PerformVanish>c__Iterator3C() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class SequencePlatformAction : ActionMethod
    {
        private readonly System.Collections.Generic.HashSet<SequencePlatformB> m_found;
        public SequencePlatformB Sequence;
        public SequencePlatformAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SequencePlatformB : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public BaseAnimator[] BaseAnimators;
        public SequencePlatformB.SequencePlatformColliderSettings ColliderSettings;
        private bool m_activated;
        private float m_activatedTime;
        private readonly AnimatingFloat m_animatingFloat;
        private UnityEngine.Collider[] m_colliders;
        private float m_delayTillVisible;
        private FlipPlantLogic[] m_flipPlants;
        private bool m_touched;
        private float m_touchedTime;
        public SequencePlatformB NextPlatform;
        public SequencePlatformB.SequencePlatformOnActivatedSettings OnActivatedSettings;
        public SoundProvider OnActivateSoundProvider;
        public SoundProvider OnDeactivateSoundProvider;
        public SequencePlatformB.SequencePlatformOnTouchSettings OnTouchSettings;
        public bool VisibleAtStart;
        public SequencePlatformB() { }
        public bool Activated { get { return default(bool); } set { } }
        private bool CollidersShouldDisable { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void SetToAppear(float delay) { }
        public void Start() { }
        public partial class SequencePlatformColliderSettings
        {
            public float ActivateDelay;
            public float DeactivateDelay;
            public SequencePlatformColliderSettings() { }
        }
        public partial class SequencePlatformOnActivatedSettings
        {
            public float DelayToNextPlatformAppear;
            public float DelayToVanish;
            public bool TriggerNextPlatform;
            public bool Vanish;
            public SequencePlatformOnActivatedSettings() { }
        }
        public partial class SequencePlatformOnTouchSettings
        {
            public float DelayToNextPlatformAppear;
            public float DelayToVanish;
            public bool TriggerNextPlatform;
            public bool Vanish;
            public SequencePlatformOnTouchSettings() { }
        }
    }
    public partial class SequencePlatformBManager : SaveSerialize
    {
        public int CurrentPlatform;
        public System.Collections.Generic.List<SequencePlatformB> PlatformSequence;
        public SequencePlatformBManager() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class SessionController
    {
        private SessionController.State m_currentState;
        private bool m_shouldFlush;
        private float m_stateCurrentTime;
        private int m_writtenCount;
        public SessionController() { }
        private void ChangeState(SessionController.State state) { }
        private void DebugLog(string str) { }
        public void Destroy() { }
        public void Flush() { }
        public SessionController.State GetCurrentState() { return default(SessionController.State); }
        public void Init() { }
        public bool IsIdle() { return default(bool); }
        private void RealFlush() { }
        private bool ShouldFlush() { return default(bool); }
        public void Update() { }
        public enum State
        {
            Busy = 4,
            Idle = 3,
            Init = 0,
            Joining = 2,
            Starting = 1,
        }
    }
    [CategoryAttribute("Animator")]
    public partial class SetAnimatorPropertiesAction : ActionMethod
    {
        public LegacyAnimator[] Animators;
        public SetAnimatorPropertiesAction.FindAnimatorsMode AnimatorsMode;
        public UnityEngine.AnimationCurve Curve;
        public bool ShouldSetCurve;
        public float Speed;
        public UnityEngine.GameObject Target;
        public SetAnimatorPropertiesAction() { }
        public override void Perform(IContext context) { }
        public new void Start() { }
        public enum FindAnimatorsMode
        {
            GameObject = 0,
            GameObjectAndChildren = 1,
            List = 2,
        }
    }
    [CategoryAttribute("Animator")]
    public partial class SetAnimatorSpeedAction : ActionMethod
    {
        public BaseAnimator BaseAnimator;
        public float Speed;
        public SetAnimatorSpeedAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Camera")]
    public partial class SetCameraTargetAction : ActionMethod
    {
        [NotNull]
        public UnityEngine.Transform Target;
        public SetCameraTargetAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("General")]
    public partial class SetCharacterPosition : ActionMethod
    {
        public bool PlaceOnGround;
        public UnityEngine.Transform Position;
        public SetCharacterPosition() { }
        public override void Perform(IContext context) { }
    }
    public partial class SetCurrentCharacterAction : ActionMethod
    {
        public SetCurrentCharacterAction.Character Select;
        public SetCurrentCharacterAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public enum Character
        {
            BabySein = 2,
            Naru = 1,
            Sein = 0,
        }
    }
    public partial class SetDifficultyAction : ActionMethod
    {
        public DifficultyMode Difficulty;
        public SetDifficultyAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class SetGameModeToPrologueAction : ActionMethod
    {
        public SetGameModeToPrologueAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("SPAConfig")]
    public partial class SetLeaderboardValueAction : ActionMethod
    {
        public Leaderboards.Properties Property;
        public int Value;
        public Leaderboards.Views View;
        public SetLeaderboardValueAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SetMusicAction : ActionMethod
    {
        public SoundProvider Music;
        [NotNull]
        public MusicZone MusicZone;
        public SetMusicAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("General")]
    public partial class SetNightberryPositionAction : ActionMethod
    {
        public UnityEngine.Transform Target;
        public SetNightberryPositionAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SetNightBerryRespawnPosition : ActionMethod
    {
        public UnityEngine.Transform Target;
        public SetNightBerryRespawnPosition() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("General")]
    public partial class SetPositionAction : ActionMethod
    {
        public UnityEngine.Transform Position;
        public UnityEngine.Transform Target;
        public bool TargetPlayer;
        public bool UseX;
        public bool UseY;
        public SetPositionAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("General")]
    public partial class SetPositionToCurrentCharacterAction : ActionMethod
    {
        [NotNull]
        public UnityEngine.Transform Target;
        public bool UseX;
        public bool UseY;
        public SetPositionToCurrentCharacterAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SetSeinWorldStateAction : ActionMethod
    {
        public bool IsTrue;
        public WorldState State;
        public SetSeinWorldStateAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class SetSoundCompositionAction : ActionMethod
    {
        public SoundComposition SoundComposition;
        public SoundCompositionTransition Transition;
        public SetSoundCompositionAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SetSpriteAnimatorAction : ActionMethod
    {
        public TextureAnimation AnimationToSet;
        public ActionMethod OnAnimationEndedAction;
        public bool PerformIfSameAnimationIsPlaying;
        [NotNull]
        public SpriteAnimator SpriteAnimator;
        public SetSpriteAnimatorAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SettingsScreen : UnityEngine.MonoBehaviour
    {
        public static SettingsScreen Instance;
        private bool m_settingsChanged;
        public SettingsScreen() { }
        public void Awake() { }
        public void FlushSettings() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void SetDirty() { }
    }
    public partial class SettingsStringProvider : StringValueProvider
    {
        public SettingsStringProvider.SettingType Setting;
        public SettingsStringProvider() { }
        private string Off { get { return default(string); } }
        private string On { get { return default(string); } }
        public override string GetStringValue() { return default(string); }
        public enum SettingType
        {
            DamageText = 3,
            Fullscreen = 1,
            Language = 5,
            MotionBlur = 4,
            Resolution = 0,
            Vibration = 2,
            VSync = 6,
        }
    }
    public partial class SetTitleScreenAction : ActionMethod
    {
        public TitleScreenManager.Screen Screen;
        public SetTitleScreenAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("SPAConfig")]
    public partial class SetUserFloatAction : ActionMethod
    {
        public SPAConfigValue SpaConfigPropertyID;
        public float Value;
        public SetUserFloatAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("SPAConfig")]
    public partial class SetUserIntegerAction : ActionMethod
    {
        public SPAConfigValue SpaConfigPropertyID;
        public int Value;
        public SetUserIntegerAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("SPAConfig")]
    public partial class SetUserStatusAction : ActionMethod
    {
        public SPAConfigValue SpaConfigUserStatus;
        public SetUserStatusAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SetWaterRisingPropertiesAction : ActionMethod
    {
        public float Speed;
        public SetWaterRisingPropertiesAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SetWorldEventAction : ActionMethod
    {
        public int State;
        public WorldEvents WorldEvents;
        public SetWorldEventAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ShaderAnimationTimeDriver : UnityEngine.MonoBehaviour, ISuspendable
    {
        public float GameTimeMultiplier;
        private bool m_isSuspended;
        private float m_time;
        public ShaderAnimationTimeDriver() { }
        public float GameTime { get { return default(float); } }
        public bool IsSuspended { get { return default(bool); } set { } }
        private void Awake() { }
        private void OnDestroy() { }
        private void Update() { }
    }
    public static partial class ShaderProperties
    {
        public static int AdditiveLayerColor;
        public static int AdditiveLayerDistortColor;
        public static int AdditiveLayerExtraColor;
        public static int BlurSize;
        public static int Color;
        public static int ColorMask;
        public static int DepthFlipScreen;
        public static int Fade;
        public static int MainTexture;
        public static int MainTexUSAtlas;
        public static int MapFade;
        public static int MapMaskTextureA;
        public static int MapMaskTextureB;
        public static int MaskTex;
        public static int MultiplyLayerColor;
        public static int MultiplyLayerDistortColor;
        public static int MultiplyLayerExtraColor;
        public static int MultiplyLayerThirdColor;
        public static int RotationCurveSettings;
        public static int Screen;
        public static int ScreenMask;
        public static int TextureScalingAndOffset;
        public static int TintColor;
        private static void .cctor() { }
    }
    public partial class ShaderWarmMeUp : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<UnityEngine.Shader> Shaders;
        public ShaderWarmMeUp() { }
        private void Start() { }
    }
    public partial class SharedInformation
    {
        public const string ANNA_MACHINE_NAME = "remoevd-NATHAN";
        public const string ARIE_MACHINE_NAME = "MOONSTATION";
        public const string ARTHUR_MACHINE_NAME = "ARTHURBRUSSEE";
        public static string DATA_FOLDER_PATH;
        public const string DAVID_MACHINE_NAME = "DAVID-BEAST-PCC";
        public const string GENNADIY_MACHINE_NAME = "HENRYKOROL-PC";
        public const string JAMES_MACHINE_NAME = "JAY-PC";
        public const string JAMES_SECOND_MACHINE_NAME = "JAMES-PC";
        public const string JOHANNES_MACHINE_NAME = "JOHANNESPC";
        public const string MAX_MACHINE_NAME = "UNIVERSALMAXHYP";
        public const string MICHAEL_MACHINE_NAME = "MIKE-PC";
        private const string RAHEL_MACHINE_NAME = "RAHELBRUNOLD-PC";
        public const string THOMAS_MACHINE_NAME = "THOMASMAHLER-PC";
        public static System.Collections.Generic.Dictionary<string, string> UserDropboxPathMap;
        public static System.Collections.Generic.Dictionary<string, string> UserHostNameToName;
        public static System.Collections.Generic.Dictionary<string, string> UserHostNameToSourceAnimations;
        public const string WILLEM_MACHINE_NAME = "PHI";
        public SharedInformation() { }
        public static string UserSourceAnimationsPath { get { return default(string); } }
        private static void .cctor() { }
    }
    public partial class ShootingSpider : Enemy
    {
        public ShootingSpiderAnimations Animations;
        public PrefabSpawner ChargingEffect;
        public UnityEngine.GameObject IceBlock;
        public UnityEngine.Transform ProjectileSpawner;
        public ShootingSpiderSettings Settings;
        public PrefabSpawner ShootingEffect;
        public bool ShootThree;
        public ShootingSpiderSounds Sounds;
        public ShootingSpider.States State;
        public ShootingSpider() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__E4() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__E5() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__E6() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__E7() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__E8() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__E9() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__EA() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__EB() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Awake>m__EC() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Awake>m__ED() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Awake>m__EE() { return default(bool); }
        public new void Awake() { }
        public new void FixedUpdate() { }
        public new void OnTimedRespawn() { }
        public void ShootProjectile(UnityEngine.Vector3 position, UnityEngine.Vector3 direction, float speed) { }
        public void ShootProjectileAtPlayer() { }
        public bool ShouldCharge() { return default(bool); }
        public partial class States
        {
            public fsm.State Charging;
            public fsm.State Frozen;
            public fsm.State Hurt;
            public fsm.State Idle;
            public fsm.State Respawn;
            public fsm.State Shooting;
            public States() { }
        }
    }
    public partial class ShootingSpiderAnimations
    {
        public TextureAnimationWithTransitions Charging;
        public TextureAnimationWithTransitions Hurt;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions Respawn;
        public TextureAnimationWithTransitions Shooting;
        public ShootingSpiderAnimations() { }
    }
    public partial class ShootingSpiderPlaceholder : RespawningPlaceholder
    {
        public ShootingSpiderPlaceholder.ShootingSpiderPlaceholderSettings Settings;
        [AssetReferenceChoiceAttribute("Spider Type", new string[]{ "Assets\\frameworks\\enemies\\spider\\shootingSpider\\prefabs\\shootingSpiderEnemy.prefab", "Assets\\frameworks\\enemies\\spider\\shootingSpider\\textures\\shootingSpiderPlaceholder.png", "Regular Spider", "Assets\\frameworks\\enemies\\spider\\shootingSpider\\prefabs\\spreadshotSpiderEnemy.prefab", "Assets\\frameworks\\enemies\\spider\\shootingSpider\\textures\\spreadshotSpiderPlaceholder.png", "Spreadshot Spider"})]
        public UnityEngine.GameObject ShootingSpider;
        public ShootingSpiderPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class ShootingSpiderPlaceholderSettings
        {
            public float DamageOnTouch;
            public float Health;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public PhysicalSystemManager PhysicalSystem;
            public float ProjectileDamage;
            public float ProjectileSpeed;
            public Rope Rope;
            public bool SpreadShot;
            public ShootingSpiderPlaceholderSettings() { }
        }
    }
    public partial class ShootingSpiderSettings
    {
        public float ChargingDuration;
        public float ChargingRange;
        public float Gravity;
        public UnityEngine.GameObject Projectile;
        public float ProjectileDamage;
        public float ProjectileSpeed;
        public UnityEngine.GameObject RespawnEffect;
        public float ShootingDuration;
        public float ShootingImpulse;
        public bool SpreadShot;
        public ShootingSpiderSettings() { }
    }
    public partial class ShootingSpiderSounds
    {
        public SoundProvider Charge;
        public SoundProvider Hurt;
        public SoundSource Idle;
        public SoundProvider Shoot;
        public ShootingSpiderSounds() { }
    }
    public partial class ShorterHintZone : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Rect m_bounds;
        public ShorterHintZone() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public static bool IsInside { get { return default(bool); } }
        public void Awake() { }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class ShotCombo
    {
        public float CooldownTimeForCompletedCombo;
        public float CooldownTimeForIncompleteCombo;
        private bool m_canShoot;
        private int m_currentShot;
        private float m_timeSinceLastShot;
        public int NumberOfShotsPerCombo;
        public float ShotDelay;
        public bool UseShotDelay;
        public ShotCombo() { }
        public bool CanShoot { get { return default(bool); } set { } }
        public int CurrentShot { get { return default(int); } set { } }
        public void Shoot() { }
        public void Update(float dt) { }
        public void UpdateState() { }
    }
    [CategoryAttribute("Hints")]
    internal partial class ShowAbilityMessageAction : ActionMethod
    {
        [NotNull]
        public MessageProvider AbilityMessage;
        public UnityEngine.GameObject Avatar;
        public ShowAbilityMessageAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ShowAchievementsAction : ActionMethod
    {
        public ShowAchievementsAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ShowAreaMessageAction : ActionMethod
    {
        public MessageProvider Message;
        public ShowAreaMessageAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ShowHelpAction : ActionMethod
    {
        public ShowHelpAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ShowHelpTextAction : PerformingAction
    {
        [NotNull]
        public UnityEngine.GameObject Avatar;
        [NotNull]
        public MessageProvider HelpMessage;
        private MessageBox m_messageBox;
        public SoundProvider OpenSound;
        public ShowHelpTextAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        public void OnMessageScreenHide() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [CategoryAttribute("Hints")]
    internal partial class ShowHintAction : ActionMethod
    {
        public float Duration;
        public MessageProvider HintMessage;
        [NotNull]
        public UnityEngine.Texture2D HintTexture;
        public HintLayer Layer;
        public ShowHintAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("SPAConfig")]
    public partial class ShowLeaderboardsAction : ActionMethod
    {
        public ShowLeaderboardsAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ShowMainMenuAction : ActionMethod
    {
        public bool Immediate;
        public bool Show;
        public ShowMainMenuAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class ShowMessageBoxAction : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject MessageBox;
        public MessageProvider MessageProvider;
        public ShowMessageBoxAction() { }
        public void Start() { }
    }
    public partial class ShowOptionsAction : ActionMethod
    {
        public ShowOptionsAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Hints")]
    internal partial class ShowPagesAction : PerformingAction
    {
        public ActionMethod ActionOnFinishedReading;
        public UnityEngine.GameObject Avatar;
        public Condition Condition;
        public bool FreezeTime;
        private MessageBox m_message;
        public MessageProvider Message;
        public UnityEngine.Texture2D[] Pages;
        public ShowPagesAction.MessageType Type;
        public ShowPagesAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        public void OnFinishedReading() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
        public enum MessageType
        {
            Ability = 0,
            Pickup = 1,
        }
    }
    public partial class ShowPurchaseFullGameMarketplaceAction : ActionMethod
    {
        public ShowPurchaseFullGameMarketplaceAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Sein")]
    public partial class ShowSeinUIAction : ActionMethod
    {
        public bool ShouldShow;
        public ShowSeinUIAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class ShowSpiritTreeTextAction : ActionMethod
    {
        public float Duration;
        public MessageProvider Message;
        public float Scale;
        public UnityEngine.Vector2 ScreenPosition;
        public float ScreenWeight;
        public bool ShowAsUi;
        public UnityEngine.Transform Target;
        public SoundProvider Voice;
        public ShowSpiritTreeTextAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ShowStoryTextAction : PerformingAction
    {
        public bool FreezeGame;
        private MessageBox m_messageBox;
        [NotNull]
        public MessageProvider StoryMessage;
        public ShowStoryTextAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        public void OnMessageScreenHide() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class ShowTextBoxes : PerformingAction
    {
        public TextBoxMessage Message;
        public UnityEngine.Vector3 MessageBoxOffset;
        public TimedActionSequence PauseSequence;
        public UnityEngine.Vector3 Position;
        public bool PositionAtPlayer;
        public string[] Strings;
        public UnityEngine.GameObject textSetupGameObject;
        public ShowTextBoxes.VoiceType Voice;
        public ShowTextBoxes() { }
        public override bool IsPerforming { get { return default(bool); } }
        public void OnComplete() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
        public enum VoiceType
        {
            Ori = 0,
            SpiritTree = 1,
        }
    }
    public partial class ShowWispTextAction : PerformingAction
    {
        private MessageBox m_messageBox;
        public ShowWispTextAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        public void OnFinishedReading() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class ShowWorldMapAction : ActionMethod
    {
        public ShowWorldMapAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class ShowWorldMapObjectiveAction : PerformingAction
    {
        private bool m_isPerforming;
        public Objective Objective;
        public ShowWorldMapObjectiveAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        public void OnFinish() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    [UnityEngine.RequireComponent(typeof(UnityEngine.ParticleSystem))]
    public partial class ShurikenParticleAnimator : BaseAnimator
    {
        private UnityEngine.ParticleSystem m_particleSystem;
        private bool m_startedPlayback;
        public ShurikenParticleAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        private UnityEngine.ParticleSystem ParticleSystem { get { return default(UnityEngine.ParticleSystem); } }
        public override void CacheOriginals() { }
        public override void OnPoolSpawned() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float time, bool forceSample) { }
    }
    public partial class SinMovement : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public System.Collections.Generic.List<SinMovement.Affect> Affectors;
        public float CurrentTime;
        public bool DivideByFifty;
        [UnityEngine.HideInInspector]
        public UnityEngine.Vector3 LocalPosition;
        [UnityEngine.HideInInspector]
        public UnityEngine.Quaternion LocalRotation;
        [UnityEngine.HideInInspector]
        public UnityEngine.Vector3 LocalScale;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Vector3 m_startPosition;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Quaternion m_startRotation;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Vector3 m_startScale;
        private bool m_usePosition;
        private bool m_useRotation;
        private bool m_useScale;
        [UnityEngine.HideInInspector]
        public UnityEngine.Transform Transform;
        public SinMovement() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public new void Awake() { }
        public void FixedUpdate() { }
        public new void OnDestroy() { }
        public void OnValidate() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void UpdateMovement(float time) { }
        public partial class Affect
        {
            private float m_o;
            public float Offset;
            public float OffsetRandom;
            public float Period;
            public float PeriodRandom;
            public float Range;
            public float RangeRandom;
            public SinMovement.Affect.AffectType Type;
            public Affect() { }
            public void Apply(SinMovement sinMovement, float time) { }
            public void Start(SinMovement sinMovement) { }
            public enum AffectType
            {
                Angle = 3,
                Height = 2,
                Opacity = 4,
                Size = 0,
                Width = 1,
                X = 5,
                Y = 6,
                Z = 7,
            }
        }
    }
    public partial class SinMovingPlatform : SaveSerialize, IDynamicGraphicHierarchy, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public Utility.MoveDirection Direction;
        public bool DontMoveWhenDeactivatedInitially;
        public SoundSource DownSound;
        private UnityEngine.Vector3 m_positionCenter;
        private int m_previousSign;
        private float m_time;
        public float Offset;
        public float Period;
        public float Range;
        public SoundSource UpSound;
        public SinMovingPlatform() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void UpdatePosition() { }
    }
    public partial class SkillItem : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Color <LargeIconColor>k__BackingField;
        public AbilityType Ability;
        public MessageProvider DescriptionMessageProvider;
        public ActionMethod GainSkillSequence;
        public bool HasSkillItem;
        public UnityEngine.Renderer Icon;
        public UnityEngine.Texture LargeIcon;
        public UnityEngine.GameObject LearntSkillGlow;
        private TransparencyAnimator m_animator;
        public MessageProvider NameMessageProvider;
        public System.Collections.Generic.List<AbilityType> RequiredAbilities;
        public int RequiredHardSkillPoints;
        public System.Collections.Generic.List<SkillItem> RequiredItems;
        public int RequiredSkillPoints;
        public SkillItem() { }
        public bool AbilitiesRequirementMet { get { return default(bool); } }
        public int ActualRequiredSkillPoints { get { return default(int); } }
        public bool CanEarnSkill { get { return default(bool); } }
        public UnityEngine.Color LargeIconColor { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Color); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool RequiresAbilitiesOrItems { get { return default(bool); } }
        public bool SoulRequirementMet { get { return default(bool); } }
        public bool Visible { get { return default(bool); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnEnable() { }
        public void UpdateItem() { }
    }
    public partial class SkillPointPickup : PickupBase
    {
        public int Amount;
        public SkillPointPickup() { }
        public override void OnCollectorCandidateTouch(UnityEngine.GameObject collector) { }
    }
    public partial class SkillPointsFloatProvider : FloatValueProvider
    {
        public SkillPointsFloatProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SkillTreeAction : ActionMethod
    {
        public SkillTreeAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SkillTreeInfoPanelTextLayout : UnityEngine.MonoBehaviour
    {
        public CatlikeCoding.TextBox.TextBox Description;
        public SkillTreeInfoPanelTextLayout() { }
        public void FixedUpdate() { }
    }
    public partial class SkillTreeLaneLogic : SaveSerialize
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<SkillTreeLaneLogic.SkillTreeType> <>f__am$cache7;
        public UnityEngine.Color LargeIconColor;
        private float m_index;
        private bool m_laneAchievedAwarded;
        public static System.Action<SkillTreeLaneLogic.SkillTreeType> OnSkillTreeDoneEvent;
        public BaseAnimator SkillEarntAnimator;
        public System.Collections.Generic.List<SkillItem> Skills;
        public SkillTreeLaneLogic.SkillTreeType Type;
        public SkillTreeLaneLogic() { }
        public bool HasAllSkills { get { return default(bool); } }
        public float Index { get { return default(float); } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnSkillTreeDoneEvent>m__20(SkillTreeLaneLogic.SkillTreeType ) { }
        public void FixedUpdate() { }
        public void OnEnable() { }
        public override void Serialize(Archive ar) { }
        public void UpdateItems(bool instant) { }
        public enum SkillTreeType
        {
            Combat = 2,
            Energy = 0,
            Utility = 1,
        }
    }
    public partial class SkillTreeManager : MenuScreen
    {
        public MessageBox AbilityDescription;
        public UnityEngine.GameObject AbilityDiskInfoPanel;
        public MessageBox AbilityDiskInfoPanelDescription;
        public MessageProvider AbilityMasteredMessageProvider;
        public System.Collections.Generic.List<SkillTreeManager.AbilityMessageProvider> AbilityMessages;
        public MessageProvider AbilityPointMessageProvider;
        public MessageProvider AbilityPointsMessageProvider;
        public MessageBox AbilityTitle;
        public SoundProvider CloseSound;
        public SkillTreeLaneLogic CombatLane;
        public SkillItem CurrentSkillItem;
        public UnityEngine.Transform Cursor;
        public SkillTreeLaneLogic EnergyLane;
        public UnityEngine.GameObject GainSkillEffect;
        public UnityEngine.GameObject InfoPanel;
        public static SkillTreeManager Instance;
        public UnityEngine.GameObject LargeIcon;
        public UnityEngine.Renderer LargeIconGlow;
        public CleverMenuItemSelectionManager NavigationManager;
        public ActionMethod OnAlreadyEarnedAbility;
        public ActionMethod OnCantEarnSkill;
        public ActionMethod OnGainAbility;
        public SoundProvider OpenSound;
        public MessageBox RequirementsLineA;
        public LegacyAnimator RequirementsLineAShake;
        public MessageProvider RequiresMessageProvider;
        public AchievementAsset SpentFirstSkillPointAchievement;
        public SkillTreeLaneLogic UtilityLane;
        public SkillTreeManager() { }
        public MessageDescriptor AbilityMastered { get { return default(MessageDescriptor); } }
        public bool AllLanesFull { get { return default(bool); } }
        public MessageProvider AbilityName(AbilityType ability) { return default(MessageProvider); }
        public void Awake() { }
        public static bool Condition(CleverMenuItemSelectionManager.NavigationData navigationData) { return default(bool); }
        public override void Hide() { }
        public override void HideImmediate() { }
        public string NameText(SkillItem skillItem) { return default(string); }
        public void OnBackPressed() { }
        public void OnDestroy() { }
        public void OnMenuItemChange() { }
        public void OnMenuItemPressed() { }
        public string RequiredAbilitiesText(SkillItem skillItem) { return default(string); }
        public string RequiredSoulsText(SkillItem skillItem) { return default(string); }
        public override void Show() { }
        public override void ShowImmediate() { }
        public void UpdateRequirementsText() { }
        public partial class AbilityMessageProvider
        {
            public AbilityType AbilityType;
            public MessageProvider MessageProvider;
            public AbilityMessageProvider() { }
        }
    }
    public partial class SkipCutsceneController : UnityEngine.MonoBehaviour
    {
        public static SkipCutsceneController Instance;
        private System.Action m_skipCutsceneAction;
        public SkipCutsceneController() { }
        public bool SkippingAvailable { get { return default(bool); } }
        public void Awake() { }
        public void Clear() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void PrewarmSkip() { }
        public void RegisterSkipCutscene(System.Action action) { }
        public void SkipCutscene() { }
        public void SkipPrologue() { }
    }
    public partial class SlugController : EntityController
    {
        public SlugController() { }
    }
    public partial class SlugDamageReciever : EntityDamageReciever
    {
        public SlugDamageReciever() { }
        public override void OnRecieveDamage(Damage damage) { }
    }
    public partial class SlugDirectionalAnimation
    {
        public TextureAnimationWithTransitions Upright;
        public TextureAnimationWithTransitions UpsideDown;
        public TextureAnimationWithTransitions VerticalDown;
        public TextureAnimationWithTransitions VerticalUp;
        public SlugDirectionalAnimation() { }
    }
    public partial class SlugDirectionalAnimationPicker
    {
        public SlugDirectionalAnimation Animation;
        private UnityEngine.Vector3 m_lastDirection;
        public SlugDirectionalAnimationPicker(SlugDirectionalAnimation animation) { }
        public TextureAnimationWithTransitions PickAnimation(UnityEngine.Vector3 up, bool faceLeft) { return default(TextureAnimationWithTransitions); }
    }
    public partial class SlugEnemy : Enemy
    {
        public UnityEngine.AnimationCurve AnimationFromBend;
        public TraceGroundMovement Movement;
        public SlugEnemy() { }
        public float BendValue { get { return default(float); } }
    }
    public partial class SlugFallingState : SlugState
    {
        public SlugFallingState(SlugEnemy slug) : base (default(SlugEnemy)) { }
    }
    public partial class SlugFrozenState : SlugState
    {
        public TextureAnimationWithTransitions Frozen;
        public SlugFrozenState(SlugEnemy slug, TextureAnimationWithTransitions frozen) : base (default(SlugEnemy)) { }
    }
    public partial class SlugState : fsm.IState
    {
        protected SlugEnemy Slug;
        public SlugState(SlugEnemy slug) { }
        public virtual void OnEnter() { }
        public virtual void OnExit() { }
        public virtual void UpdateState() { }
    }
    public partial class SmokeTrail : UnityEngine.MonoBehaviour
    {
        private bool m_allPointsAdded;
        private int m_currentNumberOfPoints;
        private UnityEngine.Vector3[] m_directions;
        private UnityEngine.Material m_lineMaterial;
        private LineMesh m_lineMesh;
        private float m_lineSegment;
        private UnityEngine.Vector3[] m_positions;
        private UnityEngine.Renderer m_renderer;
        private float m_timeSinceUpdate;
        private UnityEngine.Transform m_transform;
        public int NumberOfPoints;
        public float RiseSpeed;
        public float Spread;
        public float UpdateSpeed;
        public SmokeTrail() { }
        public UnityEngine.Vector3 GetSmokeVector() { return default(UnityEngine.Vector3); }
        public void Start() { }
        public void Update() { }
    }
    public partial class SmoothCurve : UnityEngine.MonoBehaviour
    {
        public bool ClosedShape;
        public System.Collections.Generic.List<SmoothCurve.PathNode> Nodes;
        public float TangentMultiplier;
        public SmoothCurve() { }
        public int NodeCount { get { return default(int); } }
        public void ApplyMesh() { }
        public void AutoSmoothNode(SmoothCurve.PathNode node, UnityEngine.Vector2 previousPosition, UnityEngine.Vector2 nextPosition) { }
        private void AutoSmoothNode(int nodeIndex) { }
        public void AutoSmoothNodes() { }
        public void GenerateMesh(UnityEngine.Mesh mesh) { }
        public SmoothCurve.PathNode GetNode(int index) { return default(SmoothCurve.PathNode); }
        public SmoothCurve.PathNode GetNodeWrapped(int index) { return default(SmoothCurve.PathNode); }
        public void Start() { }
        public partial class PathNode
        {
            public UnityEngine.Vector2 Position;
            public UnityEngine.Vector2 TangentIn;
            public UnityEngine.Vector2 TangentOut;
            public PathNode() { }
            public bool TangentsAreLinked { get { return default(bool); } }
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SmoothLinesPlugin : UnityEngine.MonoBehaviour
    {
        public CageStructureTool CageStructureTool;
        public System.Collections.Generic.List<System.Collections.Generic.List<int>> Loops;
        public System.Collections.Generic.Dictionary<int, SmoothLinesPlugin.NodeMetaData> Nodes;
        public float TangentMultiplier;
        public SmoothLinesPlugin() { }
        public static UnityEngine.Vector2 CalculateTangentIn(UnityEngine.Vector3 position, UnityEngine.Vector3 previousPosition, UnityEngine.Vector3 nextPosition, float tangentMultiplier) { return default(UnityEngine.Vector2); }
        public static UnityEngine.Vector2 CalculateTangentOut(UnityEngine.Vector3 position, UnityEngine.Vector3 previousPosition, UnityEngine.Vector3 nextPosition, float tangentMultiplier) { return default(UnityEngine.Vector2); }
        public void OnEnable() { }
        public void SmoothLines() { }
        public partial class NodeMetaData
        {
            public UnityEngine.Vector3 TangentIn;
            public UnityEngine.Vector3 TangentOut;
            public NodeMetaData() { }
        }
    }
    public partial class SmoothTransformFollower : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Vector3 m_currentPosition;
        public float ResetDistance;
        public float RotationFactor;
        public float RotationOffset;
        public float SpeedSmoothingFactor;
        public UnityEngine.Vector3 TargetOffset;
        public UnityEngine.Transform TargetToFollow;
        public SmoothTransformFollower() { }
        private UnityEngine.Vector3 CurrentFollowedPosition { get { return default(UnityEngine.Vector3); } }
        private void FixedUpdate() { }
        private void Start() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SnapToGrid : UnityEngine.MonoBehaviour
    {
        public static UnityEngine.Vector3 Grid;
        public SnapToGrid() { }
        private static void .cctor() { }
        private static float Round(float v, float x) { return default(float); }
        private static UnityEngine.Vector3 Round(UnityEngine.Vector3 vector, UnityEngine.Vector3 grid) { return default(UnityEngine.Vector3); }
        private void Start() { }
        private void Update() { }
    }
    public partial class SolidSlopeCollision : UnityEngine.MonoBehaviour
    {
        public SolidSlopeCollision() { }
        private void Awake() { }
    }
    public partial class SoulFlame : UnityEngine.MonoBehaviour
    {
        public BaseAnimator AppearAnimator;
        public float EnterRadius;
        public float ExitRadius;
        private bool m_isInside;
        private UnityEngine.Transform m_transform;
        public UnityEngine.GameObject RekindleEffect;
        public ActionSequence TriggerSequence;
        public SoulFlame() { }
        public bool IsInside { get { return default(bool); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public void Awake() { }
        public void Disappear() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnGameSerializeLoad() { }
        public void OnRekindle() { }
        public void Start() { }
    }
    public partial class SoulFlameCastTrigger : Trigger
    {
        public SoulFlameCastTrigger() { }
        public new void Awake() { }
        public new void OnDestroy() { }
        public void OnSoulFlameCast() { }
    }
    [CategoryAttribute("Sound")]
    public partial class SoundAction : ActionMethod
    {
        public SoundAction.CommandType Command;
        public float FadeDuration;
        [NotNull]
        public SoundSource Sound;
        public SoundAction() { }
        private string TargetName { get { return default(string); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public enum CommandType
        {
            Pause = 1,
            Play = 0,
            Stop = 2,
            StopAndFadeOut = 3,
        }
    }
    public partial class SoundAnimator : BaseAnimator
    {
        private float m_length;
        private SoundDescriptor m_soundDescriptor;
        private SoundPlayer m_soundPlayer;
        private bool m_started;
        public SoundProvider SoundProvider;
        public UnityEngine.Transform Target;
        public SoundAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <SampleValue>m__12F() { }
        public override void CacheOriginals() { }
        private SoundDescriptor GetSoundDescriptor() { return default(SoundDescriptor); }
        public void OnDisable() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class SoundComposition : UnityEngine.ScriptableObject
    {
        public System.Collections.Generic.List<SoundComposition.SoundLayer> Layers;
        public int LoopCount;
        public float LoopDuration;
        public System.Collections.Generic.List<SoundComposition.SoundLoop> Loops;
        public SoundComposition() { }
        public partial class SoundLayer
        {
            public System.Collections.Generic.List<bool> LoopsToPlay;
            public UnityEngine.AudioClip Sound;
            public float Volume;
            public UnityEngine.AnimationCurve VolumeOverTime;
            public SoundLayer() { }
        }
        public partial class SoundLoop
        {
            public UnityEngine.AudioClip Sound;
            public float Volume;
            public UnityEngine.AnimationCurve VolumeOverTime;
            public SoundLoop() { }
        }
    }
    public partial class SoundCompositionManager : UnityEngine.MonoBehaviour
    {
        public SoundCompositionTransition DefaultSilenceTransition;
        private SoundCompositionPlayer m_soundCompositionPlayer;
        public SoundCompositionManager() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void PlaySound(SoundComposition soundComposition, SoundCompositionTransition transition) { }
        public void StopMusic() { }
    }
    public partial class SoundCompositionPlayer : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<SoundPlayer> Layers;
        public System.Collections.Generic.List<SoundPlayer> Loops;
        private bool m_isPlaying;
        private int m_loop;
        private float m_loopDuration;
        private float m_time;
        public SoundComposition SoundComposition;
        public SoundCompositionPlayer() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public void Play() { }
        public void SetSoundComposition(SoundComposition soundComposition) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FixedUpdate>c__AnonStorey59
        {
            internal SoundCompositionPlayer <>f__this;
            internal int index;
            public <FixedUpdate>c__AnonStorey59() { }
            internal void <>m__10D() { }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <Play>c__AnonStorey58
        {
            internal SoundCompositionPlayer <>f__this;
            internal int index;
            public <Play>c__AnonStorey58() { }
            internal void <>m__10C() { }
        }
    }
    public partial class SoundCompositionSoundVolumeAnimator : LegacyAnimator
    {
        public UnityEngine.AudioClip Sound;
        public SoundCompositionSoundVolumeAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
    }
    public partial class SoundCompositionTransition : UnityEngine.ScriptableObject
    {
        public SoundCompositionTransition.FadeInformation DefaultFadeIn;
        public SoundCompositionTransition.FadeInformation DefaultFadeOut;
        public System.Collections.Generic.List<SoundCompositionTransition.SoundFadeInformation> FadeIn;
        public System.Collections.Generic.List<SoundCompositionTransition.SoundFadeInformation> FadeOut;
        public float NextSoundDelay;
        public UnityEngine.AudioClip Sound;
        public float TransitionDelay;
        public float Volume;
        public SoundCompositionTransition() { }
        public float EndPreviousSoundTime { get { return default(float); } }
        public float EndTransitionTime { get { return default(float); } }
        public partial class FadeInformation
        {
            public UnityEngine.AnimationCurve FadeCurve;
            public float FadeDuration;
            public float FadeStartTime;
            public FadeInformation() { }
        }
        public partial class SoundFadeInformation
        {
            public UnityEngine.AnimationCurve FadeCurve;
            public float FadeDuration;
            public float FadeStartTime;
            public UnityEngine.AudioClip Sound;
            public SoundFadeInformation() { }
        }
    }
    public partial class SoundCompositionTransitionHandler : UnityEngine.MonoBehaviour
    {
        public SoundCompositionPlayer From;
        private bool m_playedNext;
        private bool m_playedTransition;
        private float m_time;
        private SoundPlayer m_transitionPlayer;
        public SoundCompositionPlayer To;
        public SoundCompositionTransition Transition;
        public SoundCompositionTransitionHandler() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <FixedUpdate>m__10E() { }
        private void ApplyFadeIn(SoundPlayer soundPlayer, UnityEngine.AudioClip sound) { }
        private void ApplyFadeOut(SoundPlayer soundPlayer, UnityEngine.AudioClip sound) { }
        public void FixedUpdate() { }
    }
    internal partial class SoundController2D : UnityEngine.MonoBehaviour
    {
        private UnityEngine.AudioSource m_audio;
        private UnityEngine.Transform m_transform;
        public float MaxDistance;
        public float MinDistance;
        public UnityEngine.AudioRolloffMode RolloffMode;
        public float Volume;
        public SoundController2D() { }
        private void LateUpdate() { }
        public void OnStart() { }
    }
    public enum SoundDamageType
    {
        Acid = 6,
        Bash = 12,
        ChargeFlame = 11,
        Dash = 16,
        Grenade = 13,
        GrenadeSplatter = 14,
        Ice = 2,
        IceSpiritFlame = 10,
        Laser = 4,
        Lava = 1,
        NightBerryDied = 19,
        Projectile = 5,
        RegularSpiritFlame = 8,
        RegularSpiritFlameThirdShot = 9,
        SlugSpike = 7,
        Spikes = 3,
        Stomp = 17,
        StompBlast = 18,
        UndergroundSpiritFlame = 15,
        Water = 0,
    }
    public partial class SoundDescriptor
    {
        public UnityEngine.AudioClip AudioClip;
        public LowPassFilterSettings LowPassFilterSettings;
        private bool m_ownLowPass;
        private bool m_ownSoundSize;
        public MixerGroupType MixerGroup;
        public float Pitch;
        public bool ShouldBePanned;
        public SoundProvider SoundProvider;
        public SoundSize SoundSize;
        public bool SyncToTime;
        public float Volume;
        public SoundDescriptor() { }
        public SoundDescriptor(UnityEngine.AudioClip audioClip, float volume) { }
        public void Reset() { }
        public void SetLowPassFilter(LowPassFilterSettings settings) { }
        public void SetSoundSize(SoundSize size) { }
    }
    public partial class SoundLog : UnityEngine.MonoBehaviour
    {
        private static string m_currentText;
        private static System.Collections.Generic.List<string> m_filters;
        private static System.Collections.Generic.Queue<string> recentSoundCalls;
        public SoundLog() { }
        private static void .cctor() { }
        public static void AddFilter(string filter) { }
        public static void AddSoundCall(string clipName, string providerName) { }
        private void OnGUI() { }
        public static void ResetFilters() { }
        public static void ResetLog() { }
    }
    public partial class SoundMessage : UnityEngine.MonoBehaviour
    {
        private static UnityEngine.GUIStyle _staticRectStyle;
        private static UnityEngine.Texture2D _staticRectTexture;
        public string text;
        public SoundMessage() { }
        public static void GUIDrawRect(UnityEngine.Rect position, UnityEngine.Color color) { }
        private void OnGUI() { }
    }
    public partial class SoundMessages : UnityEngine.MonoBehaviour
    {
        public SoundMessages() { }
        public static void ShowMessage(string name) { }
    }
    public partial class SoundPlayer : UnityEngine.MonoBehaviour, ISuspendable
    {
        public static System.Collections.Generic.HashSet<SoundPlayer> All;
        public UnityEngine.Transform AttachTo;
        public bool DestroyOnFadeOut;
        public bool DestroyOnFinished;
        public bool DestroyOnRestart;
        public float Length;
        [PooledSafeAttribute]
        public LowPassFilterSettings LowPassFilterSettings;
        private UnityEngine.AudioSource m_audioSource;
        private static float m_cameraWidth;
        private bool m_checkedLowPass;
        private float m_distance;
        private float m_fadeAmount;
        private float m_fadeSpeed;
        private float m_falloffVolumeModifier;
        private int m_frame;
        private bool m_isPlaying;
        private bool m_isSuspended;
        private bool m_keepInSync;
        private float m_lastRealTime;
        private UnityEngine.AudioLowPassFilter m_lowPassFilter;
        private MixerGroupType m_mixerGroup;
        private float m_playTime;
        private static UnityEngine.Vector3 m_previousCameraOffset;
        private bool m_previousIsHighResources;
        private bool m_timeScaleChanged;
        private float m_timeToSet;
        private float m_volume;
        public bool PauseOnSuspend;
        public bool ShouldBePanned;
        [PooledSafeAttribute]
        public SoundDescriptor SoundDescriptor;
        public SoundSize SoundSize;
        public SoundType SoundType;
        public SoundPlayer() { }
        public bool AllSoundsCanPlay { get { return default(bool); } }
        public float AudioSourceTime { get { return default(float); } }
        public UnityEngine.AudioClip Clip { get { return default(UnityEngine.AudioClip); } set { } }
        public bool IsSuspended { get { return default(bool); } set { } }
        public bool Loop { get { return default(bool); } set { } }
        public float Pitch { get { return default(float); } set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } set { } }
        public bool TimeIsScaled { get { return default(bool); } }
        public float Volume { get { return default(float); } set { } }
        private static void .cctor() { }
        public void Awake() { }
        public static void DestroyAll() { }
        public void DestroySound() { }
        private void DrawGizmos(bool selected) { }
        public void FadeIn(float time, bool reset=false) { }
        public void FadeOut(float time, bool shouldDestroyOnFadeOut) { }
        public void FixedUpdate() { }
        public void Init() { }
        public bool IsPlaying() { return default(bool); }
        public void OnDestroy() { }
        public void OnDrawGizmosSelected() { }
        private void OnPoolDespawned() { }
        private void OnPoolSpawned() { }
        public void Pause() { }
        public void Play() { }
        public void Play(UnityEngine.AudioClip clip, UnityEngine.Vector3 position, float volume, bool loop, bool keepInSync, MixerGroupType mixerGroup) { }
        private void Register() { }
        private void RemoveRegisters() { }
        public void SetSoundSize(SoundSize soundSize) { }
        public void SetTime(float time) { }
        private bool SoundShouldFreeze() { return default(bool); }
        private void Start() { }
        public void Stop() { }
        public void Update() { }
        private void UpdateFadeTime() { }
        public void UpdateLowPassFilterProperties() { }
        public void UpdatePanProperties() { }
        private void UpdateSoundProperties(float dt) { }
        public void UpdateVolumeProperties() { }
    }
    public abstract partial class SoundProvider : UnityEngine.MonoBehaviour
    {
        protected SoundDescriptor Descriptor;
        public bool ShowMessageOnPlay;
        protected SoundProvider() { }
        public abstract SoundDescriptor GetSound(IContext context);
    }
    public partial class SoundSize
    {
        public UnityEngine.AnimationCurve FalloffCurve;
        public float FalloffMargin;
        private static SoundSize m_everywhere;
        public float Radius;
        public SoundSize() { }
        public static SoundSize Everywhere { get { return default(SoundSize); } }
    }
    public partial class SoundSource : UnityEngine.MonoBehaviour, IPooled, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsPlaying>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public bool DestroyOnSoundEnd;
        public bool DropLoopWhenOutOfRange;
        public float FadeInFirstSoundDuration;
        public float FadeOutTimeOnDestroy;
        public bool loop;
        public float LoopInterval;
        public bool LoopOneSound;
        private float m_lastPlayedTime;
        private System.Action m_nullify;
        private float m_originalVolume;
        private SoundPlayer m_soundPlayer;
        public float MinimumTimeBetweenPlays;
        public bool PauseOnSuspend;
        public bool PlayAtStart;
        public SoundProvider Sound;
        public bool TempJustAlwaysLoop;
        public float VolumeMultiplier;
        public SoundSource() { }
        public bool IsPlaying { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        private void Nullify() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        private void OnPoolDespawned() { }
        public void OnPoolSpawned() { }
        public void Pause() { }
        public void Play() { }
        private void ReleaseSoundPlayer() { }
        public void SetVolumeMultiplier(float multiplier) { }
        public void Start() { }
        public void Stop() { }
        public void StopAndFadeOut(float duration) { }
    }
    public partial class SoundSourcePlaceholder : UnityEngine.MonoBehaviour
    {
        public SoundSource SoundSource;
        public SoundSourcePlaceholder() { }
        private void Awake() { }
    }
    public enum SoundType
    {
        Ambience = 2,
        Music = 0,
        SoundEffect = 1,
    }
    public partial class SoundVolumeProvider : FloatValueProvider
    {
        public SoundVolumeProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class SoundVolumeSlider : CleverValueSlider
    {
        public SoundVolumeSlider() { }
        public override float Value { get { return default(float); } set { } }
    }
    public enum SPAConfig : uint
    {
        ACHIEVEMENT_A1 = (uint)3,
        ACHIEVEMENT_A10 = (uint)13,
        ACHIEVEMENT_A11 = (uint)14,
        ACHIEVEMENT_A12 = (uint)15,
        ACHIEVEMENT_A2 = (uint)5,
        ACHIEVEMENT_A3 = (uint)4,
        ACHIEVEMENT_A4 = (uint)6,
        ACHIEVEMENT_A5 = (uint)8,
        ACHIEVEMENT_A6 = (uint)9,
        ACHIEVEMENT_A7 = (uint)10,
        ACHIEVEMENT_A8 = (uint)11,
        ACHIEVEMENT_A9 = (uint)12,
        CONTEXT_GAME_MODE_NORMALMODE = (uint)0,
        CONTEXT_PRESENCE_SOMERICHPRESENCENAME = (uint)0,
        CONTEXT_PRESENCE_SOMERICHPRESENCENAMEB = (uint)1,
        CONTEXT_SOMECONTEXT = (uint)0,
        CONTEXT_SOMECONTEXT_SOMECONTEXTVALUE = (uint)0,
        PROPERTY_SOMEPROPERTY = (uint)536870913,
        SPASTRING_ACH_A1_DESC = (uint)13,
        SPASTRING_ACH_A1_HOWTO = (uint)11,
        SPASTRING_ACH_A1_NAME = (uint)12,
        SPASTRING_ACH_A10_DESC = (uint)60,
        SPASTRING_ACH_A10_HOWTO = (uint)58,
        SPASTRING_ACH_A10_NAME = (uint)59,
        SPASTRING_ACH_A11_DESC = (uint)63,
        SPASTRING_ACH_A11_HOWTO = (uint)61,
        SPASTRING_ACH_A11_NAME = (uint)62,
        SPASTRING_ACH_A12_DESC = (uint)66,
        SPASTRING_ACH_A12_HOWTO = (uint)64,
        SPASTRING_ACH_A12_NAME = (uint)65,
        SPASTRING_ACH_A2_DESC = (uint)19,
        SPASTRING_ACH_A2_HOWTO = (uint)17,
        SPASTRING_ACH_A2_NAME = (uint)18,
        SPASTRING_ACH_A3_DESC = (uint)16,
        SPASTRING_ACH_A3_HOWTO = (uint)14,
        SPASTRING_ACH_A3_NAME = (uint)15,
        SPASTRING_ACH_A4_DESC = (uint)38,
        SPASTRING_ACH_A4_HOWTO = (uint)36,
        SPASTRING_ACH_A4_NAME = (uint)37,
        SPASTRING_ACH_A5_DESC = (uint)45,
        SPASTRING_ACH_A5_HOWTO = (uint)43,
        SPASTRING_ACH_A5_NAME = (uint)44,
        SPASTRING_ACH_A6_DESC = (uint)48,
        SPASTRING_ACH_A6_HOWTO = (uint)46,
        SPASTRING_ACH_A6_NAME = (uint)47,
        SPASTRING_ACH_A7_DESC = (uint)51,
        SPASTRING_ACH_A7_HOWTO = (uint)49,
        SPASTRING_ACH_A7_NAME = (uint)50,
        SPASTRING_ACH_A8_DESC = (uint)54,
        SPASTRING_ACH_A8_HOWTO = (uint)52,
        SPASTRING_ACH_A8_NAME = (uint)53,
        SPASTRING_ACH_A9_DESC = (uint)57,
        SPASTRING_ACH_A9_HOWTO = (uint)55,
        SPASTRING_ACH_A9_NAME = (uint)56,
        SPASTRING_CT_SOMECONTEXT_NAME = (uint)21,
        SPASTRING_CV_SOMECONTEXT_SOMECONTEXTVALUE_NAME = (uint)79,
        SPASTRING_GM_NORMALMODE_NAME = (uint)10,
        SPASTRING_LB_ARCADE_SOMELEADERBOARD_COLB_NAME = (uint)78,
        SPASTRING_LB_SOMELEADERBOARD_COLA_NAME = (uint)74,
        SPASTRING_LB_SOMELEADERBOARD_COLB_NAME = (uint)75,
        SPASTRING_LB_SOMELEADERBOARD_COLC_NAME = (uint)76,
        SPASTRING_LB_SOMELEADERBOARD_COLD_NAME = (uint)77,
        SPASTRING_LB_SOMELEADERBOARD_NAME = (uint)73,
        SPASTRING_PRESENCE_SOMERICHPRESENCENAME_NAME = (uint)9,
        SPASTRING_PRESENCE_SOMERICHPRESENCENAMEB_NAME = (uint)20,
        SPASTRING_PROPERTY_SOMEPROPERTY_NAME = (uint)22,
        STATS_COLUMN_SOMELEADERBOARD_COLA = (uint)4,
        STATS_COLUMN_SOMELEADERBOARD_COLB = (uint)1,
        STATS_COLUMN_SOMELEADERBOARD_COLD = (uint)3,
        STATS_VIEW_SKILL_RANKED_NORMALMODE = (uint)4294901760,
        STATS_VIEW_SKILL_STANDARD_NORMALMODE = (uint)4294836224,
        STATS_VIEW_SOMELEADERBOARD = (uint)6,
        TITLEID_MGS_SEIN_ARCADE_XBOX_360 = (uint)1480659547,
    }
    public partial class SPAConfigValue
    {
        [UnityEngine.SerializeField]
        private int m_spaConfig;
        public SPAConfigValue() { }
        public SPAConfigValue(SPAConfig spaConfig) { }
        public uint UIntValue { get { return default(uint); } }
        public ushort UShortValue { get { return default(ushort); } }
        public SPAConfig Value { get { return default(SPAConfig); } set { } }
    }
    public partial class SpawnOnKill : UnityEngine.MonoBehaviour, IKillReciever, IPooled
    {
        private static UnityEngine.GameObject m_spawnOnKillObjectsParent;
        public UnityEngine.GameObject ObjectToSpawn;
        public UnityEngine.Vector3 PositionOffset;
        public float Scale;
        public SpawnOnKill() { }
        private static void .cctor() { }
        public static UnityEngine.GameObject GetSpawnOnKillObjectsParent() { return default(UnityEngine.GameObject); }
        public void OnKill() { }
        public void OnPoolSpawned() { }
    }
    public partial class SpawnOrbsAction : ActionMethod
    {
        public OrbSpawner OrbSpawner;
        public SpawnOrbsAction() { }
        private string TargetName { get { return default(string); } }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class SpawnPrefabAction : ActionMethod
    {
        public PrefabSpawner PrefabSource;
        public SpawnPrefabAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public partial class SpawnPrefabOnAccelerationChange : UnityEngine.MonoBehaviour
    {
        public float CooldownTime;
        public float EmissionRatioMultiplier;
        private float m_lastInstanciationTime;
        private UnityEngine.Vector3 m_previousPosition;
        private float m_previousSpeed;
        public float MinimalAccelerationToSpawn;
        public UnityEngine.GameObject PrefabToSpawn;
        public SpawnPrefabOnAccelerationChange() { }
        private void Awake() { }
        private void FixedUpdate() { }
        private void Start() { }
    }
    public partial class SpawnProjectileAction : ActionMethod
    {
        [NotNull]
        public ProjectileSpawner Spawner;
        public SpawnProjectileAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SpawnTextBoxes : PerformingAction
    {
        private UnityEngine.GameObject m_messageInstance;
        private TextBoxMessage m_textBoxMessage;
        public UnityEngine.Vector3 MessageBoxOffset;
        public UnityEngine.GameObject MessagePrefab;
        public UnityEngine.Vector3 Position;
        public string[] Strings;
        public SpawnTextBoxes() { }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class SpecialAbilityZone : UnityEngine.MonoBehaviour
    {
        public static AllContainer<SpecialAbilityZone> All;
        public bool IsRainbowZone;
        private UnityEngine.Rect m_bounds;
        private bool m_inside;
        public SpecialAbilityZone() { }
        public UnityEngine.Rect Bounds { get { return default(UnityEngine.Rect); } }
        public static bool IsInside { get { return default(bool); } }
        public static bool IsInsideRainbowZone { get { return default(bool); } }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class SpeedBasedEmissionRateMultiplier : UnityEngine.MonoBehaviour, IPooled
    {
        public float EmissionBoostAfterUnhalt;
        private float m_emissionRateBumpMultiplier;
        private UnityEngine.ParticleEmitter m_emitter;
        private float m_origianlEmission;
        private float m_originalMaxEmission;
        private float m_originalMinEmission;
        private UnityEngine.ParticleSystem m_particleSystem;
        private UnityEngine.Vector3 m_previousPosition;
        private bool m_shouldHaltEmission;
        public float MaxAllowedSpeedOverAFrame;
        public float MaxRatio;
        public float MinRatio;
        public float SpeedToEmissionRelation;
        public SpeedBasedEmissionRateMultiplier() { }
        private void Awake() { }
        public void BoostEmissionRateForAFrame(float factor) { }
        private void FixedUpdate() { }
        public void HaltEmission() { }
        public void HaltEmissionForAFrame() { }
        public void OnPoolSpawned() { }
        private void Start() { }
        private void UnbumpEmissionRate() { }
        public void UnhaltEmission() { }
    }
    public partial class SpikeProjectile : Projectile
    {
        public UnityEngine.AnimationCurve SpeedOverTimeCurve;
        public SpikeProjectile() { }
        public override bool CanBeBashed() { return default(bool); }
        public new void FixedUpdate() { }
    }
    public partial class SpiritFlame : UnityEngine.ScriptableObject
    {
        public float Damage;
        public UnityEngine.GameObject Projectile;
        public SpiritFlame() { }
    }
    public partial class SpiritFlameProjectile : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Transform <AttackableTargetTransform>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Damage>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private SeinCharacter <Sein>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private SpiritFlame <SpiritFlame>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <StartPosition>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Transform <StartTarget>k__BackingField;
        public DamageType DamageType;
        public float DestroyDelay;
        public UnityEngine.AnimationCurve DisplacementCurve;
        public float DisplacementCurveOffset;
        [PooledSafeAttribute]
        public bool DoImpact;
        public float Duration;
        public bool HasARealTarget;
        public SoundProvider HitSound;
        public UnityEngine.GameObject ImpactEffectGameObject;
        [PooledSafeAttribute]
        public UnityEngine.Vector2 ImpactOffset;
        public SoundProvider KillEntitySound;
        public UnityEngine.LineRenderer LineRenderer;
        public int LineVertexCount;
        private float m_arcOffset;
        private SpiritFlameProjectile.State m_currentState;
        private float m_currentTime;
        private UnityEngine.Vector3 m_finalPosition;
        private int m_frame;
        private UnityEngine.GameObject m_hitEffect;
        private UnityEngine.Vector3 m_lastTargetPosition;
        private readonly System.Collections.Generic.List<UnityEngine.Vector3> m_points;
        private bool m_suspended;
        private static readonly System.Collections.Generic.List<EntityDamageReciever> s_enityDamageRecieverList;
        private static float s_lastFlameArcOffsetSign;
        public UnityEngine.AnimationCurve SpeedCurve;
        public UnityEngine.AnimationCurve TextureOffsetCurve;
        public UnityEngine.GameObject ThrowEffectGameObject;
        public SoundProvider ThrowSound;
        public SpiritFlameProjectile() { }
        public UnityEngine.Transform AttackableTargetTransform { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Transform); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float Damage { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsSuspended { get { return default(bool); } set { } }
        public SeinCharacter Sein { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(SeinCharacter); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public SpiritFlame SpiritFlame { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(SpiritFlame); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 StartPosition { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Transform StartTarget { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Transform); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private void <Detonate>m__1() { }
        public void Awake() { }
        public void ChangeState(SpiritFlameProjectile.State state) { }
        public void Detonate() { }
        public void Discharge() { }
        public void FixedUpdate() { }
        public UnityEngine.Vector2 GetHitVector() { return default(UnityEngine.Vector2); }
        public UnityEngine.Vector3 GetPointOnArc(int pointIndex, int numberOfPoints) { return default(UnityEngine.Vector3); }
        public UnityEngine.Vector3 GetPointOnArc(float r) { return default(UnityEngine.Vector3); }
        public ISpiritFlameAttackable IsShootableTarget(UnityEngine.Collider target) { return default(ISpiritFlameAttackable); }
        public void OnDestroy() { }
        private void OnPoolSpawned() { }
        public void PlayHitSound() { }
        public void PlayThrowSound() { }
        public bool RayTest(UnityEngine.GameObject target) { return default(bool); }
        public void Start() { }
        public bool TargetHasMovedTooMuch(UnityEngine.Vector3 newPos) { return default(bool); }
        public void UpdateLineRenderer() { }
        public void UpdateState() { }
        public void UpdateTargetPosition(UnityEngine.Vector3 newPos) { }
        public enum State
        {
            Fading = 1,
            Throwing = 0,
        }
    }
    public partial class SpiritFlameProjectileOffsetGenerator
    {
        public System.Collections.Generic.List<SpiritFlameProjectileOffsetGenerator.SphereGroup> SphereGroups;
        public SpiritFlameProjectileOffsetGenerator() { }
        public UnityEngine.Vector3 GenerateSpiritFlameProjectileOffset(UnityEngine.Transform transform, UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public partial class Sphere
        {
            public UnityEngine.Vector2 Position;
            public float Radius;
            public Sphere() { }
        }
        public partial class SphereGroup
        {
            public System.Collections.Generic.List<SpiritFlameProjectileOffsetGenerator.Sphere> Spheres;
            public SphereGroup() { }
        }
    }
    public partial class SpiritGrenade : UnityEngine.MonoBehaviour, IAttackable, IBashAttackable, IDamageReciever, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public bool Bashable;
        public DamageDealer DamageDealer;
        public float Duration;
        public UnityEngine.GameObject Explosion;
        public float Gravity;
        private IgnitableSpiritTorch m_ignitableTorch;
        private UnityEngine.Rigidbody m_rigidbody;
        private float m_time;
        public SpiritGrenade() { }
        public int BashPriority { get { return default(int); } }
        public bool IsInsideSpiritTorch { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public void Awake() { }
        public bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        public void Explode() { }
        public void FixedUpdate() { }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public void OnBashDehighlight() { }
        public void OnBashHighlight() { }
        public void OnDamageDealt(UnityEngine.GameObject go, Damage damage) { }
        public void OnDestroy() { }
        public void OnEnterBash() { }
        public void OnRecieveDamage(Damage damage) { }
        public void OnSpring(float height, UnityEngine.Vector2 direction) { }
        public void SetTrajectory(UnityEngine.Vector2 speed) { }
        public bool ShouldDealDamage(UnityEngine.GameObject target) { return default(bool); }
        public void Start() { }
    }
    public partial class SpiritGrenadeCrushDetector : UnityEngine.MonoBehaviour
    {
        public SpiritGrenade SpiritGrenade;
        public SpiritGrenadeCrushDetector() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
    }
    public partial class SpiritGrenadeDamageDealer : DamageDealer, IDamageReciever
    {
        public SpiritGrenadeDamageDealer() { }
        public void Awake() { }
        public override void DealDamage(UnityEngine.GameObject target) { }
        public void OnRecieveDamage(Damage damage) { }
    }
    public partial class SpiritLantern : SaveSerialize, IAttackable, IBashAttackable, IDamageReciever
    {
        public bool ActivatedOnStart;
        public UnityEngine.GameObject Energy;
        private bool m_activated;
        private bool m_isBashHighlighted;
        private UnityEngine.Color m_lastOuterGlowColor;
        private UnityEngine.Color m_lastSparkParticlesColor;
        private UnityEngine.Color m_originalOuterGlowColor;
        private UnityEngine.Color m_originalSparkParticlesColor;
        private UnityEngine.Transform m_transform;
        public ActionMethod OnAttackAction;
        public SoundProvider OnBashSoundProvider;
        public SoundProvider OnEnterBashRangeSoundProvider;
        public UnityEngine.Renderer OuterGlow;
        public UnityEngine.Color OuterGlowBashColor;
        public UnityEngine.ParticleRenderer SparkParticles;
        public UnityEngine.Color SparkParticlesBashColor;
        public SpiritLantern() { }
        public bool Activated { get { return default(bool); } set { } }
        public int BashPriority { get { return default(int); } }
        public UnityEngine.Color OuterGlowColor { get { return default(UnityEngine.Color); } set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Color SparkParticlesColor { get { return default(UnityEngine.Color); } set { } }
        public override void Awake() { }
        public bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        public void FixedUpdate() { }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public void OnBashDehighlight() { }
        public void OnBashHighlight() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void OnEnterBash() { }
        public void OnRecieveDamage(Damage damage) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void UpdateHighlightColor() { }
    }
    public partial class SpiritLanternPlaceholder : UnityEngine.MonoBehaviour
    {
        public UnityEngine.GameObject Prefab;
        public Rope RopeToAttachTo;
        public SpiritLanternPlaceholder() { }
        public void Start() { }
    }
    public partial class SpiritLightAffectorBasedTrigger : UnityEngine.MonoBehaviour
    {
        public ActionMethod AllPointsCoveredInLightAction;
        public bool AssumeAllPointsCoveredIfDarknessIsLifted;
        public ActionMethod FirstPointCoveredInLightAction;
        public bool InvertedTrigger;
        public SpiritLightType LightType;
        private SpiritLightAffectorBasedTrigger.State m_currentState;
        public ActionMethod NoPointsCoveredInLightAction;
        public float RadiusModulation;
        public ActionMethod SomePointsCoveredInLightAction;
        public LocalSpacePointSet TriggerPoints;
        public SpiritLightAffectorBasedTrigger() { }
        private SpiritLightAffectorBasedTrigger.State CalculateCurrentState() { return default(SpiritLightAffectorBasedTrigger.State); }
        private void FixedUpdate() { }
        private enum State
        {
            AllPointsCovered = 3,
            NoPointsCovered = 1,
            SomePointsCovered = 2,
            Unknown = 0,
        }
    }
    public partial class SpiritLightAffectorIntensityAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve IntensityAnimationCurve;
        public float IntensityCurveMagnitude;
        [UnityEngine.HideInInspector]
        public float OriginalLightIntensity;
        public SpiritLightRadialVisualAffector Target;
        public SpiritLightAffectorIntensityAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        private void Reset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float time, bool forceSample) { }
    }
    public partial class SpiritLightAffectorRadiusAnimator : BaseAnimator
    {
        [UnityEngine.HideInInspector]
        public float OriginalLightRadius;
        public UnityEngine.AnimationCurve RadiusAnimationCurve;
        public float RadiusCurveMagnitude;
        public SpiritLightRadialVisualAffector Target;
        public SpiritLightAffectorRadiusAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        private void Reset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float time, bool forceSample) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SpiritLightCapsuleVisualAffector : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<SpiritLightCapsuleVisualAffector> All;
        public float CapsuleRadius;
        public UnityEngine.Transform EndPoint;
        public float LightIntensity;
        public SpiritLightTurbulence LightIntensityTurbulence;
        public SpiritLightTurbulence LightRadiusTurbulence;
        public UnityEngine.Transform StartPoint;
        public SpiritLightCapsuleVisualAffector() { }
        public UnityEngine.Vector3 EndPointPosition { get { return default(UnityEngine.Vector3); } }
        public float LightCapsuleRadiusInThisFrame { get { return default(float); } }
        public float LightIntensityInThisFrame { get { return default(float); } }
        public UnityEngine.Vector3 StartPointPosition { get { return default(UnityEngine.Vector3); } }
        private static void .cctor() { }
        public bool IsVisibleInCamera(GameplayCamera gameplayCamera) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class SpiritLightDarknessZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<SpiritLightDarknessZone> All;
        public SpiritLightDarknessZone() { }
        public UnityEngine.Bounds WorldSpaceBoundingBox { get { return default(UnityEngine.Bounds); } }
        private static void .cctor() { }
        public static bool IsInsideDarknessZone(UnityEngine.Vector3 worldPosition) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    [CustomShaderModifier("Spirit Light Mask")]
    [UberShaderCategoryAttribute((UberShaderCategory)(5))]
    [UberShaderOrderAttribute((UberShaderOrder)(30))]
    public partial class SpiritLightMaskModifier : UberShaderModifier
    {
        public UberShaderTexture SpiritLighMaskFalloffGradient;
        [UberShaderVectorDisplay("Hardness", "Radius Modulation", "", "Inversion")]
        public UberShaderVector SpiritLightMaskSettings;
        [UberShaderVectorDisplay("Affect Opacity", "Affect Dissolve", "Affected by Normal Lights", "Override Inversion")]
        public UberShaderVector SpiritLightMaskSettingsB;
        public SpiritLightMaskModifier() { }
        public override bool DoesChangeShape() { return default(bool); }
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        public override void SetProperties() { }
    }
    public enum SpiritLightPriority
    {
        High = 0,
        Low = 2,
        Medium = 1,
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SpiritLightRadialVisualAffector : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<SpiritLightRadialVisualAffector> All;
        public float LightIntensity;
        public SpiritLightTurbulence LightIntensityTurbulence;
        public SpiritLightPriority LightPriority;
        public SpiritLightTurbulence LightRadiusTurbulence;
        public SpiritLightType LightType;
        public float Radius;
        public SpiritLightRadialVisualAffector() { }
        public float LightIntensityInThisFrame { get { return default(float); } }
        public float LightRadiusInThisFrame { get { return default(float); } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        private static void .cctor() { }
        public bool IsVisibleInCamera(GameplayCamera gameplayCamera) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
    }
    public partial class SpiritLightTrailController : UnityEngine.MonoBehaviour
    {
        public UberGhostTrail UberTrail;
        public SpiritLightTrailController() { }
        private void Update() { }
    }
    public partial class SpiritLightTurbulence
    {
        public float TurbulenceMagnitude;
        public float TurbulenceSpeed;
        public float TurbulenceTimeOffset;
        public SpiritLightTurbulence() { }
        public float TurbulenceValueInThisFrame { get { return default(float); } }
    }
    public enum SpiritLightType
    {
        LightVessel = 100,
        Normal = 0,
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SpiritLightVisualAffectorManager : UnityEngine.MonoBehaviour
    {
        public static bool DeactivateLightMechanics;
        public float GlobalLightAffectorOverride;
        private const float MAX_NUMBER_OF_CONCURRENT_CAPSULE_LIGHTS = 1f;
        private const float MAX_NUMBER_OF_CONCURRENT_RADIAL_LIGHTS = 20f;
        private static string[] s_capsuleLightPropertyNames;
        private static string[] s_lightSettingPropertyNames;
        private static string[] s_lightVesselLightPropertyNames;
        private const string SPIRIT_LIGHT_GLOBAL_OVERRIDE_SHADER_PROPERTY = "globalLightAffectorOverride";
        public SpiritLightVisualAffectorManager() { }
        private static void .cctor() { }
        public void Update() { }
    }
    public partial class SpiritTreeCutscene : CutsceneController
    {
        public SpiritTreeCutscene() { }
        public new void Start() { }
    }
    public partial class SpiritTreeTextLocationController : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Vector3 m_worldPosition;
        public UnityEngine.Vector2 ScreenPosition;
        public UnityEngine.AnimationCurve ScreenPositionInfluenceCurve;
        public float ScreenWeight;
        public SpiritTreeTextLocationController() { }
        public void Start() { }
        public void StartScrolling() { }
        public void Update() { }
    }
    public partial class SpiritTreeTransformationAnimator : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<AnimationEntry> AnimationEntries;
        public float FastForwardToTime;
        private float m_startTime;
        public SpiritTreeTransformationAnimator() { }
        public void FixedUpdate() { }
        public void OnEnable() { }
    }
    public partial class SpitterEnemy : GroundEnemy
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector2 <ThrownDirection>k__BackingField;
        public UnityEngine.Transform[] ActionZones;
        public ChargingSootEnemyAnimations Animations;
        public SoundSource AttackSound;
        public ActionMethod EnterZoneAction;
        public SoundSource IdleSound;
        public SoundSource LandSound;
        private bool m_hasEnteredZone;
        public PrefabSpawner ProjectileSpawner;
        public SoundSource RunAwaySound;
        public ChargingSootEnemySettings Settings;
        public PrefabSpawner SpitEffect;
        public SpitterEnemy.States State;
        public SoundSource WalkSound;
        public SpitterEnemy() { }
        public UnityEngine.Vector2 ThrownDirection { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector2); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__EF() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F0() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F1() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F2() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F3() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F4() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F5() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F6() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F7() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F8() { return default(bool); }
        public override void Awake() { }
        public override bool CanBeOptimized() { return default(bool); }
        public bool CanSeePlayer() { return default(bool); }
        public bool CloserThanMinChargeDistance() { return default(bool); }
        public new void FixedUpdate() { }
        public bool FurtherThanMinChargeDistance() { return default(bool); }
        public bool HasHitWall() { return default(bool); }
        public bool IsOnGround() { return default(bool); }
        public bool ShouldStomped() { return default(bool); }
        public bool ShouldThrow() { return default(bool); }
        public new void Start() { }
        public void TurnAround() { }
        public void UpdateRotation() { }
        public bool WilhelmScreamZoneRectanglesContain(UnityEngine.Vector2 position) { return default(bool); }
        public partial class States
        {
            public SpitterEnemyIdleState Idle;
            public SpitterEnemyRunBackState RunBack;
            public SpitterEnemyShootingState Shooting;
            public SpitterEnemyChargingState SpitterEnemyCharging;
            public SpitterEnemyStompedState Stomped;
            public SpitterEnemyStunnedState Stunned;
            public SpitterEnemyThrownState Thrown;
            public SpitterEnemyWalkState Walk;
            public States() { }
        }
    }
    public partial class SpitterEnemyChargingState : SpitterEnemyState
    {
        public SpitterEnemyChargingState(SpitterEnemy enemy) : base (default(SpitterEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class SpitterEnemyIdleState : SpitterEnemyState
    {
        public SpitterEnemyIdleState(SpitterEnemy enemy) : base (default(SpitterEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class SpitterEnemyPlaceholder : RespawningPlaceholder
    {
        [AssetReferenceChoiceAttribute("Spitter Type", new string[]{ "Assets\\frameworks\\enemies\\spitter\\prefabs\\regular\\spitterEnemy.prefab", "Assets\\frameworks\\enemies\\spitter\\textures\\spitterEnemyPlaceholder.png", "Regular Spitter", "Assets\\frameworks\\enemies\\spitter\\prefabs\\fast\\fastSpitterEnemy.prefab", "Assets\\frameworks\\enemies\\spitter\\textures\\fastSpitterEnemyPlaceholder.png", "Fast Spitter"})]
        public UnityEngine.GameObject ChargingSootEnemy;
        public SpitterEnemyPlaceholder.ChargingSootEnemyPlaceholderSettings Settings;
        public SpitterEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class ChargingSootEnemyPlaceholderSettings
        {
            public UnityEngine.Transform[] ActionZones;
            public float DamageOnTouch;
            public ActionMethod EnterZoneAction;
            public float Gravity;
            public float Health;
            public float IdleDuration;
            public DropLootSettings LootSettings;
            public float MinChargeDistance;
            public int NumberOfExpOrbsToDrop;
            public float ProjectileDamage;
            public float ProjectileGravity;
            public float ProjectileSpeed;
            public float RunSpeed;
            public float SeePlayerDistance;
            public bool SpreadShot;
            public float WalkDuration;
            public float WalkSpeed;
            public ChargingSootEnemyPlaceholderSettings() { }
        }
    }
    public partial class SpitterEnemyRunBackState : SpitterEnemyState
    {
        public SpitterEnemyRunBackState(SpitterEnemy enemy) : base (default(SpitterEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class SpitterEnemyShootingState : SpitterEnemyState
    {
        public SpitterEnemyShootingState(SpitterEnemy enemy) : base (default(SpitterEnemy)) { }
        public UnityEngine.Vector3 ProjectileSpawnerPositionToPlayerPosition { get { return default(UnityEngine.Vector3); } }
        public override void OnEnter() { }
        public override void OnExit() { }
        public void ShootProjectile() { }
        public void SpawnProjectile(UnityEngine.Vector3 speed) { }
        public override void UpdateState() { }
    }
    public abstract partial class SpitterEnemyState : GroundEnemyState
    {
        protected SpitterEnemy SpitterEnemy;
        public SpitterEnemyState(SpitterEnemy enemy) : base (default(GroundEnemy)) { }
    }
    public partial class SpitterEnemyStompedState : SpitterEnemyState
    {
        public SpitterEnemyStompedState(SpitterEnemy enemy) : base (default(SpitterEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public void OnStomped() { }
        public override void UpdateState() { }
    }
    public partial class SpitterEnemyStunnedState : SpitterEnemyState
    {
        public SpitterEnemyStunnedState(SpitterEnemy enemy) : base (default(SpitterEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class SpitterEnemyThrownState : SpitterEnemyState
    {
        public SpitterEnemyThrownState(SpitterEnemy enemy) : base (default(SpitterEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public void OnThrow() { }
        public override void UpdateState() { }
    }
    public partial class SpitterEnemyWalkState : SpitterEnemyState
    {
        public SpitterEnemyWalkState(SpitterEnemy enemy) : base (default(SpitterEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class SplatterSpray : UnityEngine.MonoBehaviour
    {
        public int NumberOfSplatterObjects;
        public UnityEngine.GameObject SplatterObject;
        public float SprayConeRadius;
        public SplatterSpray() { }
        private void PerformTheSpray() { }
        private void Start() { }
    }
    internal partial class SplitFlameMenuItem : FloatDebugMenuItem
    {
        public SplitFlameMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    public partial class Spring : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.GameObject <LastObject>k__BackingField;
        private SpringContext m_context;
        public ActionMethod OnLand;
        public ActionMethod OnLandGrenade;
        public Spring() { }
        public UnityEngine.GameObject LastObject { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.GameObject); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
    }
    public partial class SpringContext : IContext
    {
        public Spring Spring;
        public SpringContext(Spring spring) { }
    }
    public partial class SpringPlaceholder : UnityEngine.MonoBehaviour
    {
        public float Height;
        public UnityEngine.GameObject Spring;
        public SpringPlaceholder() { }
        public void Awake() { }
    }
    public partial class SpringSeinAction : ActionMethod
    {
        public TextureAnimationWithTransitions ActiveJump;
        public float Height;
        public TextureAnimationWithTransitions PassiveJump;
        public float StopDecelerationMultiplier;
        public SpringSeinAction() { }
        public override void Perform(IContext context) { }
        public bool ShouldJumpAnimationKeepPlaying() { return default(bool); }
        public void SpringSein(UnityEngine.Vector2 direction) { }
    }
    public partial class SpriteAnimationGUIText : UnityEngine.MonoBehaviour
    {
        public SpriteAnimatorWithTransitions SpriteAnimator;
        public SpriteAnimationGUIText() { }
        public void FixedUpdate() { }
    }
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.MeshRenderer), typeof(UnityEngine.MeshFilter))]
    public partial class SpriteAnimator : BaseAnimator
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache16;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <HasAnimationEndedTriggered>k__BackingField;
        public ActionMethod AnimationEndAction;
        public SoundProvider AnimationStartSound;
        private const float c_hideCooldownStart = 0.06666667f;
        [NotNull]
        public TextureAnimation DefaultAnimation;
        public UnityEngine.GameObject DestroyTargetOnAnimationEnd;
        public bool HideWhenNotPlaying;
        [PooledSafeAttribute]
        private TextureAnimator m_animator;
        private AtlasSpriteTextureBinder m_binder;
        private AtlasSpriteTexture m_currentAtlasSpriteTexture;
        private bool m_editorEnabled;
        private float m_hideCooldown;
        private TextureAnimation m_lastAnimation;
        private float m_lastTime;
        private bool m_madeMaterial;
        private UnityEngine.Mesh m_mesh;
        private UnityEngine.MeshFilter m_meshFilter;
        private UnityEngine.Renderer m_renderer;
        private bool m_useSpriteSpaceUvs;
        public AnimationMeshingSettings MeshSettings;
        private System.Action OnAnimationEndEvent;
        [UnityEngine.HideInInspector]
        public float PlaybackTime;
        public bool UseSpriteSpaceUvs;
        public SpriteAnimator() { }
        public bool AnimationEnded { get { return default(bool); } }
        public TextureAnimation CurrentAnimation { get { return default(TextureAnimation); } }
        public override float Duration { get { return default(float); } }
        public bool HasAnimationEndedTriggered { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override bool IsLooping { get { return default(bool); } }
        private Atlas SettingsAtlas { get { return default(Atlas); } }
        public TextureAnimator TextureAnimator { get { return default(TextureAnimator); } }
        public event System.Action OnAnimationEndEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAnimationEndEvent>m__2C() { }
        public void AnimationStart() { }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public void ChangeMainTextureToAnimatorTexture() { }
        public bool DoesProvideAtlas() { return default(bool); }
        public void DoSerialize(Archive ar) { }
        public new void FixedUpdate() { }
        public UberScreenMode GetExternalUberScreenMode() { return default(UberScreenMode); }
        public float GetUberTweakValue() { return default(float); }
        private void InitBinder() { }
        public void InitializeMesh() { }
        public new void OnDestroy() { }
        public void OnEnable() { }
        public override void OnPoolSpawned() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
        public void SetAnimation(TextureAnimation textureAnimation, bool resetTime=true) { }
        public void SetDirty() { }
        public new void Start() { }
    }
    public partial class SpriteAnimatorAction : ActionMethod
    {
        [NotNull]
        public SpriteAnimator Animator;
        public SpriteAnimatorAction.PlayMode Command;
        public SpriteAnimatorAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
        public enum PlayMode
        {
            Continue = 1,
            Pause = 2,
            Restart = 0,
        }
    }
    public partial class SpriteAnimatorCondition : Condition
    {
        public SpriteAnimator Animator;
        public SpriteAnimatorCondition.SpriteAnimatorMode Mode;
        public SpriteAnimatorCondition() { }
        public override string GetNiceName() { return default(string); }
        public override bool Validate(IContext context) { return default(bool); }
        public enum SpriteAnimatorMode
        {
            AnimationEnded = 0,
        }
    }
    public partial class SpriteAnimatorSerializer : SaveSerialize
    {
        [UnityEngine.SerializeField]
        private SpriteAnimator m_spriteAnimator;
        public SpriteAnimatorSerializer() { }
        public void OnValidate() { }
        public override void Serialize(Archive ar) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class SpriteAnimatorWithTransitions : Suspendable, IDynamicGraphicHierarchy, IInScene, IPooled
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<TextureAnimation> <>f__am$cache15;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<TextureAnimation> <>f__am$cache16;
        [UnityEngine.HideInInspector]
        public TextureAnimationWithTransitions CurrentTextureAnimationTransitions;
        public TextureAnimationWithTransitions DefaultAnimation;
        [UnityEngine.HideInInspector]
        public bool Flip;
        private readonly TextureAnimator m_animator;
        private AtlasSpriteTextureBinder m_binder;
        private bool m_editorEnabled;
        [UnityEngine.SerializeField]
        private bool m_isInScene;
        private bool m_isSuspended;
        private AtlasSpriteTexture m_lastTexture;
        private float m_lastTime;
        private bool m_madeMaterial;
        private UnityEngine.Mesh m_mesh;
        private UnityEngine.MeshFilter m_meshFilter;
        private UnityEngine.Renderer m_renderer;
        private TextureAnimationWithTransitions.TextureAnimationPair m_transition;
        private bool m_useSpriteSpaceUvs;
        public AnimationMeshingSettings MeshSettings;
        private System.Action<TextureAnimation> OnAnimationEndEvent;
        private System.Action<TextureAnimation> OnAnimationLoopEvent;
        [UnityEngine.HideInInspector]
        public TextureAnimationWithTransitions PreviousTextureAnimationTransitions;
        public bool UseSpriteSpaceUvs;
        public SpriteAnimatorWithTransitions() { }
        public bool AnimationEnded { get { return default(bool); } }
        public TextureAnimation CurrentAnimation { get { return default(TextureAnimation); } }
        public float CurrentAnimationTime { get { return default(float); } set { } }
        public bool IsInScene { get { return default(bool); } set { } }
        public override bool IsSuspended { get { return default(bool); } set { } }
        public bool IsTransitionPlaying { get { return default(bool); } }
        protected UnityEngine.Renderer Renderer { get { return default(UnityEngine.Renderer); } }
        private Atlas SettingsAtlas { get { return default(Atlas); } }
        public TextureAnimator TextureAnimator { get { return default(TextureAnimator); } }
        public event System.Action<TextureAnimation> OnAnimationEndEvent { add { } remove { } }
        public event System.Action<TextureAnimation> OnAnimationLoopEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAnimationEndEvent>m__2D(TextureAnimation ) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAnimationLoopEvent>m__2E(TextureAnimation ) { }
        public new void Awake() { }
        public void ChangeMainTextureToAnimatorTexture() { }
        public bool DoesProvideAtlas() { return default(bool); }
        public void FixedUpdate() { }
        public UberScreenMode GetExternalUberScreenMode() { return default(UberScreenMode); }
        public float GetUberTweakValue() { return default(float); }
        private void InitBinder() { }
        public new void OnDestroy() { }
        public void OnDisable() { }
        public void OnEditorDisable() { }
        public void OnEditorEnable() { }
        public void OnEnable() { }
        public void OnPoolSpawned() { }
        [UnityEngine.ContextMenu("What is the current texture animator")]
        public void PrintCurrentTextureAnimator() { }
        [UnityEngine.ContextMenu("What is the current texture with transitions animator")]
        public void PrintCurrentTextureAnimatorWithTranstion() { }
        public void SetAnimation(TextureAnimationWithTransitions textureAnimationWithTransitions, bool ignoreIfSameAnimation=false) { }
        public void SetDirty() { }
        public void Start() { }
        private void UpdateCurrentBinding() { }
    }
    public partial class SpriteEntity : Entity
    {
        public CharacterAnimationSystem Animation;
        public SpriteEntity() { }
        public bool FaceLeft { get { return default(bool); } set { } }
        public int FaceLeftSign { get { return default(int); } }
        public bool IsFacingPlayer { get { return default(bool); } }
        public SpriteAnimatorWithTransitions SpriteAnimator { get { return default(SpriteAnimatorWithTransitions); } }
        public CharacterSpriteMirror SpriteMirror { get { return default(CharacterSpriteMirror); } }
        public void FaceAwayFromPlayer() { }
        public void FacePlayer() { }
        public void FaceStartPosition() { }
        public void PlayAnimationLoop(TextureAnimationWithTransitions anim, int layer=0) { }
        public void PlayAnimationOnce(TextureAnimationWithTransitions anim, int layer=0) { }
        public void RestartAnimationLoop(TextureAnimationWithTransitions anim, int layer=0) { }
        public override void Serialize(Archive ar) { }
    }
    public partial class SpriteRotationController : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private UnityEngine.Transform m_transform;
        public float RotationMultiplier;
        public float TargetAngle;
        public SpriteRotationController() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void RotateBackToNormal() { }
        public void RotateToTargetImmediately() { }
        public void RotateTowardsTarget(UnityEngine.Vector3 target, bool faceLeft) { }
        public void RotateTowardsTarget(UnityEngine.Vector3 target, float angleOffset) { }
    }
    public abstract partial class SpriteTexture : UnityEngine.ScriptableObject
    {
        protected SpriteTexture() { }
        public abstract UnityEngine.Texture MainTexture { get; }
    }
    public partial class StandardSpiritFlameProjectile : SpiritFlameProjectile
    {
        public StandardSpiritFlameProjectile() { }
    }
    public partial class StandardSpiritFlameThirdShotProjectile : SpiritFlameProjectile
    {
        public StandardSpiritFlameThirdShotProjectile() { }
    }
    public partial class StarSlugChargingState : StarSlugState
    {
        public StarSlugChargingState(StarSlugEnemy slug) : base (default(StarSlugEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class StarSlugCrawlingState : StarSlugState
    {
        public StarSlugCrawlingState(StarSlugEnemy slug) : base (default(StarSlugEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class StarSlugEnemy : SlugEnemy
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<bool> <>f__am$cache8;
        public StarSlugEnemyAnimations Animations;
        public UnityEngine.GameObject AttackSphere;
        public SoundSource ChargingSoundSource;
        public SurfaceBasedSoundProvider CrawlingSoundProvider;
        public SoundSource CrawlingSoundSource;
        public StarSlugEnemySettings Settings;
        public SoundSource ShootingSoundSource;
        public StarSlugEnemy.States State;
        public StarSlugEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__E1() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <Start>m__E2() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__E3() { return default(bool); }
        public new void Awake() { }
        public new void FixedUpdate() { }
        public void OnDeath(Damage damage) { }
        public void OnShoot() { }
        public new void Start() { }
        public partial class States
        {
            public StarSlugChargingState Charging;
            public StarSlugCrawlingState Crawl;
            public StarSlugShootingState Shooting;
            public States() { }
        }
    }
    public partial class StarSlugEnemyAnimations
    {
        public TextureAnimationWithTransitions Charging;
        public TwistAnimationSet Crawling;
        public TextureAnimationWithTransitions Shooting;
        public StarSlugEnemyAnimations() { }
    }
    public partial class StarSlugEnemyPlaceholder : RespawningPlaceholder
    {
        public StarSlugEnemyPlaceholder.StarSlugEnemyPlaceholderSettings Settings;
        public UnityEngine.GameObject StarSlugEnemy;
        public StarSlugEnemyPlaceholder() { }
        public override Entity Instantiate() { return default(Entity); }
        public partial class StarSlugEnemyPlaceholderSettings
        {
            public float DamageOnTouch;
            public float Health;
            public DropLootSettings LootSettings;
            public int NumberOfExpOrbsToDrop;
            public UnityEngine.GameObject Projectile;
            public float ProjectileSpeed;
            public float WalkSpeed;
            public StarSlugEnemyPlaceholderSettings() { }
        }
    }
    public partial class StarSlugEnemySettings
    {
        public float BashedSlugSpeed;
        public UnityEngine.GameObject Projectile;
        public float ProjectileSpeed;
        public UnityEngine.GameObject ShootEffect;
        public float WalkSpeed;
        public UnityEngine.AnimationCurve WalkSpeedMultiplier;
        public StarSlugEnemySettings() { }
    }
    public partial class StarSlugShootingState : StarSlugState
    {
        public StarSlugShootingState(StarSlugEnemy slug) : base (default(StarSlugEnemy)) { }
        public override void OnEnter() { }
        public void SpawnStarSpikes(UnityEngine.Vector3 up, UnityEngine.Vector3 right) { }
    }
    public partial class StarSlugState : SlugState
    {
        protected StarSlugEnemy StarSlugEnemy;
        public StarSlugState(StarSlugEnemy slug) : base (default(SlugEnemy)) { }
    }
    [CategoryAttribute("Cutscenes")]
    public partial class StartCutsceneMusicPlayerAction : ActionMethod
    {
        public CutsceneController CutsceneController;
        public CutsceneMusicPlayer CutsceneMusicPlayer;
        public bool PauseOnSuspend;
        public StartCutsceneMusicPlayerAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class StartExitingAction : ActionMethod
    {
        public StartExitingAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class SteamTelemetry : UnityEngine.MonoBehaviour
    {
        public static string BaseUrL;
        public static SteamTelemetry Instance;
        private static double m_epochTime;
        private static System.Collections.Generic.Dictionary<string, string> m_headers;
        private static int sequenceId;
        public static System.Guid SessionGUID;
        public static string URL;
        public SteamTelemetry() { }
        private static void .cctor() { }
        public void Awake() { }
        private string GetJson(int eventId, string body) { return default(string); }
        public void Send(TelemetryEvent eventId, string body) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator SendRoutine(byte[] data) { return default(System.Collections.IEnumerator); }
        public void Update() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <SendRoutine>c__Iterator21 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal byte[] <$>data;
            internal UnityEngine.WWW <www>__0;
            internal byte[] data;
            public <SendRoutine>c__Iterator21() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public partial class Data
        {
            public TelemetryEvent EventId;
            public string ExtraData;
            public int Version;
            public Data() { }
            public string ToString() { return default(string); }
        }
        public partial class FloatData : SteamTelemetry.Data
        {
            public float FloatValue;
            public FloatData(float floatValue) { }
            public new string ToString() { return default(string); }
        }
        public partial class IntData : SteamTelemetry.Data
        {
            public int IntValue;
            public IntData(int intValue) { }
            public new string ToString() { return default(string); }
        }
        public partial class StringData : SteamTelemetry.Data
        {
            public string StringValue;
            public StringData(string stringValue) { }
            public new string ToString() { return default(string); }
        }
    }
    public partial class Steamworks : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Collections.Generic.Dictionary<string, int> <>f__switch$map0;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <EnableAchievements>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <EnableLeaderboards>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static ManagedSteam.Steam <SteamInterface>k__BackingField;
        public static ManagedSteam.SteamTypes.AppID FullAppID;
        public static ManagedSteam.SteamTypes.AppID FullDEAppID;
        public static Steamworks Instance;
        private static float m_currentMapPedestalsFoundCount;
        private static float m_currentSecretsFoundCount;
        private static float m_enemiesKilledByChargeFlameCount;
        private static float m_enemiesKilledByReflectedBashProjectilesCount;
        private static float m_enemiesKilledBySpiritFlameCount;
        private static float m_enemiesKilledByStompCount;
        private static float m_energyCollectedCount;
        private const string m_explorersLeaderboardEasyString = "explorersLeaderboardV1Easy";
        private const string m_explorersLeaderboardHardString = "explorersLeaderboardV1Hard";
        private const string m_explorersLeaderboardNormalString = "explorersLeaderboardV1Normal";
        private const string m_explorersLeaderboardOneLifeString = "explorersLeaderboardV1OneLife";
        private bool m_findingLeaderboard;
        private bool m_gamepadTextInputDismissed;
        private bool m_isLoggedIn;
        private LeaderboardData m_leaderboardData;
        private System.Collections.Generic.Dictionary<LeaderboardB, ManagedSteam.SteamTypes.LeaderboardHandle> m_leaderboardHandles;
        private System.Collections.Generic.Dictionary<string, LeaderboardB> m_leaderboardToSteamLeaderboard;
        private LeaderboardB m_loadingLeaderboard;
        private Leaderboards.Filter m_loadingLeaderboardFilter;
        private System.Action m_onLeaderboardUpdatedFailure;
        private System.Action m_onLeaderboardUpdatedSuccess;
        private static float m_soulLinkCaseCount;
        private const string m_speedRunnersLeaderboardEasyString = "speedRunnersLeaderboardV1Easy";
        private const string m_speedRunnersLeaderboardHardString = "speedRunnersLeaderboardV1Hard";
        private const string m_speedRunnersLeaderboardNormalString = "speedRunnersLeaderboardV1Normal";
        private const string m_speedRunnersLeaderboardOneLifeString = "speedRunnersLeaderboardV1OneLife";
        private ManagedSteam.IStats m_stats;
        private bool m_statsReceived;
        private ManagedSteam.SteamTypes.SteamID m_steamID;
        private const string m_survivorLeaderboardEasyString = "globalLeaderboardV1Easy";
        private const string m_survivorLeaderboardHardString = "globalLeaderboardV1Hard";
        private const string m_survivorLeaderboardNormalString = "globalLeaderboardV1Normal";
        private const string m_survivorLeaderboardOneLifeString = "globalLeaderboardV1OneLife";
        private bool m_updatingLeaderboard;
        private ManagedSteam.IUser m_user;
        private ManagedSteam.IUtils m_utils;
        public static ManagedSteam.SteamTypes.AppID TrialAppID;
        public static ManagedSteam.SteamTypes.AppID TrialDEAppID;
        public Steamworks() { }
        public static float CurrentMapPedestalsFoundCount { get { return default(float); } set { } }
        public static float CurrentSecretsFoundCount { get { return default(float); } set { } }
        public static bool EnableAchievements { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static bool EnableLeaderboards { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static float EnemiesKilledByChargeFlame { get { return default(float); } set { } }
        public static float EnemiesKilledByReflectedBashProjectilesCount { get { return default(float); } set { } }
        public static float EnemiesKilledBySpiritFlameCount { get { return default(float); } set { } }
        public static float EnemiesKilledByStompCount { get { return default(float); } set { } }
        public static float EnergyCollectedCount { get { return default(float); } set { } }
        public static bool IsLoggedIn { get { return default(bool); } }
        public static LeaderboardData LeaderboardData { get { return default(LeaderboardData); } }
        public static bool Ready { get { return default(bool); } }
        public static float SoulLinkCaseCount { get { return default(float); } set { } }
        public bool StatsReceived { get { return default(bool); } }
        public ManagedSteam.SteamTypes.SteamID SteamId { get { return default(ManagedSteam.SteamTypes.SteamID); } }
        public static ManagedSteam.Steam SteamInterface { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(ManagedSteam.Steam); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public static string Username { get { return default(string); } }
        private static void .cctor() { }
        private void Awake() { }
        private void Cleanup() { }
        private void ExceptionThrown(System.Exception e) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator FindLeaderboards() { return default(System.Collections.IEnumerator); }
        private Language GetCurrentGameLanguage() { return default(Language); }
        public ManagedSteam.SteamTypes.LeaderboardHandle GetLeaderboardHandle(LeaderboardB leaderboard) { return default(ManagedSteam.SteamTypes.LeaderboardHandle); }
        private void LeaderboardFindResult(ManagedSteam.CallbackStructures.LeaderboardFindResult result, bool failed) { }
        private void LeaderboardScoresDownloaded(ManagedSteam.CallbackStructures.LeaderboardScoresDownloaded result, bool failed) { }
        private void LeaderboardScoreUploaded(ManagedSteam.CallbackStructures.LeaderboardScoreUploaded result, bool failed) { }
        private void OnApplicationQuit() { }
        private void OnDestroy() { }
        private void OverlayToggle(ManagedSteam.CallbackStructures.GameOverlayActivated value) { }
        public static void SendLeaderboardData(LeaderboardB leaderboard, int data, int[] details) { }
        public static void SendLeaderboardData(LeaderboardB leaderboard, ulong data) { }
        private void SteamShutdownFunc(ManagedSteam.CallbackStructures.SteamShutdown value) { }
        private void Update() { }
        public static bool UpdateLeaderboard(LeaderboardB leaderboard, Leaderboards.Filter filter, System.Action success=null, System.Action failure=null) { return default(bool); }
        private void UserStatsReceived(ManagedSteam.CallbackStructures.UserStatsReceived value) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FindLeaderboards>c__Iterator22 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal Steamworks <>f__this;
            internal float <time>__0;
            public <FindLeaderboards>c__Iterator22() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class SteepWall : UnityEngine.MonoBehaviour
    {
        public SteepWall() { }
    }
    public partial class StickToMovingPlatforms : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Transform m_ground;
        private UnityEngine.Matrix4x4 m_groundMatrix;
        private int m_keepTracking;
        public StickToMovingPlatforms() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnCollision(UnityEngine.Collision collision) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public void OnDestroy() { }
        public void OnRestoreCheckpoint() { }
        public void UpdateGroundMatrix() { }
    }
    public partial class StompableFloor : Entity
    {
        public StompableFloor() { }
        public override void Awake() { }
        public override void OnDestroy() { }
        public void OnModifyDamage(Damage damage) { }
    }
    public partial class Stomper : SaveSerialize, IDynamicGraphicHierarchy, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public DamageDealer DamageDealer;
        public float DelayTillRise;
        public float Distance;
        public bool DistanceSet;
        public float FallGravity;
        private AnimatingFloat m_fall;
        private UnityEngine.Vector3 m_fallDirection;
        private bool m_hasPlayedResetSound;
        private UnityEngine.Vector3 m_originalPosition;
        private Stomper.State m_state;
        private float m_time;
        private UnityEngine.Transform m_transform;
        public UnityEngine.AnimationCurve OnTriggerDecorationCurve;
        public SoundSource ReelInSound;
        public float RiseDeccleration;
        public float RiseSpeed;
        public float ShakeTime;
        public float StartFallSpeed;
        public UnityEngine.Transform StompDustSpawnTransform;
        public UnityEngine.GameObject StompImpactDust;
        public SoundSource StompResetSound;
        public SoundSource StompSound;
        public SoundSource StompStartSound;
        public Stomper() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        [UnityEngine.ContextMenu("Calculate distance")]
        public void CalculateDistance() { }
        private void ChangeState(Stomper.State state) { }
        private void FixedUpdate() { }
        public override void OnDestroy() { }
        public void PlayerTouchedTrigger() { }
        public override void Serialize(Archive ar) { }
        private void Start() { }
        private void UpdatePosition() { }
        private enum State
        {
            Fallen = 3,
            Falling = 2,
            Normal = 0,
            Raising = 4,
            Shake = 1,
        }
    }
    public partial class StomperTrigger : UnityEngine.MonoBehaviour
    {
        public bool Activated;
        public Stomper StomperToTrigger;
        public bool TriggerOncePerOnEnter;
        public StomperTrigger() { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
        private void OnTriggerStay(UnityEngine.Collider collider) { }
        private void PerformTrigger(UnityEngine.Collider collider) { }
    }
    public partial class StompPost : SaveSerialize, IAttackable, IDamageReciever, IDynamicGraphicHierarchy, IStompAttackable, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public ActionMethod AllTheWayInAction;
        public SoundProvider AllTheWayInSound;
        private bool m_activated;
        private float m_distanceStompedIntoGround;
        private float m_remainingRiseDelayTime;
        private UnityEngine.Vector3 m_startLocalPosition;
        private UnityEngine.Transform m_transform;
        public int NumberOfStomps;
        public float RiseSpeed;
        public float RisingDelay;
        public float StompIntoGroundAmount;
        public SoundProvider StompSound;
        public StompPost() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public new void Awake() { }
        public bool CanBeBashed() { return default(bool); }
        public bool CanBeChargeDashed() { return default(bool); }
        public bool CanBeChargeFlamed() { return default(bool); }
        public bool CanBeGrenaded() { return default(bool); }
        public bool CanBeLevelUpBlasted() { return default(bool); }
        public bool CanBeSpiritFlamed() { return default(bool); }
        public bool CanBeStomped() { return default(bool); }
        public bool CountsTowardsSuperJumpAchievement() { return default(bool); }
        public void FixedUpdate() { }
        public bool IsDead() { return default(bool); }
        public bool IsStompBouncable() { return default(bool); }
        public override void OnDestroy() { }
        public void OnRecieveDamage(Damage damage) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    [CategoryAttribute("Sequence")]
    public partial class StopActionAction : ActionWithDuration
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Duration>k__BackingField;
        [NotNull]
        public ActionWithDuration SequenceToRun;
        public StopActionAction() { }
        public override float Duration { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class StopAllSoundsAction : ActionMethod
    {
        public StopAllSoundsAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Sein")]
    internal partial class StopCharacterAnimation : ActionMethod
    {
        public StopCharacterAnimation() { }
        public override void Perform(IContext context) { }
    }
    public partial class StopRunningInDirectionZone : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Rect <Bounds>k__BackingField;
        public static System.Collections.Generic.List<StopRunningInDirectionZone> All;
        public bool StopLeft;
        public StopRunningInDirectionZone() { }
        public UnityEngine.Rect Bounds { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Rect); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDestroy() { }
    }
    public partial class StopTimedActionSequenceAction : ActionMethod
    {
        [NotNull]
        public TimedActionSequence TimedActionSequence;
        public StopTimedActionSequenceAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class StormZone : UnityEngine.MonoBehaviour
    {
        public bool Active;
        public StormZone.SoundSource Anticipation;
        public float AnticipationDuration;
        private float m_currentTime;
        public StormZone.SoundSource Quiet;
        public float QuietDuration;
        public StormZone.SoundSource Storm;
        public float StormDuration;
        public StormZone() { }
        private void FixedUpdate() { }
        private void OnTriggerEnter(UnityEngine.Collider collider) { }
        private void OnTriggerExit(UnityEngine.Collider collider) { }
        public partial class SoundSource
        {
            public float FadeInDuration;
            public float FadeOutDuration;
            public UnityEngine.AudioSource Source;
            public AnimatingFloat Volume;
            public SoundSource() { }
            public void FadeIn() { }
            public void FadeOut() { }
            public void Update() { }
        }
    }
    public partial class StreamingSoundsDisplay : UnityEngine.MonoBehaviour
    {
        private UnityEngine.GUIText m_guidText;
        public StreamingSoundsDisplay() { }
        private void Awake() { }
        private void Update() { }
    }
    public partial class StretchGameObject : UnityEngine.MonoBehaviour, IPooled
    {
        private UnityEngine.Transform m_child;
        private UnityEngine.Vector3 m_lastPosition;
        private float m_stretch;
        public UnityEngine.AnimationCurve StretchOverSpeedCurve;
        public StretchGameObject() { }
        public void FixedUpdate() { }
        public void OnPoolSpawned() { }
        public void Start() { }
    }
    public static partial class StringUtility
    {
        public static string AddSpaces(System.Collections.Generic.IEnumerable<char> text) { return default(string); }
    }
    public abstract partial class StringValueProvider : UnityEngine.MonoBehaviour
    {
        protected StringValueProvider() { }
        public abstract string GetStringValue();
    }
    public partial class SurfaceBasedSoundProvider : SoundProvider
    {
        public SurfaceToSoundProviderMap SoundProviderMap;
        public SurfaceProvider SurfaceProvider;
        public SurfaceBasedSoundProvider() { }
        public override SoundDescriptor GetSound(IContext context) { return default(SoundDescriptor); }
    }
    public partial class SurfaceMaterialSoundPair
    {
        public SoundProvider IndependantSoundProvider;
        public SurfaceMaterialType SurfaceMaterialType;
        public SurfaceMaterialSoundPair() { }
    }
    public enum SurfaceMaterialType
    {
        Grass = 1,
        Ice = 4,
        LightDarkPlatform = 7,
        MovingLightDarkPlatform = 8,
        Mushroom = 5,
        Rock = 3,
        Sand = 6,
        Water = 2,
        Wood = 0,
    }
    public abstract partial class SurfaceProvider : UnityEngine.MonoBehaviour
    {
        protected SurfaceProvider() { }
        public abstract SurfaceMaterialType GetSurfaceType();
    }
    public partial class SurfaceToSoundProviderMap : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<SurfaceMaterialSoundPair> SoundPairs;
        public SurfaceToSoundProviderMap() { }
        public static SurfaceMaterialType ColliderMaterialToSurfaceMaterialType(UnityEngine.Collider collider) { return default(SurfaceMaterialType); }
        public virtual SoundDescriptor GetSoundForMaterial(SurfaceMaterialType surfaceMaterialType, IContext context) { return default(SoundDescriptor); }
    }
    public partial class SurfaceTypeContext : IContext, ISurfaceContext
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private SurfaceMaterialType <SurfaceMaterialType>k__BackingField;
        public SurfaceTypeContext(SurfaceMaterialType surfaceMaterialType) { }
        public SurfaceMaterialType SurfaceMaterialType { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(SurfaceMaterialType); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
    }
    public abstract partial class Suspendable : UnityEngine.MonoBehaviour, ISuspendable
    {
        protected Suspendable() { }
        public abstract bool IsSuspended { get; set; }
        public void Awake() { }
        public void OnDestroy() { }
    }
    public partial class SuspendWhenOutOfFrustrum : UnityEngine.MonoBehaviour, IFrustumOptimizable
    {
        public UnityEngine.Rect BoundingBox;
        private bool m_insideFrustum;
        private readonly System.Collections.Generic.HashSet<ISuspendable> m_suspendables;
        private UnityEngine.Transform m_transform;
        public SuspendWhenOutOfFrustrum() { }
        public UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        public bool InsideFrustum { get { return default(bool); } }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnDrawGizmosSelected() { }
        public void OnFrustumEnter() { }
        public void OnFrustumExit() { }
    }
    public static partial class SuspensionManager
    {
        private static readonly System.Collections.Generic.List<ISuspendable> s_suspenableList;
        private static readonly System.Collections.Generic.Dictionary<ISuspendable, int> s_suspended;
        private static readonly System.Collections.Generic.HashSet<ISuspendable> s_suspendedIterate;
        private static System.Collections.Generic.List<ISuspendable> s_suspendRemove;
        private static void .cctor() { }
        public static void CleanupSuspendables() { }
        private static bool FindOrAddToSuspended(ISuspendable suspendable, out int count) { count = default(int); return default(bool); }
        public static System.Collections.Generic.HashSet<ISuspendable> GetSuspendables(System.Collections.Generic.HashSet<ISuspendable> suspendables, bool includeInactive, UnityEngine.GameObject go) { return default(System.Collections.Generic.HashSet<ISuspendable>); }
        public static void GetSuspendables(System.Collections.Generic.HashSet<ISuspendable> suspendables, UnityEngine.GameObject go) { }
        public static System.Collections.Generic.HashSet<ISuspendable> GetSuspendables(System.Collections.Generic.HashSet<ISuspendable> suspendables, params UnityEngine.GameObject[] gos) { return default(System.Collections.Generic.HashSet<ISuspendable>); }
        public static void Register(ISuspendable suspendable) { }
        public static void Resume(ISuspendable suspendable) { }
        public static void Resume(System.Collections.Generic.HashSet<ISuspendable> suspendables) { }
        public static void Resume(System.Collections.Generic.IEnumerable<ISuspendable> suspendables) { }
        public static void Resume(System.Collections.Generic.List<ISuspendable> suspendables) { }
        public static void ResumeAll() { }
        public static void ResumeExcluding(System.Collections.Generic.HashSet<ISuspendable> exclude) { }
        public static void Suspend(ISuspendable suspendable) { }
        public static void Suspend(System.Collections.Generic.HashSet<ISuspendable> suspendables) { }
        public static void Suspend(System.Collections.Generic.List<ISuspendable> suspendables) { }
        public static void SuspendAll() { }
        public static void SuspendExcluding(System.Collections.Generic.HashSet<ISuspendable> exclude) { }
        public static void Unregister(ISuspendable suspendable) { }
        private partial class SuspendableInfo
        {
            private int m_counter;
            public SuspendableInfo() { }
            public int Counter { get { return default(int); } }
            public void ResumeObj(ISuspendable suspendable) { }
            public void SuspendObj(ISuspendable suspendable) { }
        }
    }
    public partial class SwarmEnemy : GroundEnemy
    {
        public float AirTiltAngle;
        public SwarmEnemyAnimations Animations;
        public bool CanFall;
        public SoundSource Idle;
        public SwarmEnemyLootSettings Loot;
        private float m_jumpDelay;
        private bool m_wasSpawned;
        public OrbSpawner OrbSpawner;
        public SwarmEnemyPlaceholder Owner;
        public SwarmEnemySettings Settings;
        public float Size;
        public UnityEngine.AnimationCurve SpeedXToRotation;
        public UnityEngine.AnimationCurve SpeedYToRotation;
        public SwarmEnemy.States State;
        public SoundSource Walking;
        public SwarmEnemy() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__F9() { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Start>m__FA() { return default(bool); }
        public override void Awake() { }
        public override bool CanBeOptimized() { return default(bool); }
        public new void FixedUpdate() { }
        public void OnDeath(Damage damage) { }
        public override void OnDestroy() { }
        public void OnEnterIdle() { }
        public void OnEnterRun() { }
        public void OnEnterSpawned() { }
        public void OnExitIdle() { }
        public void OnExitRun() { }
        public void OnPreProcessDamage(Damage damage) { }
        public void SetModeToSpawned() { }
        public bool ShouldRun() { return default(bool); }
        public new void Start() { }
        public void UpdateIdle() { }
        public void UpdateRotation() { }
        public void UpdateRun() { }
        public void UpdateSpawned() { }
        public partial class States
        {
            public fsm.State Frozen;
            public fsm.State Idle;
            public fsm.State Run;
            public fsm.State Spawned;
            public fsm.State Thrown;
            public States() { }
        }
    }
    public partial class SwarmEnemyAnimations
    {
        public TextureAnimationWithTransitions Fall;
        public TextureAnimationWithTransitions Idle;
        public TextureAnimationWithTransitions Jump;
        public TextureAnimationWithTransitions RunLeft;
        public TextureAnimationWithTransitions RunRight;
        public TextureAnimationWithTransitions Spawned;
        public SwarmEnemyAnimations() { }
    }
    public partial class SwarmEnemyLootSettings
    {
        public float LootAmount;
        public float LootMultiplier;
        public SwarmEnemyLootSettings() { }
    }
    public partial class SwarmEnemyManager : UnityEngine.MonoBehaviour
    {
        public static SwarmEnemyManager Instance;
        private System.Collections.Generic.Queue<SwarmEnemyManager.SpawnInfo> m_spawnQueue;
        public SwarmEnemyManager() { }
        private void Awake() { }
        private void OnDestroy() { }
        public void OnGameSerializeLoad() { }
        public void QueueSpawn(UnityEngine.Vector3 pos, UnityEngine.Vector3 velocity, int lootAmount, OrbSpawner spawner, float damageOnTouch, UnityEngine.GameObject child, MoonGuid sceneRoot, SwarmEnemyPlaceholder owner) { }
        private void Update() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct SpawnInfo
        {
            public UnityEngine.GameObject Child;
            public float DamageOnTouch;
            public int LootAmount;
            public OrbSpawner OrbSpawner;
            public SwarmEnemyPlaceholder Owner;
            public UnityEngine.Vector3 Pos;
            public MoonGuid SceneRoot;
            public UnityEngine.Vector3 Velocity;
        }
    }
    public partial class SwarmEnemyPlaceholder : RespawningPlaceholder
    {
        private System.Collections.Generic.List<int> m_childComponentEnemies;
        public SwarmEnemyPlaceholder.SwarmEnemyPlaceholderSettings Settings;
        [AssetReferenceChoiceAttribute("Swarm Type", new string[]{ "Assets\\frameworks\\enemies\\swarm\\prefabs\\normal\\swarmEnemyLarge.prefab", "Assets\\frameworks\\enemies\\swarm\\textures\\swarmEnemyPlaceholder.png", "Regular Swarm", "Assets\\frameworks\\enemies\\swarm\\prefabs\\fire\\swarmEnemyLargeFire.prefab", "Assets\\frameworks\\enemies\\swarm\\textures\\swarmEnemyFirePlaceholder.png", "Fire Swarm"})]
        public UnityEngine.GameObject SwarmEnemy;
        public SwarmEnemyPlaceholder() { }
        public override bool NeedsToRespawn { get { return default(bool); } }
        public override Entity Instantiate() { return default(Entity); }
        public void OnChildComponentDestroy(SwarmEnemy swarmEnemy) { }
        public void OnChildComponentSpawned(SwarmEnemy swarmEnemy) { }
        public partial class SwarmEnemyPlaceholderSettings
        {
            public float DamageOnTouch;
            public float Health;
            public DropLootSettings LootSettings;
            public int TotalExpOrbsToDrop;
            public SwarmEnemyPlaceholderSettings() { }
        }
    }
    public partial class SwarmEnemySettings
    {
        public float Acceleration;
        public float AlertRange;
        public UnityEngine.GameObject Child;
        public float Decceleration;
        public float Gravity;
        public float JumpDelay;
        public float JumpStrength;
        public float MaxFallSpeed;
        public UnityEngine.AnimationCurve MoveCurve;
        public float Speed;
        public SwarmEnemySettings() { }
    }
    public partial class SwingSoundController : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Rect m_bounds;
        private bool m_characterInsideZone;
        private bool m_characterJumping;
        private bool m_characterOnGround;
        public SoundProvider OnJumpSound;
        public SoundProvider OnLandSound;
        public SwingSoundController() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
    }
    public partial class SyncFramesTest : UnityEngine.MonoBehaviour
    {
        public static bool EnabledForceFixedUpdate;
        public static bool EnableSync;
        private float m_realTimeOffset;
        private float m_timeOffset;
        public SyncFramesTest() { }
        public bool TimeIsScaled { get { return default(bool); } }
        private static void .cctor() { }
        public void ResetSync() { }
        public void Update() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class TargetPositionFollower : UnityEngine.MonoBehaviour
    {
        public bool FollowZ;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Transform Target;
        public bool TargetCamera;
        public TargetPositionFollower() { }
        private void FixedUpdate() { }
        private void UpdateFollower() { }
    }
    public partial class Telemetry
    {
        public static Telemetry.IntStat Brightness;
        public static Telemetry.IncrementStat CollectedEnergyCountStat;
        public static Telemetry.StringStat CompletionHeroStat;
        public static Telemetry.IntStat Contrast;
        public static Telemetry.IntStat DamageText;
        public static Telemetry.IntStat DeathsHeroStat;
        public static Telemetry.IncrementStat EnemiesKilledByChargeFlameCountStat;
        public static Telemetry.IncrementStat EnemiesKilledByGrenadeCountStat;
        public static Telemetry.IncrementStat EnemiesKilledByReflectedBashCountStat;
        public static Telemetry.IncrementStat EnemiesKilledBySpiritFlameCountStat;
        public static Telemetry.IncrementStat EnemiesKilledByStompCountStat;
        public static Telemetry.IntStat FullScreen;
        public static Telemetry.IntStat Gamma;
        public static Telemetry.IntStat InterMediaMinutesPlayed;
        public static Telemetry.IntStat Language;
        public static Telemetry.IncrementStat MapStonesCollectedCountStat;
        public static Telemetry.IntStat MotionBlur;
        public static Telemetry.FloatStat MusicVolume;
        public static Telemetry.IntStat ResolutionHeight;
        public static Telemetry.IntStat ResolutionWidth;
        private static string s_steamString;
        public static Telemetry.IncrementStat SecretsRevealedCountStat;
        public static Telemetry.IncrementStat SoulLinkCountStat;
        public static Telemetry.FloatStat SoundVolume;
        public static Telemetry.IntStat SystemLanguage;
        public static Telemetry.StringStat TimeHeroStat;
        public static Telemetry.IntStat Vibration;
        public static Telemetry.IntStat VSync;
        public Telemetry() { }
        private static void .cctor() { }
        public static void SendSettings() { }
        public partial class FloatStat : Telemetry.Stat
        {
            private float m_floatValue;
            public FloatStat(string xboxOneIdentifier, string steamIdentifier) { }
            protected override bool Send() { return default(bool); }
            public void SendData(float value) { }
            protected override bool SendStatisticsTelemetry() { return default(bool); }
            protected override bool SteamSend() { return default(bool); }
        }
        public partial class IncrementStat : Telemetry.Stat
        {
            private float m_floatValue;
            public IncrementStat(string xboxOneIdentifier, string steamIdentifier) { }
            protected override bool Send() { return default(bool); }
            public new void SendData() { }
            public void SendData(float data) { }
            protected override bool SendStatisticsTelemetry() { return default(bool); }
            protected override bool SteamSend() { return default(bool); }
        }
        public partial class Int64Stat : Telemetry.Stat
        {
            private long m_int64Value;
            public Int64Stat(string xboxOneIdentifier, string steamIdentifier) { }
            protected override bool Send() { return default(bool); }
            public void SendData(long value) { }
            protected override bool SendStatisticsTelemetry() { return default(bool); }
            protected override bool SteamSend() { return default(bool); }
        }
        public partial class IntStat : Telemetry.Stat
        {
            private int m_intValue;
            public IntStat(string xboxOneIdentifier, string steamIdentifier) { }
            protected override bool Send() { return default(bool); }
            public void SendData(int value) { }
            protected override bool SendStatisticsTelemetry() { return default(bool); }
            protected override bool SteamSend() { return default(bool); }
        }
        public abstract partial class Stat
        {
            protected string m_steamIdentifier;
            protected string m_xboxOneIdentifier;
            protected Stat() { }
            protected Stat(string xboxOneIdentifier, string steamIdentifier) { }
            protected void SafeSend() { }
            protected abstract bool Send();
            protected void SendData() { }
            protected abstract bool SendStatisticsTelemetry();
            protected abstract bool SteamSend();
        }
        public partial class StringStat : Telemetry.Stat
        {
            private string m_stringValue;
            public StringStat(string xboxOneIdentifier, string steamIdentifier) { }
            protected override bool Send() { return default(bool); }
            public void SendData(string value) { }
            protected override bool SendStatisticsTelemetry() { return default(bool); }
            protected override bool SteamSend() { return default(bool); }
        }
    }
    public enum TelemetryEvent
    {
        Achievement = 9002,
        AchievementData = 9003,
        Death = 9001,
        Test = 9000,
    }
    public partial class TeleporterController : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.GameObject BloomFade;
        public float BloomFadeDuration;
        public bool DontTeleportForAnimationTesting;
        public static TeleporterController Instance;
        private float m_bloomCurrentTime;
        private bool m_isBlooming;
        private bool m_isTeleporting;
        private float m_startTime;
        private UnityEngine.Vector3 m_teleporterTargetPosition;
        private SoundPlayer m_teleportingStartSound;
        public float NoTeleportAnimationTime;
        public UnityEngine.GameObject TeleporterFinishEffect;
        public System.Collections.Generic.List<GameMapTeleporter> Teleporters;
        public SoundProvider TeleportingBloomSound;
        public SoundProvider TeleportingEndSound;
        public TextureAnimationWithTransitions TeleportingFinishAnimation;
        public TextureAnimationWithTransitions TeleportingLoopAnimation;
        public TextureAnimationWithTransitions TeleportingStartAnimation;
        public SoundProvider TeleportingStartSound;
        public SoundSource TeleportingTwirlAnimationSound;
        public TeleporterController() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static void Activate(string identifier) { }
        public static bool ActivateAll() { return default(bool); }
        public override void Awake() { }
        public static void BeginTeleportation(GameMapTeleporter selectedTeleporter) { }
        public static bool CanTeleport(string ignoreIdentifier) { return default(bool); }
        public void FixedUpdate() { }
        private void Nullify() { }
        public static void OnClose() { }
        public override void OnDestroy() { }
        public void OnFadedToBlack() { }
        public void OnFinishedTeleporting() { }
        public static void OnFinishedTeleportingStartAnimation() { }
        public void OnGameReset() { }
        public override void Serialize(Archive ar) { }
        public static void Show(string identifier) { }
    }
    public partial class TeleportOnEnable : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Transform TeleportTarget;
        public TeleportOnEnable() { }
        public void OnEnable() { }
    }
    public abstract partial class TemporyBoundaryGizmo<T> : UnityEngine.MonoBehaviour where T : UnityEngine.MonoBehaviour
    {
        protected TemporyBoundaryGizmo() { }
    }
    public partial class test : UnityEngine.MonoBehaviour
    {
        public test() { }
        private void Update() { }
    }
    public partial class Test
    {
        public string TestFilePath;
        public Test(string testFilePath) { }
        public string TestName { get { return default(string); } }
        public void TestFinished(bool passed) { }
    }
    public partial class TesterPlugin : UnityEngine.MonoBehaviour, IRecorderPlugin
    {
        public TesterPlugin() { }
        public void Awake() { }
        public void Exit() { }
        public void PlayCycle(int frame) { }
        public void RecordCycle(int frame) { }
    }
    public partial class TestReporter
    {
        private string m_reportPath;
        public TestReporter(string reportPath) { }
        public void FinalizeReport() { }
        public static string GetLastTestsReportPath() { return default(string); }
        public void ReportResult(string testPath, bool result, string logFilePath) { }
        public void SaveLastTestsReportPath() { }
    }
    public partial class TestSet
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<string, bool> <>f__am$cache6;
        private LogCallbackHandler m_logCallbackHandler;
        private int m_testIndex;
        public string OutputFolderPath;
        public const string ScenesFolderName = "scenes";
        public System.Collections.Generic.List<Test> Tests;
        public TestSetConfiguration TestSetConfiguration;
        public string TestSetFolderPath;
        public const string TestsFolderName = "tests";
        public TestSet() { }
        public Test CurrentTest { get { return default(Test); } }
        public string FirstTestSetSceneAssetPath { get { return default(string); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <InitializeTests>m__127(string f) { return default(bool); }
        private void FilterRequestedTests(System.Collections.Generic.List<string> requestedTests) { }
        private bool HaveMoreTests() { return default(bool); }
        public void Init(string testSetFolderPath, string testOutputFolderPath, System.Collections.Generic.List<string> requestedTests) { }
        private void InitializeTests() { }
        public void Run() { }
        private void RunNextTest() { }
        private void RunTest() { }
        public void TestFinished(bool passed, TestReporter testReporter) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <FilterRequestedTests>c__AnonStorey60
        {
            internal Test test;
            public <FilterRequestedTests>c__AnonStorey60() { }
            internal bool <>m__128(string path) { return default(bool); }
        }
    }
    public partial class TestSetConfiguration
    {
        public const string ConfigurationFileName = "configuration.cfg";
        public string FirstTestSetSceneName;
        public TestSetConfiguration(string testSetFolderPath) { }
    }
    public partial class TestSetManager : UnityEngine.MonoBehaviour
    {
        private static TestReporter m_testReporter;
        private static int m_testSetIndex;
        private static JUnitReporter.TestSuite m_testSuite;
        public const string TestOutputFolderName = "testResults";
        public const string TestSetManagerSceneGUID = "6ca1f00f1708e184aaed87674e80d419";
        public static System.Collections.Generic.List<TestSet> TestSets;
        public static string TestsRelativePath;
        public static string TestsToRunFileName;
        public const string UnloadPreviousTestSceneName = "unloadPreviuosTestScene";
        public const string UnloadPreviousTestScenePath = "Assets/frameworks/testingFramework/unloadPreviuosTestScene.unity";
        public TestSetManager() { }
        public static TestSet CurrentTestSet { get { return default(TestSet); } }
        public static bool IsPerformingTests { get { return default(bool); } }
        private static void .cctor() { }
        public static void FinishedTest(bool passed) { }
        public static void FinishedTestSet() { }
        public static System.Collections.Generic.List<string> GetRequestedTests() { return default(System.Collections.Generic.List<string>); }
        public static System.Collections.Generic.Dictionary<string, bool> GetResults(string reportFilePath) { return default(System.Collections.Generic.Dictionary<string, bool>); }
        public static System.Collections.Generic.List<TestSet> GetTestSets() { return default(System.Collections.Generic.List<TestSet>); }
        private static bool HaveMoreTestSets() { return default(bool); }
        public static void Init() { }
        public static void RunNextTestSet() { }
        public void Start() { }
    }
    [CustomShaderModifier("Text anim distort")]
    [UberShaderCategoryAttribute((UberShaderCategory)(9))]
    [UberShaderOrderAttribute((UberShaderOrder)(26))]
    public partial class TextAnimDistortModifier : UberShaderModifier
    {
        public UberShaderTexture DistortTexture;
        public UberShaderVector Strength;
        public TextAnimDistortModifier() { }
        public override bool RequiresNormals() { return default(bool); }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Text anim fade")]
    [UberShaderCategoryAttribute((UberShaderCategory)(9))]
    [UberShaderOrderAttribute((UberShaderOrder)(25))]
    public partial class TextAnimFadeModifier : UberShaderModifier
    {
        public UberShaderFloat Strength;
        public UberShaderTexture TextFadeMask;
        public TextAnimFadeModifier() { }
        public override bool RequiresNormals() { return default(bool); }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Text anim glow")]
    [UberShaderCategoryAttribute((UberShaderCategory)(9))]
    [UberShaderOrderAttribute((UberShaderOrder)(27))]
    public partial class TextAnimGlowModifier : UberShaderModifier
    {
        public UberShaderColor GlowColor;
        public UberShaderFloat GlowSize;
        public TextAnimGlowModifier() { }
        public override bool RequiresNormals() { return default(bool); }
        public override void SetProperties() { }
    }
    public static partial class TextBoxExtended
    {
        public static UnityEngine.Vector2 ComputeAnchor(CatlikeCoding.TextBox.TextBox textBox) { return default(UnityEngine.Vector2); }
        public static int CountLetters(CatlikeCoding.TextBox.TextBox textBox) { return default(int); }
        public static UnityEngine.Rect GetRect(CatlikeCoding.TextBox.TextBox textBox) { return default(UnityEngine.Rect); }
    }
    public partial class TextBoxIconsFontGenerator : UnityEngine.ScriptableObject
    {
        public CatlikeCoding.TextBox.BitmapFont BitmapFont;
        public System.Collections.Generic.List<TextBoxIconsFontGenerator.IconData> Icons;
        public TextBoxIconsFontGenerator() { }
        public TextBoxIconsFontGenerator.IconData FindIcon(int id) { return default(TextBoxIconsFontGenerator.IconData); }
        public partial class IconData
        {
            public string Character;
            public UnityEngine.GameObject Icon;
            public float Width;
            public IconData() { }
        }
    }
    public partial class TextBoxMessage : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache14;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<int, bool> <>f__am$cache15;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.GameObject Background;
        public UnityEngine.GameObject Button;
        public string CurrentMessage;
        public float LettersPerSecond;
        public fsm.StateMachine Logic;
        private System.Collections.Generic.List<LegacyAnimator> m_backgroundAnimators;
        private System.Collections.Generic.List<LegacyAnimator> m_buttonAnimators;
        private float m_remainingWaitTime;
        public int MaxTextLengthMedSpeech;
        public int MaxTextLengthShortSpeech;
        public SoundSource MessageFinishedSound;
        public System.Collections.Generic.Queue<string> Messages;
        private System.Action OnCompleteEvent;
        [NotNull]
        public SoundSource OriSpeechLongSound;
        [NotNull]
        public SoundSource OriSpeechMedSound;
        [NotNull]
        public SoundSource OriSpeechShortSound;
        public TextBoxMessage.States State;
        public CCText Text;
        public CCMoonTextColorer TextColorer;
        public const float WaitTimeBetweenMessages = 0.3f;
        public TextBoxMessage() { }
        public bool Active { get { return default(bool); } }
        public bool IsInactive { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool OnButtonPressed { get { return default(bool); } }
        public event System.Action OnCompleteEvent { add { } remove { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCompleteEvent>m__21() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <StringToByteArray>m__22(int x) { return default(bool); }
        public void AddLine(string text) { }
        public void Awake() { }
        public void EnterInactive() { }
        public void FixedUpdate() { }
        public void Initialize() { }
        public void OnDestroy() { }
        public void OnEnterComplete() { }
        public void OnEnterWriting() { }
        public void OnExitComplete() { }
        public void OnExitWriting() { }
        private void PlayOriSpeech(int textLength) { }
        public void ReadNextLine() { }
        public void StartWriting() { }
        private void StopOriSpeech() { }
        public void StopWriting() { }
        public static byte[] StringToByteArray(string hex) { return default(byte[]); }
        public void UpdateCompleted() { }
        public void UpdateWriting() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <StringToByteArray>c__AnonStorey4D
        {
            internal string hex;
            public <StringToByteArray>c__AnonStorey4D() { }
            internal byte <>m__23(int x) { return default(byte); }
        }
        public partial class States
        {
            public fsm.State Completed;
            public fsm.State Inactive;
            public fsm.State Writing;
            public States() { }
        }
    }
    [CustomShaderModifier("Text glow")]
    [UberShaderCategoryAttribute((UberShaderCategory)(9))]
    [UberShaderOrderAttribute((UberShaderOrder)(23))]
    public partial class TextGlowModifier : UberShaderModifier
    {
        public UberShaderColor GlowColor;
        public UberShaderFloat GlowSize;
        public TextGlowModifier() { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Textify")]
    [UberShaderCategoryAttribute((UberShaderCategory)(9))]
    [UberShaderOrderAttribute((UberShaderOrder)(21))]
    public partial class TextifyModifier : UberShaderModifier, IDynamicGraphic
    {
        public UberShaderTexture TextTexture;
        public TextifyModifier() { }
        public override bool DoesChangeShape() { return default(bool); }
        public override float GetQuadExpandSize() { return default(float); }
        public override void SetProperties() { }
    }
    public partial class TextMeshFloatSetter : UnityEngine.MonoBehaviour
    {
        public FloatValueProvider FloatValueProvider;
        private float m_lastValue;
        private UnityEngine.TextMesh m_textMesh;
        public TextMeshFloatSetter() { }
        public void FixedUpdate() { }
        public void Start() { }
    }
    public partial class TextMeshSetter : UnityEngine.MonoBehaviour
    {
        private string m_previousString;
        private CatlikeCoding.TextBox.TextBox m_textBox;
        public StringValueProvider StringValueProvider;
        public TextMeshSetter() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnEnable() { }
        public void SetText(string s) { }
    }
    [CustomShaderModifier("Text outline")]
    [UberShaderCategoryAttribute((UberShaderCategory)(9))]
    [UberShaderOrderAttribute((UberShaderOrder)(22))]
    public partial class TextOutlineModifier : UberShaderModifier
    {
        public UberShaderColor OutlineColor;
        public UberShaderFloat OutlineSize;
        public TextOutlineModifier() { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Text shadow")]
    [UberShaderCategoryAttribute((UberShaderCategory)(9))]
    [UberShaderOrderAttribute((UberShaderOrder)(24))]
    public partial class TextShadowModifier : UberShaderModifier
    {
        public UberShaderColor ShadowColor;
        [UberShaderVectorDisplay("Offset", "")]
        public UberShaderVector ShadowOffset;
        public TextShadowModifier() { }
        public override void SetProperties() { }
    }
    public partial class TextureAnimation : UnityEngine.ScriptableObject
    {
        public AnimationMetaData AnimationMetaData;
        public System.Collections.Generic.List<Atlas> Atlases;
        public System.Collections.Generic.List<MoonGuid> FrameGuids;
        public bool IgnoreTimeScale;
        public bool Loop;
        private System.Collections.Generic.Dictionary<MoonGuid, TextureAnimation.AnimationTextureInfo> m_guidToTex;
        public bool PingPong;
        public float Speed;
        public TextureAnimation() { }
        public float Duration { get { return default(float); } }
        public void AddFrameForPlatform(AtlasSpriteTexture frame, Atlas atlas, UberAtlassingPlatform platform) { }
        public float FrameToTime(float frame) { return default(float); }
        public AtlasSpriteTexture GetFrameForId(MoonGuid guid, out Atlas foundAtlas) { foundAtlas = default(Atlas); return default(AtlasSpriteTexture); }
        public AtlasSpriteTexture GetTextureAtIndex(float index, out Atlas foundAtlas) { foundAtlas = default(Atlas); return default(AtlasSpriteTexture); }
        public AtlasSpriteTexture GetTextureAtTime(float time, out Atlas atlas) { atlas = default(Atlas); return default(AtlasSpriteTexture); }
        public void SortAnimationFrames() { }
        public float TimeToFrame(float time) { return default(float); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <SortAnimationFrames>c__AnonStorey4E
        {
            internal TextureAnimation <>f__this;
            internal Atlas at;
            public <SortAnimationFrames>c__AnonStorey4E() { }
            internal int <>m__2F(MoonGuid g1, MoonGuid g2) { return default(int); }
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct AnimationTextureInfo
        {
            public Atlas Atlas;
            public AtlasSpriteTexture SpriteTexture;
        }
    }
    public partial class TextureAnimationGUIText : UnityEngine.MonoBehaviour
    {
        public SpriteAnimatorWithTransitions TextureAnimator;
        public TextureAnimationGUIText() { }
        public void Update() { }
    }
    public partial class TextureAnimationWithTransitions : UnityEngine.ScriptableObject
    {
        public TextureAnimation Animation;
        public TextureAnimationWithTransitions Parent;
        public System.Collections.Generic.List<TextureAnimationWithTransitions.TextureAnimationPair> Transitions;
        public TextureAnimationWithTransitions() { }
        public TextureAnimationWithTransitions.TextureAnimationPair GetTransition(int currentFrame, TextureAnimationWithTransitions from, TextureAnimation fromAnimation, bool flip) { return default(TextureAnimationWithTransitions.TextureAnimationPair); }
        public partial class TextureAnimationPair
        {
            public int CrossoverFrame;
            public bool Flip;
            public TextureAnimationWithTransitions From;
            public TextureAnimation FromAnimation;
            public int MaxFrame;
            public int MinFrame;
            public TextureAnimation TransitionAnimation;
            public int TransitionEnd;
            public int TransitionStart;
            public TextureAnimationPair() { }
        }
    }
    public partial class TextureAnimator
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <SpeedMultiplier>k__BackingField;
        private TextureAnimation m_animation;
        private int m_currentLoop;
        private float m_time;
        public System.Action OnAnimationStart;
        public TextureAnimator() { }
        public TextureAnimation Animation { get { return default(TextureAnimation); } }
        public float AnimationDuration { get { return default(float); } }
        public bool AnimationEnded { get { return default(bool); } }
        public float Frame { get { return default(float); } set { } }
        public float SpeedMultiplier { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public AtlasSpriteTexture Texture { get { return default(AtlasSpriteTexture); } }
        public float Time { get { return default(float); } set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnAnimationStart>m__30() { }
        public void Advance(float timeDelta) { }
        public void ConstrainTime() { }
        public float GetRotationFromMetaData(string name) { return default(float); }
        public void SetAnimation(TextureAnimation animation, bool resetTime=true) { }
    }
    public partial class TextureBasedOnHealth : UnityEngine.MonoBehaviour
    {
        public Entity Entity;
        public UnityEngine.AnimationCurve HealthToIndex;
        private UnityEngine.Renderer m_renderer;
        public UnityEngine.Texture[] Textures;
        public TextureBasedOnHealth() { }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    public partial class TextureProvider : UnityEngine.ScriptableObject
    {
        public UnityEngine.Texture2D DefaultTexture2D;
        public System.Collections.Generic.List<TextureProvider.TetxureContidionPair> TextureConditionPairs;
        public TextureProvider() { }
        public UnityEngine.Texture2D GetTexture() { return default(UnityEngine.Texture2D); }
        public partial class TetxureContidionPair
        {
            public Condition Condition;
            public UnityEngine.Texture2D Texture2D;
            public TetxureContidionPair() { }
        }
    }
    public partial class TextureTilingAdjuster : UnityEngine.MonoBehaviour
    {
        private System.Collections.Generic.List<TextureTilingAdjuster.AdjustedTexture> m_adjustedTextures;
        private int m_frame;
        private UnityEngine.Vector2 m_prevScale;
        private UnityEngine.Renderer m_renderer;
        private static string[] s_supportedTextureProperties;
        public UnityEngine.Vector2 ScaleMultiplier;
        public TextureTilingAdjuster() { }
        private static void .cctor() { }
        private void FixedUpdate() { }
        private void Start() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct AdjustedTexture
        {
            public UnityEngine.Vector2 OriginaTexturelScale;
            public string TexturePropertyName;
        }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct TextureUberScreenInfo
    {
        public UnityEngine.Vector3 Error;
        public UberScreenMode Mode;
        public float Tweak;
    }
    public enum TextureUvMode
    {
        UvSpace = 0,
        WorldProjection = 1,
        WorldRotation = 2,
    }
    public enum TextureVisualizeMode
    {
        A = 2,
        None = 0,
        RGB = 1,
    }
    public partial class TheGiftSetupController : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Transform CameraTarget;
        public SpriteAnimator FindSeinSpriteAnimator;
        public TextureAnimation FindSeinTextureAnimation;
        public SpriteAnimator GlowSpriteAnimator;
        public TextureAnimation GlowTextureAnimation;
        public UnityEngine.GameObject Leaf;
        public ActionMethod OnFinishedAction;
        public ActionMethod OnNaruCollidedAction;
        public TheGiftSetupController() { }
        public void FixedUpdate() { }
        private void OnFindSeinAnimationEnd() { }
        private void OnNaruCollided() { }
        public void Start() { }
    }
    public partial class TickingTimer : UnityEngine.MonoBehaviour
    {
        private float m_lastTickTime;
        private bool m_shouldTick;
        private float m_time;
        public float MinTickFrequency;
        public float StartingTickFrequency;
        public UnityEngine.AudioClip TickSound;
        public float Timeout;
        public UnityEngine.AudioClip TockSound;
        public TickingTimer() { }
        public bool isTimedOut { get { return default(bool); } }
        public void RestartTimer() { }
        public void StopTimer() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator TimerRoutine() { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <TimerRoutine>c__Iterator49 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal TickingTimer <>f__this;
            internal float <tickFrequency>__0;
            public <TimerRoutine>c__Iterator49() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class TimeCounterDisplay : UnityEngine.MonoBehaviour
    {
        private float m_delay;
        public TimeCounterDisplay() { }
        public void Update() { }
    }
    public abstract partial class TimedActionExecuter : UnityEngine.MonoBehaviour
    {
        protected TimedActionExecuter() { }
        public abstract ActionMethod ActionMethod { get; }
        public abstract ActionWithDuration ActionWithDuration { get; }
        public abstract float StartTime { get; set; }
        public abstract void ExecuteAction(IContext context);
        public abstract void StopAction();
    }
    [UnityEngine.AddComponentMenu("Event Framework/Actions/Timed action sequence")]
    public partial class TimedActionSequence : ActionWithDuration
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<TimedActionExecuter> <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSequenceRunning>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private int <Pause>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <SequenceCurrentTime>k__BackingField;
        public System.Collections.Generic.List<TimedActionExecuter> Actions;
        public bool ShowCreateActions;
        public TimedActionSequence() { }
        public override float Duration { get { return default(float); } set { } }
        public override bool IsPerforming { get { return default(bool); } }
        public bool IsSequenceRunning { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public int Pause { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float SequenceCurrentTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <FindActions>m__24(TimedActionExecuter a, TimedActionExecuter b) { return default(int); }
        public override void Awake() { }
        public void FindActions() { }
        public override void OnDestroy() { }
        public override void Perform(IContext context) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator RunSequence(IContext context) { return default(System.Collections.IEnumerator); }
        public override void Stop() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RunSequence>c__Iterator8 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal IContext <$>context;
            internal TimedActionSequence <>f__this;
            internal int <i>__0;
            internal TimedActionExecuter <timedActionExecuter>__1;
            internal IContext context;
            public <RunSequence>c__Iterator8() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class TimedDoor : SaveSerialize
    {
        public ActionMethod ActionAtSolved;
        public ActionMethod ActionAtTimeout;
        public UnityEngine.AudioClip ChallengeCompleteSound;
        private LegacyTranslateAnimator m_animator;
        private bool m_isSolved;
        private TickingTimer m_timer;
        public bool ShutdownDoor;
        public TimedDoor() { }
        public override void Awake() { }
        public void CloseTheDoor() { }
        public void OpenTheDoor() { }
        public void PuzzleSolved() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class TimedTrigger : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public ActionMethod Action;
        public float Duration;
        private float m_time;
        public bool Paused;
        public UnityEngine.Component Reciever;
        public bool Repeat;
        public float StartTime;
        public string TriggerName;
        public TimedTrigger() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public new void Awake() { }
        private void FixedUpdate() { }
        public new void OnDestroy() { }
        public void Reset() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void TriggerNow() { }
    }
    public partial class TimelineActionTrigger : BaseAnimator
    {
        public ActionMethod Action;
        private bool m_started;
        public TimelineActionTrigger() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class TimelineSequence : BaseAnimator
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<TimelineSequence.SequenceEntry> <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<TimelineSequence.SequenceEntry> <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<TimelineSequence.SequenceEntry> <>f__am$cache6;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<TimelineSequence.SequenceEntry> <>f__am$cache7;
        public System.Collections.Generic.List<TimelineSequence.SequenceEntry> Entries;
        public bool ExcludeFromOtherTimelines;
        public bool Loop;
        public TimelineSequence.SortMode Mode;
        public TimelineSequence() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <SortByName>m__12D(TimelineSequence.SequenceEntry a) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <SortByName>m__12E(TimelineSequence.SequenceEntry a, TimelineSequence.SequenceEntry b) { return default(int); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <SortByTime>m__12B(TimelineSequence.SequenceEntry a) { return default(bool); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <SortByTime>m__12C(TimelineSequence.SequenceEntry a, TimelineSequence.SequenceEntry b) { return default(int); }
        public override void CacheOriginals() { }
        public TimelineSequence.SequenceEntry FindEntry<T>() { return default(TimelineSequence.SequenceEntry); }
        [UnityEngine.ContextMenu("Force to play")]
        public void ForceToPlay() { }
        [UnityEngine.ContextMenu("Refresh entries")]
        public void RefreshEntries() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
        [UnityEngine.ContextMenu("Sort by name")]
        public void SortByName() { }
        [UnityEngine.ContextMenu("Sort by start time")]
        public void SortByTime() { }
        public partial class SequenceEntry
        {
            public BaseAnimator Animator;
            public bool External;
            public float Speed;
            public float StartTime;
            public SequenceEntry() { }
        }
        public enum SortMode
        {
            Name = 1,
            None = 0,
            Time = 2,
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class TimelineSequenceLabel : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<TimelineSequenceLabel> All;
        public TimelineSequenceLabel() { }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnEnable() { }
    }
    public static partial class TimeMeasurerHelper
    {
        private static System.DateTime timestamp;
        public static double GetTimePast() { return default(double); }
        public static void TakeTimestamp() { }
    }
    public enum TimeMode
    {
        GameTime = 0,
        UITime = 1,
    }
    internal partial class Timer
    {
        public Timer() { }
        public void Report(string message) { }
    }
    public partial class TimerTransition : CutsceneTransition
    {
        public float Time;
        public TimerTransition() { }
        public override bool ShouldTransition() { return default(bool); }
    }
    internal partial class TimeScaleDebugMenuItem : FloatDebugMenuItem
    {
        public TimeScaleDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
    [CustomShaderModifier("Tint")]
    [UberShaderCategoryAttribute((UberShaderCategory)(6))]
    [UberShaderOrderAttribute((UberShaderOrder)(37))]
    public partial class TintModifier : UberShaderModifier
    {
        public UberShaderColor Tint;
        public TintModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    public partial class TitleScreenController : UnityEngine.MonoBehaviour
    {
        private bool m_hasRun;
        public ActionMethod StartAction;
        public TitleScreenController() { }
        private void FixedUpdate() { }
    }
    public partial class TitleScreenManager : UnityEngine.MonoBehaviour
    {
        public BaseAnimator[] AnimatorsToReset;
        public CleverMenuItemSelectionManager CutscenesScreen;
        public CleverMenuItemSelectionManager DemoMenuScreen;
        public CleverMenuItemSelectionManager ExitGameScreen;
        private TitleScreenManager.Screen m_currentScreen;
        public CleverMenuItemSelectionManager MainMenuScreen;
        public ActionMethod OnTitleScreenStartup;
        public UnityEngine.GameObject PressStartScreen;
        private static TitleScreenManager s_instance;
        public SaveSlotsUI SaveSlotsScreen;
        public UnityEngine.GameObject TrialHelpScreen;
        public UnityEngine.GameObject WaitingForSaveGameScreen;
        public TitleScreenManager() { }
        public static TitleScreenManager.Screen CurrentScreen { get { return default(TitleScreenManager.Screen); } }
        public void Awake() { }
        public void OnDestroy() { }
        public static void OnReturnToTitleScreen() { }
        public static void SetScreen(TitleScreenManager.Screen screen) { }
        public static void SetScreenImmediate(TitleScreenManager.Screen screen) { }
        private static void SetVisible(CleverMenuItemSelectionManager manager, bool visible) { }
        private static void SetVisibleImmediate(CleverMenuItemSelectionManager manager, bool visible) { }
        public void Start() { }
        public void Startup() { }
        public enum Screen
        {
            Cutscenes = 4,
            DemoMenu = 5,
            ExitGame = 3,
            MainMenu = 2,
            PressStart = 0,
            SaveSlots = 7,
            TrialHelp = 6,
            Undefined = 8,
            WaitingForSaveGame = 1,
        }
    }
    public partial class TitleScreenPressStartLogic : UnityEngine.MonoBehaviour
    {
        public ActionMethod OnPressed;
        public TitleScreenPressStartLogic() { }
        public void FixedUpdate() { }
        public void OnStartPressedCallback() { }
    }
    public partial class ToggleAllKinematic : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private int m_currentOption;
        private System.Collections.Generic.List<UnityEngine.Rigidbody> m_modifiedRigidBodies;
        public ToggleAllKinematic() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
        public void Awake() { }
    }
    public partial class ToggleCleverMenuItemLeftRight : UnityEngine.MonoBehaviour
    {
        public ActionMethod LeftAction;
        private CleverMenuItem m_cleverMenuItem;
        private CleverMenuItemSelectionManager m_selectionManager;
        public ActionMethod RightAction;
        public ToggleCleverMenuItemLeftRight() { }
        public bool ItemSelected { get { return default(bool); } }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    public partial class ToggleSettingsAction : ActionMethod
    {
        public SoundProvider OffSound;
        public SoundProvider OnSound;
        public ToggleSettingsAction.SettingType Setting;
        public ToggleSettingsAction() { }
        public override void Perform(IContext context) { }
        private void PlaySound(bool on) { }
        public enum SettingType
        {
            DamageText = 2,
            Fullscreen = 0,
            MotionBlur = 3,
            Vibration = 1,
            VSync = 4,
        }
    }
    public partial class TraceGroundMovement : SaveSerialize, IDamageReciever, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Speed>k__BackingField;
        public float CurrentAngularVelocity;
        public Kickback Kickback;
        private UnityEngine.Vector3 m_floorNormal;
        private float m_lastAngle;
        private UnityEngine.Vector3 m_lastPosition;
        private readonly MovingGroundHelper m_movingGround;
        private UnityEngine.Rigidbody m_rigidbody;
        public SurfaceMaterialType Surface;
        public TraceGroundMovement() { }
        public UnityEngine.Vector3 Down { get { return default(UnityEngine.Vector3); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Left { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Vector3 Right { get { return default(UnityEngine.Vector3); } }
        public float Speed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 Up { get { return default(UnityEngine.Vector3); } }
        public void ApplyKickback(float kickbackMultiplier) { }
        public override void Awake() { }
        public void FixedUpdate() { }
        public void OnCollision(UnityEngine.Collision collision) { }
        public void OnCollisionEnter(UnityEngine.Collision collision) { }
        public void OnCollisionStay(UnityEngine.Collision collision) { }
        public override void OnDestroy() { }
        public void OnRecieveDamage(Damage damage) { }
        public override void Serialize(Archive ar) { }
    }
    public partial class TraceGroundMovementSurfaceProvider : SurfaceProvider
    {
        public TraceGroundMovement TraceGroundMovement;
        public TraceGroundMovementSurfaceProvider() { }
        public override SurfaceMaterialType GetSurfaceType() { return default(SurfaceMaterialType); }
    }
    public partial class Trail : UnityEngine.MonoBehaviour, IPooled, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public System.Collections.Generic.List<Trail.TrailPosition> Data;
        public UnityEngine.Vector3 LastPosition;
        private LineMesh m_lineMesh;
        private float m_time;
        private UnityEngine.Transform m_transform;
        public float MaxDistance;
        public float MaxTime;
        public float MinVertexDistance;
        public Trail() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Vector3 TargetPosition { get { return default(UnityEngine.Vector3); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnPoolSpawned() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct TrailPosition
        {
            public UnityEngine.Vector3 Position;
            public float StartTime;
            public TrailPosition(UnityEngine.Vector3 position, float startTime) { throw new System.NotImplementedException(); }
        }
    }
    public partial class TransformAnimator : BaseAnimator
    {
        private UnityEngine.Vector3 m_originalPosition;
        public UnityEngine.AnimationCurve X;
        public UnityEngine.AnimationCurve Y;
        public UnityEngine.AnimationCurve Z;
        public TransformAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public UnityEngine.Vector3 OriginalPosition { get { return default(UnityEngine.Vector3); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class TransformFollower : UnityEngine.MonoBehaviour
    {
        public bool FollowSein;
        private UnityEngine.Vector3 m_speed;
        public UnityEngine.Transform Target;
        public UnityEngine.AnimationCurve XSpeedCurve;
        public UnityEngine.AnimationCurve YSpeedCurve;
        public TransformFollower() { }
        private void FixedUpdate() { }
        public void Start() { }
    }
    public partial class TransformRecordable : UnityEngine.MonoBehaviour
    {
        public static AllContainer<TransformRecordable> All;
        public string UniqueID;
        public TransformRecordable() { }
        private static void .cctor() { }
        public void Awake() { }
        public void OnDestroy() { }
    }
    public partial class TransformRecorderData : IFrameData
    {
        public System.Collections.Generic.List<TransformRecorderData.Data> RecorderData;
        public TransformRecorderData() { }
        public TransformRecorderData(System.IO.BinaryReader binaryReader) { }
        public RecorderFrame.FrameDataTypes FrameType() { return default(RecorderFrame.FrameDataTypes); }
        public void Load(System.IO.BinaryReader binaryReader) { }
        public void Save(System.IO.BinaryWriter binaryWriter) { }
        public partial class Data
        {
            public UnityEngine.Vector3 AngularVelocity;
            public UnityEngine.Vector3 Position;
            public UnityEngine.Quaternion Rotation;
            public string UniqueID;
            public UnityEngine.Vector3 Velocity;
            public Data() { }
        }
    }
    public partial class TransformSaveSerialize : SaveSerialize
    {
        public TransformSaveSerialize() { }
        public override void Serialize(Archive ar) { }
    }
    public static partial class TransformUtility
    {
        public static void SetParentMaintainingLocalPosition(this UnityEngine.Transform transform, UnityEngine.Transform parent) { }
        public static void SetParentMaintainingLocalPositionAndRotation(this UnityEngine.Transform transform, UnityEngine.Transform parent) { }
        public static void SetParentMaintainingLocalTransform(this UnityEngine.Transform transform, UnityEngine.Transform parent) { }
        public static void SetParentMaintainingRotationAndScale(this UnityEngine.Transform transform, UnityEngine.Transform parent) { }
    }
    public partial class TranslatedMessageProvider : MessageProvider
    {
        public System.Collections.Generic.List<TranslatedMessageProvider.MessageItem> Messages;
        public TranslatedMessageProvider() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages() { return default(System.Collections.Generic.IEnumerable<MessageDescriptor>); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetMessages>c__Iterator1C : System.Collections.Generic.IEnumerable<MessageDescriptor>, System.Collections.Generic.IEnumerator<MessageDescriptor>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal MessageDescriptor $current;
            internal int $PC;
            internal System.Collections.Generic.List<TranslatedMessageProvider.MessageItem>.Enumerator <$s_344>__0;
            internal System.Collections.Generic.List<TranslatedMessageProvider.MessageItem>.Enumerator <$s_345>__2;
            internal TranslatedMessageProvider <>f__this;
            internal TranslatedMessageProvider.MessageItem <message>__1;
            internal TranslatedMessageProvider.MessageItem <message>__3;
            public <GetMessages>c__Iterator1C() { }
            MessageDescriptor System.Collections.Generic.IEnumerator<MessageDescriptor>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(MessageDescriptor); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<MessageDescriptor> System.Collections.Generic.IEnumerable<MessageDescriptor>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<MessageDescriptor>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        public partial class MessageItem
        {
            public string Chinese;
            public EmotionType Emotion;
            public string English;
            public string French;
            public string German;
            public string Italian;
            public string Japanese;
            public string Portuguese;
            public string Russian;
            public SoundProvider Sound;
            public string Spanish;
            public MessageItem() { }
            public MessageDescriptor GetDescriptor(Language language) { return default(MessageDescriptor); }
            public string Message(Language language) { return default(string); }
        }
    }
    [CustomShaderModifier("Position animator")]
    [UberShaderCategoryAttribute((UberShaderCategory)(0))]
    [UberShaderOrderAttribute((UberShaderOrder)(11))]
    public partial class TranslateModifier : UberShaderModifier, IAnimatedGraphic
    {
        [UberShaderVectorDisplay("Offset", "Unused", ShowAsVector2=true)]
        public UberShaderVector Offset;
        public UberShaderCurve TranslateXCurve;
        public UberShaderCurve TranslateYCurve;
        public TranslateModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetBaseVertexTextureNames() { return default(System.Collections.Generic.IEnumerable<string>); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        public override void SetProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetBaseVertexTextureNames>c__Iterator25 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            public <GetBaseVertexTextureNames>c__Iterator25() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator26 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal TranslateModifier <>f__this;
            internal bool <simpleX>__0;
            internal bool <simpleY>__1;
            public <GetKeywordsForShader>c__Iterator26() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    [CustomShaderModifier("Transparancy animator")]
    [UberShaderCategoryAttribute((UberShaderCategory)(0))]
    [UberShaderOrderAttribute((UberShaderOrder)(12))]
    public partial class TransparancyAnimatorModifier : UberShaderModifier
    {
        public UberShaderCurve TransparancyCurve;
        public TransparancyAnimatorModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void SetProperties() { }
    }
    public partial class TransparencyAnimator : BaseAnimator
    {
        public bool AnimateChildren;
        public UnityEngine.AnimationCurve AnimationCurve;
        [PooledSafeAttribute]
        private readonly System.Collections.Generic.List<TransparencyAnimator> m_childTransparencyAnimators;
        [PooledSafeAttribute]
        private System.Collections.Generic.List<CleverMenuItem> m_cleverMenuItems;
        private bool m_forceUseRendererMaterial;
        private float m_lastFinalOpacity;
        private float m_opacity;
        private float m_parentOpacity;
        [PooledSafeAttribute]
        private readonly System.Collections.Generic.List<TransparencyAnimator.RendererData> m_rendererData;
        [PooledSafeAttribute]
        private readonly System.Collections.Generic.HashSet<UnityEngine.Renderer> m_renderers;
        public TransparencyAnimator.AnimateMode Mode;
        private static bool[] s_disableRenderer;
        private static int[] s_propIds;
        private static string[] s_propNames;
        public TransparencyAnimator() { }
        public override float Duration { get { return default(float); } }
        public float FinalOpacity { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        private int PropertyId { get { return default(int); } }
        private bool UseSharedMaterial { get { return default(bool); } }
        private static void .cctor() { }
        private void AddChild(UnityEngine.Transform child) { }
        private void AddChildren(UnityEngine.Transform childTransform) { }
        public void ApplyTransparency(bool force=true) { }
        public new void Awake() { }
        public override void CacheOriginals() { }
        private bool CanBeAnimated(UnityEngine.Renderer r) { return default(bool); }
        private void ManuallyRegister(UnityEngine.Transform child) { }
        [UnityEngine.ContextMenu("Print out renderer data")]
        public void PrintOutRendererData() { }
        public static void Register(UnityEngine.Transform child) { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
        public void SetParentOpacity(float opacity) { }
        public enum AnimateMode
        {
            Additive = 2,
            Color = 0,
            Dissolve = 1,
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct RendererData
        {
            public readonly float OriginalAlpha;
            public readonly UnityEngine.Renderer Renderer;
            public RendererData(UnityEngine.Renderer renderer, int id) { throw new System.NotImplementedException(); }
            public void SetRendererAlpha(int mode, int propertyID, bool useSharedMaterial, float value) { }
        }
    }
    public partial class TransparentWallB : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public BaseAnimator Animator;
        private bool m_beingTriggered;
        private bool m_hasBeenShown;
        private bool m_lastVisiable;
        public TransparentWallB() { }
        public bool HasSense { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float SenseTime { get { return default(float); } }
        public bool WallVisible { get { return default(bool); } }
        public new void Awake() { }
        public void FixedUpdate() { }
        public new void OnDestroy() { }
        private void OnEnterTrigger(UnityEngine.Collider other) { }
        public void OnTrigger(UnityEngine.Collider other) { }
        public void OnTriggerEnter(UnityEngine.Collider other) { }
        public void OnTriggerStay(UnityEngine.Collider other) { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class TrialEndTextCondition : Condition
    {
        public TrialEndTextCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class Triangulate
    {
        private static float EPSILON;
        public Triangulate() { }
        private static void .cctor() { }
        public static float Area(ref System.Collections.Generic.List<UnityEngine.Vector2> contour) { return default(float); }
        public static bool InsideTriangle(float Ax, float Ay, float Bx, float By, float Cx, float Cy, float Px, float Py) { return default(bool); }
        public static bool Process(ref System.Collections.Generic.List<UnityEngine.Vector2> contour, ref System.Collections.Generic.List<int> result, out bool counterClockwise) { counterClockwise = default(bool); return default(bool); }
        public static bool Snip(ref System.Collections.Generic.List<UnityEngine.Vector2> contour, int u, int v, int w, int n, ref System.Collections.Generic.List<int> V) { return default(bool); }
    }
    public partial class Trigger : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public ActionMethod ActionToRun;
        public bool Active;
        public Condition Condition;
        public float Delay;
        public bool DontTriggerWhileRunning;
        public bool TriggerOnce;
        public float Wait;
        public Trigger() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public new void Awake() { }
        public void DoTrigger(bool shouldCheckCondition=true) { }
        public new void OnDestroy() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator ProcessTrigger() { return default(System.Collections.IEnumerator); }
        public override void Serialize(Archive ar) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <ProcessTrigger>c__Iterator10 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal Trigger <>f__this;
            internal float <t>__0;
            public <ProcessTrigger>c__Iterator10() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class TriggerByString : Trigger
    {
        public TriggerByString.StringTriggerData Data;
        private static System.Collections.Generic.List<string> m_stringTriggersList;
        public TriggerByString() { }
        private static void .cctor() { }
        public new void Awake() { }
        public static void Deregister(string s) { }
        public void DoTrigger() { }
        public void FixedUpdate() { }
        public new void OnDestroy() { }
        public static void OnGameReset() { }
        public void OnSceneRootEnabledAfterSerialize(SceneRoot sceneRoot) { }
        public static void Register(string s) { }
        public static void SerializeStringTriggers(Archive ar) { }
        public void Start() { }
        public partial class StringTriggerData
        {
            public string String;
            public TriggerByString.TriggerEvent TriggerEvent;
            public StringTriggerData() { }
        }
        public enum TriggerEvent
        {
            Always = 3,
            Awake = 0,
            SceneEnabledAfterSerialize = 2,
            Start = 1,
        }
    }
    public partial class TriggerContext : IContext, ITriggerContext
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Collider <Collider>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Collider <TriggerReciever>k__BackingField;
        public TriggerContext(UnityEngine.Collider collider, UnityEngine.Collider triggerReciever) { }
        public UnityEngine.Collider Collider { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Collider); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        public UnityEngine.Collider TriggerReciever { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Collider); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
    }
    public partial class TriggeredActionSequence : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<ActionMethod> ActionsWithDuration;
        private int m_count;
        public TriggeredActionSequence() { }
        public void Trigger() { }
    }
    public partial class TriggerOnFreeze : Trigger
    {
        public UnityEngine.GameObject FreezableTarget;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private IFreezable m_freezable;
        public TriggerOnFreeze() { }
        private new void Awake() { }
        private new void OnDestroy() { }
        public void OnFreeze() { }
        [UberBuildMethod]
        private void ProvideComponents() { }
    }
    public partial class TriggerOnScrollLockPass : Trigger
    {
        public TriggerOnScrollLockPass() { }
        public new void Awake() { }
        public new void OnDestroy() { }
        public void OnScrollLockPassed() { }
    }
    public partial class TriggerWithCondition : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public ActionMethod Action;
        public Condition Condition;
        public TriggerWithCondition() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
    }
    public partial class TriggerWithConditions : UnityEngine.MonoBehaviour
    {
        public ActionMethod Action;
        public System.Collections.Generic.List<Condition> Conditions;
        private bool m_triggered;
        public bool TriggerOnce;
        public TriggerWithConditions() { }
        public void FixedUpdate() { }
    }
    [CustomShaderModifier("Turbulence Brightness")]
    [UberShaderCategoryAttribute((UberShaderCategory)(1))]
    [UberShaderOrderAttribute((UberShaderOrder)(32))]
    public partial class TurbulenceBrightnessModifier : TurbulenceModifier
    {
        [UberShaderVectorDisplay("Local Speed", "Local Scale", "Local Offset", "Range")]
        public UberShaderVector LocalSettings;
        [UberShaderVectorDisplay("Uv Waviness", "", ShowAsVector2=true)]
        public UberShaderVector ScaleVarSettings;
        public TurbulenceBrightnessModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void Randomize() { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("Turbulence Distortion")]
    [UberShaderCategoryAttribute((UberShaderCategory)(1))]
    [UberShaderOrderAttribute((UberShaderOrder)(2))]
    public partial class TurbulenceDistortionModifier : TurbulenceModifier
    {
        [UberShaderVectorDisplay("Bias", "", ShowAsVector2=true)]
        public UberShaderVector BiasSettings;
        [UberShaderVectorDisplay("Local Speed", "Local Scale", "Local Offset", "")]
        public UberShaderVector LocalSettings;
        [UberShaderVectorDisplay("Strength", "Uv Waviness", ShowAsVector2=true)]
        public UberShaderVector ScaleVarSettings;
        public UberShaderTexture TurbulenceMask;
        public TurbulenceDistortionModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override float GetQuadExpandSize() { return default(float); }
        public override void Randomize() { }
        public override void SetProperties() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class TurbulenceManager : UnityEngine.MonoBehaviour
    {
        public TurbulenceSettings DefaultSettings;
        public static TurbulenceManager Instance;
        private TurbulenceManagerBinder m_binder;
        private readonly SceneDefaultSettingsHelper m_defaultSettingsHelper;
        private bool m_isAnimating;
        private float m_lastTimelineSet;
        private float m_prevTime;
        private float m_time;
        private float m_timelineSpeed;
        private float m_timelineStr;
        public TurbulenceManager() { }
        public float TimeLineSpeed { get { return default(float); } set { } }
        public float TimeLineStrength { get { return default(float); } set { } }
        private float WorkingTime { get { return default(float); } }
        public float GetSpeedMultiplier() { return default(float); }
        public float GetStrengthMultiplier() { return default(float); }
        private void OnEnable() { }
        private void OnRenderObject() { }
        public float SampleTurbulenceValueAtTime(float strength, float speed, float timeOffset, float time) { return default(float); }
        public void StopAnimation() { }
    }
    public partial class TurbulenceManagerBinder
    {
        private UnityEngine.Color[] m_colorSet;
        private UnityEngine.Texture2D m_lerpTex;
        public TurbulenceManagerBinder() { }
        public TurbulenceManagerBinder.CurrentShaderSettings Bind(TurbulenceSettings from, TurbulenceSettings to, float tweenTime, float time, float strMult, float speedMult) { return default(TurbulenceManagerBinder.CurrentShaderSettings); }
        private UnityEngine.Texture2D CombineTexture(UnityEngine.Texture2D tex1, UnityEngine.Texture2D tex2, float tweenTime) { return default(UnityEngine.Texture2D); }
        private TurbulenceManagerBinder.CurrentShaderSettings TweenSettings(TurbulenceSettings from, TurbulenceSettings to, float tweenTime, float time, float strMult, float speedMult) { return default(TurbulenceManagerBinder.CurrentShaderSettings); }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct CurrentShaderSettings
        {
            public float Duration;
            public float Offset;
            public float Speed;
            public float Strength;
            public UnityEngine.Texture2D TurbulenceTexture;
        }
    }
    public abstract partial class TurbulenceModifier : UberShaderModifier, IAnimatedGraphic
    {
        protected TurbulenceModifier() { }
    }
    public partial class TurbulenceOverride
    {
        public TurbulenceSettings TurbulenceSettings;
        public float TurbulenceSpeedMult;
        public float TurbulenceStrengthMult;
        public TurbulenceOverride() { }
    }
    [CustomShaderModifier("Turbulence Rotation")]
    [UberShaderCategoryAttribute((UberShaderCategory)(1))]
    [UberShaderOrderAttribute((UberShaderOrder)(3))]
    public partial class TurbulenceRotationModifier : TurbulenceModifier, IAnimationVertex
    {
        [UberShaderVectorDisplay("Local Speed", "Local Scale", "Local Offset", "Bias")]
        public UberShaderVector LocalSettings;
        [UberShaderVectorDisplay("Pivot", "Uv Waviness", ShowAsVector2=true)]
        public UberShaderVector RotationPivot;
        [UberShaderVectorDisplay("Pivot mask", "", ShowAsVector2=true)]
        public UberShaderVector RotationPivotMask;
        public UberShaderTexture TurbulenceMask;
        public TurbulenceRotationModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetBaseVertexTextureNames() { return default(System.Collections.Generic.IEnumerable<string>); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        public override void Randomize() { }
        public override bool RequiresVertexColor() { return default(bool); }
        public override void SetProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetBaseVertexTextureNames>c__Iterator27 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            public <GetBaseVertexTextureNames>c__Iterator27() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator28 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal TurbulenceRotationModifier <>f__this;
            public <GetKeywordsForShader>c__Iterator28() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    [CustomShaderModifier("Turbulence Scale")]
    [UberShaderCategoryAttribute((UberShaderCategory)(1))]
    [UberShaderOrderAttribute((UberShaderOrder)(4))]
    public partial class TurbulenceScaleModifier : TurbulenceModifier, IAnimationVertex
    {
        [UberShaderVectorDisplay("Local Speed", "Local Scale", "Local Offset", "Bias")]
        public UberShaderVector LocalSettings;
        [UberShaderVectorDisplay("Pivot", "UV Waviness", ShowAsVector2=true)]
        public UberShaderVector ScalePivot;
        [UberShaderVectorDisplay("Scale XY", "", ShowAsVector2=true)]
        public UberShaderVector SquishScale;
        public UberShaderTexture TurbulenceMask;
        public TurbulenceScaleModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetBaseVertexTextureNames() { return default(System.Collections.Generic.IEnumerable<string>); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        public override void Randomize() { }
        public override bool RequiresVertexColor() { return default(bool); }
        public override void SetProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetBaseVertexTextureNames>c__Iterator29 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            public <GetBaseVertexTextureNames>c__Iterator29() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator2A : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal TurbulenceScaleModifier <>f__this;
            public <GetKeywordsForShader>c__Iterator2A() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class TurbulenceSettings : UnityEngine.ScriptableObject
    {
        private bool m_didCalcDuration;
        private float m_duration;
        private UnityEngine.Keyframe[] m_keys;
        private UnityEngine.Texture2D m_turbulenceTexture;
        [UnityEngine.HideInInspector]
        public float Scale;
        [UnityEngine.HideInInspector]
        public float TimeLineSpeed;
        [UnityEngine.HideInInspector]
        public float TimeLineStr;
        public UnityEngine.AnimationCurve TurbulenceCurve;
        public float TurbulenceMagnitude;
        public UnityEngine.AnimationCurve TurbulenceMagnitudeOverTime;
        public float TurbulenceSpeed;
        public UnityEngine.AnimationCurve TurbulenceSpeedOverTime;
        public float TurbulenceValueOffset;
        public TurbulenceSettings() { }
        public float CurveDuration { get { return default(float); } }
        public UnityEngine.Texture2D TurbulenceTexture { get { return default(UnityEngine.Texture2D); } }
        public UnityEngine.Texture2D BakeAnimationCurve(UnityEngine.AnimationCurve curve, UnityEngine.TextureWrapMode wrapMode, int resolution, out float scale) { scale = default(float); return default(UnityEngine.Texture2D); }
        public bool CurveHasChanged() { return default(bool); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class TurbulenceTimelineAnimator : BaseAnimator
    {
        private TurbulenceManager m_manager;
        public UnityEngine.AnimationCurve TurbulenceMagnitudeAnimation;
        public UnityEngine.AnimationCurve TurbulenceSpeedAnimation;
        public TurbulenceTimelineAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        private TurbulenceManager Manager { get { return default(TurbulenceManager); } }
        public override void CacheOriginals() { }
        private void OnDisable() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [CustomShaderModifier("Turbulence Translation")]
    [UberShaderCategoryAttribute((UberShaderCategory)(1))]
    [UberShaderOrderAttribute((UberShaderOrder)(5))]
    public partial class TurbulenceTranslationModifier : TurbulenceModifier
    {
        [UberShaderVectorDisplay("Bias", "", ShowAsVector2=true)]
        public UberShaderVector BiasSettings;
        [UberShaderVectorDisplay("Local Speed", "Local Scale", "Local Offset", "")]
        public UberShaderVector LocalSettings;
        [UberShaderVectorDisplay("Scale", "UV Waviness", ShowAsVector2=true)]
        public UberShaderVector ScaleVarSettings;
        public UberShaderTexture TurbulenceMask;
        public TurbulenceTranslationModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetBaseVertexTextureNames() { return default(System.Collections.Generic.IEnumerable<string>); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        public override void Randomize() { }
        private float RangeRandom(float mag) { return default(float); }
        public override bool RequiresVertexColor() { return default(bool); }
        public override void SetProperties() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetBaseVertexTextureNames>c__Iterator2B : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            public <GetBaseVertexTextureNames>c__Iterator2B() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator2C : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal TurbulenceTranslationModifier <>f__this;
            public <GetKeywordsForShader>c__Iterator2C() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    [CustomShaderModifier("Turbulence Transparency")]
    [UberShaderCategoryAttribute((UberShaderCategory)(1))]
    [UberShaderOrderAttribute((UberShaderOrder)(33))]
    public partial class TurbulenceTransparencyModifier : TurbulenceModifier
    {
        [UberShaderVectorDisplay("Local Speed", "Local Scale", "Local Offset", "Range")]
        public UberShaderVector LocalSettings;
        [UberShaderVectorDisplay("Uv Waviness", "", ShowAsVector2=true)]
        public UberShaderVector ScaleVarSettings;
        public TurbulenceTransparencyModifier() { }
        public override void ApplyMultipliers(float strength, float speed) { }
        public override void Randomize() { }
        public override void SetProperties() { }
    }
    public partial class TwirlSettings
    {
        public float PosVariation;
        public float Strength;
        public TwirlSettings() { }
        public TwirlSettings Clone() { return default(TwirlSettings); }
    }
    public partial class TwistAnimationSet
    {
        public TextureAnimationWithTransitions[] Animations;
        public TwistAnimationSet() { }
        public TextureAnimationWithTransitions GetAnimation(float a) { return default(TextureAnimationWithTransitions); }
    }
    public partial class UberAlphaBuffer
    {
        private const int c_alphaDownSample = 2;
        private UnityEngine.RenderTexture m_alphaBuffer;
        public UberAlphaBuffer() { }
        public void Destroy() { }
        public void GenerateAlphaBuffer() { }
        public void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.Material blitMat) { }
        public void SetCurrentAlphaGrab() { }
    }
    public enum UberAtlasArea
    {
        CatAndMouse = 15,
        ForlornRuins = 11,
        GinsoEntrance = 9,
        GinsoTree = 8,
        HoruFields = 13,
        KuroAttack = 17,
        KuroMoment = 19,
        KuroNest = 18,
        MangroveFalls = 25,
        MistyWoods = 10,
        MoonGrotto = 7,
        MountHoru = 14,
        NorthMangroveFalls = 26,
        Outro = 16,
        Prefab = 22,
        Shared = 24,
        SorrowPass = 23,
        SouthMangroveFalls = 27,
        SpiritTree = 2,
        SunkenGlades = 3,
        SwallowsNest = 1,
        TheSacrifice = 20,
        ThornfeltSwamp = 6,
        TitleScreen = 0,
        UpperGlades = 5,
        ValleyOfTheWind = 12,
        WestGlades = 4,
        WorldMap = 21,
    }
    public partial class UberAtlasPrefabAreaDictionary : UberShaderDictionary<string, string>
    {
        public UberAtlasPrefabAreaDictionary() { }
    }
    public partial class UberAtlasPrefabAreas : UnityEngine.ScriptableObject
    {
        public UberAtlasPrefabAreas() { }
    }
    public enum UberAtlassingPlatform
    {
        HD = 0,
        Mobile = 2,
        SD = 1,
    }
    [System.AttributeUsageAttribute(64)]
    public partial class UberBuildMethod : System.Attribute
    {
        public UberBuildMethod() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberCageGrid : UnityEngine.MonoBehaviour, IStrippable
    {
        public UnityEngine.Vector2 Size;
        public int XDivisions;
        public int YDivisions;
        public UberCageGrid() { }
        public bool DoStrip() { return default(bool); }
        public void GenerateCageGrid() { }
        private void OnEnable() { }
        private void Reset() { }
        public void UpdateMesh() { }
    }
    public partial class UberColorAnimator : BaseAnimator
    {
        public bool Alpha;
        public UnityEngine.AnimationCurve AnimationCurve;
        public bool Blue;
        public UnityEngine.Color Color;
        public UberColorAnimator.ColorName ColorTarget;
        public bool Green;
        private UnityEngine.Color m_originalColor;
        private readonly string[] m_unityColorProperties;
        public bool Red;
        public UberColorAnimator() { }
        public UnityEngine.Color CurrentColor { get { return default(UnityEngine.Color); } set { } }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public string ColorPropertyFromColorName(UberColorAnimator.ColorName colorName) { return default(string); }
        public int ColorPropertyIDFromColorName(UberColorAnimator.ColorName colorName) { return default(int); }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
        public UberShaderColor UberShaderColorFromColorName(UberColorAnimator.ColorName colorName, UberShaderComponent uberShaderComponent) { return default(UberShaderColor); }
        public enum ColorName
        {
            AdditiveLayerColor = 2,
            AdditiveLayerDistortColor = 3,
            AdditiveLayerExtraColor = 4,
            Color = 0,
            MultiplyLayerColor = 5,
            MultiplyLayerDistortColor = 8,
            MultiplyLayerExtraColor = 6,
            MultiplyLayerThirdColor = 7,
            TintColor = 1,
        }
    }
    public partial class UberContourMeshCustomAsset : UnityEngine.ScriptableObject
    {
        public System.Collections.Generic.List<CageStructureTool.Edge> CageEdges;
        public System.Collections.Generic.List<CageStructureTool.Face> CageFaces;
        public System.Collections.Generic.List<CageStructureTool.Vertex> CageVertices;
        public UnityEngine.Mesh CustomMesh;
        public string TexGUID;
        public UberContourMeshCustomAsset() { }
    }
    public partial class UberDelegate
    {
        private System.Collections.Generic.List<System.Action> m_registers;
        public UberDelegate() { }
        public void Add(System.Action act) { }
        public void Call() { }
        public void Remove(System.Action act) { }
    }
    public partial class UberDelegate<T>
    {
        private System.Collections.Generic.List<System.Action<T>> m_registers;
        public UberDelegate() { }
        public void Add(System.Action<T> act) { }
        public void Call(T act) { }
        public void Remove(System.Action<T> act) { }
    }
    public partial class UberDofCacheDictionary : UberShaderDictionary<string, int>
    {
        public UberDofCacheDictionary() { }
    }
    public static partial class UberDofTextureGenerator
    {
        private static UnityEngine.Material s_blurMaterial;
        public static UnityEngine.Texture CreateDofTexture(UnityEngine.Texture2D originalTexture, UnityEngine.Vector2 blurSize) { return default(UnityEngine.Texture); }
        public static UnityEngine.Texture CreateDofTexture(UnityEngine.Texture2D originalTexture, UnityEngine.Vector2 blurSize, int textureWidth, int textureHeight) { return default(UnityEngine.Texture); }
        public static UnityEngine.Texture CreateDofTextureNearestPot(UnityEngine.Texture2D originalTexture, UnityEngine.Vector2 blurSize, UnityEngine.Vector2 maxScreenSize) { return default(UnityEngine.Texture); }
        public static UnityEngine.Texture CreatePreviewDofTexture(UnityEngine.Texture2D originalTexture, UnityEngine.Vector2 blurSize) { return default(UnityEngine.Texture); }
        private static UnityEngine.Material GetBlurMaterial() { return default(UnityEngine.Material); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberEnvirionmentParticle : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Rect Bounds;
        public UnityEngine.Vector2 Offset;
        public UberEnvirionmentParticle() { }
        public void OnDrawGizmosSelected() { }
        private void Update() { }
    }
    public partial class UberExplosionActor : UnityEngine.MonoBehaviour, IPooled
    {
        public bool ExplodeAtStart;
        [UberShaderVectorDisplay("Rotation Str", "Light Str", "Water Str", "Punch Str")]
        public UnityEngine.Vector4 ExplodeStrength;
        public float OutwardSpeed;
        public float Radius;
        public UberExplosionActor() { }
        public void ExplodeThis() { }
        public void OnPoolSpawned() { }
        private void Start() { }
    }
    public static partial class UberGaussianBlur
    {
        private static UnityEngine.Material SeperableBlurMaterial;
        public static void BlurPingPong(UnityEngine.RenderTexture from, UnityEngine.RenderTexture temp, int iterations, float blurSpread) { }
    }
    public static partial class UberGCManager
    {
        private static float s_lastCheck;
        private static float s_lastUnload;
        private static float TimeSinceUnload { get { return default(float); } }
        public static void CollectProactiveFull() { }
        public static void CollectResourcesIfNeeded() { }
        private static void CollectResourcesIfOutOfMem() { }
        public static void OnGameStart() { }
        private static void Update() { }
    }
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.MeshRenderer))]
    public partial class UberGhostTrail : UnityEngine.MonoBehaviour, ISuspendable, IUberAtlasExternal
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public UnityEngine.GameObject AnimatorTarget;
        private const float c_maxTravelDistance = 25f;
        public UnityEngine.Vector2 ConstantForce;
        public UnityEngine.AnimationCurve FadeoutCurve;
        public UnityEngine.Vector2 LocalConstantForce;
        public UnityEngine.Vector2 LocalRandomStartSpeed;
        public UnityEngine.Vector2 LocalStartSpeed;
        private SpriteAnimator m_animator;
        private SeinNaruComboAnimator m_comboAnimator;
        private float m_deltaTime;
        private UnityEngine.Vector3 m_lastSpawnPoint;
        private float m_lastTime;
        private UberGhostTrailMeshUpdate m_meshUpdater;
        private UnityEngine.Renderer m_parentRenderer;
        private UnityEngine.Vector2 m_previousCenterOffset;
        private UnityEngine.Vector3 m_previousPosition;
        private UnityEngine.Renderer m_renderer;
        private UnityEngine.Renderer m_targetRenderer;
        private UnityEngine.GameObject m_trailParent;
        private SpriteAnimatorWithTransitions m_transAnimator;
        private float m_travelDistance;
        public UnityEngine.Vector2 RandomStartSpeed;
        private static UnityEngine.GameObject s_trailParentPrefab;
        public UnityEngine.AnimationCurve ScaleCurve;
        public float SpawnDistance;
        public UnityEngine.Vector2 Startspeed;
        public bool UseCenterOfCroppedSprite;
        public UberGhostTrail() { }
        private bool DoUpdate { get { return default(bool); } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Renderer Renderer { get { return default(UnityEngine.Renderer); } }
        private UnityEngine.Renderer TargetRenderer { get { return default(UnityEngine.Renderer); } }
        private void Awake() { }
        public bool DoesProvideAtlas() { return default(bool); }
        private void EmitQuads() { }
        public UberScreenMode GetExternalUberScreenMode() { return default(UberScreenMode); }
        public float GetUberTweakValue() { return default(float); }
        private void OnDestroy() { }
        private void OnEnable() { }
        private void Reset() { }
        public void Update() { }
        private void UpdateComponents() { }
        private void UpdateTrail() { }
        public static void WarmUpResource() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberGhostTrailMeshUpdate : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <Visible>k__BackingField;
        private const int c_growSize = 90;
        private const int c_materialStartSize = 15;
        private const int c_mathSkip = 5;
        private const int c_startSize = 90;
        public UberGhostTrail GhostTarget;
        private bool[] m_active;
        private UnityEngine.AnimationCurve m_alphaCurve;
        private UnityEngine.GameObject m_animatorTarget;
        private UnityEngine.Vector4 m_atlasSettings;
        private UnityEngine.Color32 m_col;
        private UnityEngine.Color32[] m_colors;
        private UnityEngine.Vector2 m_constForce;
        private int m_currentSize;
        private float m_curTime;
        private float m_destroyTime;
        private System.Collections.Generic.Dictionary<int, UberGhostTrailMeshUpdate.TextureInfo> m_instToTex;
        private int m_lastIndex;
        private UnityEngine.Quaternion m_lastRot;
        private float m_lastTime;
        private float m_lastZ;
        private UnityEngine.Vector2 m_localConstForce;
        private UnityEngine.Vector2 m_localRandomStartSpeed;
        private UnityEngine.Vector2 m_localStartSpeed;
        private UnityEngine.Vector2[] m_mainUvs;
        private UnityEngine.Material[] m_materials;
        private int m_materialSize;
        private UnityEngine.MeshFilter m_meshFilter;
        private int m_posFrame;
        private int m_quadCount;
        private UberGhostTrailMeshUpdate.Quad[] m_quads;
        private UnityEngine.Renderer m_renderer;
        private UnityEngine.AnimationCurve m_scaleCurve;
        private UnityEngine.Material[][] m_setMaterials;
        private UnityEngine.Vector2 m_startRandomSpeed;
        private UnityEngine.Vector2 m_startSpeed;
        private bool m_targetIsSpriteAnim;
        private UnityEngine.Renderer m_targetRenderer;
        private System.Collections.Generic.List<UberGhostTrailMeshUpdate.TextureUsage> m_textures;
        private UnityEngine.Mesh m_trailMesh;
        private int[][] m_triangles;
        private int m_updateCount;
        private UnityEngine.Vector2[] m_uv2;
        private UnityEngine.Vector3[] m_vertices;
        public UberGhostTrailMeshUpdate() { }
        private bool IsDead { get { return default(bool); } }
        public UnityEngine.Material TargetMat { get { return default(UnityEngine.Material); } }
        private UnityEngine.Renderer TargetRenderer { get { return default(UnityEngine.Renderer); } }
        private UnityEngine.Mesh TrailMesh { get { return default(UnityEngine.Mesh); } }
        private float TrailTime { get { return default(float); } }
        public bool Visible { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        private void Awake() { }
        private T[] EnsureBuffer<T>(T[] arr, int minSize) { return default(T[]); }
        private float GetVertexX(float sizex, float sizey, float c, float s) { return default(float); }
        private float GetVertexY(float sizex, float sizey, float c, float s) { return default(float); }
        private void OnBecameInvisible() { }
        private void OnBecameVisible() { }
        private void OnDestroy() { }
        private void OnEnable() { }
        public UnityEngine.Vector2 RandomVec(UnityEngine.Vector2 val) { return default(UnityEngine.Vector2); }
        private void ReallocateBuffers() { }
        private void RemoveQuad(int quad, int texture) { }
        private void ResizeOrCreate<T>(ref T[] arr, int size) { }
        public void SetPos(UnityEngine.Vector3 pos) { }
        private void SetPropertiesOnMaterial(UnityEngine.Material newMat) { }
        public void SetSettings(UberGhostTrail trail) { }
        public void SpawnSingleTrailSprite(float posx, float posy, UnityEngine.Vector4 size, UnityEngine.Vector3 euler, UnityEngine.Quaternion rotate, UnityEngine.Vector3 scale) { }
        private void Update() { }
        private void UpdateMaterialsBuf() { }
        private void UpdateMeshVertPart() { }
        private void UpdateQuads() { }
        public void UpdateTrailMesh() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct Quad
        {
            public float EmissionTime;
            public bool Flipped;
            public int Texture;
            public float UvW;
            public float UvX;
            public float UvY;
            public float UvZ;
            public UnityEngine.Vector2 Vert1;
            public UnityEngine.Vector2 Vert2;
            public UnityEngine.Vector2 Vert3;
            public UnityEngine.Vector2 Vert4;
            public float Vx;
            public float Vy;
            public float X;
            public float Y;
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct TextureInfo
        {
            public UnityEngine.Vector4 Screen;
            public UnityEngine.Vector4 ScreenMask;
            public UnityEngine.Texture Texture;
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct TextureUsage
        {
            public int Count;
            public System.Collections.Generic.List<int> Quads;
            public int Tex;
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberInteractionActor : UnityEngine.MonoBehaviour, IPooled
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UberWaterControl <Water>k__BackingField;
        [PooledSafeAttribute]
        private int m_frame;
        private bool m_inited;
        private float m_prevTime;
        public bool OnlyWater;
        public bool OverrideSplash;
        public UnityEngine.Vector3 PrevPos;
        public int Priority;
        public float Radius;
        public UnityEngine.GameObject SplashPrefab;
        public UnityEngine.Vector4 Strength;
        public SoundProvider WaterEnter;
        public float ZScale;
        public UberInteractionActor() { }
        public UberWaterControl Water { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UberWaterControl); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private void Awake() { }
        public virtual void InteractionUpdate() { }
        private void OnDisable() { }
        private void OnEnable() { }
        public void OnPoolSpawned() { }
        public void OnWaterEnter() { }
        public void OnWaterExit() { }
        private void Start() { }
        public void Teleport(UnityEngine.Vector3 actorPos) { }
        public void UpdateRadiusFromSphere() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberInteractionExplosionAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        private UberExplosionActor m_actor;
        private UnityEngine.Vector4 m_originalStrength;
        public UberInteractionExplosionAnimator() { }
        public UberExplosionActor Actor { get { return default(UberExplosionActor); } }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberInteractionManager : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<UberInteractionManager.InteractionCurve> Curves;
        public bool DoInteractions;
        public static UberInteractionManager Instance;
        private System.Collections.Generic.List<UberInteractionManager.ActorInfo> m_actorQueue;
        private System.Collections.Generic.List<UberInteractionActor> m_actors;
        private System.Comparison<UberInteractionManager.ExplosionApplication> m_explodeSort;
        private System.Collections.Generic.List<UberInteractionManager.ExplosionApplication> m_explosionApplications;
        private IInteractable[] m_interactables;
        private int m_interactionCount;
        private UberInteractionManager.InteractionInfo[] m_interactionInfos;
        private bool[] m_interactorActive;
        private int m_minBoundIndex;
        private System.Collections.Generic.List<UnityEngine.Vector3> m_positions;
        private System.Collections.Generic.List<UberInteractionManager.ActorInfo> m_processingQueue;
        private System.Collections.Generic.List<UberInteractionManager.ActorInfo> m_resolveWaterQueue;
        private ShaderAnimationTimeDriver m_timeDriver;
        private System.Collections.Generic.List<IInteractable> m_toRegister;
        public float MagnitudePower;
        public float PlayDelayTime;
        public UberInteractionManager() { }
        public float InteractionTime { get { return default(float); } }
        private void DoRegisterInteractor(IInteractable interactor) { }
        public void Explode(UnityEngine.Vector3 position, float outwardSpeed, UnityEngine.Vector4 strength, float radius) { }
        private int ExplosionApplicationSort(UberInteractionManager.ExplosionApplication a, UberInteractionManager.ExplosionApplication b) { return default(int); }
        public void FixedUpdate() { }
        public static UberInteractionManager.PropertyIDCache GetCachedPropertyID(ref UberInteractionManager.PropertyIDCache staticCache, string propertyInteractionName) { return default(UberInteractionManager.PropertyIDCache); }
        public static string GetInteractionCurveString() { return default(string); }
        public void Interact(UberInteractionActor actor, UnityEngine.Vector3 velocity, UnityEngine.Vector3 prevPos, int priority) { }
        private void OnEnable() { }
        public void RegisterActor(UberInteractionActor actor) { }
        public void RegisterInteractor(IInteractable interactor) { }
        public void RemoveActor(UberInteractionActor actor) { }
        public void RemoveInteractor(IInteractable interactor) { }
        private void ResolveActorQueue() { }
        private void UpdateArrays() { }
        private void UpdateCurves() { }
        private void UpdateTexture() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct ActorInfo
        {
            public UberInteractionActor Actor;
            public UnityEngine.Vector3 PrevPos;
            public UnityEngine.Vector3 Velocity;
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct ExplosionApplication
        {
            public IInteractable Apply;
            public UnityEngine.Vector3 Pos;
            public UnityEngine.Vector4 Strength;
            public float Time;
            public UnityEngine.Vector3 Velocity;
        }
        public partial class InteractionCurve
        {
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private float <Scale>k__BackingField;
            public UnityEngine.AnimationCurve Curve;
            private string m_curveName;
            private string m_curveSettingsName;
            private UnityEngine.Texture2D m_curveTex;
            public UberInteractionManager.InteractionCurveType Type;
            public InteractionCurve() { }
            public string CurveName { get { return default(string); } }
            public string CurveSettingsName { get { return default(string); } }
            public float Duration { get { return default(float); } }
            public float Scale { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
            public UnityEngine.Texture2D GetTexture() { return default(UnityEngine.Texture2D); }
            public void UpdateTexture() { }
        }
        public enum InteractionCurveType
        {
            Default = 0,
            Light = 1,
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct InteractionInfo
        {
            public float MaxRadius;
            public float X;
            public float Y;
            public float Z;
        }
        public partial class PropertyIDCache
        {
            public int Params2Id;
            public int ParamsId;
            public int PosId;
            public int VelId;
            public PropertyIDCache(string interactionName) { }
        }
    }
    [UberShaderLimitZAttribute(MinZ=-5f, MaxZ=5f)]
    [UnityEngine.ExecuteInEditMode]
    public abstract partial class UberInteractionModifier : UberShaderModifier, IAnimationVertex, IDynamicGraphic, IInteractable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private int <Index>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsRegistered>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <WantsToRegister>k__BackingField;
        private const float c_signEps = 0.1f;
        public UberInteractionManager.InteractionCurveType CurveType;
        private UnityEngine.Bounds m_bounds;
        private bool m_boundsSet;
        private float m_duration;
        private UberInteractionModifier.Interaction m_interactionA;
        private UberInteractionModifier.Interaction m_interactionB;
        private float m_lastStrengthA;
        private float m_lastStrengthB;
        private float m_maxRadius;
        private int m_params2Id;
        private int m_paramsId;
        private UnityEngine.Vector3 m_pos;
        private int m_posId;
        private float m_prevSetTimeA;
        private float m_prevSetTimeB;
        private UnityEngine.Rect m_rendRect;
        private int m_velId;
        private UnityEngine.Rect m_velRect;
        public float SizeShrink;
        protected UberInteractionModifier() { }
        protected UnityEngine.Bounds Bounds { get { return default(UnityEngine.Bounds); } }
        private float CurrentTimeA { get { return default(float); } }
        private float CurrentTimeB { get { return default(float); } }
        public float Duration { get { return default(float); } }
        public int Index { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public virtual string InteractionName { get { return default(string); } }
        public bool IsRegistered { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        protected virtual float OverrideDifficulty { get { return default(float); } }
        protected abstract UberInteractionManager.PropertyIDCache PropertyCache { get; }
        public bool WantsToRegister { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private bool CheckProperties() { return default(bool); }
        public bool DoesOverlap(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity, float radius, float zScale) { return default(bool); }
        public override bool DoStrip() { return default(bool); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetBaseVertexTextureNames() { return default(System.Collections.Generic.IEnumerable<string>); }
        public UnityEngine.Vector3 GetExplodePoint(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        protected virtual int GetFlip(UnityEngine.Vector3 pos, bool explode) { return default(int); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        public UnityEngine.Vector3 GetPosition() { return default(UnityEngine.Vector3); }
        protected virtual float GetStrength(UnityEngine.Vector3 velocity, UnityEngine.Vector4 strengthVal) { return default(float); }
        public bool IsWater() { return default(bool); }
        public float MaxRadius() { return default(float); }
        private void OnDisable() { }
        private void OnEnable() { }
        protected virtual void OnPlay(float strength, bool explosion) { }
        public void OnRegistered() { }
        public void PlayA(UnityEngine.Vector2 pos, UnityEngine.Vector2 velocity, float strength, float radius, int flip) { }
        public void PlayB(UnityEngine.Vector2 pos, UnityEngine.Vector2 velocity, float strength, float radius, int flip) { }
        protected int RandomSign(float val) { return default(int); }
        private void SetBounds() { }
        public void SetInteraction(float time, UnityEngine.Vector3 pos, UnityEngine.Vector3 prevPos, UnityEngine.Vector4 strength, UnityEngine.Vector3 velocity, float radius, bool explosion) { }
        public override void SetProperties() { }
        public bool ShouldOverrideA(float calcStr, float difficulty) { return default(bool); }
        public bool ShouldOverrideB(float calcStr, float difficulty) { return default(bool); }
        private UnityEngine.Vector2 TransformVelocity(UnityEngine.Vector2 velocity) { return default(UnityEngine.Vector2); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetBaseVertexTextureNames>c__Iterator2D : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal UberInteractionModifier <>f__this;
            public <GetBaseVertexTextureNames>c__Iterator2D() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetKeywordsForShader>c__Iterator2E : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            internal UberInteractionModifier <>f__this;
            public <GetKeywordsForShader>c__Iterator2E() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct Interaction
        {
            private float m_lastTime;
            public UnityEngine.Vector3 SetPos;
            public bool ReadyToPlay { get { return default(bool); } }
            public void Play() { }
        }
    }
    public partial class UberInteractionShaderManager : UnityEngine.MonoBehaviour
    {
        public UberInteractionShaderManager() { }
        private void Start() { }
        private void Update() { }
    }
    public partial class UberMotionBlurInterestZone : UnityEngine.MonoBehaviour
    {
        public float Radius;
        public UberMotionBlurInterestZone.ZoneType Type;
        public UberMotionBlurInterestZone() { }
        public void DoBind(UnityEngine.Material mat, string name) { }
        private void Update() { }
        public enum ZoneType
        {
            MainInterest = 0,
            SecondaryInterest = 1,
            TertiaryInterest = 2,
        }
    }
    public static partial class UberPoolAnalyze
    {
        private static System.Collections.Generic.Dictionary<System.Type, System.Reflection.FieldInfo[]> m_fieldOfTypes;
        private static System.Collections.Generic.Dictionary<System.Reflection.FieldInfo, bool> m_poolSafe;
        private static System.Collections.Generic.Dictionary<System.Type, bool> m_poolSafeType;
        private static void .cctor() { }
        private static void AddRecursive(UnityEngine.GameObject gameObject, System.Collections.Generic.HashSet<UnityEngine.GameObject> total) { }
        public static void Analyze(UnityEngine.GameObject pooledObj, UnityEngine.GameObject original) { }
        public static void CompareFullHierarchies(UnityEngine.GameObject a, UnityEngine.GameObject b, System.Collections.Generic.HashSet<object> visited, string path) { }
        private static void CompareGameObject(UnityEngine.GameObject go1, UnityEngine.GameObject go2, System.Collections.Generic.HashSet<object> visited, System.Collections.Generic.HashSet<UnityEngine.GameObject> total, string path) { }
        private static void CompareObject(object o1, object o2, string path, System.Collections.Generic.HashSet<object> visited, System.Collections.Generic.HashSet<UnityEngine.GameObject> total, int depth) { }
        private static bool FieldIsSafe(System.Reflection.FieldInfo field) { return default(bool); }
        private static System.Reflection.FieldInfo[] GetFields(System.Type t) { return default(System.Reflection.FieldInfo[]); }
        private static bool TypeIsSafe(System.Type t) { return default(bool); }
    }
    public partial class UberPoolCategorySetting
    {
        public System.Collections.Generic.List<string> Categories;
        public UberPoolSettings Settings;
        public UberPoolCategorySetting() { }
    }
    public partial class UberPoolGroup : UnityEngine.MonoBehaviour
    {
        private System.Action m_lateStartMethod;
        private int m_minNumber;
        private string m_poolName;
        private System.Collections.Generic.List<UberPoolItem> m_poolObjects;
        private UberPoolSettings m_setting;
        public UberPoolGroup() { }
        private void Awake() { }
        private static void BroadcastCallbacks(UberPoolItem poolObject) { }
        private UberPoolItem CreatePoolItemForGO(UnityEngine.GameObject newObj) { return default(UberPoolItem); }
        private UnityEngine.GameObject GetNewObject(UnityEngine.GameObject prototype, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) { return default(UnityEngine.GameObject); }
        public void Init(string poolName, UberPoolSettings settings) { }
        public void PrewarmInstance(UnityEngine.GameObject prefab, System.Collections.Generic.Dictionary<int, UberPoolItem> entries) { }
        private void PruneObjects() { }
        public UberPoolItem RequestObject(UnityEngine.GameObject prototype, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, out bool newObject) { newObject = default(bool); return default(UberPoolItem); }
        private void Update() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RequestObject>c__AnonStorey5B
        {
            internal UberPoolItem poolObject;
            public <RequestObject>c__AnonStorey5B() { }
            internal void <>m__114() { }
        }
    }
    public partial class UberPoolGroupWarmer : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<int> AmountToWarm;
        public bool KeepLoaded;
        private int m_prefabIndex;
        public System.Collections.Generic.List<UnityEngine.GameObject> Prefabs;
        public UberPoolGroupWarmer() { }
        private void Awake() { }
        private void Update() { }
    }
    public partial class UberPoolItem
    {
        public UnityEngine.Transform Group;
        public float InactiveTime;
        private System.Collections.Generic.List<UnityEngine.GameObject> m_activeAtStart;
        private System.Collections.Generic.List<UnityEngine.Transform> m_children;
        private bool m_isDestroyed;
        private System.Collections.Generic.Dictionary<int, UnityEngine.Transform> m_startParent;
        private System.Collections.Generic.Dictionary<int, PoolTransformPosition> m_startPos;
        public UnityEngine.GameObject Target;
        public UberPoolItem() { }
        public bool IsDestroyed { get { return default(bool); } }
        public bool IsFree { get { return default(bool); } }
        public void AddEntries(System.Collections.Generic.Dictionary<int, UberPoolItem> spawnedToItem) { }
        private void AddEntryRecurs(System.Collections.Generic.Dictionary<int, UberPoolItem> add, UnityEngine.GameObject go) { }
        private void AddStateRecurs(UnityEngine.Transform trans, System.Collections.Generic.List<UnityEngine.GameObject> activeAtStart, System.Collections.Generic.List<UnityEngine.Transform> children) { }
        public void OnDecease() { }
        public virtual void OnDespawn(UnityEngine.GameObject go) { }
        public void OnNewlyCreated() { }
        public virtual void OnSpawned() { }
        private void ResetPosition(UnityEngine.Transform trans) { }
        public void SetActive() { }
        public void SetExplicitDestroy(bool destroyed) { }
    }
    public partial class UberPoolManager : UnityEngine.MonoBehaviour
    {
        private const string c_broadcastCallback = "OnPoolDespawned";
        public static UberPoolManager Instance;
        public string LookUp;
        private bool m_doAnalysis;
        private bool m_doPool;
        private System.Collections.Generic.List<UberPoolGroup> m_groups;
        private System.Collections.Generic.Dictionary<string, int> m_objectToPool;
        private System.Collections.Generic.Dictionary<int, System.Collections.Generic.List<System.Action>> m_releaseActions;
        private System.Collections.Generic.Dictionary<int, UberPoolItem> m_spawnedToItem;
        public System.Collections.Generic.List<UberPoolPrefabSetting> Settings;
        public UberPoolManager() { }
        public bool DoPool { get { return default(bool); } set { } }
        public bool DoPoolAnalysis { get { return default(bool); } set { } }
        public void AddOnDestroyed(UnityEngine.GameObject go, System.Action @set) { }
        private void Awake() { }
        private int CreateNewGroup(string groupName, UberPoolSettings setting) { return default(int); }
        public void Decease(UnityEngine.GameObject poolObject) { }
        public bool Destroy(UnityEngine.GameObject go) { return default(bool); }
        [UnityEngine.ContextMenu("Look up")]
        public void DoLookUp() { }
        private int GetGroupIndex(string getName) { return default(int); }
        public bool IsDestroyed(UnityEngine.Component comp) { return default(bool); }
        public bool IsDestroyed(UnityEngine.GameObject go) { return default(bool); }
        public void PrewarmInstance(UnityEngine.GameObject prefab) { }
        public void RemoveOnDestroyed(UnityEngine.GameObject go) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator RunDelayed(float time, System.Action run) { return default(System.Collections.IEnumerator); }
        public void RunDestroyDelayed(float time, System.Action run) { }
        public UnityEngine.GameObject Spawn(UnityEngine.GameObject o) { return default(UnityEngine.GameObject); }
        public UnityEngine.GameObject Spawn(UnityEngine.GameObject o, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation) { return default(UnityEngine.GameObject); }
        private UnityEngine.GameObject SpawnWithName(string getName, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.GameObject original) { return default(UnityEngine.GameObject); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RunDelayed>c__Iterator1F : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal System.Action <$>run;
            internal float <$>time;
            internal System.Action run;
            internal float time;
            public <RunDelayed>c__Iterator1F() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class UberPoolParticlesClear : UnityEngine.MonoBehaviour, IPooled
    {
        public UberPoolParticlesClear() { }
        public void OnPoolSpawned() { }
    }
    public partial class UberPoolPrefabSetting
    {
        public string Name;
        public System.Collections.Generic.List<WeakPrefab> PrefabRefs;
        public UberPoolSettings Setting;
        public UberPoolPrefabSetting() { }
    }
    public partial class UberPoolSettings
    {
        public float InactiveDeleteTime;
        public UberPoolSettings() { }
    }
    public partial class UberPostAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        public System.Collections.Generic.List<CameraSettingsAsset> CameraPostSettings;
        public System.Collections.Generic.List<FogSettings> FogSettings;
        private CameraPostProcessing m_cameraPostProcessing;
        private readonly System.Collections.Generic.List<CameraSettings> m_cameraSettings;
        private SceneSettings m_sceneSettings;
        private CameraSettings m_transitionSceneSettings;
        public UberPostAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public new void OnDestroy() { }
        public void OnGameReset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class UberPostBloomAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve IntensityAnimationCurve;
        private CameraPostProcessing m_cameraPostProcessing;
        public UnityEngine.AnimationCurve ThreshholdAnimationCurve;
        public UberPostBloomAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public new void OnDestroy() { }
        public void OnDisable() { }
        public void OnGameReset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class UberPostCacheIds
    {
        public static int Alpha;
        public static int BezierB;
        public static int BezierG;
        public static int BezierLengths;
        public static int BezierR;
        public static int BloomIntensity;
        public static int Buf;
        public static int Camera2World;
        public static int CameraVelocity;
        public static int CenterRadius;
        public static int ColorBuffer;
        public static int ContrastBright;
        public static int ContrastBrightUI;
        public static int Desat;
        public static int GrainOffsetScale;
        public static int Intensity;
        public static int Offsets;
        public static int SpeedVec;
        public static int Threshold;
        public static int ThresholdId;
        public static int TwirlAngle;
        public static int TxtAlphaCenter;
        public static int VignetteIntensity;
        public UberPostCacheIds() { }
        private static void .cctor() { }
        public static void Initialize() { }
    }
    public partial class UberPostContrastAndBrightnessAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve BrightnessAnimationCurve;
        public UnityEngine.AnimationCurve ContrastAnimationCurve;
        private CameraPostProcessing m_cameraPostProcessing;
        public UberPostContrastAndBrightnessAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public new void OnDestroy() { }
        public void OnDisable() { }
        public void OnGameReset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class UberPostDesaturationAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        private CameraPostProcessing m_cameraPostProcessing;
        public UberPostDesaturationAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public new void OnDestroy() { }
        public void OnDisable() { }
        public void OnGameReset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [UnityEngine.AddComponentMenu("Image Effects/Sein Post Processing")]
    [UnityEngine.ExecuteInEditMode]
    public partial class UberPostProcess : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Vector3 <Speed>k__BackingField;
        [UnityEngine.HideInInspector]
        public float AdditiveBloomIntensity;
        [UnityEngine.HideInInspector]
        public float AdditiveBloomThreshhold;
        [UnityEngine.HideInInspector]
        public ContrastSettings AdditiveContrast;
        [UnityEngine.HideInInspector]
        public float AdditiveDesaturation;
        [UnityEngine.HideInInspector]
        public float AdditiveVignettingIntensity;
        public float BloomIntensity;
        public float BloomThreshhold;
        public UnityEngine.Shader BrightPassFilterShader;
        public UnityEngine.Camera Camera;
        public ColorCorrectionSettings ColorCorrection;
        public ContrastSettings Contrast;
        public UberAlphaBuffer CurrentAlphaBuffer;
        public DesaturationSettings Desaturation;
        public bool DoLensFlares;
        public FaderBrightnessContrastSettings FaderBrightnessContrastSettings;
        public UnityEngine.Color FlareColorA;
        public UnityEngine.Color FlareColorB;
        public UnityEngine.Color FlareColorC;
        public UnityEngine.Color FlareColorD;
        public bool IsSubCam;
        public float LensflareIntensity;
        public UnityEngine.Shader LensFlareShader;
        public float LensflareThreshhold;
        private UnityEngine.Material m_blendMaterial;
        private UnityEngine.Material m_brightPassFilterMaterial;
        private bool m_dirty;
        private bool m_doBlur;
        private bool m_doMotionBlur;
        private bool m_doRender;
        private UnityEngine.Vector3 m_lastPos;
        private UnityEngine.Vector3 m_lastPosition;
        private float m_lastTwirlCurrentTime;
        private UnityEngine.Material m_lensFlareMaterial;
        private UnityEngine.Material m_material;
        private UnityEngine.Color m_originalColor;
        private int m_originalCullingMask;
        private float m_prevDesaturation;
        private float m_prevTwirl;
        private System.Collections.Generic.List<UnityEngine.MeshFilter> m_renderDistort;
        private System.Collections.Generic.List<UberMotionBlurInterestZone> m_renderZones;
        private UnityEngine.Texture2D m_screenshot;
        private UnityEngine.RenderTexture m_targetTexture;
        private float m_twirlTime;
        private UnityEngine.Material m_upsampleMat;
        public float MotionBlurMultiplier;
        public float MotionBlurSpread;
        public float MotionBlurThreshold;
        public UnityEngine.RenderTexture PostTarget;
        private static int[] s_bezierStrings;
        private static System.Comparison<UberMotionBlurInterestZone> s_compare;
        private static UberPostProcess s_instance;
        private static System.Collections.Generic.List<UberPostProcess> s_subCams;
        private static string[] s_zoneNames;
        public UnityEngine.Shader ScreenBlend;
        public float SepBlurSpread;
        public UnityEngine.Shader Shader;
        public TwirlSettings TwirlSettings;
        public UnityEngine.Shader UpsampleShader;
        public VignettingSettings Vignetting;
        public UberPostProcess() { }
        private float CurrentTime { get { return default(float); } }
        public bool DoMotionBlur { get { return default(bool); } set { } }
        public bool DoRender { get { return default(bool); } set { } }
        public static UberPostProcess Instance { get { return default(UberPostProcess); } }
        public UnityEngine.Vector3 Speed { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Vector3); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        public void ApplyAdditiveSettings(CameraAdditiveSettings additiveSettings) { }
        public void ApplySettings(CameraSettings settings) { }
        public void ApplySettings(CameraSettingsAsset settingsAsset) { }
        private void Awake() { }
        private void BindAll() { }
        private void BindBrightnessContrast() { }
        private void BindBrightnessContrastUI() { }
        private UnityEngine.Material CheckShaderAndCreateMaterial(UnityEngine.Shader s, UnityEngine.Material m2Create) { return default(UnityEngine.Material); }
        public void CreateResources() { }
        public void CreateScreenshot(UnityEngine.RenderTexture renderTexture) { }
        private void DestroyTargetTex(UnityEngine.RenderTexture tex) { }
        private void DistortBind() { }
        private void DoPost(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
        private bool KeysAreDifferent(UnityEngine.AnimationCurve curveA, UnityEngine.AnimationCurve curveB) { return default(bool); }
        private void OnDestroy() { }
        private void OnEnable() { }
        private void OnPreCull() { }
        private void OnPreRender() { }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
        public void PushInterestZone(UberMotionBlurInterestZone zone) { }
        public void QueueGrabPass(UnityEngine.MeshFilter go) { }
        private float RandSmooth(float freq, float y) { return default(float); }
        private void Rebind() { }
        private void RebindFrequent() { }
        private void RenderDistortions(UnityEngine.RenderTexture distortBuffer) { }
        public void SaveSettings(CameraSettingsAsset settings) { }
        private void SetAnimationCurveForChannel(UnityEngine.AnimationCurve curve, int channel, out float len) { len = default(float); }
        private void SetCh(float value, ref float @set) { }
        private void SetCh(UnityEngine.Color value, ref UnityEngine.Color @set) { }
        private void SetCh(UnityEngine.Vector4 value, ref UnityEngine.Vector4 @set) { }
        private void SetCurves(UnityEngine.AnimationCurve b, ref UnityEngine.AnimationCurve a) { }
        public void SetDirty() { }
        public void SetDoBlur(bool blur) { }
        private void SetInterestZones() { }
        private void Update() { }
        private void UpdateDirectionalBlur() { }
        private void UpdateTargetTexture() { }
        private static int ZoneSort(UberMotionBlurInterestZone x, UberMotionBlurInterestZone y) { return default(int); }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct Bezier
        {
            public UnityEngine.Vector2 P0;
            public UnityEngine.Vector2 P1;
            public UnityEngine.Vector2 P2;
            public UnityEngine.Vector2 P3;
            public Bezier(UnityEngine.Vector3 start, UnityEngine.Vector3 end, float tangent1, float tangent2) { throw new System.NotImplementedException(); }
            public float BezierSimple(float tLen) { return default(float); }
        }
    }
    public static partial class UberPostProcessingAnimation
    {
        public static void AnimateBloomAndFlaresSettings(ref BloomAndFlaresSettings bloomAndFlaresSettings, BloomAndFlaresSettings fromSettings, BloomAndFlaresSettings toSettings, float curveValue) { }
        public static void AnimateCameraSettings(ref CameraSettings settings, CameraSettings fromSettings, CameraSettings toSettings, float curveValue) { }
        public static void AnimateColorCorrectionSettings(ref ColorCorrectionSettings colorCorrectionSettings, ColorCorrectionSettings fromSettings, ColorCorrectionSettings toSettings, float curveValue) { }
        public static void AnimateContrastSettings(ref ContrastSettings contrastSettings, ContrastSettings fromSettings, ContrastSettings toSettings, float curveValue) { }
        public static void AnimateCurveKeyframe(ref UnityEngine.AnimationCurve curve, int keyframeIndex, UnityEngine.AnimationCurve fromCurve, UnityEngine.AnimationCurve toCurve, float curveValue) { }
        public static void AnimateDesaturationSettings(ref DesaturationSettings desaturationSettings, DesaturationSettings fromSettings, DesaturationSettings toSettings, float curveValue) { }
        public static void AnimateNoiseSettings(ref NoiseSettings noiseSettings, NoiseSettings fromSettings, NoiseSettings toSettings, float curveValue) { }
        public static void AnimateVignettingSettings(ref VignettingSettings vignettingSettings, VignettingSettings fromSettings, VignettingSettings toSettings, float curveValue) { }
        public static void CopyCameraSettings(ref CameraSettings settings, CameraSettings fromSettings) { }
    }
    public partial class UberPostProcessingCrossFade : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Shader CrossFadeBlend;
        public UberPostProcessingCrossFade.CameraInformation FromInfo;
        private UnityEngine.RenderTexture m_buf;
        private bool m_bufferBeenUsed;
        private int m_currentFrame;
        private int m_frameCounter;
        private float m_lastTweenTime;
        private UnityEngine.Material m_mat;
        private int m_nextFrame;
        private UberPostProcess m_post;
        private bool m_toggle;
        public UberPostProcessingCrossFade.CameraInformation ToInfo;
        public float TweenTime;
        public UberPostProcessingCrossFade() { }
        public UnityEngine.Material Material { get { return default(UnityEngine.Material); } }
        private void ApplySettings(UberPostProcessingCrossFade.CameraInformation info) { }
        public void Awake() { }
        public void GenerateBuffer() { }
        public void LateUpdate() { }
        private void OnDestroy() { }
        private void OnRenderImage(UnityEngine.RenderTexture from, UnityEngine.RenderTexture to) { }
        public void StartCrossFade() { }
        public void StopCrossFade() { }
        private void Update() { }
        public partial class CameraInformation
        {
            public CameraAdditiveSettings AdditiveSettings;
            public UberAlphaBuffer AlphaBuffer;
            public float FieldOfView;
            public UnityEngine.Texture FogTexture;
            public UnityEngine.Vector3 Position;
            public UnityEngine.Quaternion Rotation;
            public CameraSettings Settings;
            public UnityEngine.Vector3 Speed;
            public CameraInformation() { }
        }
    }
    public static partial class UberScreenManager
    {
        public static float ConvertScreenTweak(float raw) { return default(float); }
        public static UnityEngine.Vector4 GetScreen(UberScreenMode mode, float tweak) { return default(UnityEngine.Vector4); }
        public static UnityEngine.Vector4 GetScreenMask(UberScreenMode mode) { return default(UnityEngine.Vector4); }
    }
    public enum UberScreenMode
    {
        Blue = 2,
        Green = 1,
        None = 3,
        Red = 0,
    }
    public static partial class UberShaderAPI
    {
        private static UnityEngine.Material GetMaterials(UnityEngine.Renderer go, bool prefab) { return default(UnityEngine.Material); }
        public static void SetColor(UnityEngine.Renderer gameObject, UnityEngine.Color color, bool prefab) { }
        public static void SetColorCustom(UnityEngine.Renderer gameObject, UnityEngine.Color color, string bindName, bool prefab) { }
        public static void SetFloat(UnityEngine.Renderer gameObject, float val, string bindName, bool prefab) { }
        public static void SetMainTexture(UnityEngine.Renderer gameObject, UnityEngine.Texture texture, bool prefab) { }
        public static void SetTexture(UnityEngine.Renderer gameObject, UnityEngine.Texture texture, string bindName, bool prefab) { }
        public static void SetTextureSettings(UnityEngine.Renderer gameObject, string bindName, UnityEngine.Vector2 scale, UnityEngine.Vector2 offset, UnityEngine.Vector2 scroll, float rotation, float rotationSpeed, bool prefab) { }
        public static void SetVector(UnityEngine.Renderer gameObject, UnityEngine.Vector4 vector, string bindName, bool prefab) { }
    }
    public static partial class UberShaderAreaNameFinder
    {
        private static string[] s_areas;
        private static System.Collections.Generic.Dictionary<string, string> s_nameToArea;
        private static void .cctor() { }
        public static string GetAreaImplString(UberAtlasArea area) { return default(string); }
        public static string GetAreaName(string name) { return default(string); }
        public static string GetAreaName(UnityEngine.Transform root) { return default(string); }
    }
    public partial class UberShaderAtlasTexture
    {
        public UberShaderComponent AttachedComponent;
        private UnityEngine.Vector2 m_explicitDof;
        private bool m_hasExternal;
        private double m_lastExternalCheck;
        private string m_lastGUID;
        private bool m_setDofExplicit;
        private UnityEngine.Texture2D m_textureCache;
        private bool m_usePrefabAtlas;
        public string OriginalTextureGUID;
        private static System.Text.StringBuilder s_builder;
        public UberShaderAtlasTexture() { }
        private static void .cctor() { }
        public void UsePrefabAtlas() { }
    }
    public abstract partial class UberShaderBlock : UnityEngine.MonoBehaviour
    {
        public bool BackSideOnly;
        public BlendModeType BlendMode;
        public bool DoAlphaMaskedOrder;
        public bool DoReflection;
        public bool IsAlphaInverse;
        public bool IsAlphaMasked;
        private UberShaderComponent m_component;
        private UnityEngine.MeshFilter m_filter;
        private UnityEngine.Renderer m_renderer;
        [UnityEngine.SerializeField]
        private bool m_useFog;
        [UnityEngine.RangeAttribute(-25f, 25f)]
        public float OffsetPositionZ;
        public float RawRandomOffset;
        public TimeMode TimeMode;
        public bool WriteA;
        public bool WriteRGB;
        protected UberShaderBlock() { }
        public UberShaderComponent Component { get { return default(UberShaderComponent); } }
        protected UnityEngine.MeshFilter Filter { get { return default(UnityEngine.MeshFilter); } }
        public bool HasCustomMesh { get { return default(bool); } }
        public bool IsRotated { get { return default(bool); } }
        public UnityEngine.Material Material { get { return default(UnityEngine.Material); } }
        public double RandomOffset { get { return default(double); } }
        public UnityEngine.Renderer Renderer { get { return default(UnityEngine.Renderer); } }
        public bool UseFog { get { return default(bool); } set { } }
        public void RandomizeOffset() { }
        public abstract void SetProperties();
        public virtual void UberShaderEditorUpdate() { }
    }
    [CustomShaderBlock("Screen")]
    [UberShaderOrderAttribute((UberShaderOrder)(1))]
    [UnityEngine.ExecuteInEditMode]
    public partial class UberShaderBlockGrabPass : UberShaderBlock, IStrippable
    {
        public UberShaderColor Color;
        private int m_frame;
        private bool m_inFrustm;
        public bool OverwriteDistort;
        public UberShaderBlockGrabPass() { }
        public bool DoStrip() { return default(bool); }
        private void OnPoolSpawned() { }
        public override void SetProperties() { }
        private void Update() { }
    }
    [CustomShaderBlock("Texture")]
    [UberShaderOrderAttribute((UberShaderOrder)(0))]
    [UnityEngine.ExecuteInEditMode]
    public partial class UberShaderBlockTextured : UberShaderBlock, IStrippable
    {
        [UnityEngine.HideInInspector]
        public bool CenteredQueue;
        public UberShaderColor Color;
        [UnityEngine.HideInInspector]
        public bool DisableCustomMesh;
        [UnityEngine.HideInInspector]
        public bool EraseFromAlpha;
        public UberShaderMainTexture MainTexture;
        public UberShaderBlockTextured() { }
        public bool DoStrip() { return default(bool); }
        public override void SetProperties() { }
    }
    public enum UberShaderCategory
    {
        Animation = 0,
        Distortion = 3,
        Effects = 7,
        Interaction = 2,
        Lighting = 6,
        Masking = 5,
        Text = 9,
        Turbulence = 1,
        Utility = 8,
        Water = 4,
    }
    public partial class UberShaderCategoryAttribute : System.Attribute
    {
        public UberShaderCategory Category;
        public UberShaderCategoryAttribute(UberShaderCategory category) { }
    }
    public static partial class UberShaderCategoryManager
    {
        private static System.Collections.Generic.Dictionary<UberShaderCategory, UnityEngine.Color> s_categoryColor;
        private static void .cctor() { }
        public static UnityEngine.Color GetCategoryColor(UberShaderCategory category) { return default(UnityEngine.Color); }
    }
    public partial class UberShaderColor : UberShaderProperty
    {
        [UnityEngine.SerializeField]
        private UnityEngine.Color m_color;
        public UberShaderColor() { }
        public UberShaderColor(UnityEngine.Color defaultColor) { }
        public float A { get { return default(float); } set { } }
        public float b { get { return default(float); } set { } }
        public UnityEngine.Color Color { get { return default(UnityEngine.Color); } set { } }
        public float G { get { return default(float); } set { } }
        public float R { get { return default(float); } set { } }
        public override void BindProperties() { }
    }
    [UnityEngine.AddComponentMenu("Uber Shader/Uber Shader Component")]
    [UnityEngine.ExecuteInEditMode]
    public partial class UberShaderComponent : UnityEngine.MonoBehaviour, IStrippable
    {
        private UberShaderBlock m_block;
        public UberShaderComponent() { }
        public UberShaderBlock Block { get { return default(UberShaderBlock); } }
        public UberShaderBlockGrabPass GrabPassBlock { get { return default(UberShaderBlockGrabPass); } }
        public UberShaderBlockTextured TexturedBlock { get { return default(UberShaderBlockTextured); } }
        public static UberShaderBlockTextured CreateTextured(UnityEngine.GameObject gameObject) { return default(UberShaderBlockTextured); }
        public bool DoStrip() { return default(bool); }
        public UberShaderModifier GetModifier(System.Type type) { return default(UberShaderModifier); }
        public T GetModifier<T>() where T : UberShaderModifier { return default(T); }
        public UberShaderBlock SetBlock(System.Type type) { return default(UberShaderBlock); }
        [UnityEngine.ContextMenu("Show hidden componets")]
        public void ShowHiddenComponents() { }
    }
    public partial class UberShaderCurve : UberShaderProperty
    {
        private const int cRes = 64;
        public float CurveScale;
        [UnityEngine.SerializeField]
        private UnityEngine.AnimationCurve m_curve;
        private float m_curveDuration;
        private float m_curveScale;
        private int m_settingsId;
        private UnityEngine.Texture2D m_texture;
        public float TimeOffset;
        public float TimeScale;
        public UnityEngine.TextureWrapMode WrapMode;
        public UberShaderCurve() { }
        public UberShaderCurve(float value) { }
        public UnityEngine.AnimationCurve Curve { get { return default(UnityEngine.AnimationCurve); } }
        public bool IsSimple { get { return default(bool); } }
        public float MaxValue { get { return default(float); } }
        public float MeanValue { get { return default(float); } }
        public override void BindProperties() { }
        private void CreateTexture() { }
        private float GetMaxCurveValue() { return default(float); }
        private float GetMeanCurveValue() { return default(float); }
        private UnityEngine.Vector4 GetSettings() { return default(UnityEngine.Vector4); }
        public override void Set(string bindName, UberShaderBlock attachedBlock) { }
    }
    public static partial class UberShaderCurveBake
    {
        private static System.Collections.Generic.Dictionary<string, UberShaderCurveBake.CurveData> s_curves;
        private static System.Collections.Generic.Dictionary<string, UberShaderCurveBake.GradientData> s_gradients;
        public static UnityEngine.Texture2D BakeAnimationCurve(UnityEngine.AnimationCurve curve, UnityEngine.TextureWrapMode wrapMode, int resolution, out float scale, out float duration) { scale = default(float); duration = default(float); return default(UnityEngine.Texture2D); }
        public static UnityEngine.Texture2D BakeAnimationGradient(UnityEngine.Gradient gradient, int resolution) { return default(UnityEngine.Texture2D); }
        private static UnityEngine.GradientAlphaKey[] GetAlphakeys(UnityEngine.Gradient gradient) { return default(UnityEngine.GradientAlphaKey[]); }
        private static UnityEngine.GradientColorKey[] GetColorKeys(UnityEngine.Gradient gradient) { return default(UnityEngine.GradientColorKey[]); }
        private static string GetCurveString(UnityEngine.AnimationCurve curve) { return default(string); }
        private static string GetGradientString(UnityEngine.Gradient g) { return default(string); }
        private static bool GradientsAreEqual(UnityEngine.Gradient a, UberShaderCurveBake.GradientData data) { return default(bool); }
        private static void Init() { }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct CurveData
        {
            public UnityEngine.Keyframe[] CheckCurve;
            public float CheckTime;
            public float Duration;
            public float Scale;
            public UnityEngine.Texture2D Texture;
            public UnityEngine.TextureWrapMode WrapMode;
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct GradientData
        {
            public UnityEngine.GradientAlphaKey[] CheckAlpha;
            public UnityEngine.GradientColorKey[] CheckColor;
            public float CheckTime;
            public float Duration;
            public float Scale;
            public UnityEngine.Texture2D Texture;
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberShaderCustomMesh : UnityEngine.MonoBehaviour
    {
        public UberShaderCustomMesh() { }
    }
    public partial class UberShaderDetector : UnityEngine.MonoBehaviour
    {
        private System.Collections.Generic.HashSet<string> m_found;
        private static UnityEngine.GameObject m_instance;
        public UberShaderDetector() { }
        public static bool Enabled { get { return default(bool); } set { } }
        public string FullPath(UnityEngine.Transform target) { return default(string); }
        public void OnDisable() { }
        public void Update() { }
    }
    public partial class UberShaderDictionary<TK, TV> : IUberDictionary
    {
        protected System.Collections.Generic.Dictionary<TK, TV> m_dictionary;
        private bool m_inited;
        [UnityEngine.SerializeField]
        protected System.Collections.Generic.List<TK> m_keys;
        [UnityEngine.SerializeField]
        protected System.Collections.Generic.List<TV> m_values;
        public UberShaderDictionary() { }
        public int Count { get { return default(int); } }
        public TV this[TK index] { get { return default(TV); } set { } }
        public System.Collections.Generic.Dictionary<TK, TV>.KeyCollection Keys { get { return default(System.Collections.Generic.Dictionary<TK, TV>.KeyCollection); } }
        public System.Collections.Generic.Dictionary<TK, TV>.ValueCollection Values { get { return default(System.Collections.Generic.Dictionary<TK, TV>.ValueCollection); } }
        public void Add(TK key, TV value) { }
        public void Clear() { }
        public bool ContainsKey(TK key) { return default(bool); }
        public void Init() { }
        public void Remove(TK key) { }
        public void Save() { }
        public void SetOrReplace(TK key, TV value) { }
        public bool TryGetValue(TK key, out TV value) { value = default(TV); return default(bool); }
    }
    public partial class UberShaderDynamicTexture : UnityEngine.MonoBehaviour
    {
        public UberShaderDynamicTexture() { }
    }
    public partial class UberShaderFloat : UberShaderProperty
    {
        [UnityEngine.SerializeField]
        private float m_floatValue;
        public float Scale;
        public UberShaderFloat() { }
        public UberShaderFloat(float val) { }
        public float FloatValue { get { return default(float); } set { } }
        public override void BindProperties() { }
    }
    public partial class UberShaderGradient : UberShaderProperty
    {
        [UnityEngine.SerializeField]
        private UnityEngine.Gradient m_gradient;
        private UnityEngine.Texture2D m_texture;
        public UberShaderGradient() { }
        public UnityEngine.Gradient Gradient { get { return default(UnityEngine.Gradient); } }
        public override void BindProperties() { }
        private void CreateTexture() { }
        public override void Set(string bindName, UberShaderBlock attachedBlock) { }
    }
    public partial class UberShaderLimitZAttribute : System.Attribute
    {
        public float MaxZ;
        public float MinZ;
        public UberShaderLimitZAttribute() { }
    }
    public partial class UberShaderMainTexture : UberShaderTextureBase
    {
        private UnityEngine.Texture m_currentBindTexture;
        [UnityEngine.SerializeField]
        private UberShaderAtlasTexture m_texture;
        private static int s_bindAtlasScaleId;
        private static int s_bindAtlasUvId;
        private static int s_depthFlipScreen;
        public UberShaderMainTexture() { }
        public UberShaderAtlasTexture AtlasTexture { get { return default(UberShaderAtlasTexture); } }
        public override void BindProperties() { }
        public IUberAtlasExternal GetExternalAtlasProvider() { return default(IUberAtlasExternal); }
        public override void Set(string bindName, UberShaderBlock attachedBlock) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public abstract partial class UberShaderModifier : UnityEngine.MonoBehaviour, IStrippable
    {
        public bool Enabled;
        private UberShaderBlock m_attachedToShaderBlock;
        private UnityEngine.MeshFilter m_filter;
        private UnityEngine.Renderer m_renderer;
        protected UberShaderModifier() { }
        protected UberShaderBlock AttachedToShaderBlock { get { return default(UberShaderBlock); } }
        protected UnityEngine.Material BindMaterial { get { return default(UnityEngine.Material); } }
        protected UnityEngine.MeshFilter Filter { get { return default(UnityEngine.MeshFilter); } }
        public bool HasCageMesh { get { return default(bool); } }
        public bool IsSupported { get { return default(bool); } }
        protected UnityEngine.Renderer Renderer { get { return default(UnityEngine.Renderer); } }
        public virtual void ApplyMultipliers(float strength, float speed) { }
        public virtual bool DoesChangeShape() { return default(bool); }
        public virtual bool DoStrip() { return default(bool); }
        public virtual string GetBaseShaderProperties() { return default(string); }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public virtual System.Collections.Generic.IEnumerable<string> GetBaseVertexTextureNames() { return default(System.Collections.Generic.IEnumerable<string>); }
        public virtual System.Collections.Generic.IEnumerable<string> GetKeywordsForShader() { return default(System.Collections.Generic.IEnumerable<string>); }
        public virtual float GetQuadExpandSize() { return default(float); }
        public virtual string[] GetRandomizeOptions() { return default(string[]); }
        public static bool IsModifierSupported(UberShaderComponent comp, System.Type modifierType) { return default(bool); }
        public virtual bool NeedsMipMap() { return default(bool); }
        private string NicifyVariableName(string name) { return default(string); }
        public virtual void Randomize() { }
        protected void RandomizeScrolling(UberShaderTexture tex) { }
        protected float RangeRandom(float b, float mag) { return default(float); }
        public virtual bool RequiresNormals() { return default(bool); }
        public virtual bool RequiresVertexColor() { return default(bool); }
        public abstract void SetProperties();
        protected string ShaderlabString(string bind, string type, string def) { return default(string); }
        public virtual void UberShaderEditorUpdate() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetBaseVertexTextureNames>c__Iterator23 : System.Collections.Generic.IEnumerable<string>, System.Collections.Generic.IEnumerator<string>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal string $current;
            internal int $PC;
            public <GetBaseVertexTextureNames>c__Iterator23() { }
            string System.Collections.Generic.IEnumerator<string>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(string); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<string> System.Collections.Generic.IEnumerable<string>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<string>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class UberShaderMultiplyLayerColor : UberShaderProperty
    {
        [UnityEngine.SerializeField]
        private UnityEngine.Color m_color;
        public UberShaderMultiplyLayerColor() { }
        public UberShaderMultiplyLayerColor(UnityEngine.Color defaultColor) { }
        public float A { get { return default(float); } set { } }
        public float B { get { return default(float); } set { } }
        public UnityEngine.Color Color { get { return default(UnityEngine.Color); } set { } }
        public float G { get { return default(float); } set { } }
        public float R { get { return default(float); } set { } }
        public override void BindProperties() { }
        private float CalculateColorComponentValue(float v) { return default(float); }
        private UnityEngine.Color CalculateFinalMultiplyColor(UnityEngine.Color color) { return default(UnityEngine.Color); }
    }
    public enum UberShaderOrder
    {
        AdditiveLayer = 42,
        AdditiveLayerDistorted = 44,
        AdditiveLayerExtra = 43,
        AlphaMaskFade = 34,
        CharacterLighting = 45,
        CharacterTint = 46,
        ClusterAnimBone0 = 13,
        ClusterAnimBone1 = 14,
        ClusterAnimBone2 = 15,
        DecalLayer = 52,
        DecalLayerDistort = 53,
        Distort = 16,
        DistortExtra = 17,
        FakeMotionBlur = 48,
        GrabPassBlock = 1,
        GradientRemap = 36,
        HueShift = 35,
        InteractionLight = 6,
        InteractionPunch = 8,
        InteractionRotation = 7,
        Mask = 28,
        MaskDissolve = 31,
        MaskExtra = 29,
        MaskSpiritLight = 30,
        MultiplyLayer = 38,
        MultiplyLayerDistort = 41,
        MultiplyLayerExtra = 39,
        MultiplyLayerThird = 40,
        NightBerry = 51,
        Outline = 47,
        PositionAnimator = 11,
        RotationAnimator = 9,
        ScaleAnimator = 10,
        SeperationMap = 49,
        TextAnimDistort = 26,
        TextAnimFade = 25,
        TextAnimGlow = 27,
        TextGlow = 23,
        Textify = 21,
        TextOutline = 22,
        TextShadow = 24,
        TexturedBlock = 0,
        Tint = 37,
        TransparencyAnimator = 12,
        TurbulenceBrightness = 32,
        TurbulenceDistortion = 2,
        TurbulenceRotation = 3,
        TurbulenceScale = 4,
        TurbulenceTranslation = 5,
        TurbulenceTransparency = 33,
        UnderWaterLine = 19,
        VertexColor = 50,
        WaterDebris = 20,
        WaterLine = 18,
        Worldmap = 54,
    }
    public partial class UberShaderOrderAttribute : System.Attribute
    {
        public UberShaderOrder Queue;
        public UberShaderOrderAttribute(UberShaderOrder queue) { }
    }
    public partial class UberShaderPrefabWarmer : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<UnityEngine.Texture2D> BaseAtlases;
        public System.Collections.Generic.List<UnityEngine.GameObject> PrefabsToWarm;
        public UberShaderPrefabWarmer() { }
        private void Awake() { }
    }
    public partial class UberShaderPrewarmer : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<UnityEngine.Shader> BaseShaders;
        public static UberShaderPrewarmer Instance;
        public static bool IsComplete;
        public System.Collections.Generic.List<UnityEngine.Shader> LoadedShaders;
        private bool m_canStreamFast;
        private UnityEngine.Material m_dummyMat;
        private bool m_isStreaming;
        private UnityEngine.RenderTexture m_prewarmTex;
        private System.Diagnostics.Stopwatch m_sw;
        private int m_warmIndex;
        private static UnityEngine.AsyncOperation s_syncOperation;
        public UberShaderPrewarmer() { }
        public static bool IsLoaded { get { return default(bool); } }
        public static float LoadProgress { get { return default(float); } }
        public static float TotalProgress { get { return default(float); } }
        public static float WarmProgress { get { return default(float); } }
        private void Awake() { }
        private void CreateResources() { }
        public static void Load() { }
        private void OnStreamDone() { }
        private void OnStreamStart() { }
        public void SetFastStream() { }
        private void StartWarmingStream() { }
        private void Update() { }
        private void UpdateStream() { }
        private bool WarmNextShader() { return default(bool); }
        private void WarmShader(UnityEngine.Shader warmShader) { }
    }
    public partial class UberShaderPrewarmerProgress : FloatValueProvider
    {
        public UberShaderPrewarmerProgress() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class UberShaderPrewarmLoad : UnityEngine.MonoBehaviour
    {
        public UberShaderPrewarmLoad() { }
        public void OnGameAwake() { }
        private void Update() { }
    }
    public abstract partial class UberShaderProperty
    {
        public UberShaderBlock AttachedBlock;
        public string BindName;
        protected int MainBindId;
        protected UberShaderProperty() { }
        protected UnityEngine.Material BindMaterial { get { return default(UnityEngine.Material); } }
        protected void BindColor(int nameId, UnityEngine.Color color) { }
        protected void BindFloat(int nameId, float val) { }
        public abstract void BindProperties();
        protected void BindTexture(int nameId, UnityEngine.Texture texture) { }
        protected void BindVector(int nameId, UnityEngine.Vector4 vector) { }
        protected void BindVector(string nameId, UnityEngine.Vector4 vector) { }
        public virtual void Set(string bindName, UberShaderBlock attachedBlock) { }
    }
    public static partial class UberShaderRenderQueue
    {
        public const float GrabPassZ = -1f;
        private static string[] s_zLayers;
        private static double[] s_zRanges;
        private static void .cctor() { }
        public static double GetUberComponentZ(UberShaderComponent component) { return default(double); }
        private static string RenderlayerFromZ(double z) { return default(string); }
        private static void SetQeueusFromZ(double z, UnityEngine.Renderer renderer, bool inZRanges) { }
        public static void SetRenderQueueExplicit(UnityEngine.GameObject go, float z) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberShaderRuntimeRenderOrder : UnityEngine.MonoBehaviour, IInScene
    {
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private bool m_isInScene;
        private float m_lastZ;
        public float OffsetPositionZ;
        public UberShaderRuntimeRenderOrder() { }
        public bool IsInScene { get { return default(bool); } set { } }
        public void Awake() { }
        private void SetRenderQueueOn(UnityEngine.Transform trans) { }
        public void Update() { }
    }
    public partial class UberShaderTexture : UberShaderTextureBase
    {
        public bool IsVertexTexture;
        [UnityEngine.SerializeField]
        private UnityEngine.Texture2D m_texture;
        public UberShaderTexture() { }
        public override void BindProperties() { }
        public void SpeedupScroll(float speed) { }
    }
    public abstract partial class UberShaderTextureBase : UberShaderProperty
    {
        public bool DoParralax;
        public bool IsPolarUvs;
        public float ParralaxAmount;
        [UberShaderVectorDisplay("U scale", "V scale", "Polar offset", "Polar scroll")]
        public UnityEngine.Vector4 PolarUvSettings;
        [UnityEngine.SerializeField]
        protected UnityEngine.Vector2 ProTextureOffset;
        [UnityEngine.SerializeField]
        protected float ProTextureRotation;
        [UnityEngine.SerializeField]
        protected float ProTextureRotationSpeed;
        [UnityEngine.SerializeField]
        protected UnityEngine.Vector2 ProTextureScale;
        [UnityEngine.SerializeField]
        protected UnityEngine.Vector2 ProTextureScroll;
        public TextureUvMode UvMode;
        protected UberShaderTextureBase() { }
        public UnityEngine.Vector2 TextureOffset { get { return default(UnityEngine.Vector2); } set { } }
        public float TextureRotation { get { return default(float); } set { } }
        public float TextureRotationSpeed { get { return default(float); } set { } }
        public UnityEngine.Vector2 TextureScale { get { return default(UnityEngine.Vector2); } set { } }
        public UnityEngine.Vector2 TextureScroll { get { return default(UnityEngine.Vector2); } set { } }
        protected void BindBase() { }
        protected void BindOptions() { }
        public void BindTexSettings() { }
        public UnityEngine.Vector4 GetTextureShaderSettings() { return default(UnityEngine.Vector4); }
    }
    public partial class UberShaderVector : UberShaderProperty
    {
        [UnityEngine.SerializeField]
        private UnityEngine.Vector4 m_vectorValue;
        public UberShaderVector.ScalingMode Mode;
        public UnityEngine.Vector4 VectorValueScale;
        public UberShaderVector() { }
        public UberShaderVector(float x, float y, float z, float w) { }
        public float Scale { set { } }
        public UnityEngine.Vector4 VectorValue { get { return default(UnityEngine.Vector4); } set { } }
        public float W { get { return default(float); } set { } }
        public float X { get { return default(float); } set { } }
        public float Y { get { return default(float); } set { } }
        public float Z { get { return default(float); } set { } }
        public override void BindProperties() { }
        public enum ScalingMode
        {
            None = 0,
            Offset = 1,
            PivotOnXy = 2,
        }
    }
    public partial class UberShaderVectorDisplay : UnityEngine.PropertyAttribute
    {
        public bool ShowAsVector2;
        public string W;
        public string X;
        public string Y;
        public string Z;
        public UberShaderVectorDisplay(string xyName, string zwName) { }
        public UberShaderVectorDisplay(string x, string y, string z, string w) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberShaderWorldHierarchy : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Vector2 Offset;
        public UberShaderWorldHierarchyDictionary Properties;
        public UnityEngine.Vector2 TextureSize;
        public UberShaderWorldHierarchy() { }
        private void Update() { }
    }
    public partial class UberShaderWorldHierarchyDictionary : UberShaderDictionary<UnityEngine.Renderer, UberShaderWorldProperty>
    {
        public UberShaderWorldHierarchyDictionary() { }
    }
    public partial class UberShaderWorldProperty
    {
        public bool Enabled;
        public string Name;
        public UberShaderWorldProperty() { }
    }
    public partial class UberSpawnManager : UnityEngine.MonoBehaviour
    {
        private const float c_frameBudget = 1f;
        public static UberSpawnManager Instance;
        private float m_budget;
        private float m_startSpawn;
        public UberSpawnManager() { }
        private void Awake() { }
        private void FixedUpdate() { }
        public bool GetSpawnOk() { return default(bool); }
        public void StartSpawn() { }
        public void StopSpawn() { }
    }
    public partial class UberTextConstants
    {
        public const float AlphaCenter = 0.5f;
        public UberTextConstants() { }
    }
    public partial class UberTextureSettingsAnimator : BaseAnimator
    {
        private UnityEngine.Vector2 m_originalOffset;
        private float m_originalRotation;
        private UnityEngine.Vector2 m_originalScale;
        public UnityEngine.AnimationCurve OffsetX;
        public UnityEngine.AnimationCurve OffsetY;
        public bool Relative;
        public UnityEngine.AnimationCurve Rotation;
        private static string[] s_unityTextureProperties;
        private static string[] s_unityTexturePropertiesSt;
        public UnityEngine.AnimationCurve ScaleX;
        public UnityEngine.AnimationCurve ScaleY;
        public UberTextureSettingsAnimator.TextureName TextureTarget;
        public bool UseOffset;
        public bool UseRotation;
        public bool UseScale;
        public UberTextureSettingsAnimator() { }
        public UnityEngine.Vector2 CurrentTextureOffset { get { return default(UnityEngine.Vector2); } set { } }
        public float CurrentTextureRotation { get { return default(float); } set { } }
        public UnityEngine.Vector2 CurrentTextureScale { get { return default(UnityEngine.Vector2); } set { } }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public UnityEngine.Vector2 OriginalOffset { get { return default(UnityEngine.Vector2); } }
        public float OriginalRotation { get { return default(float); } }
        public UnityEngine.Vector2 OriginalScale { get { return default(UnityEngine.Vector2); } }
        private static void .cctor() { }
        public override void CacheOriginals() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
        public UberShaderTextureBase UberShaderTextureBaseFromTextureName(UberTextureSettingsAnimator.TextureName textureName, UberShaderComponent uberShaderComponent) { return default(UberShaderTextureBase); }
        public string UberShaderTexturePropertyFromTextureName(UberTextureSettingsAnimator.TextureName textureName) { return default(string); }
        public string UberShaderTexturePropertyStFromTextureName(UberTextureSettingsAnimator.TextureName textureName) { return default(string); }
        public enum TextureName
        {
            AdditiveLayer = 13,
            AdditiveLayerExtra = 15,
            AdditiveLayerExtraMask = 16,
            AdditiveLayerMask = 14,
            Distortion = 3,
            DistortionExtra = 5,
            DistortionExtraMask = 6,
            DistortionMask = 4,
            MainTexture = 0,
            MaskTexture = 1,
            MaskTextureExtra = 2,
            MultiplyLayer = 7,
            MultiplyLayerExtra = 9,
            MultiplyLayerExtraMask = 10,
            MultiplyLayerMask = 8,
            MultiplyLayerThird = 11,
            MultiplyLayerThirdMask = 12,
        }
    }
    [UnityEngine.AddComponentMenu("Image Effects/Sein UI Post Processing")]
    [UnityEngine.ExecuteInEditMode]
    public partial class UberUIPostProcess : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static UberUIPostProcess <Instance>k__BackingField;
        public UnityEngine.Camera Camera;
        public UberUIPostProcess() { }
        public static UberUIPostProcess Instance { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UberUIPostProcess); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        private void OnEnable() { }
    }
    public partial class UberVignettingAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve IntensityAnimationCurve;
        private CameraPostProcessing m_cameraPostProcessing;
        public UberVignettingAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public new void OnDestroy() { }
        public void OnDisable() { }
        public void OnGameReset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class UberWaterComponent : UnityEngine.MonoBehaviour
    {
        protected UnityEngine.Color[] Colours;
        protected bool IsVertical;
        private UberWaterControl m_control;
        private UnityEngine.MeshFilter m_filter;
        private UnityEngine.Vector2 m_leftDownPos;
        private UnityEngine.Vector2 m_leftDownUv;
        private int m_numQuads;
        private UnityEngine.Vector2 m_rightUpPos;
        private UnityEngine.Vector2 m_rightUpUv;
        protected int MeshLen;
        protected int NumVertices;
        protected UnityEngine.Vector2[] Uvs;
        protected UnityEngine.Vector3[] Vertices;
        public UberWaterComponent() { }
        protected UberWaterControl Control { get { return default(UberWaterControl); } }
        protected UnityEngine.MeshFilter Filter { get { return default(UnityEngine.MeshFilter); } }
        protected int ResX { get { return default(int); } }
        protected void AppendQuad(UnityEngine.Vector2 downLeftPosition, UnityEngine.Vector2 upRightPosition, UnityEngine.Vector2 downLeftUv, UnityEngine.Vector2 upRightUv) { }
        protected void AppendQuadStrip(UnityEngine.Vector2 downLeftPosition, UnityEngine.Vector2 upRightPosition, UnityEngine.Vector2 downLeftUv, UnityEngine.Vector2 upRightUv, int tesselationX, int tesselationY) { }
        private void AppendVertex(UberWaterComponent.Corner corner) { }
        protected UnityEngine.Mesh CreateMesh(UnityEngine.Mesh current, bool setShared=true) { return default(UnityEngine.Mesh); }
        public virtual void GenerateMesh() { }
        protected bool StartMesh(int maxNumQuads) { return default(bool); }
        private UnityEngine.Vector2 VectorStage(UnityEngine.Vector2 a, UnityEngine.Vector2 b, UberWaterComponent.Corner corner) { return default(UnityEngine.Vector2); }
        private enum Corner
        {
            LeftDown = 0,
            LeftUp = 1,
            RightDown = 2,
            RightUp = 3,
        }
    }
    [UnityEngine.AddComponentMenu("Uber Water/Uber water control")]
    [UnityEngine.ExecuteInEditMode]
    public partial class UberWaterControl : UnityEngine.MonoBehaviour, IInteractable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private int <Index>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsRegistered>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <WantsToRegister>k__BackingField;
        public static readonly AllContainer<UberWaterControl> All;
        public UnityEngine.Rect Boundary;
        private const int c_impactCount = 3;
        private const float c_splashCooldown = 0.3f;
        private const float c_texelsPerMeter = 5f;
        private const float c_texelsPerMeterHigh = 7f;
        public UnityEngine.Material CrossMaterial;
        public bool CrossSection;
        [UnityEngine.RangeAttribute(0f, 0.999f)]
        public float Damping;
        private int dampingId;
        private int deltTimeId;
        private int dispTex;
        private int dispUvId;
        public bool DoSim;
        public UnityEngine.Material EdgeMaterial;
        [UnityEngine.RangeAttribute(0f, 15f)]
        public float Elasticity;
        private int elasticityId;
        public float ExtendBack;
        public float ExtendFront;
        public float ExtendLeft;
        public float ExtendRight;
        [UnityEngine.RangeAttribute(1f, 2f)]
        public float ForceRaisePower;
        private int heightId;
        private UnityEngine.Material m_blurMaterial;
        private System.Collections.Generic.Queue<UberWaterControl.ImpactBuf>[] m_impacts;
        private float m_lastTime;
        private UnityEngine.Vector3 m_oldScale;
        private float m_prevDeltTime;
        private float m_rainToDo;
        private int m_resolutionX;
        private int m_resolutionY;
        private float m_simTime;
        private System.Collections.Generic.List<UberWaterControl.SplashInfo> m_splashes;
        private UnityEngine.RenderTexture m_waterHeight;
        private UnityEngine.RenderTexture m_waterHeightDraw;
        private UnityEngine.Material m_waterMat;
        private int maxHeightId;
        [UnityEngine.RangeAttribute(0.01f, 1f)]
        public float MaxWaveHeight;
        private int noiseOffsetId;
        public float NoiseScale;
        private int noiseScaleId;
        [UnityEngine.RangeAttribute(0f, 100f)]
        public float NoiseSpeed;
        [UnityEngine.RangeAttribute(0f, 20f)]
        public float NoiseStrength;
        private int noiseStrId;
        private int noiseTexId;
        public UnityEngine.Texture2D NoiseTexture;
        private int pxSizesId;
        private int pxXId;
        private int pxYId;
        public float RaindRadiusSpread;
        [UnityEngine.RangeAttribute(0f, 250f)]
        public float RainFrequency;
        [UnityEngine.RangeAttribute(0f, 60f)]
        public float RainPower;
        public UnityEngine.AnimationCurve RainPowerSpread;
        public float RainRadius;
        public UnityEngine.LayerMask RealtimeReflectLayers;
        public int ReflectResolution;
        private static UnityEngine.Vector2[] s_offsets;
        private static string[] s_setName;
        public UnityEngine.Shader SeinWaterBlurShader;
        public UnityEngine.Shader SeinWaterUpdateShader;
        public UnityEngine.GameObject SplashPrefab;
        public float SplashSpawnAtPower;
        public UnityEngine.Material TopMaterial;
        private int transformScaleId;
        public bool UseHighRes;
        [UnityEngine.RangeAttribute(0.1f, 8f)]
        public float VerticesPerMeterWaveline;
        private int waterCoords;
        [UnityEngine.RangeAttribute(0.05f, 4f)]
        public float WaterlineRaisePower;
        public float WaterlineSimDepth;
        [UnityEngine.RangeAttribute(0f, 10f)]
        public float WaveHeightScale;
        private int waveOffsetId;
        private int wavePowId;
        private int waveScaleId;
        [UnityEngine.RangeAttribute(0.25f, 6f)]
        public float WaveSpeed;
        private int waveSpeedId;
        [UnityEngine.RangeAttribute(0.75f, 2f)]
        public float ZScale;
        public UberWaterControl() { }
        private UnityEngine.Material BlurMaterial { get { return default(UnityEngine.Material); } }
        public int Index { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(int); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsRegistered { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private float SimDt { get { return default(float); } }
        public bool WantsToRegister { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private UnityEngine.RenderTexture WaterHeight { get { return default(UnityEngine.RenderTexture); } }
        private UnityEngine.RenderTexture WaterHeightDraw { get { return default(UnityEngine.RenderTexture); } }
        private UnityEngine.Material WaterMat { get { return default(UnityEngine.Material); } }
        private static void .cctor() { }
        private void BindShaderVariables(float simDt) { }
        public void BindShaderVariablesToMaterial(UnityEngine.Material mat) { }
        private void BlurBlit(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
        private UnityEngine.RenderTexture CreateTexture() { return default(UnityEngine.RenderTexture); }
        private void Dequeue(string bufName, UberWaterControl.ImpactBuf buf) { }
        private void DequeueEmpty(string bufName) { }
        public bool DoesOverlap(UnityEngine.Vector3 position, UnityEngine.Vector3 velocity, float radius, float zScale) { return default(bool); }
        private UberWaterControl.ImpactBuf GetBufFromSettings(UnityEngine.Vector2 localUv, float power, float radius) { return default(UberWaterControl.ImpactBuf); }
        public UnityEngine.Vector3 GetExplodePoint(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public static UberWaterControl GetNearestWaterControl(UnityEngine.GameObject gameObject) { return default(UberWaterControl); }
        public UnityEngine.Vector3 GetPosition() { return default(UnityEngine.Vector3); }
        public void Impact(UnityEngine.Vector3 pos, float power, float radius, bool splash, int priority) { }
        private void ImpactLocal(UnityEngine.Vector2 localUv, float power, float radius, int priority) { }
        private void InitShaderIds() { }
        public bool IsOverWater(UnityEngine.Vector3 pos) { return default(bool); }
        public bool IsWater() { return default(bool); }
        public float MaxRadius() { return default(float); }
        private void OnDestroy() { }
        private void OnDisable() { }
        private void OnEnable() { }
        public void OnRegistered() { }
        private void SetFloat(int id, float val, UnityEngine.Material mat) { }
        private void SetImpact() { }
        public void SetInteraction(float time, UnityEngine.Vector3 position, UnityEngine.Vector3 historicPos, UnityEngine.Vector4 strength, UnityEngine.Vector3 velocity, float radius, bool explosion) { }
        private void SetVector(int id, UnityEngine.Vector4 val, UnityEngine.Material mat) { }
        private void Splash(UnityEngine.Vector3 pos, float power, UberInteractionActor actor) { }
        private void Update() { }
        public void UpdateBoundary() { }
        private void UpdateResolution() { }
        private void UpdateSim() { }
        private UnityEngine.Vector4 WaveOffset(UnityEngine.Vector4 speed, UnityEngine.Vector4 scale) { return default(UnityEngine.Vector4); }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct ImpactBuf
        {
            public float Power;
            public float Radius;
            public UnityEngine.Vector2 Uv;
        }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        private partial struct SplashInfo
        {
            public UnityEngine.Vector3 Position;
            public float Time;
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberWaterCross : UberWaterComponent
    {
        [UnityEngine.RangeAttribute(0.05f, 10f)]
        public float DistortSize;
        private UnityEngine.Renderer m_renderer;
        public UberWaterCross() { }
        public override void GenerateMesh() { }
        private void OnEnable() { }
        private void OnWillRenderObject() { }
        private void Update() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberWaterEdge : UberWaterComponent
    {
        [UnityEngine.RangeAttribute(0f, 3f)]
        public float BottomSize;
        [UnityEngine.RangeAttribute(0f, 3f)]
        public float TopSize;
        public UberWaterEdge() { }
        private void OnWillRenderObject() { }
    }
    [UnityEngine.AddComponentMenu("Uber Water/Force Actor")]
    [UnityEngine.ExecuteInEditMode]
    public partial class UberWaterForceActor : UnityEngine.MonoBehaviour
    {
        private UberWaterControl m_control;
        public float Radius;
        public float Strength;
        public UberWaterForceActor() { }
        private void Awake() { }
        private void FixedUpdate() { }
        private void Update() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberWaterForceAnimator : BaseAnimator
    {
        public UnityEngine.AnimationCurve AnimationCurve;
        private UberWaterForceActor m_actor;
        private float m_originalStrength;
        public UberWaterForceAnimator() { }
        public UberWaterForceActor Actor { get { return default(UberWaterForceActor); } }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public override void CacheOriginals() { }
        private void OnEnable() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    [UnityEngine.AddComponentMenu("Uber Water/Random Actor")]
    [UnityEngine.ExecuteInEditMode]
    public partial class UberWaterRandomActor : UnityEngine.MonoBehaviour
    {
        [UnityEngine.RangeAttribute(0f, 80f)]
        public int AverageImpactsPerSecond;
        private float m_deltaTime;
        private float m_lastTime;
        private float m_num;
        public float MaxRadius;
        public float MaxStrength;
        public float MinRadius;
        public float MinStrength;
        public UnityEngine.Rect Size;
        public UberWaterRandomActor() { }
        private void OnEnable() { }
        private void Update() { }
    }
    public partial class UberWaterReflection
    {
        public UberWaterControl Control;
        private float m_planeOffset;
        private UnityEngine.Camera m_renderCamera;
        private UnityEngine.Renderer m_renderer;
        private UnityEngine.RenderTexture m_texture;
        private UnityEngine.Transform m_transform;
        public static bool ReflectionRender;
        public UberWaterTop ReflectPlane;
        public UberWaterReflection(UberWaterControl control, UnityEngine.Renderer renderer, UnityEngine.Transform trans) { }
        private static void CalculateObliqueMatrix(ref UnityEngine.Matrix4x4 projection, UnityEngine.Vector4 clipPlane) { }
        private static void CalculateReflectionMatrix(ref UnityEngine.Matrix4x4 reflectionMat, UnityEngine.Vector4 plane) { }
        private UnityEngine.Vector4 CameraSpacePlane(UnityEngine.Camera cam, UnityEngine.Vector3 pos, UnityEngine.Vector3 normal, float sideSign) { return default(UnityEngine.Vector4); }
        public void OnDestroy() { }
        public void OnWillRenderObject() { }
        private static float Sgn(float a) { return default(float); }
        private void UpdateCameraModes(UnityEngine.Camera src, UnityEngine.Camera dest) { }
        private void UpdateResources() { }
    }
    [UnityEngine.AddComponentMenu("Uber Water/Splash")]
    public partial class UberWaterSplash : UnityEngine.MonoBehaviour
    {
        public bool AutoDeleteSplash;
        private UnityEngine.AudioSource m_audioSource;
        public UnityEngine.ParticleEmitter ParticleEmitter;
        public UnityEngine.AudioClip[] SplashClips;
        public float SplashLifetime;
        public UberWaterSplash() { }
        private void OnSplash(SeinSplashInfo splash) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class UberWaterTop : UberWaterComponent
    {
        private int m_frontSize;
        private bool m_isLava;
        [UnityEngine.HideInInspector]
        [UnityEngine.SerializeField]
        private UnityEngine.Mesh m_normalMesh;
        [UnityEngine.SerializeField]
        private UberWaterReflection m_reflection;
        private UnityEngine.Renderer m_renderer;
        public UberWaterTop() { }
        public int FrontSize { get { return default(int); } }
        private UberWaterReflection Reflection { get { return default(UberWaterReflection); } }
        public void EnsureMesh() { }
        public override void GenerateMesh() { }
        private UnityEngine.Mesh GetMesh(UnityEngine.Mesh var, float minZ, float maxZ) { return default(UnityEngine.Mesh); }
        private void OnBecameInvisible() { }
        private void OnBecameVisible() { }
        private void OnDestroy() { }
        private void OnEnable() { }
        public void OnWillRenderObject() { }
        private void SetZOffset() { }
    }
    [CustomShaderModifier("UnderWaterLine")]
    [UberShaderCategoryAttribute((UberShaderCategory)(4))]
    [UberShaderOrderAttribute((UberShaderOrder)(19))]
    [UnityEngine.ExecuteInEditMode]
    public partial class UnderWaterLineModifier : UberShaderModifier
    {
        private UberWaterControl m_water;
        public UberShaderColor WaterlineColor;
        public UberShaderVector WaterlineSettings;
        public UnderWaterLineModifier() { }
        public override void SetProperties() { }
        private void Update() { }
    }
    [CategoryAttribute("Map Stone")]
    internal partial class UnhighlightMapStoneAction : ActionMethod
    {
        [NotNull]
        public MapStone MapStone;
        public UnhighlightMapStoneAction() { }
        public override void Perform(IContext context) { }
    }
    [CategoryAttribute("Ori")]
    internal partial class UnhighlightOriInterestTrigger : ActionMethod
    {
        [NotNull]
        public OriInterestTriggerB OriInterestTrigger;
        public UnhighlightOriInterestTrigger() { }
        public override void Perform(IContext context) { }
    }
    public abstract partial class UnityModelAnimationCurveProcessor
    {
        protected UnityEngine.GameObject GameObject;
        protected UnityModelAnimationCurveProcessor() { }
        public abstract void OnPostProcessModel();
        public abstract void OnPreProcessModel();
        public abstract void OnSampleFrame(int frame);
        public void ProcessCurves(UnityEngine.GameObject model, float step, float start, float end) { }
    }
    public partial class UnityTextDisplayValue : UnityEngine.MonoBehaviour
    {
        private readonly ChangeDetectorFloat m_changeDetector;
        private CatlikeCoding.TextBox.TextBox m_textBox;
        private UnityEngine.TextMesh m_textMesh;
        public bool Round;
        public FloatValueProvider Value;
        public UnityTextDisplayValue() { }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnEnable() { }
    }
    public partial class UnityTextMeshDropShadow : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Color Color;
        private UnityEngine.Renderer m_renderer;
        private UnityEngine.GameObject m_shadowGameObject;
        private UnityEngine.MeshRenderer m_shadowMeshRenderer;
        private UnityEngine.TextMesh m_shadowTextMesh;
        private UnityEngine.TextMesh m_textMesh;
        private UnityEngine.Transform m_transform;
        public UnityEngine.Vector3 Offset;
        public UnityTextMeshDropShadow() { }
        public void Awake() { }
        public void Update() { }
    }
    public partial class UnityTextPercentageDisplayValue : UnityEngine.MonoBehaviour
    {
        private readonly ChangeDetectorFloat m_changeDetector;
        private UnityEngine.TextMesh m_textMesh;
        public FloatValueProvider Value;
        public UnityTextPercentageDisplayValue() { }
        public void Awake() { }
        public void FixedUpdate() { }
    }
    public partial class UnloadPreviousTestComplete : UnityEngine.MonoBehaviour
    {
        public static string LevelToLoad;
        public UnloadPreviousTestComplete() { }
        private static void .cctor() { }
        private void Start() { }
    }
    public partial class UnlockCutsceneAction : ActionMethod
    {
        public UnlockedCutscenes Cutscene;
        public UnlockCutsceneAction() { }
        public override string GetNiceName() { return default(string); }
        public override void Perform(IContext context) { }
    }
    public enum UnlockedCutscenes
    {
        AtopGinsoTree = 30,
        None = 0,
        Prologue = 10,
        TheAttack = 20,
        TheNest = 40,
        TheSacrifice = 50,
    }
    public partial class UnlockFinishLoadingAction : ActionMethod
    {
        public UnlockFinishLoadingAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class UnlockFullGameLogic : UnityEngine.MonoBehaviour
    {
        public ActionMethod action;
        public UnlockFullGameLogic() { }
        public void FixedUpdate() { }
    }
    public partial class UnparentTrailRenderer : UnityEngine.MonoBehaviour, IPooled
    {
        public float DestroyDelayAfterTarget;
        public TransparencyAnimator Fade;
        private bool m_didDestroy;
        private UnityEngine.Vector3 m_localPosition;
        private UnityEngine.Transform m_targetTransform;
        private float m_time;
        private UnityEngine.TrailRenderer m_trailRenderer;
        public UnparentTrailRenderer() { }
        private void Awake() { }
        private void OnDestroy() { }
        public void OnPoolSpawned() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private static System.Collections.IEnumerator ResetTrail(UnityEngine.TrailRenderer trail) { return default(System.Collections.IEnumerator); }
        private void Start() { }
        private void Update() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <ResetTrail>c__Iterator4A : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal UnityEngine.TrailRenderer <$>trail;
            internal float <trailTime>__0;
            internal UnityEngine.TrailRenderer trail;
            public <ResetTrail>c__Iterator4A() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public static partial class UnscaledTime
    {
        public static float deltaTime { get { return default(float); } }
        public static float fixedDeltaTime { get { return default(float); } }
    }
    public partial class UpdateUberShaderOnFixedUpdate : UnityEngine.MonoBehaviour
    {
        private UberShaderComponent m_attachedUberShader;
        public UpdateUberShaderOnFixedUpdate() { }
        public UberShaderComponent AttachedUberShader { get { return default(UberShaderComponent); } }
        private void FixedUpdate() { }
    }
    public partial class UserLicenseInformation
    {
        private static readonly UserLicenseInformation Instance;
        private bool m_isActive;
        private bool m_isTrial;
        private UserLicenseInformation() { }
        public static bool IsFullVersion { get { return default(bool); } }
        public static bool IsTrial { get { return default(bool); } }
        public static bool IsTrialUsed { get { return default(bool); } }
        private static void .cctor() { }
        private void OnLicenseChanged() { }
    }
    public partial class Utility
    {
        public Utility() { }
        public static float Angle(float angle) { return default(float); }
        public static float AngleDifference(float value1, float value2) { return default(float); }
        public static UnityEngine.Bounds BoundsFromPoints(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2) { return default(UnityEngine.Bounds); }
        public static UnityEngine.Bounds BoundsFromPoints(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3) { return default(UnityEngine.Bounds); }
        public static UnityEngine.Bounds BoundsFromPoints(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Vector3 p3, UnityEngine.Vector3 p4) { return default(UnityEngine.Bounds); }
        public static UnityEngine.Bounds BoundsFromTransform(UnityEngine.Transform transform) { return default(UnityEngine.Bounds); }
        public static UnityEngine.Bounds BoundsOfBounds(UnityEngine.Matrix4x4 matrix, UnityEngine.Bounds bounds) { return default(UnityEngine.Bounds); }
        public static float Ceil(float value, float grid) { return default(float); }
        public static float ClampedAdd(float value, float offset, float min, float max) { return default(float); }
        public static float ClampedSubtract(float value, float offset, float min, float max) { return default(float); }
        public static float ColorDiff(UnityEngine.Color a, UnityEngine.Color b) { return default(float); }
        public static UnityEngine.Rect CombineRects(System.Collections.Generic.List<UnityEngine.Rect> rects) { return default(UnityEngine.Rect); }
        public static UnityEngine.Rect CombineRects(UnityEngine.Rect a, UnityEngine.Rect b) { return default(UnityEngine.Rect); }
        public static UnityEngine.Rect CombineRects(params UnityEngine.Rect[] rects) { return default(UnityEngine.Rect); }
        public static UnityEngine.Vector3 DirectionToVector(Utility.MoveDirection direction) { return default(UnityEngine.Vector3); }
        public static void DisableLate(UnityEngine.MonoBehaviour target) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private static System.Collections.IEnumerator DisableLater(UnityEngine.MonoBehaviour target) { return default(System.Collections.IEnumerator); }
        public static void DontAssociateWithAnyScene(UnityEngine.GameObject go) { }
        private static UnityEngine.Bounds EncapsulateChildren(UnityEngine.Transform trans, ref UnityEngine.Bounds current, ref bool hasBounds) { return default(UnityEngine.Bounds); }
        public static float Floor(float value, float grid) { return default(float); }
        public static T GetComponentUpwards<T>(UnityEngine.Transform transform) where T : UnityEngine.Component { return default(T); }
        public static UnityEngine.Vector3 LerpVector3(UnityEngine.Vector3 start, UnityEngine.Vector3 end, UnityEngine.Vector3 r) { return default(UnityEngine.Vector3); }
        public static bool LineInBox(UnityEngine.Rect rect, UnityEngine.Vector3 origin, UnityEngine.Vector3 delta) { return default(bool); }
        public static UnityEngine.Bounds LocalHierarchyBoundingBox(UnityEngine.GameObject gameObject) { return default(UnityEngine.Bounds); }
        public static string LowercaseFirstLetter(string s) { return default(string); }
        public static float MoveNumberTowards(float value, float target, float distance) { return default(float); }
        public static float Normalize(float x) { return default(float); }
        public static string NumberToString(int number, int digits) { return default(string); }
        public static string PathGoBack(string path) { return default(string); }
        public static UnityEngine.Rect RectFromBounds(UnityEngine.Bounds bounds) { return default(UnityEngine.Rect); }
        public static UnityEngine.Vector3 Rotate(UnityEngine.Vector3 v, float angle) { return default(UnityEngine.Vector3); }
        public static float RotateTowards(float value, float target, float distance) { return default(float); }
        public static float Round(float value, float grid) { return default(float); }
        public static UnityEngine.Rect Round(UnityEngine.Rect rect) { return default(UnityEngine.Rect); }
        public static UnityEngine.Rect Round(UnityEngine.Rect rect, float grid) { return default(UnityEngine.Rect); }
        public static UnityEngine.Vector3 Round(UnityEngine.Vector3 vector) { return default(UnityEngine.Vector3); }
        public static UnityEngine.Vector3 Round(UnityEngine.Vector3 vector, float grid) { return default(UnityEngine.Vector3); }
        public static UnityEngine.Vector3 Unrotate(UnityEngine.Vector3 v, float angle) { return default(UnityEngine.Vector3); }
        public static UnityEngine.Bounds WorldSpaceHierarchyBoundingBox(UnityEngine.GameObject gameObject) { return default(UnityEngine.Bounds); }
        public static int Wrap(int value, int min, int max) { return default(int); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <DisableLater>c__Iterator3E : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal UnityEngine.MonoBehaviour <$>target;
            internal UnityEngine.MonoBehaviour target;
            public <DisableLater>c__Iterator3E() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
        public enum MoveDirection
        {
            Down = 3,
            Left = 0,
            Right = 1,
            Up = 2,
        }
    }
    public partial class UWPIdentityUI : UnityEngine.MonoBehaviour
    {
        [NotNull]
        public UnityEngine.GameObject Group;
        public static bool IsVisible;
        private string m_username;
        [NotNull]
        public MessageBox Username;
        public UWPIdentityUI() { }
        private static void .cctor() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void Update() { }
    }
    public partial class UWPVideoPlayer : IVideoPlayer
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private string <Filename>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsPaused>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsPlaying>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private OnDelegate <OnPlaybackFinished>k__BackingField;
        public static OnDelegate OnPauseXAML;
        public static UWPVideoPlayer.OnPlayDelegate OnPlayXAML;
        public static OnDelegate OnStopXAML;
        public static OnDelegate OnXAMLFinished;
        public UWPVideoPlayer() { }
        public string Filename { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(string); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsPaused { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsPlaying { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public OnDelegate OnPlaybackFinished { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(OnDelegate); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Pause() { }
        public void Play() { }
        public void Stop() { }
        private void XAMLFinished() { }
        public delegate void OnPlayDelegate(string filename);
    }
    public partial class ValleyOfTheWindKuroDeathZone : UnityEngine.MonoBehaviour
    {
        public static System.Collections.Generic.List<ValleyOfTheWindKuroDeathZone> All;
        public UnityEngine.Bounds Bounds;
        public ValleyOfTheWindKuroDeathZone() { }
        private static void .cctor() { }
        public void FixedUpdate() { }
        public void OnDisable() { }
        public void OnDrawGizmos() { }
        public void OnEnable() { }
        public void Start() { }
    }
    public partial class ValleyOfTheWindKuroGameplayController : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public SoundProvider AttackSound;
        public float DeathDelay;
        public UnityEngine.GameObject FlyingKuro;
        private bool m_hasBeenSeen;
        private bool m_hasKilledPlayer;
        private float m_time;
        public ValleyOfTheWindKuroGameplayController() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        public void OnGameSerializeLoad() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class ValueInComponentProvider : FloatValueProvider
    {
        public UnityEngine.Component Component;
        private System.Reflection.FieldInfo m_valuefieldInfo;
        public string ValueVariableName;
        public ValueInComponentProvider() { }
        public void Awake() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class ValueWithMaxValue : SaveSerialize
    {
        private float m_value;
        public float MaxValue;
        public float StartValue;
        private System.Action ValueChanged;
        public ValueWithMaxValue() { }
        public float Value { get { return default(float); } set { } }
        public bool ValueIsMax { get { return default(bool); } }
        public event System.Action ValueChanged { add { } remove { } }
        public new void Awake() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class ValueWithMaxValueSerializer : SaveSerialize
    {
        public ValueWithMaxValue ValueWithMinMax;
        public ValueWithMaxValueSerializer() { }
        public override void Serialize(Archive ar) { }
    }
    public partial class Varying2DSoundProvider : SoundProvider
    {
        public System.Collections.Generic.List<UnityEngine.AudioClip> AudioClips;
        private static int[][] Indicies;
        public LowPassFilterSettings LowPassFilterSettings;
        private int m_index;
        public float MaxPitch;
        public float MinPitch;
        public MixerGroupType MixerGroup;
        public float ProviderVolume;
        public bool ShouldBePanned;
        public SoundSize SoundSize;
        public bool SyncToTime;
        public Varying2DSoundProvider() { }
        private static void .cctor() { }
        public override SoundDescriptor GetSound(IContext context) { return default(SoundDescriptor); }
    }
    public partial class VaryingAmbientSoundProvider : SoundProvider
    {
        public System.Collections.Generic.List<UnityEngine.AudioClip> AudioClips;
        private static int[][] Indicies;
        private int m_index;
        public MixerGroupType MixerGroup;
        public float ProviderVolume;
        public VaryingAmbientSoundProvider() { }
        private static void .cctor() { }
        public override SoundDescriptor GetSound(IContext context) { return default(SoundDescriptor); }
    }
    public partial class VaryingPrefabProvider : PrefabProvider
    {
        public System.Collections.Generic.List<UnityEngine.GameObject> Prefabs;
        public VaryingPrefabProvider() { }
        public override UnityEngine.GameObject Prefab(IContext context) { return default(UnityEngine.GameObject); }
    }
    public static partial class Vector2Extensions
    {
        public static UnityEngine.Vector2 Rotate(this UnityEngine.Vector2 v, float degrees) { return default(UnityEngine.Vector2); }
    }
    public partial class Vector2Helper
    {
        public Vector2Helper() { }
        public static float Cross(UnityEngine.Vector2 v, UnityEngine.Vector2 w) { return default(float); }
    }
    [CustomShaderModifier("Vertex color")]
    [UberShaderCategoryAttribute((UberShaderCategory)(8))]
    [UberShaderOrderAttribute((UberShaderOrder)(50))]
    public partial class VertexColorModifier : UberShaderModifier
    {
        public VertexColorModifier() { }
        public override bool RequiresVertexColor() { return default(bool); }
        public override void SetProperties() { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class VerticalCameraSettingsZone : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<VerticalCameraSettingsZone.CameraPostMetaData> <>f__am$cache7;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <Strength>k__BackingField;
        public static AllContainer<VerticalCameraSettingsZone> All;
        public CameraSettings CurrentSettings;
        public float Duration;
        public System.Collections.Generic.List<VerticalCameraSettingsZone.CameraPostMetaData> Items;
        private UnityEngine.Rect m_bounds;
        public float Time;
        public VerticalCameraSettingsZone() { }
        public float Strength { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]private set { } }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <SortItems>m__35(VerticalCameraSettingsZone.CameraPostMetaData a, VerticalCameraSettingsZone.CameraPostMetaData b) { return default(int); }
        public void Advance(UnityEngine.Vector2 position, float timeDelta) { }
        public bool IsInside(UnityEngine.Vector3 position) { return default(bool); }
        public void OnDisable() { }
        public void OnEnable() { }
        [UnityEngine.ContextMenu("Sort items")]
        public void SortItems() { }
        public void UpdateCameraSettings() { }
        public partial class CameraPostMetaData
        {
            public CameraSettings CameraSettings;
            public CameraSettingsAsset CameraSettingsAsset;
            public UnityEngine.Gradient Fog;
            public float FogRange;
            public float Time;
            public CameraPostMetaData() { }
            public void UpdateCameraSettings() { }
        }
    }
    public partial class VibrationSlider : CleverValueSlider
    {
        public VibrationSlider() { }
        public override float Value { get { return default(float); } set { } }
    }
    public partial class VibrationStrengthProvider : FloatValueProvider
    {
        public VibrationStrengthProvider() { }
        public override float GetFloatValue() { return default(float); }
    }
    public partial class VideoDescriptor : UnityEngine.ScriptableObject
    {
        private const string m_streamingFolderNameWinStandalone = "\\StreamingAssets";
        private const string m_streamingFolderNameXbox = "\\Raw";
        [UnityEngine.HideInInspector]
        public UnityEngine.MovieTexture MovieTexture;
        public string RelativeVideoPath;
        public VideoDescriptor() { }
        public string GetEditorAssetVideoOGVPath() { return default(string); }
        public string GetFullVideoOGVPath() { return default(string); }
        public static string GetStreamingFolderName() { return default(string); }
        public string GetStreamingVideoPath() { return default(string); }
        public string GetVideoPath() { return default(string); }
        public string GetVideoWMVPath() { return default(string); }
    }
    public partial class Vignette : UnityEngine.MonoBehaviour
    {
        public LegacyAnimator SeinHurt;
        public Vignette() { }
        private void Awake() { }
    }
    public partial class VignettingSettings
    {
        public float Intensity;
        public VignettingSettings() { }
        public VignettingSettings Clone() { return default(VignettingSettings); }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class VisibleOnWorldMap : GuidOwner
    {
        public WorldMapIconType Icon;
        public bool IsSecret;
        public UnityEngine.Vector2 Offset;
        public bool RevealWhenOnScreen;
        public VisibleOnWorldMap() { }
        public void FixedUpdate() { }
    }
    public partial class VisualLog : UnityEngine.MonoBehaviour
    {
        private System.Collections.Generic.List<string> m_log;
        private static VisualLog s_instance;
        public VisualLog() { }
        public static VisualLog Instance { get { return default(VisualLog); } }
        public static void Disable() { }
        private static void OnLog(string message, string stack, UnityEngine.LogType logType) { }
        public static void RegisterStatus(UnityEngine.MonoBehaviour behaviour) { }
    }
    public partial class VSyncToggler : UnityEngine.MonoBehaviour, IDebugMenuToggleable
    {
        private int m_currentOption;
        public VSyncToggler() { }
        public int CurrentToggleOptionId { get { return default(int); } set { } }
        public string HelpText { get { return default(string); } }
        public string Name { get { return default(string); } }
        public string[] ToggleOptions { get { return default(string[]); } }
        public void Awake() { }
    }
    public partial class WaitAction : PerformingAction, ISuspendable
    {
        public Condition Condition;
        public float Duration;
        [UnityEngine.HideInInspector]
        public PerformingAction LastAction;
        public bool LastActionFinished;
        private IContext m_context;
        private bool m_isSuspended;
        private float m_remainingTime;
        private float m_time;
        public WaitAction() { }
        public override bool IsPerforming { get { return default(bool); } }
        public bool IsSuspended { get { return default(bool); } set { } }
        public bool OtherStuff { get { return default(bool); } }
        public override void Awake() { }
        public void FixedUpdate() { }
        public override string GetNiceName() { return default(string); }
        public override void OnDestroy() { }
        public override void Perform(IContext context) { }
        public override void Stop() { }
    }
    public partial class WaitForConditionAction : ActionMethod
    {
        [NotNull]
        public ActionMethod Action;
        [NotNull]
        public Condition Condition;
        public float MaxWaitTime;
        public WaitForConditionAction() { }
        public override void Perform(IContext context) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public System.Collections.IEnumerator WaitAndPerform(IContext context) { return default(System.Collections.IEnumerator); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <WaitAndPerform>c__Iterator9 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal IContext <$>context;
            internal WaitForConditionAction <>f__this;
            internal float <time>__0;
            internal IContext context;
            public <WaitAndPerform>c__Iterator9() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class WaitForSaveGameLogic : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache2;
        public ActionMethod OnCompleted;
        public static System.Action OnCompletedStatic;
        public WaitForSaveGameLogic() { }
        private static void .cctor() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnCompletedStatic>m__1D() { }
        public void FixedUpdate() { }
    }
    public partial class WarmupMenuAction : ActionMethod
    {
        public WarmupMenuAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class WasLastInputKeyboardCondition : Condition
    {
        public WasLastInputKeyboardCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class WatchCutsceneAction : ActionMethod
    {
        public WatchCutsceneAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class WaterAreaMapCanvasOverlay : AreaMapCanvasOverlay
    {
        public UnityEngine.Color CleanWater;
        public UnityEngine.Color DirtyWater;
        public WaterAreaMapCanvasOverlay() { }
        public void OnEnable() { }
    }
    [CustomShaderModifier("Water Debris")]
    [UberShaderCategoryAttribute((UberShaderCategory)(4))]
    [UberShaderOrderAttribute((UberShaderOrder)(20))]
    [UnityEngine.ExecuteInEditMode]
    public partial class WaterDebrisModifier : UberShaderModifier
    {
        public UberShaderFloat DistortStrength;
        private UberWaterControl m_control;
        public WaterDebrisModifier() { }
        public override void SetProperties() { }
    }
    [CustomShaderModifier("WaterLine")]
    [UberShaderCategoryAttribute((UberShaderCategory)(4))]
    [UberShaderOrderAttribute((UberShaderOrder)(18))]
    [UnityEngine.ExecuteInEditMode]
    public partial class WaterLineModifier : UberShaderModifier, IDynamicGraphic
    {
        public bool DynamicWater;
        private int m_frame;
        private UnityEngine.Vector3 m_prevPos;
        private UberWaterControl m_water;
        public UberShaderColor WaterlineColor;
        public UberShaderVector WaterlineSettings;
        public WaterLineModifier() { }
        public override bool DoStrip() { return default(bool); }
        private void OnEnable() { }
        public override void SetProperties() { }
        private void Update() { }
    }
    public partial class WaterPurityLogic : UnityEngine.MonoBehaviour, IDynamicGraphicHierarchy
    {
        [NotNull]
        public UnityEngine.GameObject CleanGroup;
        [NotNull]
        public UnityEngine.GameObject DiseasedGroup;
        public WaterPurityLogic() { }
        public void FixedUpdate() { }
    }
    public partial class WaterReflectionRenderer : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Camera camera;
        private Water m_water;
        public WaterReflectionRenderer() { }
        private void LateUpdate() { }
        private void Start() { }
    }
    public partial class WaterThatRockFallsInto : UnityEngine.MonoBehaviour
    {
        public float AngularFriction;
        public float AngularVelocityMultiplier;
        public float BounceDamp;
        public UnityEngine.Vector2 EnterWaterDamp;
        public float FloatHeight;
        public float MaxAngularVelocity;
        public UnityEngine.GameObject SplashEffect;
        public float WaterHorizontalFriction;
        public float WaterHorizontalMaxVelocity;
        public float WaterHorizontalMultiplier;
        public WaterThatRockFallsInto() { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class WaterZone : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Rect Bounds;
        public int Damage;
        public bool HasTopSurface;
        private UnityEngine.Vector3 m_previousPosition;
        private UnityEngine.Vector3 m_previousScale;
        public WaterZone() { }
        public void FixedUpdate() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public static bool PositionInWater(UnityEngine.Vector3 position) { return default(bool); }
    }
    public partial class WeakPrefab
    {
        public string GUID;
        public string Name;
        public int PrewarmAmount;
        public WeakPrefab() { }
    }
    public partial class WideScreenAdjustmentAnimator : BaseAnimator
    {
        private CameraPuppetController m_puppet;
        public UnityEngine.AnimationCurve WideScreenHorizontalPanCurve;
        public UnityEngine.AnimationCurve WideScreenVerticalPanCurve;
        public UnityEngine.AnimationCurve WideScreenZoomCurve;
        public WideScreenAdjustmentAnimator() { }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public new void OnDestroy() { }
        public void OnGameReset() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
    }
    public partial class WideScreenAdjustmentSettings
    {
        public bool Enabled;
        [UnityEngine.RangeAttribute(-2f, 2f)]
        public float HorizontalPanStrength;
        [UnityEngine.RangeAttribute(-2f, 2f)]
        public float VerticalPanStrength;
        [UnityEngine.RangeAttribute(0f, 1f)]
        public float ZoomStrength;
        public WideScreenAdjustmentSettings() { }
        public void ApplyToPuppet(CameraPuppetController puppet) { }
    }
    public partial class WindArea : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsOverlapping>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private UnityEngine.Transform <Transform>k__BackingField;
        public bool CancelGravity;
        public float HorizontalAcceleration;
        public UnityEngine.AnimationCurve HorizontalAccelerationOverSpeed;
        public bool RequiresWindRestored;
        public float Speed;
        public float VerticalAcceleration;
        public UnityEngine.AnimationCurve VerticalAccelerationOverSpeed;
        public WindArea() { }
        public bool IsOverlapping { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public UnityEngine.Transform Transform { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(UnityEngine.Transform); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float WindHorizontalAcceleration { get { return default(float); } }
        public UnityEngine.Vector3 WindSpeed { get { return default(UnityEngine.Vector3); } }
        public float WindVerticalAcceleration { get { return default(float); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnOverlap(UnityEngine.Collider collider) { }
        public void OnTriggerEnter(UnityEngine.Collider collider) { }
        public void OnTriggerStay(UnityEngine.Collider collider) { }
    }
    public partial class WindowManager : UnityEngine.MonoBehaviour
    {
        private const int GWL_STYLE = -16;
        private int height;
        private int lastProps;
        private bool m_borderless;
        private int m_borderlessSetCounter;
        private bool m_firstTime;
        private bool m_fullScreen;
        private float m_lastTimeCheckedMinimized;
        private bool m_wasFocused;
        private const int SWP_SHOWWINDOW = 64;
        private bool wasFullScreen;
        private int width;
        private const int WS_BORDER = 8388608;
        private const int WS_CAPTION = 12582912;
        private const int WS_MAXIMIZE = 16777216;
        private const int WS_MAXIMIZEBOX = 65536;
        private const int WS_MINIMIZE = 536870912;
        private const int WS_MINIMIZEBOX = 131072;
        private const int WS_SIZEBOX = 262144;
        private const int WS_SYSMENU = 524288;
        public WindowManager() { }
        public void Awake() { }
        [System.Runtime.InteropServices.DllImport("user32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static bool DrawMenuBar(System.IntPtr hWnd) { return default(bool); }
        [System.Runtime.InteropServices.DllImport("user32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static System.IntPtr FindWindowByCaption(System.IntPtr ZeroOnly, string lpWindowName) { return default(System.IntPtr); }
        [System.Runtime.InteropServices.DllImport("user32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static System.IntPtr GetActiveWindow() { return default(System.IntPtr); }
        [System.Runtime.InteropServices.DllImport("user32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static System.IntPtr GetFocus() { return default(System.IntPtr); }
        [System.Runtime.InteropServices.DllImport("user32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static System.IntPtr GetForegroundWindow() { return default(System.IntPtr); }
        [System.Runtime.InteropServices.DllImport("USER32.DLL")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int GetWindowLong(System.IntPtr hWnd, int index) { return default(int); }
        [System.Runtime.InteropServices.DllImport("user32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static bool GetWindowRect(System.IntPtr hWnd, out RECT lpRect) { lpRect = default(RECT); return default(bool); }
        public bool HasFocus() { return default(bool); }
        public bool IsFullScreen() { return default(bool); }
        public bool IsMaximized() { return default(bool); }
        public bool IsMinimized() { return default(bool); }
        public void KickWindow() { }
        public void MakeBordered() { }
        public int MakeBorderless() { return default(int); }
        [System.Runtime.InteropServices.DllImport("USER32.DLL")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static int SetWindowLong(System.IntPtr hWnd, int nIndex, int dwNewLong) { return default(int); }
        [System.Runtime.InteropServices.DllImport("user32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]public static System.IntPtr SetWindowPos(System.IntPtr hWnd, int hWndInsertAfter, int x, int Y, int cx, int cy, int wFlags) { return default(System.IntPtr); }
        [System.Runtime.InteropServices.DllImport("user32.dll")][System.Runtime.CompilerServices.MethodImpl(System.Runtime.CompilerServices.MethodImplOptions.PreserveSig)]private static bool ShowWindow(System.IntPtr hwnd, int nCmdShow) { return default(bool); }
        public void Update() { }
        public void UpdateWindowProperties(int properties) { }
    }
    public enum WindowState
    {
        FullScreen = 0,
        Maximized = 2,
        Windowed = 1,
    }
    public partial class WindowsVideoPlayer : AVProWindowsMediaMovie, IVideoPlayer
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsPaused>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private OnDelegate <OnPlaybackFinished>k__BackingField;
        public WindowsVideoPlayer() { }
        public string Filename { set { } }
        public bool IsPaused { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public bool IsPlaying { get { return default(bool); } }
        public OnDelegate OnPlaybackFinished { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(OnDelegate); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void MovieFinished() { }
        public new void Pause() { }
        public new void Play() { }
        public void Stop() { }
    }
    public partial class WindSegment : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public WindVent FinishVent;
        private UnityEngine.Rect m_bounds;
        private float m_remainingTime;
        private WindSegment.State m_state;
        public float MaxTime;
        public float MinTime;
        public UnityEngine.Transform Trigger;
        public WindSegment() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public override void Awake() { }
        public void Finish() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        public void OnEntered() { }
        public void OnVisitedNextSegment() { }
        public override void Serialize(Archive ar) { }
        private enum State
        {
            End = 2,
            Start = 0,
            Timed = 1,
        }
    }
    public partial class WindShaftController : UnityEngine.MonoBehaviour
    {
        public static WindShaftController Instance;
        public System.Collections.Generic.List<WindSegment> Segments;
        public WindShaftController() { }
        public void Awake() { }
        public WindSegment FindPrevious(WindSegment windSegment) { return default(WindSegment); }
        public void OnDestroy() { }
    }
    public partial class WindSpeedAnimator : LegacyAnimator
    {
        public WindArea Area;
        private float m_windSpeed;
        public WindSpeedAnimator() { }
        protected override void AnimateIt(float value) { }
        public override void RestoreToOriginalState() { }
        public override void Start() { }
    }
    public partial class WindVent : SaveSerialize, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public float AnticipationDuration;
        public UnityEngine.GameObject AnticipationEffect;
        public float BurstDuration;
        public UnityEngine.GameObject BurstEffect;
        public float CooldownDuration;
        public UnityEngine.GameObject ImpactEffect;
        public UnityEngine.Transform ImpactEffectLocator;
        public UnityEngine.GameObject KillZone;
        public bool Looping;
        private float m_currentStateTime;
        private bool m_hasErrupted;
        private WindVent.State m_state;
        private UnityEngine.ParticleSystem[] m_windBeamParticleSystems;
        public bool StartAutomatically;
        public float TimeOffset;
        public UnityEngine.GameObject VentGraphic;
        public BaseAnimator WindAnimator;
        public UnityEngine.GameObject WindBeam;
        public WindVent() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void ActivateVentGraphic(bool active) { }
        public override void Awake() { }
        public void ChangeState(WindVent.State state) { }
        public void DisableBeamParticleEmission() { }
        public void EnableBeamParticleEmission() { }
        public void FixedUpdate() { }
        public override void OnDestroy() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
        public void StartAnticipation() { }
        public void StartBurst() { }
        public void StartCooldown() { }
        public enum State
        {
            Anticipation = 1,
            Burst = 2,
            CoolDown = 3,
            InitialState = 0,
        }
    }
    public partial class WindZoneVisualizer : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        private WindArea m_windArea;
        public WindZoneVisualizer() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private void Awake() { }
        private void FixedUpdate() { }
        public void OnDestroy() { }
    }
    public partial class WispMessageProvider : MessageProvider
    {
        public MessageProvider Message;
        public WispMessageProvider() { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        public override System.Collections.Generic.IEnumerable<MessageDescriptor> GetMessages() { return default(System.Collections.Generic.IEnumerable<MessageDescriptor>); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetMessages>c__Iterator1E : System.Collections.Generic.IEnumerable<MessageDescriptor>, System.Collections.Generic.IEnumerator<MessageDescriptor>, System.Collections.IEnumerable, System.Collections.IEnumerator, System.IDisposable
        {
            internal MessageDescriptor $current;
            internal int $PC;
            internal WispMessageProvider <>f__this;
            internal DeathInformation <deathInformation>__0;
            internal int <hours>__2;
            internal string <message>__5;
            internal int <minutes>__3;
            internal int <seconds>__4;
            internal int <totalSeconds>__1;
            public <GetMessages>c__Iterator1E() { }
            MessageDescriptor System.Collections.Generic.IEnumerator<MessageDescriptor>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(MessageDescriptor); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.Generic.IEnumerator<MessageDescriptor> System.Collections.Generic.IEnumerable<MessageDescriptor>.GetEnumerator() { return default(System.Collections.Generic.IEnumerator<MessageDescriptor>); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() { return default(System.Collections.IEnumerator); }
        }
    }
    public partial class WontSurviveAssemblyReload
    {
        public WontSurviveAssemblyReload() { }
    }
    public partial class WorldCoordinatesMap : UnityEngine.MonoBehaviour
    {
        public WorldCoordinatesMap.SegmentDirection Direction;
        public WorldCoordinatesMap.SegmentInfo[] Segments;
        public WorldCoordinatesMap() { }
        public bool IsInside(UnityEngine.Vector2 position) { return default(bool); }
        public UnityEngine.Vector3 LocalToWorld(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public void OnDrawGizmos() { }
        public UnityEngine.Vector3 WorldToLocal(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public enum SegmentDirection
        {
            Horizontal = 0,
            Vertical = 1,
        }
        public partial class SegmentInfo
        {
            public float High;
            public float Low;
            public float Spacing;
            public SegmentInfo() { }
        }
    }
    public partial class WorldEvents : GuidOwner
    {
        public int DefaultValue;
        public System.Collections.Generic.List<WorldEvents.Item> Items;
        public int UniqueID;
        public WorldEvents() { }
        public int GetIDFromName(string eventName) { return default(int); }
        public string GetNameFromID(int id) { return default(string); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetIDFromName>c__AnonStorey6D
        {
            internal string eventName;
            public <GetIDFromName>c__AnonStorey6D() { }
            internal bool <>m__14E(WorldEvents.Item a) { return default(bool); }
        }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <GetNameFromID>c__AnonStorey6C
        {
            internal int id;
            public <GetNameFromID>c__AnonStorey6C() { }
            internal bool <>m__14D(WorldEvents.Item a) { return default(bool); }
        }
        public partial class Item
        {
            public int ID;
            public string Name;
            public Item() { }
        }
    }
    public partial class WorldEventsManager
    {
        public readonly System.Collections.Generic.List<WorldEventsRuntime> All;
        public static WorldEventsManager Instance;
        private readonly System.Collections.Generic.Dictionary<MoonGuid, WorldEventsRuntime> m_worldEvents;
        public WorldEventsManager() { }
        private static void .cctor() { }
        public WorldEventsRuntime Find(WorldEvents worldEvents) { return default(WorldEventsRuntime); }
        public void OnGameReset() { }
        public void Serialize(Archive ar) { }
    }
    public partial class WorldEventsOnAwake : UnityEngine.MonoBehaviour
    {
        public System.Collections.Generic.List<WorldEventsOnAwake.WorldEventState> WorldEventStates;
        public WorldEventsOnAwake() { }
        public void Apply() { }
        public partial class WorldEventState
        {
            public int State;
            public WorldEvents WorldEvent;
            public WorldEventState() { }
        }
    }
    public partial class WorldEventsRuntime : ISerializable
    {
        public int Value;
        public WorldEventsRuntime(int defaultValue) { }
        public void Serialize(Archive ar) { }
    }
    public enum WorldMapAreaState
    {
        Discovered = 1,
        Hidden = 0,
        Visited = 2,
    }
    public enum WorldMapAreaType
    {
        Normal = 0,
    }
    public partial class WorldMapCompleteObjective : ActionMethod
    {
        public Objective Objective;
        public WorldMapCompleteObjective() { }
        public override void Perform(IContext context) { }
    }
    public enum WorldMapIconType
    {
        AbilityPedestal = 10,
        AbilityPoint = 14,
        BreakableWall = 2,
        BreakableWallBroken = 3,
        EnergyGateEight = 21,
        EnergyGateFour = 23,
        EnergyGateOpen = 7,
        EnergyGateSix = 22,
        EnergyGateTen = 20,
        EnergyGateTwelve = 19,
        EnergyGateTwo = 6,
        EnergyUpgrade = 12,
        Experience = 17,
        HealthUpgrade = 11,
        Invisible = 16,
        Keystone = 0,
        KeystoneDoorFour = 8,
        KeystoneDoorOpen = 9,
        KeystoneDoorTwo = 15,
        Mapstone = 1,
        MapstonePickup = 18,
        SavePedestal = 13,
        StompableFloor = 4,
        StompableFloorBroken = 5,
    }
    public partial class WorldMapLogic : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public static WorldMapLogic Instance;
        private int m_fixedUpdateCounter;
        private static UnityEngine.Vector2[] m_samplePositions;
        public CageStructureTool MapEnabledArea;
        private const int PlayerPositionUpdatePollFrequency = 3;
        public WorldMapLogic() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        public void Awake() { }
        public RuntimeGameWorldArea FindAreaFromPosition(UnityEngine.Vector3 cameraPosition) { return default(RuntimeGameWorldArea); }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void UpdateCurrentArea() { }
    }
    [CustomShaderModifier("Worldmap")]
    [UberShaderCategoryAttribute((UberShaderCategory)(8))]
    [UberShaderOrderAttribute((UberShaderOrder)(54))]
    public partial class WorldmapModifier : UberShaderModifier
    {
        public UberShaderFloat Fade;
        public UberShaderTexture WorldMapMaskA;
        public UberShaderTexture WorldMapMaskB;
        public WorldmapModifier() { }
        public override void SetProperties() { }
    }
    public partial class WorldMapOverworldArea : UnityEngine.MonoBehaviour
    {
        public GameWorldArea Area;
        public UnityEngine.GameObject Fog;
        private CleverMenuItem m_cleverMenu;
        public RuntimeGameWorldArea RuntimeArea;
        public WorldMapOverworldArea() { }
        public bool IsDiscovered { get { return default(bool); } }
        public UnityEngine.Vector3 ScrollPosition { get { return default(UnityEngine.Vector3); } }
        public void Awake() { }
        public void FixedUpdate() { }
        public void OnEnable() { }
    }
    public partial class WorldMapOverworldAreaCondition : Condition
    {
        public WorldMapOverworldAreaCondition() { }
        public override bool Validate(IContext context) { return default(bool); }
    }
    public partial class WorldMapOverworldLogic : UnityEngine.MonoBehaviour
    {
        public CageStructureTool CageStructureTool;
        public static WorldMapOverworldLogic Instance;
        public WorldCoordinatesMap[] MapCoordinates;
        public WorldCoordinatesMap[] WorldCoordinates;
        public WorldMapOverworldLogic() { }
        public void Awake() { }
        public void OnDestroy() { }
        public void OnGameReset() { }
        public UnityEngine.Vector3 WorldToOverworld(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
    }
    public partial class WorldMapRemoveObjective : ActionMethod
    {
        public Objective Objective;
        public WorldMapRemoveObjective() { }
        public override void Perform(IContext context) { }
    }
    public partial class WorldMapSetObjectiveTextAction : ActionMethod
    {
        public NewObjectiveMessageProvider NewObjectiveMessageProvider;
        public MessageProvider ObjectiveText;
        public WorldMapSetObjectiveTextAction() { }
        public override void Perform(IContext context) { }
    }
    public partial class WorldMapUI : UnityEngine.MonoBehaviour
    {
        public bool Activated;
        public UnityEngine.Camera Camera;
        public UnityEngine.Vector3 CameraOffset;
        public CameraSettingsAsset CameraSettingsAsset;
        public float CloseZoom;
        public TransparencyAnimator CrossFade;
        public FogGradientController Fog;
        public float FullZoom;
        public static WorldMapUI Instance;
        private CameraSettings m_cameraSettings;
        private static bool m_cancelLoading;
        private bool m_enabled;
        private bool m_ignoreNavigationMenuItemChange;
        private static bool m_isLoadingWorldMapScene;
        public CleverMenuItemSelectionManager NavigationManager;
        public UnityEngine.Transform PlayerMarker;
        public UnityEngine.Transform ProjectionPlane;
        public UnityEngine.AnimationCurve ZoomXYCurve;
        public UnityEngine.AnimationCurve ZoomZCurve;
        public WorldMapUI() { }
        public static CameraSettings CameraSettings { get { return default(CameraSettings); } }
        public UnityEngine.Vector3 ClosePosition { get { return default(UnityEngine.Vector3); } }
        public WorldMapOverworldArea CurrentArea { get { return default(WorldMapOverworldArea); } }
        public UnityEngine.Transform FadeOutGroup { get { return default(UnityEngine.Transform); } }
        public UnityEngine.Vector3 FarPosition { get { return default(UnityEngine.Vector3); } }
        public static bool IsReady { get { return default(bool); } }
        public UnityEngine.Vector3 ScrollPosition { get { return default(UnityEngine.Vector3); } }
        public static bool UseCameraSettings { get { return default(bool); } }
        public float ZoomTime { get { return default(float); } }
        private static void .cctor() { }
        public void Activate() { }
        public void Awake() { }
        public static void CancelLoading() { }
        public void Deactivate() { }
        public void FixedUpdate() { }
        public void HideAreaSelection() { }
        public static void Initialize() { }
        public void OnDestroy() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public static void OnFinishedLoading(SceneRoot sceneRoot) { }
        public void OnMenuItemChange() { }
        public void ShowAreaSelection() { }
        public void UpdateCameraPosition() { }
        public UnityEngine.Vector3 WorldToProjectedPosition(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public UnityEngine.Vector3 WorldToScreenToUI(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
        public UnityEngine.Vector3 WorldToUIPosition(UnityEngine.Vector3 position) { return default(UnityEngine.Vector3); }
    }
    public enum WorldProgression
    {
        AfterNest = 70,
        EnteredGinsoTree = 30,
        Finished = 90,
        FinishedGinsoTree = 40,
        MistLifted = 50,
        Prologue = 0,
        SpiritTreeReached = 20,
        StartOfGame = 10,
        WarmthReturned = 80,
        WindRestored = 60,
    }
    public enum WorldState
    {
        DarknessLifted = 13,
        ForlornRuinsKey = 10,
        GinsoTreeEntered = 5,
        GinsoTreeKey = 3,
        GravityActivated = 8,
        GumoFree = 1,
        MistLifted = 9,
        MountHoruKey = 11,
        SpiritTreeReached = 2,
        WarmthReturned = 12,
        WaterPurified = 0,
        WindRestored = 7,
    }
    public partial class WormChargingState : WormState
    {
        private readonly TextureAnimationWithTransitions m_charging;
        private readonly PrefabSpawner m_chargingEffect;
        public WormChargingState(WormEnemy worm, TextureAnimationWithTransitions charging, PrefabSpawner chargingEffect) : base (default(WormEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class WormEmergingState : WormState
    {
        private readonly TextureAnimationWithTransitions m_emerging;
        private readonly PrefabSpawner m_emergingEffect;
        private readonly SoundSource m_emergingSound;
        public WormEmergingState(WormEnemy worm, TextureAnimationWithTransitions emerging, PrefabSpawner emergingEffect, SoundSource emergingSound) : base (default(WormEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class WormEnemy : Enemy
    {
        public WormEnemy() { }
    }
    public partial class WormHiddenState : WormState
    {
        private readonly TextureAnimationWithTransitions m_hidden;
        public WormHiddenState(WormEnemy worm, TextureAnimationWithTransitions hidden) : base (default(WormEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
    }
    public partial class WormHidingState : WormState
    {
        private readonly TextureAnimationWithTransitions m_hiding;
        private readonly PrefabSpawner m_hidingEffect;
        private readonly SoundSource m_hidingSound;
        public WormHidingState(WormEnemy worm, TextureAnimationWithTransitions hiding, PrefabSpawner hidingEffect, SoundSource hidingSound) : base (default(WormEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class WormHole : SaveSerialize, IDynamicGraphicHierarchy
    {
        public bool HiddenAtStart;
        public WormHole() { }
        public UnityEngine.Vector3 Position { get { return default(UnityEngine.Vector3); } }
        public UnityEngine.Quaternion Rotation { get { return default(UnityEngine.Quaternion); } }
        public void OnEmerge() { }
        public override void Serialize(Archive ar) { }
        public void Start() { }
    }
    public partial class WormHoleManager : UnityEngine.MonoBehaviour, ISuspendable
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private bool <IsSuspended>k__BackingField;
        public bool IsAggressive;
        private WormHole m_lastHole;
        private MortarWormEnemy m_mortarWormEnemy;
        private float m_timeBetweenHolesRemaining;
        private WormHole[] m_wormHoles;
        private const float TimeBetweenHoles = 3f;
        public WormHoleManager() { }
        public bool IsSuspended { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void Awake() { }
        public MortarWormEnemy FindMortarWorm() { return default(MortarWormEnemy); }
        public void FixedUpdate() { }
        public void OnDestroy() { }
        public void OnMortarHide(MortarWormEnemy mortarWormEnemy) { }
        public void ResetHole() { }
    }
    public partial class WormIdleState : WormState
    {
        private readonly TextureAnimationWithTransitions m_idle;
        public WormIdleState(WormEnemy worm, TextureAnimationWithTransitions idle) : base (default(WormEnemy)) { }
        public override void OnEnter() { }
    }
    public partial class WormMortarShootingState : WormState
    {
        private bool m_hasShot;
        private UnityEngine.Vector3 m_projectileAnimationPosition;
        private readonly float m_projectileDamage;
        private readonly ProjectileSpawner m_projectileSpawner;
        private readonly MortarWormDirectionalAnimations m_shoot;
        private readonly float m_shootDelay;
        private readonly PrefabSpawner m_shootEffect;
        private readonly SoundSource m_shootSound;
        public WormMortarShootingState(WormEnemy worm, MortarWormDirectionalAnimations shoot, PrefabSpawner shootEffect, SoundSource shootSound, ProjectileSpawner projectileSpawner, float shootDelay, float projectileDamage) : base (default(WormEnemy)) { }
        public override void OnEnter() { }
        public override void OnExit() { }
        public override void UpdateState() { }
    }
    public partial class WormState : fsm.IState
    {
        protected WormEnemy Worm;
        public WormState(WormEnemy worm) { }
        public float CurrentStateTime { get { return default(float); } }
        public virtual void OnEnter() { }
        public virtual void OnExit() { }
        public virtual void UpdateState() { }
    }
    public partial class WriteOutTextBox : BaseAnimator
    {
        public float LettersPerSecond;
        private float m_lastLetterIndex;
        public MessageBox MessageBox;
        public WriteOutTextBox() { }
        public bool AtEnd { get { return default(bool); } }
        public override float Duration { get { return default(float); } }
        public override bool IsLooping { get { return default(bool); } }
        public new void Awake() { }
        public override void CacheOriginals() { }
        public void GoToEnd() { }
        public void GoToStart() { }
        public new void OnDestroy() { }
        public void OnTextChange() { }
        public override void RestoreToOriginalState() { }
        public override void SampleValue(float value, bool forceSample) { }
        public void SetValue(float time) { }
        public new void Start() { }
        public void Stop() { }
    }
    public partial class XboxLiveController : UnityEngine.MonoBehaviour
    {
        public static XboxLiveController Instance;
        public static bool IsContentPackage;
        public bool IsDebugEnabled;
        [UnityEngine.HideInInspector]
        public LeaderboardsUI LeaderboardsUI;
        private System.Collections.Generic.Dictionary<int, bool> m_controllers;
        private XboxLiveController.State m_currentState;
        private int m_currentUserIndex;
        private System.Action m_onStartPressedCallback;
        private int m_signedInUserCount;
        private System.Collections.Generic.Dictionary<int, PlayerState> m_signedInUsers;
        [UnityEngine.HideInInspector]
        public SessionController SessionController;
        [UnityEngine.HideInInspector]
        public XboxStorageController StorageController;
        public XboxLiveController() { }
        public bool IsTrial { get { return default(bool); } }
        private static void .cctor() { }
        private void AskForStorageDevice() { }
        private void Awake() { }
        private void ChangeState(XboxLiveController.State state) { }
        private void FixedUpdate() { }
        public int GetCurrentUserIndex() { return default(int); }
        public static ulong GetFullOfferID() { return default(ulong); }
        public PlayerState GetPlayerState(int userIndex) { return default(PlayerState); }
        public int GetSignedInUserCount() { return default(int); }
        private void InitUsers() { }
        public bool IsAnyControllerConnected() { return default(bool); }
        public bool IsAnyUserSignedIn(bool onlyOnline) { return default(bool); }
        public bool IsControllerConnected(int index) { return default(bool); }
        public bool IsCurrentUserSignedIn(bool onlyOnline) { return default(bool); }
        public bool IsIdle() { return default(bool); }
        public bool IsReady() { return default(bool); }
        private bool IsSystemUIVisible() { return default(bool); }
        public bool IsUserSignedIn(int userIndex, bool onlyOnline) { return default(bool); }
        private void OnControllerStateChange(uint index, bool connected) { }
        private void OnSystemUIVisibilityChange() { }
        private void OnUserStateChange() { }
        private void RequestSignIn() { }
        public void Reset() { }
        public void SetReady() { }
        private void Start() { }
        public void StartPressedOnMainMenu(System.Action onStartPressedCallback) { }
        private enum State
        {
            Idle = 0,
            Ready = 2,
            Start = 1,
        }
    }
    public partial class XboxMarketplace
    {
        public XboxMarketplace() { }
        public static void ShowPurchaseFullGameOffer() { }
    }
    public partial class XboxOne : UnityEngine.MonoBehaviour
    {
        private static uint m_titleId;
        public XboxOne() { }
        public static bool ControllerReady { get { return default(bool); } }
        public static bool Ready { get { return default(bool); } }
        public static uint TitleId { get { return default(uint); } }
        private static void .cctor() { }
        public static void ErrorHelp(string context, uint errorID) { }
        public static bool Help() { return default(bool); }
        private partial class DirectXTex
        {
            public DirectXTex() { }
        }
    }
    public partial class XboxOneAchievements
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <EnableAchievements>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<Achievement> <OnAchievementUnlocked>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<Challenge> <OnChallengeUnlocked>k__BackingField;
        private static System.Collections.ObjectModel.ReadOnlyCollection<Achievement> s_emptyAchievements;
        private static System.Collections.ObjectModel.ReadOnlyCollection<Challenge> s_emptyChallenges;
        public XboxOneAchievements() { }
        public static bool AchievementsFetched { get { return default(bool); } }
        public static bool EnableAchievements { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Achievement> LockedAchievements { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Achievement>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Challenge> LockedChallenges { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Challenge>); } }
        public static System.Action<Achievement> OnAchievementUnlocked { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action<Achievement>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action<Challenge> OnChallengeUnlocked { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action<Challenge>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Achievement> SecretAchievements { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Achievement>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Challenge> SecretChallenges { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Challenge>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Achievement> UnlockedAchievements { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Achievement>); } }
        public static System.Collections.ObjectModel.ReadOnlyCollection<Challenge> UnlockedChallenges { get { return default(System.Collections.ObjectModel.ReadOnlyCollection<Challenge>); } }
        private static void .cctor() { }
        public static bool AwardAchievement(AchievementAsset achievement, System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool UpdateAchievements(System.Action success=null, System.Action failure=null) { return default(bool); }
    }
    public partial class XboxOneController : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnActiveControllerDisconnect>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnLastControllerDisconnect>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<int> <OnWillSwitchController>k__BackingField;
        private const int kButtonCount = 14;
        private const float kStickSwitchLimit = 0.1f;
        public const float kTriggerPressLimit = 0.5f;
        private bool m_lockPressingStart;
        public XboxOneController() { }
        public static ulong ActiveController { get { return default(ulong); } }
        public static int ActiveGamepad { get { return default(int); } set { } }
        public static bool AutoSwitchController { get { return default(bool); } set { } }
        public static System.Action OnActiveControllerDisconnect { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnLastControllerDisconnect { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action<int> OnWillSwitchController { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action<int>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static float GetAxis(XboxOneController.Axis axis) { return default(float); }
        public static int GetGamepadPressingStart() { return default(int); }
        public static bool MakeFirstGamepadCurrent() { return default(bool); }
        public static bool RequireGamepad(System.Action success=null) { return default(bool); }
        public static bool ResetControllerVibration() { return default(bool); }
        public static void ResetCurrentGamepad() { }
        public static void UpdateGamepads() { }
        public static bool Vibrate(float left, float right, float leftTrigger, float rightTrigger, float duration) { return default(bool); }
        public enum Axis
        {
            DpadX = 7,
            DpadY = 8,
            Gamepad1DpadX = 16,
            Gamepad1DpadY = 17,
            Gamepad1LeftStickX = 9,
            Gamepad1LeftStickY = 10,
            Gamepad1LeftTrigger = 14,
            Gamepad1RightStickX = 11,
            Gamepad1RightStickY = 12,
            Gamepad1RightTrigger = 15,
            Gamepad1Trigger = 13,
            Gamepad2DpadX = 25,
            Gamepad2DpadY = 26,
            Gamepad2LeftStickX = 18,
            Gamepad2LeftStickY = 19,
            Gamepad2LeftTrigger = 23,
            Gamepad2RightStickX = 20,
            Gamepad2RightStickY = 21,
            Gamepad2RightTrigger = 24,
            Gamepad2Trigger = 22,
            Gamepad3DpadX = 34,
            Gamepad3DpadY = 35,
            Gamepad3LeftStickX = 27,
            Gamepad3LeftStickY = 28,
            Gamepad3LeftTrigger = 32,
            Gamepad3RightStickX = 29,
            Gamepad3RightStickY = 30,
            Gamepad3RightTrigger = 33,
            Gamepad3Trigger = 31,
            Gamepad4DpadX = 43,
            Gamepad4DpadY = 44,
            Gamepad4LeftStickX = 36,
            Gamepad4LeftStickY = 37,
            Gamepad4LeftTrigger = 41,
            Gamepad4RightStickX = 38,
            Gamepad4RightStickY = 39,
            Gamepad4RightTrigger = 42,
            Gamepad4Trigger = 40,
            Gamepad5DpadX = 52,
            Gamepad5DpadY = 53,
            Gamepad5LeftStickX = 45,
            Gamepad5LeftStickY = 46,
            Gamepad5LeftTrigger = 50,
            Gamepad5RightStickX = 47,
            Gamepad5RightStickY = 48,
            Gamepad5RightTrigger = 51,
            Gamepad5Trigger = 49,
            Gamepad6DpadX = 61,
            Gamepad6DpadY = 62,
            Gamepad6LeftStickX = 54,
            Gamepad6LeftStickY = 55,
            Gamepad6LeftTrigger = 59,
            Gamepad6RightStickX = 56,
            Gamepad6RightStickY = 57,
            Gamepad6RightTrigger = 60,
            Gamepad6Trigger = 58,
            Gamepad7DpadX = 70,
            Gamepad7DpadY = 71,
            Gamepad7LeftStickX = 63,
            Gamepad7LeftStickY = 64,
            Gamepad7LeftTrigger = 68,
            Gamepad7RightStickX = 65,
            Gamepad7RightStickY = 66,
            Gamepad7RightTrigger = 69,
            Gamepad7Trigger = 67,
            Gamepad8DpadX = 79,
            Gamepad8DpadY = 80,
            Gamepad8LeftStickX = 72,
            Gamepad8LeftStickY = 73,
            Gamepad8LeftTrigger = 77,
            Gamepad8RightStickX = 74,
            Gamepad8RightStickY = 75,
            Gamepad8RightTrigger = 78,
            Gamepad8Trigger = 76,
            LeftStickX = 0,
            LeftStickY = 1,
            LeftTrigger = 5,
            RightStickX = 2,
            RightStickY = 3,
            RightTrigger = 6,
            Trigger = 4,
        }
        public partial class AxisInput : SmartInput.IAxisInput
        {
            public AxisInput(XboxOneController.Axis axis, bool anyPad=false) { }
            public XboxOneController.Axis Axis { get { return default(XboxOneController.Axis); } }
            public float AxisValue() { return default(float); }
        }
        public enum Button
        {
            Gamepad1ButtonA = 350,
            Gamepad1ButtonB = 351,
            Gamepad1ButtonDPadDown = 363,
            Gamepad1ButtonDPadLeft = 364,
            Gamepad1ButtonDPadRight = 365,
            Gamepad1ButtonDPadUp = 362,
            Gamepad1ButtonLeftShoulder = 354,
            Gamepad1ButtonLeftThumbstick = 358,
            Gamepad1ButtonMenu = 357,
            Gamepad1ButtonRightShoulder = 355,
            Gamepad1ButtonRightThumbstick = 359,
            Gamepad1ButtonView = 356,
            Gamepad1ButtonX = 352,
            Gamepad1ButtonY = 353,
            Gamepad2ButtonA = 370,
            Gamepad2ButtonB = 371,
            Gamepad2ButtonDPadDown = 383,
            Gamepad2ButtonDPadLeft = 384,
            Gamepad2ButtonDPadRight = 385,
            Gamepad2ButtonDPadUp = 382,
            Gamepad2ButtonLeftShoulder = 374,
            Gamepad2ButtonLeftThumbstick = 378,
            Gamepad2ButtonMenu = 377,
            Gamepad2ButtonRightShoulder = 375,
            Gamepad2ButtonRightThumbstick = 379,
            Gamepad2ButtonView = 376,
            Gamepad2ButtonX = 372,
            Gamepad2ButtonY = 373,
            Gamepad3ButtonA = 390,
            Gamepad3ButtonB = 391,
            Gamepad3ButtonDPadDown = 403,
            Gamepad3ButtonDPadLeft = 404,
            Gamepad3ButtonDPadRight = 405,
            Gamepad3ButtonDPadUp = 402,
            Gamepad3ButtonLeftShoulder = 394,
            Gamepad3ButtonLeftThumbstick = 398,
            Gamepad3ButtonMenu = 397,
            Gamepad3ButtonRightShoulder = 395,
            Gamepad3ButtonRightThumbstick = 399,
            Gamepad3ButtonView = 396,
            Gamepad3ButtonX = 392,
            Gamepad3ButtonY = 393,
            Gamepad4ButtonA = 410,
            Gamepad4ButtonB = 411,
            Gamepad4ButtonDPadDown = 423,
            Gamepad4ButtonDPadLeft = 424,
            Gamepad4ButtonDPadRight = 425,
            Gamepad4ButtonDPadUp = 422,
            Gamepad4ButtonLeftShoulder = 414,
            Gamepad4ButtonLeftThumbstick = 418,
            Gamepad4ButtonMenu = 417,
            Gamepad4ButtonRightShoulder = 415,
            Gamepad4ButtonRightThumbstick = 419,
            Gamepad4ButtonView = 416,
            Gamepad4ButtonX = 412,
            Gamepad4ButtonY = 413,
            Gamepad5ButtonA = 430,
            Gamepad5ButtonB = 431,
            Gamepad5ButtonDPadDown = 443,
            Gamepad5ButtonDPadLeft = 444,
            Gamepad5ButtonDPadRight = 445,
            Gamepad5ButtonDPadUp = 442,
            Gamepad5ButtonLeftShoulder = 434,
            Gamepad5ButtonLeftThumbstick = 438,
            Gamepad5ButtonMenu = 437,
            Gamepad5ButtonRightShoulder = 435,
            Gamepad5ButtonRightThumbstick = 439,
            Gamepad5ButtonView = 436,
            Gamepad5ButtonX = 432,
            Gamepad5ButtonY = 433,
            Gamepad6ButtonA = 450,
            Gamepad6ButtonB = 451,
            Gamepad6ButtonDPadDown = 463,
            Gamepad6ButtonDPadLeft = 464,
            Gamepad6ButtonDPadRight = 465,
            Gamepad6ButtonDPadUp = 462,
            Gamepad6ButtonLeftShoulder = 454,
            Gamepad6ButtonLeftThumbstick = 458,
            Gamepad6ButtonMenu = 457,
            Gamepad6ButtonRightShoulder = 455,
            Gamepad6ButtonRightThumbstick = 459,
            Gamepad6ButtonView = 456,
            Gamepad6ButtonX = 452,
            Gamepad6ButtonY = 453,
            Gamepad7ButtonA = 470,
            Gamepad7ButtonB = 471,
            Gamepad7ButtonDPadDown = 483,
            Gamepad7ButtonDPadLeft = 484,
            Gamepad7ButtonDPadRight = 485,
            Gamepad7ButtonDPadUp = 482,
            Gamepad7ButtonLeftShoulder = 474,
            Gamepad7ButtonLeftThumbstick = 478,
            Gamepad7ButtonMenu = 477,
            Gamepad7ButtonRightShoulder = 475,
            Gamepad7ButtonRightThumbstick = 479,
            Gamepad7ButtonView = 476,
            Gamepad7ButtonX = 472,
            Gamepad7ButtonY = 473,
            Gamepad8ButtonA = 490,
            Gamepad8ButtonB = 491,
            Gamepad8ButtonDPadDown = 503,
            Gamepad8ButtonDPadLeft = 504,
            Gamepad8ButtonDPadRight = 505,
            Gamepad8ButtonDPadUp = 502,
            Gamepad8ButtonLeftShoulder = 494,
            Gamepad8ButtonLeftThumbstick = 498,
            Gamepad8ButtonMenu = 497,
            Gamepad8ButtonRightShoulder = 495,
            Gamepad8ButtonRightThumbstick = 499,
            Gamepad8ButtonView = 496,
            Gamepad8ButtonX = 492,
            Gamepad8ButtonY = 493,
            GamepadButtonA = 330,
            GamepadButtonB = 331,
            GamepadButtonDPadDown = 343,
            GamepadButtonDPadLeft = 344,
            GamepadButtonDPadRight = 345,
            GamepadButtonDPadUp = 342,
            GamepadButtonLeftShoulder = 334,
            GamepadButtonLeftThumbstick = 338,
            GamepadButtonMenu = 337,
            GamepadButtonRightShoulder = 335,
            GamepadButtonRightThumbstick = 339,
            GamepadButtonView = 336,
            GamepadButtonX = 332,
            GamepadButtonY = 333,
        }
        public partial class ButtonInput : SmartInput.IButtonInput
        {
            public ButtonInput(XboxOneController.Button button, bool anyPad=false) { }
            public XboxOneController.Button Button { get { return default(XboxOneController.Button); } }
            public bool GetButton() { return default(bool); }
        }
    }
    public partial class XboxOneDVR
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <EnableDVR>k__BackingField;
        public static string AIRSTRIKE_ID;
        public static string BASHING_SPREE_ID;
        public static string CRUSHED_RAM_ID;
        public static string ESCAPED_BOULDER_ID;
        public const float kMaxRecordTime = 300f;
        public const float kMinRecordTime = 6f;
        public static string PROJECTILE_TAKEDOWN_ID;
        public static string QUINTUPLE_JUMP_ID;
        public static string SUPER_JUMP_ID;
        public static string TRICKED_ENEMY_ID;
        public XboxOneDVR() { }
        public static bool CanUseDVR { get { return default(bool); } }
        public static bool EnableDVR { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static bool WaitingForClip { get { return default(bool); } set { } }
        private static void .cctor() { }
        public static bool CancelRecording() { return default(bool); }
        public static bool RecordFuture(float seconds, string clipName, bool cancelExisting=false) { return default(bool); }
        public static bool RecordPast(float seconds, string clipName, bool cancelExisting=false) { return default(bool); }
        public static bool StartRecording(bool cancelExisting=false) { return default(bool); }
        public static bool StopRecording(string clipName) { return default(bool); }
    }
    public partial class XboxOneDVRManager : UnityEngine.MonoBehaviour
    {
        public static XboxOneDVRManager Instance;
        private string m_clipName;
        private float m_past;
        private float m_time;
        public XboxOneDVRManager() { }
        public void Awake() { }
        public void OnDestroy() { }
        public static void RecordPastDelayed(float delay, float past, string clip) { }
        public void Update() { }
    }
    public partial class XboxOneFlow : UnityEngine.MonoBehaviour
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<System.Collections.Generic.List<XboxOneStatistics.StatisticReading>> <>f__am$cache8;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache9;
        private bool m_engaged;
        private bool m_isRequestingUser;
        private bool m_isSwitchingUser;
        private int m_lastUser;
        private int m_saveSlotToUpdate;
        private SmartInput.IButtonInput m_switchProfileButton;
        [NotNull]
        public MessageProvider OfflineMessageProvider;
        private static XboxOneFlow s_instance;
        public XboxOneFlow() { }
        public static bool Engage { get { return default(bool); } set { } }
        private static XboxOneFlow Instance { get { return default(XboxOneFlow); } }
        public static bool Ready { get { return default(bool); } }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <StatisticsTest>m__14F(System.Collections.Generic.List<XboxOneStatistics.StatisticReading> result) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <StatisticsTest>m__150() { }
        private void Awake() { }
        private void FixedUpdate() { }
        private void OnActiveControllerDisconnect() { }
        public void OnApplicationQuit() { }
        private void OnDisable() { }
        private void OnEnable() { }
        private void OnEngagementEnd(bool requestUser=false) { }
        private void OnInstallCompleted() { }
        private void OnLastControllerDisconnected() { }
        private void OnLoginCancel() { }
        private void OnOnlineStateChanged() { }
        private void OnRequireStorageFailed() { }
        private void OnResourcesHigh() { }
        private void OnResourcesLow() { }
        private void OnResume() { }
        private void OnSessionEnded() { }
        private void OnSessionStarted() { }
        private void OnStatusGUI() { }
        private void OnSuspend() { }
        private void OnUserPicked() { }
        private void OnUserSignedOut() { }
        private void OnUserWillChange(int newUserID) { }
        private void OnWillSwitchController(int newController) { }
        [System.Diagnostics.DebuggerHiddenAttribute]
        private System.Collections.IEnumerator RequireStorageNextFrameRoutine() { return default(System.Collections.IEnumerator); }
        private void RestartGame() { }
        private void SkipToTitleScreen() { }
        private void Start() { }
        private void StartSessionWithStorage() { }
        private void StatisticsTest() { }
        private void StorageTest() { }
        public void UpdateNextSaveSlot() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <RequireStorageNextFrameRoutine>c__Iterator37 : System.Collections.Generic.IEnumerator<object>, System.Collections.IEnumerator, System.IDisposable
        {
            internal object $current;
            internal int $PC;
            internal XboxOneFlow <>f__this;
            public <RequireStorageNextFrameRoutine>c__Iterator37() { }
            object System.Collections.Generic.IEnumerator<object>.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            object System.Collections.IEnumerator.Current { [System.Diagnostics.DebuggerHiddenAttribute]get { return default(object); } }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Dispose() { }
            public bool MoveNext() { return default(bool); }
            [System.Diagnostics.DebuggerHiddenAttribute]
            public void Reset() { }
        }
    }
    public partial class XboxOneIdentityUI : UnityEngine.MonoBehaviour
    {
        [NotNull]
        public UnityEngine.Renderer DisplayPicture;
        [NotNull]
        public UnityEngine.GameObject Group;
        public static bool IsVisible;
        [NotNull]
        public MessageProvider LiveUnavailableMessageProvider;
        private string m_username;
        [NotNull]
        public MessageProvider OfflineMessageProvider;
        [NotNull]
        public MessageBox OnlineStatus;
        [NotNull]
        public UnityEngine.GameObject OnlineStatusGroup;
        [NotNull]
        public MessageBox SwitchProfile;
        [NotNull]
        public MessageBox Username;
        public XboxOneIdentityUI() { }
        private static void .cctor() { }
        public void OnDisable() { }
        public void OnEnable() { }
        public void Update() { }
    }
    public partial class XboxOneLeaderboards
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <EnableLeaderboards>k__BackingField;
        public XboxOneLeaderboards() { }
        public static bool EnableLeaderboards { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static LeaderboardData LeaderboardData { get { return default(LeaderboardData); } }
        private static string GetLeaderboardEventName(LeaderboardB leaderboard) { return default(string); }
        public static bool SendLeaderboardData(LeaderboardB leaderboard, long data) { return default(bool); }
        public static bool UpdateLeaderboard(LeaderboardB leaderboard, Leaderboards.Filter filter, System.Action success=null, System.Action failure=null) { return default(bool); }
    }
    public partial class XboxOneLive
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnOnlineStateChanged>k__BackingField;
        public XboxOneLive() { }
        public static bool LiveOnline { get { return default(bool); } }
        public static bool Online { get { return default(bool); } }
        public static System.Action OnOnlineStateChanged { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
    }
    public partial class XboxOneRichPresence
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Collections.Generic.Dictionary<string, int> <>f__switch$map1;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <EnableRichPresence>k__BackingField;
        public static System.Collections.Generic.Dictionary<int, XboxOneRichPresence.RichPresence> CurrentRichPresence;
        private static XboxOneRichPresence.Level m_currentLevel;
        public XboxOneRichPresence() { }
        public static bool EnableRichPresence { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private static void .cctor() { }
        private static XboxOneRichPresence.Level MapAreaNameToLevel(string areaName) { return default(XboxOneRichPresence.Level); }
        public static void SendGameProgress(string UserId, System.Guid PlayerSessionId, float CompletionPercent) { }
        public static bool SendLevelStart(string area) { return default(bool); }
        public static bool SetPresence(int userId, XboxOneRichPresence.RichPresence presence, System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool SetPresence(XboxOneRichPresence.RichPresence presence, System.Action success=null, System.Action failure=null) { return default(bool); }
        public static void UpdateAllRichPresenceStrings() { }
        public static void UpdateRichPresence() { }
        public enum Level
        {
            BlackRootBurrows = 11,
            ForlornRuins = 6,
            GinsoTree = 4,
            HollowGrove = 10,
            MistyWoods = 5,
            MoonGrotto = 3,
            MountHoru = 8,
            Null = 0,
            SorrowPass = 7,
            SunkenGlades = 1,
            ThornfeltSwamp = 2,
            ValleyOfTheWind = 9,
        }
        public enum RichPresence
        {
            Idle = 4,
            Menus = 3,
            Null = 0,
            Playing = 2,
            PlayingLevel = 1,
        }
    }
    public partial class XboxOneSave
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <EnableSave>k__BackingField;
        private string m_bufferName;
        private System.Collections.Generic.Queue<System.Action> m_queuedStorageOperations;
        private static int m_waitFramesForStorage;
        private static System.Action OnSaveGameCacheCleared;
        public XboxOneSave() { }
        public static bool EnableSave { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(bool); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static bool IsStorageBusy { get { return default(bool); } }
        public static bool SaveGameAvailable { get { return default(bool); } }
        public static bool SaveGameQueried { get { return default(bool); } }
        public static bool StorageHasOperationsInProgress { get { return default(bool); } }
        public static event System.Action OnSaveGameCacheCleared { add { } remove { } }
        public static bool ClearSaveGameCache() { return default(bool); }
        public static bool CopySaveGame(int slotIndexFrom, int slotIndexTo) { return default(bool); }
        public static bool DeleteSaveGame(int index, int backupIndex=-1) { return default(bool); }
        public static void OnSlotsAllQueried() { }
        public static bool RequireStorage(System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool SaveGameAvailableInSlot(int index) { return default(bool); }
        public static byte[] SaveGameData(int slot, int backup=-1) { return default(byte[]); }
        public static byte[] SaveGameData(string bufferName) { return default(byte[]); }
        public static string SaveGameName(int slotIndex, int backupIndex=-1) { return default(string); }
        public static void Update() { }
        public static bool UpdateSaveGame(int slotIndex, System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool UpdateSaveGame(string bufferName, System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool WriteSaveGame(byte[] data, int saveSlot, System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool WriteSaveGame(byte[] data, string bufferName, System.Action success=null, System.Action failure=null) { return default(bool); }
    }
    public partial class XboxOneSession
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnResume>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnSessionEnded>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnSessionStarted>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnSuspend>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnWindowActivated>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnWindowDeactivated>k__BackingField;
        private static bool m_windowActivated;
        public XboxOneSession() { }
        public static bool IsHighResources { get { return default(bool); } }
        public static System.Action OnResume { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnSessionEnded { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnSessionStarted { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnSuspend { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnWindowActivated { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnWindowDeactivated { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static bool SessionActive { get { return default(bool); } }
        public static System.Guid SessionID { get { return default(System.Guid); } }
        public static bool SuspendDataAvailable { get { return default(bool); } }
        private static void .cctor() { }
        public static void ClearGUID() { }
        public static bool ClearSuspendData() { return default(bool); }
        public static bool EndSession() { return default(bool); }
        public static bool PauseSession() { return default(bool); }
        public static bool RequireSession(System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool RestartSession(System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool ResumeSession() { return default(bool); }
    }
    public partial class XboxOneStatistics
    {
        public XboxOneStatistics() { }
        public static bool RequestStatistics(System.Action<System.Collections.Generic.List<XboxOneStatistics.StatisticReading>> callback, System.Action failure=null) { return default(bool); }
        [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
        public partial struct StatisticReading
        {
            public string Name;
            public string Type;
            public string Value;
            public StatisticReading(string name, string type, string value) { throw new System.NotImplementedException(); }
            public override string ToString() { return default(string); }
        }
    }
    public partial class XboxOneUsers
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnLoginCancel>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnUserChanged>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnUserPicked>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <OnUserSignedOut>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action<int> <OnUserWillChange>k__BackingField;
        public XboxOneUsers() { }
        public static bool AutoSwitchUsers { get { return default(bool); } set { } }
        public static bool CanViewProfiles { get { return default(bool); } }
        public static string CurrentUserHandle { get { return default(string); } }
        public static string CurrentUserID { get { return default(string); } }
        public static int CurrentUserLocalID { get { return default(int); } }
        public static UnityEngine.Texture2D CurrentUserPicture { get { return default(UnityEngine.Texture2D); } }
        public static bool HasCurrentUser { get { return default(bool); } }
        public static System.Action OnLoginCancel { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnUserChanged { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnUserPicked { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action OnUserSignedOut { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static System.Action<int> OnUserWillChange { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(System.Action<int>); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public static bool ResolvingUser { get { return default(bool); } }
        public static bool ClearUserCachedData() { return default(bool); }
        public static bool CurrentUserControllerMatch() { return default(bool); }
        public static bool RequestUser(System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool RequireUser(System.Action success=null, System.Action failure=null) { return default(bool); }
        public static bool ShowProfileCard(string userID) { return default(bool); }
        public static void SignOutCurrentUser() { }
        public static bool UpdateUserPicture(System.Action success=null) { return default(bool); }
    }
    public partial class XboxOneVideoPlayer : UnityEngine.MonoBehaviour, IVideoPlayer
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private OnDelegate <OnPlaybackFinished>k__BackingField;
        [UnityEngine.HideInInspector]
        public UnityEngine.AudioClip AudioTrack;
        private string m_Filename;
        private int m_frame;
        private bool m_IsPaused;
        private bool m_IsPlaying;
        private bool m_IssuePluginEvent;
        private SoundPlayer m_MusicTrack;
        private UnityEngine.Texture2D m_Texture;
        public UnityEngine.Material Material;
        [UnityEngine.HideInInspector]
        public int MovieHeight;
        [UnityEngine.HideInInspector]
        public int MovieWidth;
        public XboxOneVideoPlayer() { }
        public string Filename { set { } }
        public bool IsPaused { get { return default(bool); } }
        public bool IsPlaying { get { return default(bool); } }
        public OnDelegate OnPlaybackFinished { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(OnDelegate); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        private void OnRenderImage(UnityEngine.RenderTexture source, UnityEngine.RenderTexture destination) { }
        public void Pause() { }
        public void Play() { }
        public void Stop() { }
        private void Update() { }
    }
    public partial class XboxStorageController
    {
        public XboxStorageController() { }
        public bool AskForStorageDevice(uint userIndex, bool forceShow, uint maxSizeForSave) { return default(bool); }
        public void Destroy() { }
        public bool IsEnumerating() { return default(bool); }
        public bool IsStorageInvalid() { return default(bool); }
        public bool IsStorageValid() { return default(bool); }
        public void UpdateState(uint userIndex) { }
    }
    public static partial class YouCanLeaveYourHatOn
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<YouCanLeaveYourHatOn.Data> <>f__am$cache0;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<YouCanLeaveYourHatOn.AssetWithSize> <>f__am$cache1;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Comparison<YouCanLeaveYourHatOn.AssetWithSize> <>f__am$cache2;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <PrintReport>m__8C(YouCanLeaveYourHatOn.Data a, YouCanLeaveYourHatOn.Data b) { return default(int); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <PrintReport>m__8D(YouCanLeaveYourHatOn.AssetWithSize a, YouCanLeaveYourHatOn.AssetWithSize b) { return default(int); }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static int <PrintReport>m__8E(YouCanLeaveYourHatOn.AssetWithSize a, YouCanLeaveYourHatOn.AssetWithSize b) { return default(int); }
        public static bool DebugMenuPrintReport() { return default(bool); }
        public static string FindName(UnityEngine.Object o) { return default(string); }
        public static void PrintReport(string reportName) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <PrintReport>c__AnonStorey53
        {
            internal string type;
            public <PrintReport>c__AnonStorey53() { }
            internal bool <>m__8B(YouCanLeaveYourHatOn.Data a) { return default(bool); }
        }
        public partial class AssetWithSize
        {
            public UnityEngine.Object Asset;
            public int Size;
            public AssetWithSize(UnityEngine.Object asset, int size) { }
        }
        public partial class Data
        {
            public System.Collections.Generic.List<string> Names;
            public string Type;
            public Data(string type) { }
        }
    }
    [UnityEngine.ExecuteInEditMode]
    public partial class ZerofyWorldPosition : UnityEngine.MonoBehaviour
    {
        public bool ShouldAffectZ;
        public ZerofyWorldPosition() { }
        private void Start() { }
    }
    internal partial class ZoomDebugMenuItem : FloatDebugMenuItem
    {
        public ZoomDebugMenuItem(string str) { }
        public override void OnSelectedFixedUpdate() { }
    }
}
namespace CatlikeCoding
{
}
namespace CatlikeCoding.TextBox
{
    public enum AlignmentMode
    {
        Center = 1,
        Justify = 3,
        Left = 0,
        Right = 2,
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct AppliedTextStyle
    {
        public UnityEngine.Color32 color;
        public CatlikeCoding.TextBox.BitmapFont font;
        public float letterSpacing;
        public CatlikeCoding.TextBox.LineDescent lineDescent;
        public float lineHeight;
        public CatlikeCoding.TextBox.TextRenderer renderer;
        public float size;
        public void Apply(CatlikeCoding.TextBox.TextStyle style, CatlikeCoding.TextBox.TextRenderer renderer) { }
        public void ApplyOnTop(CatlikeCoding.TextBox.TextStyle style) { }
    }
    public sealed partial class BitmapFont : UnityEngine.ScriptableObject
    {
        public CatlikeCoding.TextBox.BitmapFontChar[] asciiChars;
        public float baseline;
        public float baselineToBottom;
        public bool hasImportedKerningData;
        public float importLineHeightAdjustment;
        public float importOffsetAdvance;
        public float importOffsetX;
        public float importOffsetY;
        private CatlikeCoding.TextBox.BitmapFontChar missing;
        public CatlikeCoding.TextBox.BitmapFontChar[] otherChars;
        public float pixelLineHeight;
        public float spaceAdvance;
        private BitmapFont() { }
        public bool IsValid { get { return default(bool); } }
        public CatlikeCoding.TextBox.BitmapFontChar this[char c] { get { return default(CatlikeCoding.TextBox.BitmapFontChar); } }
        public void UpdateAllTextBoxes() { }
    }
    public partial class BitmapFontChar
    {
        public float advance;
        public float height;
        public int id;
        public int[] kerningIds;
        public float[] kernings;
        public float uMax;
        public float uMin;
        public float vMax;
        public float vMin;
        public float width;
        public float xOffset;
        public float yOffset;
        public BitmapFontChar() { }
        public float GetKerning(char nextChar) { return default(float); }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct CharMetaData
    {
        public UnityEngine.Color32 color;
        public CatlikeCoding.TextBox.BitmapFont font;
        public char id;
        public UnityEngine.Vector2 positionInBox;
        public CatlikeCoding.TextBox.TextRenderer renderer;
        public float scale;
        public CatlikeCoding.TextBox.CharType type;
        public int unstyledIndex;
        public float After { get { return default(float); } }
        public float HorizontalMiddle { get { return default(float); } }
        public void AdjustPositionInBox(float xDelta, float yDelta) { }
        public void AdjustPositionInBox(UnityEngine.Vector2 delta) { }
        public void EraseIfVisible() { }
        public char MarkAsStyleStatement(int unstyledIndex, UnityEngine.Vector2 position) { return default(char); }
        public CatlikeCoding.TextBox.BitmapFontChar MarkAsVisible(int unstyledIndex, UnityEngine.Vector2 position, ref CatlikeCoding.TextBox.AppliedTextStyle style) { return default(CatlikeCoding.TextBox.BitmapFontChar); }
        public void MarkAsWhitespace(int unstyledIndex, UnityEngine.Vector2 position, ref CatlikeCoding.TextBox.AppliedTextStyle style) { }
        public void RenderIfVisible(UnityEngine.Vector2 offset) { }
    }
    public enum CharType
    {
        Style = 0,
        Visible = 1,
        Whitespace = 2,
    }
    public enum CylinderRevolveAxis
    {
        X = 0,
        Y = 1,
    }
    public enum HorizontalAnchorMode
    {
        Center = 1,
        Left = 0,
        Right = 2,
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct LineDescent
    {
        public float baseline;
        public float baselineToBottom;
    }
    public partial class MoonIconRenderer : CatlikeCoding.TextBox.TextRenderer
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Predicate<UnityEngine.GameObject> <>f__am$cache3;
        public UnityEngine.Vector2 IconOffset;
        public TextBoxIconsFontGenerator Icons;
        private readonly System.Collections.Generic.Dictionary<UnityEngine.GameObject, System.Collections.Generic.List<UnityEngine.GameObject>> m_data;
        public MoonIconRenderer() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static bool <Apply>m__12A(UnityEngine.GameObject a) { return default(bool); }
        public override void Add(CatlikeCoding.TextBox.CharMetaData meta, UnityEngine.Vector2 offset) { }
        public override void Apply() { }
        public override void Prepare() { }
        private void SetIconPosition(UnityEngine.GameObject icon, CatlikeCoding.TextBox.CharMetaData meta, UnityEngine.Vector2 offset) { }
    }
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.MeshFilter), typeof(UnityEngine.MeshRenderer))]
    public partial class MoonTextMeshRenderer : CatlikeCoding.TextBox.TextRenderer
    {
        public int chunkSize;
        protected UnityEngine.Color32[] colors;
        protected int currentVertexIndex;
        public float FadeSpread;
        protected static UnityEngine.Vector3 hidden;
        protected int lastRendererCharCount;
        protected UnityEngine.Mesh mesh;
        protected bool meshResized;
        protected UnityEngine.Vector3[] normals;
        protected int[] triangles;
        protected UnityEngine.Vector2[] uv;
        protected UnityEngine.Vector2[] uv2;
        protected UnityEngine.Vector3[] vertices;
        public MoonTextMeshRenderer() { }
        private static void .cctor() { }
        public override void Add(CatlikeCoding.TextBox.CharMetaData meta, UnityEngine.Vector2 offset) { }
        public override void Apply() { }
        protected void OnDestroy() { }
        public override void Prepare() { }
        public void Start() { }
    }
    [PooledSafeAttribute]
    [UnityEngine.ExecuteInEditMode]
    public sealed partial class TextBox : UnityEngine.MonoBehaviour
    {
        public CatlikeCoding.TextBox.AlignmentMode alignment;
        public float boundsBottom;
        public float boundsLeft;
        public float boundsRight;
        public float boundsTop;
        private CatlikeCoding.TextBox.CharMetaData[] charMetaData;
        public UnityEngine.Color color;
        private CatlikeCoding.TextBox.AppliedTextStyle currentStyle;
        [UnityEngine.SerializeField]
        private string defaultText;
        private int firstCharIndex;
        public CatlikeCoding.TextBox.HorizontalAnchorMode horizontalAnchor;
        private int lastCharIndex;
        public UnityEngine.Vector2[] leftContour;
        private System.Collections.Generic.List<CatlikeCoding.TextBox.TextBoxLine> lines;
        public float maxHeight;
        public CatlikeCoding.TextBox.TextBox overflowBox;
        private bool overflowed;
        private CatlikeCoding.TextBox.TextBox overflowFromBox;
        public float paddingBottom;
        public float paddingLeft;
        public float paddingRight;
        public float paddingTop;
        public UnityEngine.Vector2[] rightContour;
        public float size;
        public CatlikeCoding.TextBox.TextStyleCollection styleCollection;
        private System.Collections.Generic.Stack<CatlikeCoding.TextBox.AppliedTextStyle> styleStack;
        private System.Text.StringBuilder styleStatementBuffer;
        [UnityEngine.SerializeField]
        private float tabSize;
        private int textLength;
        public CatlikeCoding.TextBox.TextRenderer[] textRenderers;
        public CatlikeCoding.TextBox.VerticalAnchorMode verticalAnchor;
        public float width;
        private System.Collections.Generic.List<CatlikeCoding.TextBox.LineDescent> wordCache;
        public TextBox() { }
        public string DefaultText { get { return default(string); } }
        public int LineCount { get { return default(int); } }
        public float TabSize { get { return default(float); } set { } }
        public int TextRendererCount { get { return default(int); } }
        private void AdjustBaseline(int currentCharIndex, float baselineAdjustment, ref UnityEngine.Vector2 caret, ref CatlikeCoding.TextBox.TextBoxLine line) { }
        private void AlignTextCenterOrRight() { }
        private void ApplyStyleStatement() { }
        private UnityEngine.Vector2 ComputeAnchorAndBounds() { return default(UnityEngine.Vector2); }
        public void CreateRendersIfThereAreNone() { }
        private void EraseVisibleCharacters(int startIndex, int endIndex) { }
        private CatlikeCoding.TextBox.LineDescent FindLineDataForLastWord() { return default(CatlikeCoding.TextBox.LineDescent); }
        private int FindWrapStart(int textIndex, int firstCharIndex) { return default(int); }
        private void GenerateMetaData() { }
        public CatlikeCoding.TextBox.CharMetaData GetCharacterMetaData(int index) { return default(CatlikeCoding.TextBox.CharMetaData); }
        private static float GetContourOffset(UnityEngine.Vector2[] contourData, float height) { return default(float); }
        public float GetLeftContour(float height) { return default(float); }
        public CatlikeCoding.TextBox.TextBoxLine GetLineInfo(int index) { return default(CatlikeCoding.TextBox.TextBoxLine); }
        public float GetRightContour(float height) { return default(float); }
        public CatlikeCoding.TextBox.TextRenderer GetTextRenderer(int index) { return default(CatlikeCoding.TextBox.TextRenderer); }
        private void JustifyLine(int first, int last, float width) { }
        private void JustifyText() { }
        private void OnEnable() { }
        private void OverFlow(int overflowIndex) { }
        private int ParseStyleStatementAt(int index, int unstyledCharIndex, UnityEngine.Vector2 caret) { return default(int); }
        private void RefreshText() { }
        public void RenderText() { }
        public void ResetTextRenderers() { }
        public void SetStyleCollection(CatlikeCoding.TextBox.TextStyleCollection textStyleCollection) { }
        private void SetText(CatlikeCoding.TextBox.CharMetaData[] text, int startIndex, int length) { }
        public void SetText(string text) { }
        public void SetText(System.Text.StringBuilder text) { }
        private void SetTextLength(int length) { }
    }
    [System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
    public partial struct TextBoxLine
    {
        public float baseline;
        public float bottom;
        public int firstCharIndex;
        public float horizontalEnd;
        public float horizontalStart;
        public int lastCharIndex;
        public float top;
    }
    public partial class TextMeshCylinderRenderer : CatlikeCoding.TextBox.TextMeshRenderer
    {
        private bool fetchedSettings;
        public float radius;
        public CatlikeCoding.TextBox.CylinderRevolveAxis revolveAxis;
        private CatlikeCoding.TextBox.TextMeshCylinderSettings settings;
        public TextMeshCylinderRenderer() { }
        public override void Add(CatlikeCoding.TextBox.CharMetaData meta, UnityEngine.Vector2 offset) { }
        public override void Prepare() { }
    }
    [UnityEngine.RequireComponent(typeof(CatlikeCoding.TextBox.TextBox))]
    public sealed partial class TextMeshCylinderSettings : UnityEngine.MonoBehaviour
    {
        public float radius;
        public CatlikeCoding.TextBox.CylinderRevolveAxis revolveAxis;
        public TextMeshCylinderSettings() { }
    }
    [PooledSafeAttribute]
    [UnityEngine.ExecuteInEditMode]
    [UnityEngine.RequireComponent(typeof(UnityEngine.MeshFilter), typeof(UnityEngine.MeshRenderer))]
    public partial class TextMeshRenderer : CatlikeCoding.TextBox.TextRenderer
    {
        public int chunkSize;
        protected UnityEngine.Color32[] colors;
        protected int currentVertexIndex;
        protected static UnityEngine.Vector3 hidden;
        protected int lastRendererCharCount;
        protected UnityEngine.Mesh mesh;
        protected bool meshResized;
        protected int[] triangles;
        protected UnityEngine.Vector2[] uv;
        protected UnityEngine.Vector3[] vertices;
        public TextMeshRenderer() { }
        private static void .cctor() { }
        public override void Add(CatlikeCoding.TextBox.CharMetaData meta, UnityEngine.Vector2 offset) { }
        public override void Apply() { }
        protected void OnDestroy() { }
        public override void Prepare() { }
    }
    public sealed partial class TextMeshTorusRenderer : CatlikeCoding.TextBox.TextMeshRenderer
    {
        private bool fetchedSettings;
        public float majorRadius;
        public float minorRadius;
        public CatlikeCoding.TextBox.TorusRevolveAxis revolveAxis;
        private CatlikeCoding.TextBox.TextMeshTorusSettings settings;
        public TextMeshTorusRenderer() { }
        public override void Apply() { }
    }
    [UnityEngine.RequireComponent(typeof(CatlikeCoding.TextBox.TextBox))]
    public sealed partial class TextMeshTorusSettings : UnityEngine.MonoBehaviour
    {
        public float majorRadius;
        public float minorRadius;
        public CatlikeCoding.TextBox.TorusRevolveAxis revolveAxis;
        public TextMeshTorusSettings() { }
    }
    public abstract partial class TextRenderer : UnityEngine.MonoBehaviour
    {
        public int renderedCharCount;
        protected TextRenderer() { }
        public virtual void Add(CatlikeCoding.TextBox.CharMetaData meta, UnityEngine.Vector2 offset) { }
        public virtual void Apply() { }
        public virtual void Prepare() { }
    }
    public sealed partial class TextStyle
    {
        public bool absoluteFontScale;
        public UnityEngine.Color32 color;
        public CatlikeCoding.TextBox.BitmapFont font;
        public float fontScale;
        public bool hasColor;
        public bool hasFontScale;
        public bool hasLetterSpacing;
        public bool hasLineScale;
        public float letterSpacing;
        public float lineScale;
        public string name;
        public CatlikeCoding.TextBox.TextRenderer renderer;
        public int rendererId;
        public TextStyle() { }
    }
    public sealed partial class TextStyleCollection : UnityEngine.ScriptableObject
    {
        private int rendererCount;
        public CatlikeCoding.TextBox.TextStyle[] styles;
        public TextStyleCollection() { }
        public void ComputeRendererCount() { }
        public CatlikeCoding.TextBox.TextRenderer[] CreateRenderers(CatlikeCoding.TextBox.TextBox box) { return default(CatlikeCoding.TextBox.TextRenderer[]); }
    }
    public enum TorusRevolveAxis
    {
        X = 0,
        Y = 1,
    }
    public enum VerticalAnchorMode
    {
        Bottom = 2,
        Middle = 1,
        Top = 0,
    }
}
namespace CatlikeCoding.TextBox.Examples
{
    public sealed partial class TimerExample : UnityEngine.MonoBehaviour
    {
        private int textPrefixLength;
        public CatlikeCoding.TextBox.TextBox timerBox;
        private System.Text.StringBuilder timeText;
        public TimerExample() { }
        private void Start() { }
        private void Update() { }
    }
}
namespace CatlikeCoding.Utilities
{
    public sealed partial class AutomaticParentSelector : UnityEngine.MonoBehaviour
    {
        public AutomaticParentSelector() { }
    }
    public static partial class StringBuilderUtility
    {
        public static char decimalSeparator;
        public static char groupSeparator;
        public static char padding;
        private static void .cctor() { }
        public static void AppendFloat(System.Text.StringBuilder s, float number, int decimalCount) { }
        public static void AppendFloat(System.Text.StringBuilder s, float number, int decimalCount, int digitCount) { }
        public static void AppendFloatGrouped(System.Text.StringBuilder s, float number, int decimalCount) { }
        public static void AppendFloatGrouped(System.Text.StringBuilder s, float number, int decimalCount, int digitCount) { }
        public static void AppendInt(System.Text.StringBuilder s, int number) { }
        public static void AppendInt(System.Text.StringBuilder s, int number, int digitCount) { }
        public static void AppendIntGrouped(System.Text.StringBuilder s, int number) { }
        public static void AppendIntGrouped(System.Text.StringBuilder s, int number, int digitCount) { }
        public static void Reverse(System.Text.StringBuilder s, int firstIndex, int lastIndex) { }
    }
}
namespace Core
{
    public static partial class Ambience
    {
        public static System.Collections.Generic.List<Core.Ambience.AmbienceTrack> CurrentTracks;
        private static readonly System.Collections.Generic.List<Core.Ambience.Layer> m_ambienceLayers;
        public static bool Mute;
        public static Core.Ambience.Layer CurrentAmbienceLayer { get { return default(Core.Ambience.Layer); } }
        private static void .cctor() { }
        public static void AddAmbienceLayer(Core.Ambience.Layer musicLayer) { }
        public static Core.Ambience.AmbienceTrack PlayTrack(SoundProvider soundProvider, float fadeInDuration, float fadeOutDuration) { return default(Core.Ambience.AmbienceTrack); }
        public static void RemoveAmbienceLayer(Core.Ambience.Layer musicLayer) { }
        public static void SortLayers() { }
        public static void StopTrack(Core.Ambience.AmbienceTrack track) { }
        public static void UpdateAmbience() { }
        public partial class AmbienceTrack
        {
            public float FadeInDuration;
            public float FadeOutDuration;
            private System.Action m_soundNullify;
            public int ReferenceCount;
            public SoundPlayer SoundPlayer;
            public SoundProvider SoundProvider;
            public AmbienceTrack() { }
            public System.Action SoundNullify { get { return default(System.Action); } }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private void <get_SoundNullify>m__107() { }
            public void Play(float fadeInDuration, float fadeOutDuration) { }
            public void Stop() { }
        }
        public partial class Layer
        {
            private readonly int m_priority;
            private readonly System.Collections.Generic.List<Core.Ambience.Layer.Track> m_tracks;
            public Layer(SoundProvider soundProvider, float fadeInDuration, float fadeOutDuration, int priority) { }
            public void Enter() { }
            public void Exit() { }
            public static int Sort(Core.Ambience.Layer layerA, Core.Ambience.Layer layerB) { return default(int); }
            public partial class Track
            {
                public float FadeInDuration;
                public float FadeOutDuration;
                private Core.Ambience.AmbienceTrack m_ambienceTrack;
                public SoundProvider SoundProvider;
                public Track(SoundProvider soundProvider, float fadeInDuration, float fadeOutDuration) { }
                public void Enter() { }
                public void Exit() { }
            }
        }
    }
    public partial class Input
    {
        public static Core.Input.InputButtonProcessor ActionButtonA;
        public static Core.Input.InputButtonProcessor AnyStart;
        public static Core.Input.InputButtonProcessor Bash;
        public static Core.Input.InputButtonProcessor[] Buttons;
        public static Core.Input.InputButtonProcessor Cancel;
        public static Core.Input.InputButtonProcessor ChargeJump;
        public static Core.Input.InputButtonProcessor Copy;
        public static bool CursorMoved;
        public static UnityEngine.Vector2 CursorPosition;
        public static Core.Input.InputButtonProcessor Delete;
        public static Core.Input.InputButtonProcessor Down;
        public static Core.Input.InputButtonProcessor Filter;
        public static Core.Input.InputButtonProcessor Focus;
        public static Core.Input.InputButtonProcessor Glide;
        public static Core.Input.InputButtonProcessor Grab;
        public static float Horizontal;
        public static float HorizontalAnalogLeft;
        public static float HorizontalAnalogRight;
        public static int HorizontalDigiPad;
        public static Core.Input.InputButtonProcessor Jump;
        public static Core.Input.InputButtonProcessor Left;
        public static Core.Input.InputButtonProcessor LeftClick;
        public static Core.Input.InputButtonProcessor LeftShoulder;
        public static Core.Input.InputButtonProcessor LeftStick;
        public static Core.Input.InputButtonProcessor Legend;
        public static Core.Input.InputButtonProcessor MenuDown;
        public static Core.Input.InputButtonProcessor MenuLeft;
        public static Core.Input.InputButtonProcessor MenuPageLeft;
        public static Core.Input.InputButtonProcessor MenuPageRight;
        public static Core.Input.InputButtonProcessor MenuRight;
        public static Core.Input.InputButtonProcessor MenuUp;
        public static Core.Input.InputButtonProcessor Right;
        public static Core.Input.InputButtonProcessor RightClick;
        public static Core.Input.InputButtonProcessor RightShoulder;
        public static Core.Input.InputButtonProcessor RightStick;
        public static Core.Input.InputButtonProcessor Select;
        public static Core.Input.InputButtonProcessor SoulFlame;
        public static Core.Input.InputButtonProcessor SpiritFlame;
        public static Core.Input.InputButtonProcessor Start;
        public static Core.Input.InputButtonProcessor Unassigned;
        public static Core.Input.InputButtonProcessor Up;
        public static float Vertical;
        public static float VerticalAnalogLeft;
        public static float VerticalAnalogRight;
        public static int VerticalDigiPad;
        public static Core.Input.InputButtonProcessor ZoomIn;
        public static Core.Input.InputButtonProcessor ZoomOut;
        public Input() { }
        public static UnityEngine.Vector2 AnalogAxisLeft { get { return default(UnityEngine.Vector2); } }
        public static UnityEngine.Vector2 AnalogAxisRight { get { return default(UnityEngine.Vector2); } }
        public static bool AnyButtonPressed { get { return default(bool); } }
        public static bool AnyButtonReleased { get { return default(bool); } }
        public static UnityEngine.Vector2 Axis { get { return default(UnityEngine.Vector2); } }
        public static UnityEngine.Vector2 CursorPositionUI { get { return default(UnityEngine.Vector2); } }
        public static UnityEngine.Vector2 DigiPadAxis { get { return default(UnityEngine.Vector2); } }
        public static int NormalizedHorizontal { get { return default(int); } }
        public static float NormalizedVertical { get { return default(float); } }
        public static bool OnAnyButtonPressed { get { return default(bool); } }
        public static bool OnAnyButtonReleased { get { return default(bool); } }
        private static void .cctor() { }
        public static Core.Input.InputButtonProcessor GetButton(Core.Input.Button button) { return default(Core.Input.InputButtonProcessor); }
        public enum Button
        {
            Any = 13,
            ButtonA = 0,
            ButtonB = 3,
            ButtonX = 1,
            ButtonY = 2,
            Down = 11,
            Left = 8,
            LeftShoulder = 6,
            LeftStick = 14,
            LeftTrigger = 4,
            Right = 9,
            RightShoulder = 7,
            RightStick = 15,
            RightTrigger = 5,
            Unassigned = 12,
            Up = 10,
        }
        public partial class InputButtonProcessor
        {
            public bool IsPressed;
            public bool Used;
            public bool WasPressed;
            public InputButtonProcessor() { }
            public bool OnPressed { get { return default(bool); } }
            public bool OnPressedNotUsed { get { return default(bool); } }
            public bool OnReleased { get { return default(bool); } }
            public bool Pressed { get { return default(bool); } }
            public bool Released { get { return default(bool); } }
            public void Update(bool isPressed) { }
        }
    }
    public static partial class Music
    {
        public static System.Collections.Generic.List<Core.Music.MusicTrack> CurrentTracks;
        private static readonly System.Collections.Generic.List<Core.Music.Layer> m_musicLayers;
        public static bool Mute;
        public static Core.Music.Layer CurrentMusicLayer { get { return default(Core.Music.Layer); } }
        private static void .cctor() { }
        public static void AddMusicLayer(Core.Music.Layer musicLayer) { }
        public static void OnRestoreCheckpoint() { }
        public static Core.Music.MusicTrack PlayTrack(SoundDescriptor soundDescriptor, float fadeInDuration, float fadeOutDuration) { return default(Core.Music.MusicTrack); }
        public static void RemoveMusicLayer(Core.Music.Layer musicLayer) { }
        public static void StopTrack(Core.Music.MusicTrack track) { }
        public static void UpdateMusic() { }
        public partial class Layer
        {
            private readonly System.Collections.Generic.List<Core.Music.Layer.Track> m_tracks;
            public Layer(SoundProvider soundProvider, float fadeInDuration, float fadeOutDuration) { }
            public void Enter() { }
            public void Exit() { }
            public void Update() { }
            public partial class Track
            {
                public float FadeInDuration;
                public float FadeOutDuration;
                private Core.Music.MusicTrack m_musicTrack;
                public SoundProvider SoundProvider;
                public Track(SoundProvider soundProvider, float fadeInDuration, float fadeOutDuration) { }
                public void Enter() { }
                public void Exit() { }
                public void Update() { }
            }
        }
        public partial class MusicTrack
        {
            public float FadeInDuration;
            public float FadeOutDuration;
            private System.Action m_soundToNull;
            public int ReferenceCount;
            public SoundDescriptor SoundDescriptor;
            public SoundPlayer SoundPlayer;
            public MusicTrack() { }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private void <Play>m__108() { }
            [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
            private void <PlayDescriptor>m__109() { }
            public void Play() { }
            public void Play(float fadeInDuration, float fadeOutDuration) { }
            public void PlayDescriptor(SoundDescriptor soundDescriptor) { }
            public void Stop() { }
        }
    }
    public static partial class Scenes
    {
        public static ScenesManager Manager;
    }
    public static partial class Schedules
    {
        public static FixedUpdateScheduler FixedUpdate;
    }
    public static partial class Sound
    {
        public static bool AllSoundsDisabled;
        private static bool isPinkBoxesEnabled;
        private static bool isSoundLogEnabled;
        private static UnityEngine.GameObject m_soundLog;
        private static UnityEngine.GameObject s_audioObjectsParent;
        private static UnityEngine.GameObject s_loopingPrefab;
        private static UnityEngine.GameObject s_oneShotPrefab;
        public static bool IsPinkBoxesEnabled { get { return default(bool); } set { } }
        public static bool IsSoundLogEnabled { get { return default(bool); } set { } }
        public static UnityEngine.Vector3 SoundListenerPosition { get { return default(UnityEngine.Vector3); } }
        private static void .cctor() { }
        public static UnityEngine.GameObject GetAudioObjectsParent() { return default(UnityEngine.GameObject); }
        private static SoundPlayer GetPooledPlayer(UnityEngine.AudioClip clip, UnityEngine.Vector3 pos, UnityEngine.Quaternion rotation, System.Action nullify) { return default(SoundPlayer); }
        public static void LoadAudioParent() { }
        public static SoundPlayer Play(SoundDescriptor soundDescriptor, UnityEngine.Vector3 position, System.Action nullify) { return default(SoundPlayer); }
        public static SoundPlayer Play(UnityEngine.AudioClip audioClip, UnityEngine.Vector3 position, System.Action nullify, float volume=1, SoundDescriptor soundDescriptor=null) { return default(SoundPlayer); }
        public static SoundPlayer Play(UnityEngine.AudioClip audioClip, UnityEngine.Vector3 position, float volume, SoundSize soundSize, bool shouldBePanned, float pitch, LowPassFilterSettings lowPassFilterSettings, SoundDescriptor soundDescriptor, System.Action nullify) { return default(SoundPlayer); }
        public static SoundPlayer PlayLooping(SoundDescriptor soundDescriptor, UnityEngine.Vector3 position, System.Action nullify) { return default(SoundPlayer); }
        public static SoundPlayer PlayLooping(SoundDescriptor soundDescriptor, UnityEngine.Vector3 position, float fadeInDuration, System.Action nullify) { return default(SoundPlayer); }
        public static SoundPlayer PlayLooping(UnityEngine.AudioClip audioClip, UnityEngine.Vector3 position, float volume, SoundSize soundSize, bool shouldBePanned, float pitch, LowPassFilterSettings lowPassFilterSettings, SoundDescriptor soundDescriptor, System.Action nullify, float fadeIn=0) { return default(SoundPlayer); }
    }
    public static partial class SoundComposition
    {
        public static SoundCompositionManager Manager;
        public static partial class SoundVolumes
        {
            public static System.Collections.Generic.Dictionary<UnityEngine.AudioClip, float> Volumes;
            private static void .cctor() { }
        }
    }
}
namespace Core.Devices
{
    public partial class XboxControllerManager : UnityEngine.MonoBehaviour
    {
        private UnityEngine.Vector2 m_currentVibrationMagnitude;
        private float m_remainingVibrationDuration;
        private UnityEngine.Vector2 m_setVibration;
        private static Core.Devices.XboxControllerManager s_currentControllerManager;
        public static Core.Devices.XboxControllerManager.SetVibrationDelegate SetVibrationCallback;
        public XboxControllerManager() { }
        public static Core.Devices.XboxControllerManager CurrentController { get { return default(Core.Devices.XboxControllerManager); } }
        private void Awake() { }
        private void FixedUpdate() { }
        private void OnApplicationFocus(bool focusStatus) { }
        private void OnApplicationQuit() { }
        private void OnDestroy() { }
        public static void ResetControllerVibration() { }
        private static void SetCurrentMotorVibration(uint controllerIndex, UnityEngine.Vector2 magnitude) { }
        public void Vibrate(UnityEngine.Vector2 magnitude, float duration) { }
        public delegate void SetVibrationDelegate(uint controllerIndex, UnityEngine.Vector2 magnitude);
    }
}
namespace Frameworks
{
    public static partial class Shader
    {
        private static readonly UnityEngine.Color[] m_colors;
        private static void .cctor() { }
        public static void ConvertColorsToTexture(UnityEngine.Texture2D texture, UnityEngine.Color[] gradient) { }
        public static void ConvertGradientToTexture(UnityEngine.Texture2D texture, UnityEngine.Gradient gradient, int resolution=128) { }
        public static void ConvertLerpedGradientToTexture(UnityEngine.Texture2D texture, UnityEngine.Gradient gradientA, UnityEngine.Gradient gradientB, float time, int resolution=128) { }
        public static UnityEngine.Gradient ConvertTextureToGradient(UnityEngine.Texture2D texture) { return default(UnityEngine.Gradient); }
        public static partial class DefaultTextures
        {
            private static UnityEngine.Texture2D m_transparent;
            public static UnityEngine.Texture Transparent { get { return default(UnityEngine.Texture); } }
        }
        public static partial class Globals
        {
            private static UnityEngine.Texture m_fogGradientTexture;
            public static float FogGradientRange { set { } }
            public static UnityEngine.Texture FogGradientTexture { get { return default(UnityEngine.Texture); } set { } }
        }
    }
}
namespace fsm
{
    public partial class AllConditions : fsm.ICondition
    {
        private readonly System.Collections.Generic.IEnumerable<fsm.ICondition> m_conditions;
        public AllConditions(params fsm.ICondition[] conditions) { }
        public AllConditions(params System.Func<bool>[] conditions) { }
        public bool Validate(IContext context) { return default(bool); }
    }
    public partial class AlwaysCondition : fsm.ICondition
    {
        public AlwaysCondition() { }
        public bool Validate(IContext context) { return default(bool); }
    }
    public partial class AnimationEndedCondition : fsm.ICondition
    {
        private readonly SpriteAnimatorWithTransitions m_spriteAnimator;
        public AnimationEndedCondition(SpriteAnimatorWithTransitions spriteAnimator) { }
        public bool Validate(IContext context) { return default(bool); }
    }
    public partial class AnyConditions : fsm.ICondition
    {
        private readonly System.Collections.Generic.IEnumerable<fsm.ICondition> m_conditions;
        public AnyConditions(params fsm.ICondition[] conditions) { }
        public bool Validate(IContext context) { return default(bool); }
    }
    public partial class CallbackState : fsm.IState
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache6;
        private readonly fsm.IState m_state;
        public System.Action OnEnterEvent;
        public System.Action OnExitEvent;
        public System.Action UpdateStateEvent;
        public CallbackState(fsm.IState state) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnEnterEvent>m__A7() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnExitEvent>m__A8() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <UpdateStateEvent>m__A6() { }
        public fsm.CallbackState AddUpdateStateAction(System.Action updateStateAction) { return default(fsm.CallbackState); }
        public void OnEnter() { }
        public void OnExit() { }
        public void UpdateState() { }
    }
    public partial class CompoundState : fsm.IState
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache5;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache6;
        private readonly fsm.IState[] m_states;
        public System.Action OnEnterEvent;
        public System.Action OnExitEvent;
        public System.Action OnUpdateEvent;
        public CompoundState(params fsm.IState[] states) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnEnterEvent>m__AA() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnExitEvent>m__AB() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnUpdateEvent>m__A9() { }
        public void OnEnter() { }
        public void OnExit() { }
        public void UpdateState() { }
    }
    public partial class FuncCondition : fsm.ICondition
    {
        private readonly System.Func<bool> m_function;
        public FuncCondition(System.Func<bool> function) { }
        public bool Validate(IContext context) { return default(bool); }
    }
    public partial interface ICondition
    {
        bool Validate(IContext context);
    }
    public partial interface IState
    {
        void OnEnter();
        void OnExit();
        void UpdateState();
    }
    public partial interface ITrigger
    {
    }
    public partial class PlayerInRangeCondition : fsm.AlwaysCondition
    {
        public PlayerInRangeCondition() { }
    }
    public partial class State : fsm.IState
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache3;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache4;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Action <>f__am$cache5;
        public System.Action OnEnterEvent;
        public System.Action OnExitEvent;
        public System.Action UpdateStateEvent;
        public State() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnEnterEvent>m__A4() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <OnExitEvent>m__A5() { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static void <UpdateStateEvent>m__A3() { }
        public void OnEnter() { }
        public void OnExit() { }
        public void UpdateState() { }
    }
    public partial class StateConfigurator
    {
        private readonly fsm.IState m_state;
        private readonly fsm.StateMachine m_stateMachine;
        public StateConfigurator(fsm.StateMachine stateMachine, fsm.IState state) { }
        public fsm.StateConfigurator AddTransition<T>(fsm.IState to, fsm.ICondition condition=null, IAction action=null) where T : fsm.ITrigger { return default(fsm.StateConfigurator); }
        public fsm.StateConfigurator AddTransition<T>(fsm.IState to, System.Func<bool> condition, System.Action action=null) where T : fsm.ITrigger { return default(fsm.StateConfigurator); }
    }
    public partial class StateMachine
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private fsm.IState <CurrentState>k__BackingField;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private float <CurrentStateTime>k__BackingField;
        public fsm.ITrigger CurrentTrigger;
        private System.Collections.Generic.List<fsm.IState> m_states;
        private System.Collections.Generic.Dictionary<System.Type, fsm.TransitionManager> m_triggerToTransitionManagers;
        public System.Action OnStateChanged;
        public StateMachine() { }
        public fsm.IState CurrentState { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(fsm.IState); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public float CurrentStateTime { [System.Runtime.CompilerServices.CompilerGeneratedAttribute]get { return default(float); } [System.Runtime.CompilerServices.CompilerGeneratedAttribute]set { } }
        public void ChangeState(fsm.IState state) { }
        public fsm.StateConfigurator Configure(fsm.IState state) { return default(fsm.StateConfigurator); }
        public fsm.TransitionManager FindTransitionManager(System.Type trigger) { return default(fsm.TransitionManager); }
        public fsm.TransitionManager GetTransistionManager<T>() { return default(fsm.TransitionManager); }
        private fsm.IState IndexToState(int index) { return default(fsm.IState); }
        public void RegisterStates(params fsm.IState[] states) { }
        public void Serialize(Archive ar) { }
        private int StateToIndex(fsm.IState state) { return default(int); }
        public void Trigger(fsm.ITrigger trigger) { }
        public void Trigger<T>() where T : fsm.ITrigger { }
        public void UpdateState(float dt) { }
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private sealed partial class <StateToIndex>c__AnonStorey56
        {
            internal fsm.IState state;
            public <StateToIndex>c__AnonStorey56() { }
            internal bool <>m__A2(fsm.IState a) { return default(bool); }
        }
    }
    public partial class Transition
    {
        public IAction Action;
        public fsm.ICondition Condition;
        public fsm.IState SourceState;
        public fsm.IState TargetState;
        public Transition(fsm.IState sourceState, fsm.IState targetState, fsm.ICondition condition, IAction action) { }
    }
    public partial class TransitionManager
    {
        private readonly System.Collections.Generic.Dictionary<fsm.IState, System.Collections.Generic.List<fsm.Transition>> m_transitions;
        public TransitionManager() { }
        public fsm.TransitionManager AddTransition(fsm.IState from, fsm.IState to, fsm.ICondition condition=null, IAction action=null) { return default(fsm.TransitionManager); }
        public fsm.TransitionManager AddTransition(fsm.IState from, fsm.IState to, System.Func<bool> condition=null, System.Action action=null) { return default(fsm.TransitionManager); }
        public bool Process(fsm.StateMachine stateMachine) { return default(bool); }
        public bool ProcessTransitionList(fsm.StateMachine stateMachine, System.Collections.Generic.List<fsm.Transition> conditionAndStatePairList) { return default(bool); }
    }
}
namespace fsm.triggers
{
    public partial class OnAnimationEnded : fsm.ITrigger
    {
        public OnAnimationEnded() { }
    }
    public partial class OnAnimationOrTransitionEnded : fsm.ITrigger
    {
        public OnAnimationOrTransitionEnded() { }
    }
    public partial class OnCollisionEnter : fsm.ITrigger
    {
        public readonly UnityEngine.Collision Collision;
        public OnCollisionEnter(UnityEngine.Collision collision) { }
    }
    public partial class OnCollisionExit : fsm.ITrigger
    {
        public readonly UnityEngine.Collision Collision;
        public OnCollisionExit(UnityEngine.Collision collision) { }
    }
    public partial class OnCollisionStay : fsm.ITrigger
    {
        public readonly UnityEngine.Collision Collision;
        public OnCollisionStay(UnityEngine.Collision collision) { }
    }
    public partial class OnFixedUpdate : fsm.ITrigger
    {
        public OnFixedUpdate() { }
    }
    public partial class OnReceiveDamage : fsm.ITrigger
    {
        public readonly Damage Damage;
        public OnReceiveDamage(Damage damage) { }
    }
    public partial class OnSeinNearEnter : fsm.ITrigger
    {
        public OnSeinNearEnter() { }
    }
    public partial class OnSeinNearExit : fsm.ITrigger
    {
        public OnSeinNearExit() { }
    }
}
namespace Game
{
    public static partial class Attacking
    {
        public static partial class DamageDisplayText
        {
            private static UnityEngine.GameObject m_damageText;
            public static UnityEngine.GameObject DamageText { get { return default(UnityEngine.GameObject); } }
            public static DamageText Create(Damage damage, UnityEngine.Transform target) { return default(DamageText); }
            public static void LoadDamageText() { }
        }
        public static partial class DamageEffect
        {
            public static UnityEngine.GameObject Create(Damage damage, UnityEngine.Transform target, DamageBasedPrefabProvider effectProvider) { return default(UnityEngine.GameObject); }
            public static UnityEngine.GameObject CreateRotated(Damage damage, UnityEngine.Transform target, DamageBasedPrefabProvider effectProvider) { return default(UnityEngine.GameObject); }
        }
        public static partial class DamageSound
        {
            public static SoundPlayer Play(Damage damage, UnityEngine.Transform target, DamageBasedSoundProvider soundProvider) { return default(SoundPlayer); }
        }
    }
    public partial class Characters
    {
        public static BabySein BabySein;
        public static ICharacter Current;
        public static Naru Naru;
        public static Ori Ori;
        public static SeinCharacter Sein;
        public Characters() { }
    }
    public static partial class Checkpoint
    {
        public static SaveGameData SaveGameData;
        private static void .cctor() { }
        public static partial class Events
        {
            public static UberDelegate OnPostCreate;
            public static UberDelegate OnPostRestore;
            public static UberDelegate OnScrollLockPassed;
            private static void .cctor() { }
        }
    }
    public partial class Events
    {
        public Events() { }
        public static GameScheduler Scheduler { get { return default(GameScheduler); } }
    }
    public static partial class Items
    {
        public static AllContainer<ICarryable> Carryables;
        public static LightTorch LightTorch;
        public static MistTorch MistTorch;
        public static NightBerry NightBerry;
        private static void .cctor() { }
    }
    public static partial class Levelling
    {
        public static int CalculateLevelBasedDamageAmount(int level, int damage) { return default(int); }
        public static float CalculateLevelBasedMaxHealth(int level, float health) { return default(float); }
    }
    public static partial class Objectives
    {
        public static AllContainer<Objective> All { get { return default(AllContainer<Objective>); } }
        public static void AddObjective(Objective objective) { }
        public static void CompleteObjective(Objective objective) { }
        public static bool ObjectiveExists(Objective objective) { return default(bool); }
        public static void Serialize(Archive ar) { }
    }
    public static partial class Optimization
    {
        public static CameraFrustumOptimizer CameraFrustumOptimizer;
    }
    public static partial class Orbs
    {
        public static partial class OrbDisplayText
        {
            private static UnityEngine.GameObject m_orbText;
            public static UnityEngine.GameObject OrbText { get { return default(UnityEngine.GameObject); } }
            public static ExpText Create(UnityEngine.Transform target, UnityEngine.Vector3 offset, int value) { return default(ExpText); }
            public static void LoadOrbText() { }
        }
    }
    public static partial class ScrollLocks
    {
        public static AllContainer<CameraScrollLock> All;
        private static void .cctor() { }
        public static void Register(CameraScrollLock cameraScrollLock) { }
        public static void Unregister(CameraScrollLock cameraScrollLock) { }
    }
    public static partial class Targets
    {
        public static System.Collections.Generic.List<IAttackable> Attackables;
        private static void .cctor() { }
    }
    public static partial class UI
    {
        public static FaderB Fader;
        private static MessageControllerB m_messageController;
        private static MenuScreenManager m_sMenu;
        public static SeinUI SeinUI;
        public static Vignette Vignette;
        public static bool MainMenuExists { get { return default(bool); } }
        public static bool MainMenuVisible { get { return default(bool); } }
        public static MenuScreenManager Menu { get { return default(MenuScreenManager); } set { } }
        public static MessageControllerB MessageController { get { return default(MessageControllerB); } }
        private static void .cctor() { }
        public static bool IsInventoryVisible() { return default(bool); }
        public static void LoadMessageController() { }
        public static partial class Cameras
        {
            public static GameplayCamera Current;
            public static CameraManager Manager;
            public static CameraSystem System;
            private static void .cctor() { }
        }
        public static partial class Hints
        {
            private static MessageBox m_currentHint;
            private static HintLayer m_currentLayer;
            private static bool m_showHints;
            public static UnityEngine.Vector3 HintPosition { get { return default(UnityEngine.Vector3); } }
            public static bool IsShowingHint { get { return default(bool); } }
            public static void HideExistingHint() { }
            private static bool LayerShouldShow(HintLayer layer) { return default(bool); }
            public static MessageBox Show(MessageProvider messageProvider, HintLayer layer, float duration=3) { return default(MessageBox); }
        }
    }
    public partial class World
    {
        public World() { }
        public static RuntimeGameWorldArea CurrentArea { get { return default(RuntimeGameWorldArea); } set { } }
        public static partial class Events
        {
            public static WorldEventsRuntime Find(WorldEvents worldEvents) { return default(WorldEventsRuntime); }
        }
    }
    internal static partial class Zones
    {
        public static System.Collections.Generic.List<ShorterHintZone> ShorterHintZones;
        public static System.Collections.Generic.List<WaterZone> WaterZones;
        private static void .cctor() { }
    }
}
namespace Moon
{
}
namespace Moon.EditorTools
{
}
namespace Moon.EditorTools.SmartSelection
{
    public partial class ArtGroupComponent : UnityEngine.MonoBehaviour, IStrippable
    {
        public int ArtGroupId;
        public ArtGroupComponent() { }
        public bool DoStrip() { return default(bool); }
    }
}
namespace Sein
{
}
namespace Sein.World
{
    public static partial class Events
    {
        public static bool DarknessLifted;
        public static bool GinsoTreeEntered;
        public static bool GumoFree;
        private static bool m_gravityActivated;
        public static bool MistLifted;
        public static bool SpiritTreeReached;
        public static bool WarmthReturned;
        public static bool WaterPurified;
        public static bool WindRestored;
        public static bool GravityActivated { get { return default(bool); } set { } }
        public static WorldProgression Progression { get { return default(WorldProgression); } }
    }
    public static partial class Keys
    {
        public static bool ForlornRuins;
        public static bool GinsoTree;
        public static bool MountHoru;
    }
}
namespace SmartInput
{
    public partial class AxisButtonInput : SmartInput.IButtonInput
    {
        private readonly SmartInput.IAxisInput m_axis;
        private SmartInput.AxisButtonInput.AxisMode m_axisMode;
        private float m_comparisonValue;
        public AxisButtonInput(SmartInput.IAxisInput axis, SmartInput.AxisButtonInput.AxisMode axisMode, float value=0) { }
        public SmartInput.IAxisInput GetAxisInput() { return default(SmartInput.IAxisInput); }
        public SmartInput.AxisButtonInput.AxisMode GetAxisMode() { return default(SmartInput.AxisButtonInput.AxisMode); }
        public bool GetButton() { return default(bool); }
        public enum AxisMode
        {
            GreaterThan = 1,
            LessThan = 0,
        }
    }
    public partial class ButtonAxisInput : SmartInput.IAxisInput
    {
        private readonly SmartInput.IButtonInput m_button;
        private readonly SmartInput.ButtonAxisInput.Mode m_mode;
        public ButtonAxisInput(SmartInput.IButtonInput buttonInput, SmartInput.ButtonAxisInput.Mode mode) { }
        public bool Positive { get { return default(bool); } }
        public float AxisValue() { return default(float); }
        public SmartInput.IButtonInput GetButtonInput() { return default(SmartInput.IButtonInput); }
        public enum Mode
        {
            Negative = 1,
            Positive = 0,
        }
    }
    public partial class CompoundAxisInput : SmartInput.IAxisInput
    {
        public SmartInput.IAxisInput[] Axis;
        private int m_lastPressedIndex;
        public CompoundAxisInput() { }
        public CompoundAxisInput(params SmartInput.IAxisInput[] inputs) { }
        public void Add(SmartInput.IAxisInput axis) { }
        public float AxisValue() { return default(float); }
        public void Clear() { }
        public SmartInput.IAxisInput GetLastPressed() { return default(SmartInput.IAxisInput); }
    }
    public partial class CompoundButtonInput : SmartInput.IButtonInput
    {
        public SmartInput.IButtonInput[] Buttons;
        private int m_lastPressedIndex;
        public CompoundButtonInput() { }
        public CompoundButtonInput(params SmartInput.IButtonInput[] inputs) { }
        public void Add(SmartInput.IButtonInput button) { }
        public void Clear() { }
        public bool GetButton() { return default(bool); }
        public SmartInput.IButtonInput GetLastPressed() { return default(SmartInput.IButtonInput); }
    }
    public partial class ControllerAxisInput : SmartInput.IAxisInput
    {
        private SmartInput.XboxControllerInput.Axis m_axis;
        public ControllerAxisInput(SmartInput.XboxControllerInput.Axis axis) { }
        public SmartInput.XboxControllerInput.Axis Axis { get { return default(SmartInput.XboxControllerInput.Axis); } }
        public float AxisValue() { return default(float); }
    }
    public partial class ControllerButtonInput : SmartInput.IButtonInput
    {
        public SmartInput.XboxControllerInput.Button Button;
        public ControllerButtonInput(SmartInput.XboxControllerInput.Button button) { }
        public bool GetButton() { return default(bool); }
    }
    public partial interface IAxisInput
    {
        float AxisValue();
    }
    public partial interface IButtonInput
    {
        bool GetButton();
    }
    public partial class KeyCodeButtonInput : SmartInput.IButtonInput
    {
        private readonly UnityEngine.KeyCode m_keyCode;
        public KeyCodeButtonInput(UnityEngine.KeyCode keyCode) { }
        public UnityEngine.KeyCode KeyCode { get { return default(UnityEngine.KeyCode); } }
        public bool GetButton() { return default(bool); }
    }
    public static partial class XboxControllerInput
    {
        private const string m_joystick0Axis1 = "Joystick0Axis1";
        private const string m_joystick0Axis10 = "Joystick0Axis10";
        private const string m_joystick0Axis2 = "Joystick0Axis2";
        private const string m_joystick0Axis3 = "Joystick0Axis3";
        private const string m_joystick0Axis4 = "Joystick0Axis4";
        private const string m_joystick0Axis5 = "Joystick0Axis5";
        private const string m_joystick0Axis6 = "Joystick0Axis6";
        private const string m_joystick0Axis7 = "Joystick0Axis7";
        private const string m_joystick0Axis8 = "Joystick0Axis8";
        private const string m_joystick0Axis9 = "Joystick0Axis9";
        private const string m_joystick1Axis1 = "Joystick1Axis1";
        private const string m_joystick1Axis10 = "Joystick1Axis10";
        private const string m_joystick1Axis2 = "Joystick1Axis2";
        private const string m_joystick1Axis3 = "Joystick1Axis3";
        private const string m_joystick1Axis4 = "Joystick1Axis4";
        private const string m_joystick1Axis5 = "Joystick1Axis5";
        private const string m_joystick1Axis6 = "Joystick1Axis6";
        private const string m_joystick1Axis7 = "Joystick1Axis7";
        private const string m_joystick1Axis8 = "Joystick1Axis8";
        private const string m_joystick1Axis9 = "Joystick1Axis9";
        private const string m_joystick1Button0 = "Joystick1Button0";
        private const string m_joystick1Button1 = "Joystick1Button1";
        private const string m_joystick1Button10 = "Joystick1Button10";
        private const string m_joystick1Button11 = "Joystick1Button11";
        private const string m_joystick1Button2 = "Joystick1Button2";
        private const string m_joystick1Button3 = "Joystick1Button3";
        private const string m_joystick1Button4 = "Joystick1Button4";
        private const string m_joystick1Button5 = "Joystick1Button5";
        private const string m_joystick1Button6 = "Joystick1Button6";
        private const string m_joystick1Button7 = "Joystick1Button7";
        private const string m_joystick1Button8 = "Joystick1Button8";
        private const string m_joystick1Button9 = "Joystick1Button9";
        private const string m_joystick2Axis1 = "Joystick2Axis1";
        private const string m_joystick2Axis10 = "Joystick2Axis10";
        private const string m_joystick2Axis2 = "Joystick2Axis2";
        private const string m_joystick2Axis3 = "Joystick2Axis3";
        private const string m_joystick2Axis4 = "Joystick2Axis4";
        private const string m_joystick2Axis5 = "Joystick2Axis5";
        private const string m_joystick2Axis6 = "Joystick2Axis6";
        private const string m_joystick2Axis7 = "Joystick2Axis7";
        private const string m_joystick2Axis8 = "Joystick2Axis8";
        private const string m_joystick2Axis9 = "Joystick2Axis9";
        private const string m_joystick2Button0 = "Joystick2Button0";
        private const string m_joystick2Button1 = "Joystick2Button1";
        private const string m_joystick2Button10 = "Joystick2Button10";
        private const string m_joystick2Button11 = "Joystick2Button11";
        private const string m_joystick2Button2 = "Joystick2Button2";
        private const string m_joystick2Button3 = "Joystick2Button3";
        private const string m_joystick2Button4 = "Joystick2Button4";
        private const string m_joystick2Button5 = "Joystick2Button5";
        private const string m_joystick2Button6 = "Joystick2Button6";
        private const string m_joystick2Button7 = "Joystick2Button7";
        private const string m_joystick2Button8 = "Joystick2Button8";
        private const string m_joystick2Button9 = "Joystick2Button9";
        private const string m_joystick3Axis1 = "Joystick3Axis1";
        private const string m_joystick3Axis10 = "Joystick3Axis10";
        private const string m_joystick3Axis2 = "Joystick3Axis2";
        private const string m_joystick3Axis3 = "Joystick3Axis3";
        private const string m_joystick3Axis4 = "Joystick3Axis4";
        private const string m_joystick3Axis5 = "Joystick3Axis5";
        private const string m_joystick3Axis6 = "Joystick3Axis6";
        private const string m_joystick3Axis7 = "Joystick3Axis7";
        private const string m_joystick3Axis8 = "Joystick3Axis8";
        private const string m_joystick3Axis9 = "Joystick3Axis9";
        private const string m_joystick3Button0 = "Joystick3Button0";
        private const string m_joystick3Button1 = "Joystick3Button1";
        private const string m_joystick3Button10 = "Joystick3Button10";
        private const string m_joystick3Button11 = "Joystick3Button11";
        private const string m_joystick3Button2 = "Joystick3Button2";
        private const string m_joystick3Button3 = "Joystick3Button3";
        private const string m_joystick3Button4 = "Joystick3Button4";
        private const string m_joystick3Button5 = "Joystick3Button5";
        private const string m_joystick3Button6 = "Joystick3Button6";
        private const string m_joystick3Button7 = "Joystick3Button7";
        private const string m_joystick3Button8 = "Joystick3Button8";
        private const string m_joystick3Button9 = "Joystick3Button9";
        private const string m_joystick4Axis1 = "Joystick4Axis1";
        private const string m_joystick4Axis10 = "Joystick4Axis10";
        private const string m_joystick4Axis2 = "Joystick4Axis2";
        private const string m_joystick4Axis3 = "Joystick4Axis3";
        private const string m_joystick4Axis4 = "Joystick4Axis4";
        private const string m_joystick4Axis5 = "Joystick4Axis5";
        private const string m_joystick4Axis6 = "Joystick4Axis6";
        private const string m_joystick4Axis7 = "Joystick4Axis7";
        private const string m_joystick4Axis8 = "Joystick4Axis8";
        private const string m_joystick4Axis9 = "Joystick4Axis9";
        private const string m_joystick4Button0 = "Joystick4Button0";
        private const string m_joystick4Button1 = "Joystick4Button1";
        private const string m_joystick4Button10 = "Joystick4Button10";
        private const string m_joystick4Button11 = "Joystick4Button11";
        private const string m_joystick4Button2 = "Joystick4Button2";
        private const string m_joystick4Button3 = "Joystick4Button3";
        private const string m_joystick4Button4 = "Joystick4Button4";
        private const string m_joystick4Button5 = "Joystick4Button5";
        private const string m_joystick4Button6 = "Joystick4Button6";
        private const string m_joystick4Button7 = "Joystick4Button7";
        private const string m_joystick4Button8 = "Joystick4Button8";
        private const string m_joystick4Button9 = "Joystick4Button9";
        private static readonly string[] m_joystickAxis10Map;
        private static readonly string[] m_joystickAxis1Map;
        private static readonly string[] m_joystickAxis2Map;
        private static readonly string[] m_joystickAxis3Map;
        private static readonly string[] m_joystickAxis4Map;
        private static readonly string[] m_joystickAxis5Map;
        private static readonly string[] m_joystickAxis6Map;
        private static readonly string[] m_joystickAxis7Map;
        private static readonly string[] m_joystickAxis8Map;
        private static readonly string[] m_joystickAxis9Map;
        private static readonly string[] m_joystickButton0Map;
        private static readonly string[] m_joystickButton10Map;
        private static readonly string[] m_joystickButton11Map;
        private static readonly string[] m_joystickButton1Map;
        private static readonly string[] m_joystickButton2Map;
        private static readonly string[] m_joystickButton3Map;
        private static readonly string[] m_joystickButton4Map;
        private static readonly string[] m_joystickButton5Map;
        private static readonly string[] m_joystickButton6Map;
        private static readonly string[] m_joystickButton7Map;
        private static readonly string[] m_joystickButton8Map;
        private static readonly string[] m_joystickButton9Map;
        private static void .cctor() { }
        public static int AxisIndexToButtonUserIndex(int userIndex) { return default(int); }
        public static float GetAxis(SmartInput.XboxControllerInput.Axis axis) { return default(float); }
        public static int GetAxisUserIndex() { return default(int); }
        public static bool GetButton(SmartInput.XboxControllerInput.Button button, int userIndex=-1) { return default(bool); }
        public static string GetJoystickXAxisYString(int x, int y) { return default(string); }
        private static float ToAxisFloat(int axis) { return default(float); }
        public static int UserIndexToAxisUserIndex(int userIndex) { return default(int); }
        public enum Axis
        {
            DpadX = 4,
            DpadY = 5,
            LeftStickX = 0,
            LeftStickY = 1,
            RightStickX = 2,
            RightStickY = 3,
        }
        public enum Button
        {
            Button10 = 12,
            Button11 = 13,
            ButtonA = 0,
            ButtonB = 3,
            ButtonX = 1,
            ButtonY = 2,
            LeftShoulder = 6,
            LeftStick = 8,
            LeftTrigger = 4,
            RightShoulder = 7,
            RightStick = 9,
            RightTrigger = 5,
            Select = 10,
            Start = 11,
        }
    }
}
namespace UberShader
{
}
namespace UberShader.SpriteSharp
{
    public static partial class MathUtilities
    {
        public static bool AreLineSegmentsIntersecting(UnityEngine.Vector2 line1Start, UnityEngine.Vector2 line1End, UnityEngine.Vector2 line2Start, UnityEngine.Vector2 line2End) { return default(bool); }
        public static bool AreRectsIntersecting(UnityEngine.Rect a, UnityEngine.Rect b) { return default(bool); }
        public static float CalculateMeshArea(ushort[] triangles, UnityEngine.Vector2[] vertices) { return default(float); }
        public static float CalculateMeshAreaAndBoundingBox(ushort[] triangles, UnityEngine.Vector2[] vertices, out UnityEngine.Vector2 min, out UnityEngine.Vector2 max) { min = default(UnityEngine.Vector2); max = default(UnityEngine.Vector2); return default(float); }
        public static float CalculatePolygonArea(UnityEngine.Vector2[] polygon) { return default(float); }
        public static float CalculateTriangleArea(UnityEngine.Vector2 point1, UnityEngine.Vector2 point2, UnityEngine.Vector2 point3) { return default(float); }
        public static bool IsPointInsidePolygon(UnityEngine.Vector2 point, UnityEngine.Vector2[] polygon) { return default(bool); }
        public static bool IsPolygonInsidePolygon(UnityEngine.Vector2[] innerPolygon, UnityEngine.Rect innerPolygonRect, UnityEngine.Vector2[] outerPolygon, UnityEngine.Rect outerPolygonRect) { return default(bool); }
        public static bool IsPolygonInsidePolygon(UnityEngine.Vector2[] innerPolygon, UnityEngine.Vector2[] outerPolygon) { return default(bool); }
    }
}
namespace UWPCompat
{
    public static partial class Attribute
    {
        public static bool IsDefined(System.Reflection.FieldInfo field, System.Type type) { return default(bool); }
    }
    [System.FlagsAttribute]
    public enum BindingFlags
    {
        CreateInstance = 256,
        DeclaredOnly = 2,
        Default = 0,
        ExactBinding = 32768,
        FlattenHierarchy = 64,
        GetField = 512,
        GetProperty = 2048,
        IgnoreCase = 1,
        IgnoreReturn = 262144,
        Instance = 4,
        InvokeMethod = 128,
        NonPublic = 32,
        OptionalParamBinding = 131072,
        Public = 16,
        PutDispProperty = 8192,
        PutRefDispProperty = 16384,
        SetField = 1024,
        SetProperty = 4096,
        Static = 8,
        SuppressChangeType = 65536,
    }
    public static partial class Console
    {
        public static void WriteLine(string output) { }
    }
    public static partial class Delegate
    {
        public static System.Delegate CreateDelegate(System.Type type, System.Reflection.MethodInfo method) { return default(System.Delegate); }
    }
    public static partial class Environment
    {
        public static string MachineName { get { return default(string); } }
        public static string[] GetCommandLineArgs() { return default(string[]); }
    }
    public static partial class ReflectionHelpers
    {
        public static void BindValueConvert(ref int outFlags, UWPCompat.BindingFlags flags, UWPCompat.BindingFlags from, System.Reflection.BindingFlags to) { }
        public static System.Reflection.BindingFlags ConvertBindingFlags(UWPCompat.BindingFlags flags) { return default(System.Reflection.BindingFlags); }
    }
    public static partial class Thread
    {
        public static void Sleep(int time) { }
    }
}
namespace UWPCompat.Extensions
{
    public static partial class TypeExtensions
    {
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Func<object, System.Type> <>f__am$cache0;
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute]
        private static System.Type <GetMethod>m__147(object p) { return default(System.Type); }
        public static System.Type BaseType(this System.Type type) { return default(System.Type); }
        public static System.Reflection.FieldInfo GetField(this System.Type type, string name) { return default(System.Reflection.FieldInfo); }
        public static System.Reflection.FieldInfo[] GetFields(this System.Type type) { return default(System.Reflection.FieldInfo[]); }
        public static System.Reflection.FieldInfo[] GetFields(this System.Type type, UWPCompat.BindingFlags flags) { return default(System.Reflection.FieldInfo[]); }
        public static System.Type[] GetInterfaces(this System.Type type) { return default(System.Type[]); }
        public static System.Reflection.MethodInfo GetMethod(this System.Type type, string name) { return default(System.Reflection.MethodInfo); }
        public static System.Reflection.MethodInfo GetMethod(this System.Type type, string name, object[] parameters) { return default(System.Reflection.MethodInfo); }
        public static System.Reflection.MethodInfo GetMethod(this System.Type type, string name, System.Type[] types) { return default(System.Reflection.MethodInfo); }
        public static System.Reflection.MethodInfo GetMethod(this System.Type type, string name, UWPCompat.BindingFlags flags) { return default(System.Reflection.MethodInfo); }
        public static System.Reflection.MethodInfo GetMethod(this System.Type type, string name, UWPCompat.BindingFlags flags, System.Type[] types) { return default(System.Reflection.MethodInfo); }
        public static System.Reflection.PropertyInfo[] GetProperties(this System.Type type) { return default(System.Reflection.PropertyInfo[]); }
        public static System.Reflection.PropertyInfo GetProperty(this System.Type type, string name) { return default(System.Reflection.PropertyInfo); }
        public static object InvokeMember(this System.Type type, string name, UWPCompat.BindingFlags flags, object target, object[] args) { return default(object); }
        public static bool IsAssignableFrom(this System.Type type, System.Type other) { return default(bool); }
        public static bool IsDefined(this System.Type type, System.Type attributeType) { return default(bool); }
        public static bool IsDefined(this System.Type type, System.Type attributeType, bool inherit) { return default(bool); }
        public static bool IsValueType(this System.Type type) { return default(bool); }
    }
}
